paid_only,frequency,progress,stat.question_id,stat.question__article__slug,title,slug,is_hidden,total_accepted,total_submissions,id,stat.is_new_question,difficulty.level,ProblemDescription,num_solutions,num_likes,Python_Declaration,Python_Solutions
False,0,0,1,two-sum,Two Sum,two-sum,False,9231586,18601982,1,False,1,"Can you solve this real interview question? Two Sum - Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:


Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].


Example 2:


Input: nums = [3,2,4], target = 6
Output: [1,2]


Example 3:


Input: nums = [3,3], target = 6
Output: [0,1]


 

Constraints:

 * 2 <= nums.length <= 104
 * -109 <= nums[i] <= 109
 * -109 <= target <= 109
 * Only one valid answer exists.

 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",Solutions (17.7K),44.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/two-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().twoSum(nums, target)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        seen = {}
        for i, num in enumerate(nums):
            if target - num in seen:
                return [seen[target - num], i]
            seen[num] = i"
False,0,0,3,longest-substring-without-repeating-characters,Longest Substring Without Repeating Characters,longest-substring-without-repeating-characters,False,4352624,12867877,3,False,2,"Can you solve this real interview question? Longest Substring Without Repeating Characters - Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:


Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"", with the length of 3.


Example 2:


Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"", with the length of 1.


Example 3:


Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"", with the length of 3.
Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.


 

Constraints:

 * 0 <= s.length <= 5 * 104
 * s consists of English letters, digits, symbols and spaces.",Solutions (14.4K),33K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-substring-without-repeating-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().lengthOfLongestSubstring(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        left = 0
        max_length = 0
        char_index = {}
        
        for right in range(len(s)):
            if s[right] in char_index:
                left = max(left, char_index[s[right]] + 1)
            
            char_index[s[right]] = right
            max_length = max(max_length, right - left + 1)
        
        return max_length"
False,0,0,4,,Median of Two Sorted Arrays,median-of-two-sorted-arrays,False,1836611,5086097,4,False,3,"Can you solve this real interview question? Median of Two Sorted Arrays - Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:


Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.


Example 2:


Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


 

Constraints:

 * nums1.length == m
 * nums2.length == n
 * 0 <= m <= 1000
 * 0 <= n <= 1000
 * 1 <= m + n <= 2000
 * -106 <= nums1[i], nums2[i] <= 106",Solutions (10.5K),22.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/median-of-two-sorted-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMedianSortedArrays(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        pass"
False,0,0,5,longest-palindromic-substring,Longest Palindromic Substring,longest-palindromic-substring,False,2338796,7218275,5,False,2,"Can you solve this real interview question? Longest Palindromic Substring - Given a string s, return the longest palindromic substring in s.

 

Example 1:


Input: s = ""babad""
Output: ""bab""
Explanation: ""aba"" is also a valid answer.


Example 2:


Input: s = ""cbbd""
Output: ""bb""


 

Constraints:

 * 1 <= s.length <= 1000
 * s consist of only digits and English letters.",Solutions (7.6K),24.5K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-palindromic-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPalindrome(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestPalindrome(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestPalindrome(self, s: str) -> str:
        def expandAroundCenter(left, right):
            while left >= 0 and right < len(s) and s[left] == s[right]:
                left -= 1
                right += 1
            return s[left+1:right]
        
        res = """"
        for i in range(len(s)):
            palindrome1 = expandAroundCenter(i, i)
            palindrome2 = expandAroundCenter(i, i+1)
            palindrome = palindrome1 if len(palindrome1) > len(palindrome2) else palindrome2
            if len(palindrome) > len(res):
                res = palindrome
        return res"
False,0,0,6,zigzag-conversion,Zigzag Conversion,zigzag-conversion,False,998873,2228706,6,False,2,"Can you solve this real interview question? Zigzag Conversion - The string ""PAYPALISHIRING"" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)


P   A   H   N
A P L S I I G
Y   I   R


And then read line by line: ""PAHNAPLSIIGYIR""

Write the code that will take a string and make this conversion given a number of rows:


string convert(string s, int numRows);


 

Example 1:


Input: s = ""PAYPALISHIRING"", numRows = 3
Output: ""PAHNAPLSIIGYIR""


Example 2:


Input: s = ""PAYPALISHIRING"", numRows = 4
Output: ""PINALSIGYAHRPI""
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I


Example 3:


Input: s = ""A"", numRows = 1
Output: ""A""


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of English letters (lower-case and upper-case), ',' and '.'.
 * 1 <= numRows <= 1000",Solutions (5.7K),5.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/zigzag-conversion/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def convert(self, s: str, numRows: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    numRows: int = deserialize(""int"", read_line())
    ans = Solution().convert(s, numRows)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def convert(self, s: str, numRows: int) -> str:
        if numRows == 1 or numRows >= len(s):
            return s
        
        rows = [''] * numRows
        index, step = 0, 1
        
        for char in s:
            rows[index] += char
            
            if index == 0:
                step = 1
            elif index == numRows - 1:
                step = -1
            
            index += step
        
        return ''.join(rows)"
False,0,0,7,reverse-integer,Reverse Integer,reverse-integer,False,2512940,9163189,7,False,2,"Can you solve this real interview question? Reverse Integer - Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:


Input: x = 123
Output: 321


Example 2:


Input: x = -123
Output: -321


Example 3:


Input: x = 120
Output: 21


 

Constraints:

 * -231 <= x <= 231 - 1",Solutions (10.5K),10.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverse(self, x: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    ans = Solution().reverse(x)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            result = -int(str(x)[:0:-1])
        else:
            result = int(str(x)[::-1])
        return result if -2**31 <= result <= 2**31 - 1 else 0"
False,0,0,8,string-to-integer,String to Integer (atoi),string-to-integer-atoi,False,1217426,7330773,8,False,2,"Can you solve this real interview question? String to Integer (atoi) - Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).

The algorithm for myAtoi(string s) is as follows:

 1. Read in and ignore any leading whitespace.
 2. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
 3. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
 4. Convert these digits into an integer (i.e. ""123"" -> 123, ""0032"" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
 5. If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
 6. Return the integer as the final result.

Note:

 * Only the space character ' ' is considered a whitespace character.
 * Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.

 

Example 1:


Input: s = ""42""
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.
Step 1: ""42"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""42"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""42"" (""42"" is read in)
           ^
The parsed integer is 42.
Since 42 is in the range [-231, 231 - 1], the final result is 42.


Example 2:


Input: s = ""   -42""
Output: -42
Explanation:
Step 1: ""   -42"" (leading whitespace is read and ignored)
            ^
Step 2: ""   -42"" ('-' is read, so the result should be negative)
             ^
Step 3: ""   -42"" (""42"" is read in)
               ^
The parsed integer is -42.
Since -42 is in the range [-231, 231 - 1], the final result is -42.


Example 3:


Input: s = ""4193 with words""
Output: 4193
Explanation:
Step 1: ""4193 with words"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""4193 with words"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit)
             ^
The parsed integer is 4193.
Since 4193 is in the range [-231, 231 - 1], the final result is 4193.


 

Constraints:

 * 0 <= s.length <= 200
 * s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.",Solutions (5.9K),3.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/string-to-integer-atoi/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def myAtoi(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().myAtoi(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def myAtoi(self, s: str) -> int:
        MAX_INT = 2**31 - 1
        MIN_INT = -2**31
        
        s = s.strip()
        if not s:
            return 0
        
        sign = 1
        if s[0] == '-':
            sign = -1
            s = s[1:]
        elif s[0] == '+':
            s = s[1:]
        
        result = 0
        for char in s:
            if not char.isdigit():
                break
            result = result * 10 + int(char)
        
        result = sign * result
        if result > MAX_INT:
            return MAX_INT
        elif result < MIN_INT:
            return MIN_INT
        else:
            return result"
False,0,0,9,palindrome-number,Palindrome Number,palindrome-number,False,3022247,5650445,9,False,1,"Can you solve this real interview question? Palindrome Number - Given an integer x, return true if x is a palindrome, and false otherwise.

 

Example 1:


Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.


Example 2:


Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.


Example 3:


Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


 

Constraints:

 * -231 <= x <= 231 - 1

 

Follow up: Could you solve it without converting the integer to a string?",Solutions (10.9K),9.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPalindrome(self, x: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    ans = Solution().isPalindrome(x)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPalindrome(self, x: int) -> bool:
        if x < 0:
            return False
        temp = x
        reverse = 0
        while temp != 0:
            reverse = reverse * 10 + temp % 10
            temp = temp // 10        
        return x == reverse"
False,0,0,10,regular-expression-matching,Regular Expression Matching,regular-expression-matching,False,796915,2843606,10,False,3,"Can you solve this real interview question? Regular Expression Matching - Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:

 * '.' Matches any single character.
 * '*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

 

Example 1:


Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:


Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".


Example 3:


Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".


 

Constraints:

 * 1 <= s.length <= 20
 * 1 <= p.length <= 20
 * s contains only lowercase English letters.
 * p contains only lowercase English letters, '.', and '*'.
 * It is guaranteed for each appearance of the character '*', there will be a previous valid character to match.",Solutions (2.8K),10.3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/regular-expression-matching/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    p: str = deserialize(""str"", read_line())
    ans = Solution().isMatch(s, p)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True
        for j in range(1, len(p) + 1):
            if p[j-1] == '*':
                dp[0][j] = dp[0][j-2]
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j-1] in {s[i-1], '.'}:
                    dp[i][j] = dp[i-1][j-1]
                elif p[j-1] == '*':
                    dp[i][j] = dp[i][j-2] or (dp[i-1][j] and p[j-2] in {s[i-1], '.'})
        return dp[len(s)][len(p)]"
False,0,0,11,container-with-most-water,Container With Most Water,container-with-most-water,False,2018405,3736805,11,False,2,"Can you solve this real interview question? Container With Most Water - You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg]


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


Example 2:


Input: height = [1,1]
Output: 1


 

Constraints:

 * n == height.length
 * 2 <= n <= 105
 * 0 <= height[i] <= 104",Solutions (7.3K),23.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/container-with-most-water/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxArea(self, height: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    height: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxArea(height)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0
        right = len(height) - 1
        max_water = 0

        while left < right:
            width = right - left
            h = min(height[left], height[right])
            area = width * h
            max_water = max(max_water, area)

            if height[left] < height[right]:
                left += 1
            else:
                right -= 1

        return max_water"
False,0,0,12,integer-to-roman,Integer to Roman,integer-to-roman,False,958789,1547479,12,False,2,"Can you solve this real interview question? Integer to Roman - Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.


Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

 * I can be placed before V (5) and X (10) to make 4 and 9. 
 * X can be placed before L (50) and C (100) to make 40 and 90. 
 * C can be placed before D (500) and M (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral.

 

Example 1:


Input: num = 3
Output: ""III""
Explanation: 3 is represented as 3 ones.


Example 2:


Input: num = 58
Output: ""LVIII""
Explanation: L = 50, V = 5, III = 3.


Example 3:


Input: num = 1994
Output: ""MCMXCIV""
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


 

Constraints:

 * 1 <= num <= 3999",Solutions (5.7K),5.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/integer-to-roman/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intToRoman(self, num: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().intToRoman(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def intToRoman(self, num: int) -> str:
        val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
        syms = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // val[i]):
                roman_num += syms[i]
                num -= val[i]
            i += 1
        return roman_num"
False,0,0,13,roman-to-integer,Roman to Integer,roman-to-integer,False,2511463,4294709,13,False,1,"Can you solve this real interview question? Roman to Integer - Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.


Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

 * I can be placed before V (5) and X (10) to make 4 and 9. 
 * X can be placed before L (50) and C (100) to make 40 and 90. 
 * C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.

 

Example 1:


Input: s = ""III""
Output: 3
Explanation: III = 3.


Example 2:


Input: s = ""LVIII""
Output: 58
Explanation: L = 50, V= 5, III = 3.


Example 3:


Input: s = ""MCMXCIV""
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


 

Constraints:

 * 1 <= s.length <= 15
 * s contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').
 * It is guaranteed that s is a valid roman numeral in the range [1, 3999].",Solutions (14K),9.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/roman-to-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def romanToInt(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().romanToInt(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def romanToInt(self, s: str) -> int:
        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        result = 0
        prev_value = 0
        
        for char in s:
            value = roman_dict[char]
            result += value
            if value > prev_value:
                result -= 2 * prev_value
            prev_value = value
        
        return result"
False,0,0,14,longest-common-prefix,Longest Common Prefix,longest-common-prefix,False,2260693,5534855,14,False,1,"Can you solve this real interview question? Longest Common Prefix - Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string """".

 

Example 1:


Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""


Example 2:


Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.


 

Constraints:

 * 1 <= strs.length <= 200
 * 0 <= strs[i].length <= 200
 * strs[i] consists of only lowercase English letters.",Solutions (11K),13.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-common-prefix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().longestCommonPrefix(strs)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        if not strs:
            return """"
        s1 = min(strs)
        s2 = max(strs)
        for i, c in enumerate(s1):
            if c != s2[i]:
                return s1[:i]
        return s1"
False,0,0,15,3sum,3Sum,3sum,False,2565144,7878556,15,False,2,"Can you solve this real interview question? 3Sum - Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:


Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.


Example 2:


Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.


Example 3:


Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.


 

Constraints:

 * 3 <= nums.length <= 3000
 * -105 <= nums[i] <= 105",Solutions (6.7K),24.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/3sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().threeSum(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()
        for i in range(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            left, right = i+1, len(nums)-1
            while left < right:
                total = nums[i] + nums[left] + nums[right]
                if total < 0:
                    left += 1
                elif total > 0:
                    right -= 1
                else:
                    res.append([nums[i], nums[left], nums[right]])
                    while left < right and nums[left] == nums[left+1]:
                        left += 1
                    while left < right and nums[right] == nums[right-1]:
                        right -= 1
                    left += 1
                    right -= 1
        return res"
False,0,0,16,3sum-closest,3Sum Closest,3sum-closest,False,1007270,2200241,16,False,2,"Can you solve this real interview question? 3Sum Closest - Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:


Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


Example 2:


Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).


 

Constraints:

 * 3 <= nums.length <= 500
 * -1000 <= nums[i] <= 1000
 * -104 <= target <= 104",Solutions (3.6K),8.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/3sum-closest/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().threeSumClosest(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        closest_sum = float('inf')
        for i in range(len(nums) - 2):
            left = i + 1
            right = len(nums) - 1
            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]
                if abs(current_sum - target) < abs(closest_sum - target):
                    closest_sum = current_sum
                if current_sum < target:
                    left += 1
                else:
                    right -= 1
        return closest_sum"
False,0,0,17,letter-combinations-of-a-phone-number,Letter Combinations of a Phone Number,letter-combinations-of-a-phone-number,False,1509316,2672971,17,False,2,"Can you solve this real interview question? Letter Combinations of a Phone Number - Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

[https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png]

 

Example 1:


Input: digits = ""23""
Output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]


Example 2:


Input: digits = """"
Output: []


Example 3:


Input: digits = ""2""
Output: [""a"",""b"",""c""]


 

Constraints:

 * 0 <= digits.length <= 4
 * digits[i] is a digit in the range ['2', '9'].",Solutions (9.6K),14.5K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/letter-combinations-of-a-phone-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    digits: str = deserialize(""str"", read_line())
    ans = Solution().letterCombinations(digits)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        
        phone = {
            '2': ['a', 'b', 'c'],
            '3': ['d', 'e', 'f'],
            '4': ['g', 'h', 'i'],
            '5': ['j', 'k', 'l'],
            '6': ['m', 'n', 'o'],
            '7': ['p', 'q', 'r', 's'],
            '8': ['t', 'u', 'v'],
            '9': ['w', 'x', 'y', 'z']
        }
        
        def backtrack(combination, next_digits):
            if not next_digits:
                output.append(combination)
            else:
                for letter in phone[next_digits[0]]:
                    backtrack(combination + letter, next_digits[1:])
        
        output = []
        backtrack('', digits)
        return output"
False,0,0,18,4sum,4Sum,4sum,False,718570,1999090,18,False,2,"Can you solve this real interview question? 4Sum - Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

 * 0 <= a, b, c, d < n
 * a, b, c, and d are distinct.
 * nums[a] + nums[b] + nums[c] + nums[d] == target

You may return the answer in any order.

 

Example 1:


Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]


Example 2:


Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]


 

Constraints:

 * 1 <= nums.length <= 200
 * -109 <= nums[i] <= 109
 * -109 <= target <= 109",Solutions (3.3K),8.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/4sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().fourSum(nums, target)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        def findNsum(nums, target, N, result, results):
            if len(nums) < N or N < 2 or target < nums[0] * N or target > nums[-1] * N:
                return
            if N == 2:
                left, right = 0, len(nums) - 1
                while left < right:
                    if nums[left] + nums[right] == target:
                        results.append(result + [nums[left], nums[right]])
                        left += 1
                        right -= 1
                        while left < right and nums[left] == nums[left - 1]:
                            left += 1
                    elif nums[left] + nums[right] < target:
                        left += 1
                    else:
                        right -= 1
            else:
                for i in range(len(nums) - N + 1):
                    if i == 0 or (i > 0 and nums[i] != nums[i - 1]):
                        findNsum(nums[i + 1:], target - nums[i], N - 1, result + [nums[i]], results)

        nums.sort()
        results = []
        findNsum(nums, target, 4, [], results)
        return results"
False,0,0,20,valid-parentheses,Valid Parentheses,valid-parentheses,False,3134558,7785491,20,False,1,"Can you solve this real interview question? Valid Parentheses - Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

 1. Open brackets must be closed by the same type of brackets.
 2. Open brackets must be closed in the correct order.
 3. Every close bracket has a corresponding open bracket of the same type.

 

Example 1:


Input: s = ""()""
Output: true


Example 2:


Input: s = ""()[]{}""
Output: true


Example 3:


Input: s = ""(]""
Output: false


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of parentheses only '()[]{}'.",Solutions (14.4K),18.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isValid(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().isValid(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isValid(self, s: str) -> bool:
        stack = []
        mapping = {')': '(', '}': '{', ']': '['}
        
        for char in s:
            if char in mapping:
                top_element = stack.pop() if stack else '#'
                if top_element != mapping[char]:
                    return False
            else:
                stack.append(char)
        
        return not stack or False"
False,0,0,22,generate-parentheses,Generate Parentheses,generate-parentheses,False,1357726,1874000,22,False,2,"Can you solve this real interview question? Generate Parentheses - Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]


Example 2:

Input: n = 1
Output: [""()""]


 

Constraints:

 * 1 <= n <= 8",Solutions (6.7K),17.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/generate-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().generateParenthesis(n)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(s, left, right):
            if len(s) == 2*n:
                result.append(s)
                return
            if left < n:
                backtrack(s + '(', left+1, right)
            if right < left:
                backtrack(s + ')', left, right+1)
        
        result = []
        backtrack("""", 0, 0)
        return result"
False,0,0,26,remove-duplicates-from-sorted-array,Remove Duplicates from Sorted Array,remove-duplicates-from-sorted-array,False,2862838,5559922,26,False,1,"Can you solve this real interview question? Remove Duplicates from Sorted Array - Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place [https://en.wikipedia.org/wiki/In-place_algorithm] such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums be k, to get accepted, you need to do the following things:

 * Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
 * Return k.

Custom Judge:

The judge will test your solution with the following code:


int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}


If all assertions pass, then your solution will be accepted.

 

Example 1:


Input: nums = [1,1,2]
Output: 2, nums = [1,2,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


Example 2:


Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -100 <= nums[i] <= 100
 * nums is sorted in non-decreasing order.",Solutions (11.7K),10.5K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-duplicates-from-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().removeDuplicates(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        k = 1
        for i in range(1, len(nums)):
            if nums[i] != nums[i-1]:
                nums[k] = nums[i]
                k += 1
        
        return k"
False,0,0,27,remove-element,Remove Element,remove-element,False,1716450,3242659,27,False,1,"Can you solve this real interview question? Remove Element - Given an integer array nums and an integer val, remove all occurrences of val in nums in-place [https://en.wikipedia.org/wiki/In-place_algorithm]. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.

Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:

 * Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
 * Return k.

Custom Judge:

The judge will test your solution with the following code:


int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}


If all assertions pass, then your solution will be accepted.

 

Example 1:


Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).


Example 2:


Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).


 

Constraints:

 * 0 <= nums.length <= 100
 * 0 <= nums[i] <= 50
 * 0 <= val <= 100",Solutions (10K),5.5K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    val: int = deserialize(""int"", read_line())
    ans = Solution().removeElement(nums, val)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        if not nums:
            return 0
        
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] = nums[i]
                k += 1
        
        return k"
False,0,0,28,find-the-index-of-the-first-occurrence-in-a-string,Find the Index of the First Occurrence in a String,find-the-index-of-the-first-occurrence-in-a-string,False,1650473,4234927,28,False,1,"Can you solve this real interview question? Find the Index of the First Occurrence in a String - Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

 

Example 1:


Input: haystack = ""sadbutsad"", needle = ""sad""
Output: 0
Explanation: ""sad"" occurs at index 0 and 6.
The first occurrence is at index 0, so we return 0.


Example 2:


Input: haystack = ""leetcode"", needle = ""leeto""
Output: -1
Explanation: ""leeto"" did not occur in ""leetcode"", so we return -1.


 

Constraints:

 * 1 <= haystack.length, needle.length <= 104
 * haystack and needle consist of only lowercase English characters.",Solutions (12K),3.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    haystack: str = deserialize(""str"", read_line())
    needle: str = deserialize(""str"", read_line())
    ans = Solution().strStr(haystack, needle)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)"
False,0,0,29,divide-integers,Divide Two Integers,divide-two-integers,False,591165,3445725,29,False,2,"Can you solve this real interview question? Divide Two Integers - Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.

 

Example 1:


Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = 3.33333.. which is truncated to 3.


Example 2:


Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = -2.33333.. which is truncated to -2.


 

Constraints:

 * -231 <= dividend, divisor <= 231 - 1
 * divisor != 0",Solutions (2.8K),4.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-two-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dividend: int = deserialize(""int"", read_line())
    divisor: int = deserialize(""int"", read_line())
    ans = Solution().divide(dividend, divisor)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def divide(self, dividend: int, divisor: int) -> int:
        if dividend == -pow(2, 31) and divisor == -1:
            return pow(2, 31) - 1
        sign = -1 if (dividend < 0) ^ (divisor < 0) else 1
        dividend, divisor = abs(dividend), abs(divisor)
        quotient = 0
        while dividend >= divisor:
            temp, m = divisor, 1
            while dividend >= temp:
                dividend -= temp
                quotient += m
                temp <<= 1
                m <<= 1
        return sign * quotient"
False,0,0,30,substring-with-concatenation-of-all-words,Substring with Concatenation of All Words,substring-with-concatenation-of-all-words,False,339492,1089202,30,False,3,"Can you solve this real interview question? Substring with Concatenation of All Words - You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.

 * For example, if words = [""ab"",""cd"",""ef""], then ""abcdef"", ""abefcd"", ""cdabef"", ""cdefab"", ""efabcd"", and ""efcdab"" are all concatenated strings. ""acdbef"" is not a concatenated substring because it is not the concatenation of any permutation of words.

Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:


Input: s = ""barfoothefoobarman"", words = [""foo"",""bar""]
Output: [0,9]
Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.
The substring starting at 0 is ""barfoo"". It is the concatenation of [""bar"",""foo""] which is a permutation of words.
The substring starting at 9 is ""foobar"". It is the concatenation of [""foo"",""bar""] which is a permutation of words.
The output order does not matter. Returning [9,0] is fine too.


Example 2:


Input: s = ""wordgoodgoodgoodbestword"", words = [""word"",""good"",""best"",""word""]
Output: []
Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.
There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.
We return an empty array.


Example 3:


Input: s = ""barfoofoobarthefoobarman"", words = [""bar"",""foo"",""the""]
Output: [6,9,12]
Explanation: Since words.length == 3 and words[i].length == 3, the concatenated substring has to be of length 9.
The substring starting at 6 is ""foobarthe"". It is the concatenation of [""foo"",""bar"",""the""] which is a permutation of words.
The substring starting at 9 is ""barthefoo"". It is the concatenation of [""bar"",""the"",""foo""] which is a permutation of words.
The substring starting at 12 is ""thefoobar"". It is the concatenation of [""the"",""foo"",""bar""] which is a permutation of words.


 

Constraints:

 * 1 <= s.length <= 104
 * 1 <= words.length <= 5000
 * 1 <= words[i].length <= 30
 * s and words[i] consist of lowercase English letters.",Solutions (1.8K),673,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/substring-with-concatenation-of-all-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findSubstring(s, words)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        pass"
False,0,0,31,next-permutation,Next Permutation,next-permutation,False,1008650,2689541,31,False,2,"Can you solve this real interview question? Next Permutation - A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

 * For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

 * For example, the next permutation of arr = [1,2,3] is [1,3,2].
 * Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
 * While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.

Given an array of integers nums, find the next permutation of nums.

The replacement must be in place [http://en.wikipedia.org/wiki/In-place_algorithm] and use only constant extra memory.

 

Example 1:


Input: nums = [1,2,3]
Output: [1,3,2]


Example 2:


Input: nums = [3,2,1]
Output: [1,2,3]


Example 3:


Input: nums = [1,1,5]
Output: [1,5,1]


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 100",Solutions (4.3K),14.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/next-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    nextPermutation(nums)
    ans = nums
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        def reverse(nums, start):
            i, j = start, len(nums) - 1
            while i < j:
                nums[i], nums[j] = nums[j], nums[i]
                i += 1
                j -= 1

        if not nums:
            return

        n = len(nums)
        i = n - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1

        if i >= 0:
            j = n - 1
            while j >= 0 and nums[j] <= nums[i]:
                j -= 1
            nums[i], nums[j] = nums[j], nums[i]

        reverse(nums, i + 1)"
False,0,0,32,longest-valid-parentheses,Longest Valid Parentheses,longest-valid-parentheses,False,604737,1843511,32,False,3,"Can you solve this real interview question? Longest Valid Parentheses - Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses substring.

 

Example 1:


Input: s = ""(()""
Output: 2
Explanation: The longest valid parentheses substring is ""()"".


Example 2:


Input: s = "")()())""
Output: 4
Explanation: The longest valid parentheses substring is ""()()"".


Example 3:


Input: s = """"
Output: 0


 

Constraints:

 * 0 <= s.length <= 3 * 104
 * s[i] is '(', or ')'.",Solutions (2.8K),10.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-valid-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestValidParentheses(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestValidParentheses(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = [-1]
        max_length = 0
        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            else:
                stack.pop()
                if len(stack) == 0:
                    stack.append(i)
                else:
                    max_length = max(max_length, i - stack[-1])
        return max_length"
False,0,0,33,search-in-rotated-sorted-array,Search in Rotated Sorted Array,search-in-rotated-sorted-array,False,1967005,5048851,33,False,2,"Can you solve this real interview question? Search in Rotated Sorted Array - There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4


Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1


Example 3:

Input: nums = [1], target = 0
Output: -1


 

Constraints:

 * 1 <= nums.length <= 5000
 * -104 <= nums[i] <= 104
 * All values of nums are unique.
 * nums is an ascending array that is possibly rotated.
 * -104 <= target <= 104",Solutions (8.8K),20.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/search-in-rotated-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().search(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            if nums[left] <= nums[mid]:
                if nums[left] <= target < nums[mid]:
                    right = mid - 1
                else:
                    left = mid + 1
            else:
                if nums[mid] < target <= nums[right]:
                    left = mid + 1
                else:
                    right = mid - 1
        return -1"
False,0,0,34,find-first-and-last-position-of-element-in-sorted-array,Find First and Last Position of Element in Sorted Array,find-first-and-last-position-of-element-in-sorted-array,False,1485487,3549742,34,False,2,"Can you solve this real interview question? Find First and Last Position of Element in Sorted Array - Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]


Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]


Example 3:

Input: nums = [], target = 0
Output: [-1,-1]


 

Constraints:

 * 0 <= nums.length <= 105
 * -109 <= nums[i] <= 109
 * nums is a non-decreasing array.
 * -109 <= target <= 109",Solutions (11.2K),16.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().searchRange(nums, target)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        def binarySearchLeft(nums, target):
            left, right = 0, len(nums) - 1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return left
        
        def binarySearchRight(nums, target):
            left, right = 0, len(nums) - 1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] <= target:
                    left = mid + 1
                else:
                    right = mid - 1
            return right
        
        left_idx = binarySearchLeft(nums, target)
        right_idx = binarySearchRight(nums, target)
        
        if left_idx <= right_idx:
            return [left_idx, right_idx]
        else:
            return [-1, -1]"
False,0,0,35,search-insert-position,Search Insert Position,search-insert-position,False,2105782,4860138,35,False,1,"Can you solve this real interview question? Search Insert Position - Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:


Input: nums = [1,3,5,6], target = 5
Output: 2


Example 2:


Input: nums = [1,3,5,6], target = 2
Output: 1


Example 3:


Input: nums = [1,3,5,6], target = 7
Output: 4


 

Constraints:

 * 1 <= nums.length <= 104
 * -104 <= nums[i] <= 104
 * nums contains distinct values sorted in ascending order.
 * -104 <= target <= 104",Solutions (13.8K),12.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/search-insert-position/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().searchInsert(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        left, right = 0, len(nums) - 1
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return left"
False,0,0,36,valid-sudoku,Valid Sudoku,valid-sudoku,False,1054331,1815916,36,False,2,"Can you solve this real interview question? Valid Sudoku - Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

 1. Each row must contain the digits 1-9 without repetition.
 2. Each column must contain the digits 1-9 without repetition.
 3. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

Note:

 * A Sudoku board (partially filled) could be valid but is not necessarily solvable.
 * Only the filled cells need to be validated according to the mentioned rules.

 

Example 1:

[https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png]


Input: board = 
[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: true


Example 2:


Input: board = 
[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


 

Constraints:

 * board.length == 9
 * board[i].length == 9
 * board[i][j] is a digit 1-9 or '.'.",Solutions (5.8K),8.3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-sudoku/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().isValidSudoku(board)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        def is_valid(arr):
            arr = [i for i in arr if i != '.']
            return len(set(arr)) == len(arr)
        
        for i in range(9):
            if not is_valid(board[i]):
                return False
            if not is_valid([board[j][i] for j in range(9)]):
                return False
        
        for i in range(0, 9, 3):
            for j in range(0, 9, 3):
                if not is_valid([board[x][y] for x in range(i, i+3) for y in range(j, j+3)]):
                    return False
        
        return True"
False,0,0,37,sudoku-solver,Sudoku Solver,sudoku-solver,False,446076,774436,37,False,3,"Can you solve this real interview question? Sudoku Solver - Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

 1. Each of the digits 1-9 must occur exactly once in each row.
 2. Each of the digits 1-9 must occur exactly once in each column.
 3. Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.

The '.' character indicates empty cells.

 

Example 1:

[https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png]


Input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]
Explanation: The input board is shown above and the only valid solution is shown below:

[https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png]


 

Constraints:

 * board.length == 9
 * board[i].length == 9
 * board[i][j] is a digit or '.'.
 * It is guaranteed that the input board has only one solution.",Solutions (2.8K),7.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/sudoku-solver/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    solveSudoku(board)
    ans = board
    print(""\noutput:"", serialize(ans, ""List[List[str]]""))
","class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        def solve(board):
            def is_valid(row, col, num):
                for i in range(9):
                    if board[row][i] == num:
                        return False
                    if board[i][col] == num:
                        return False
                    if board[3 * (row // 3) + i // 3][3 * (col // 3) + i % 3] == num:
                        return False
                return True
            
            def solve_helper():
                for i in range(9):
                    for j in range(9):
                        if board[i][j] == '.':
                            for num in map(str, range(1, 10)):
                                if is_valid(i, j, num):
                                    board[i][j] = num
                                    if solve_helper():
                                        return True
                                    else:
                                        board[i][j] = '.'
                            return False
                return True
            
            return solve_helper()
        
        solve(board)"
False,0,0,38,count-and-say,Count and Say,count-and-say,False,772520,1484627,38,False,2,"Can you solve this real interview question? Count and Say - The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

 * countAndSay(1) = ""1""
 * countAndSay(n) is the way you would ""say"" the digit string from countAndSay(n-1), which is then converted into a different digit string.

To determine how you ""say"" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.

For example, the saying and conversion for digit string ""3322251"":

[https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg]

Given a positive integer n, return the nth term of the count-and-say sequence.

 

Example 1:


Input: n = 1
Output: ""1""
Explanation: This is the base case.


Example 2:


Input: n = 4
Output: ""1211""
Explanation:
countAndSay(1) = ""1""
countAndSay(2) = say ""1"" = one 1 = ""11""
countAndSay(3) = say ""11"" = two 1's = ""21""
countAndSay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211""


 

Constraints:

 * 1 <= n <= 30",Solutions (5.5K),3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/count-and-say/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countAndSay(self, n: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countAndSay(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def countAndSay(self, n: int) -> str:
        if n == 1:
            return ""1""
        prev = self.countAndSay(n-1)
        result = """"
        count = 1
        for i in range(1, len(prev)):
            if prev[i] == prev[i-1]:
                count += 1
            else:
                result += str(count) + prev[i-1]
                count = 1
        result += str(count) + prev[-1]
        return result"
False,0,0,39,combination-sum,Combination Sum,combination-sum,False,1423179,2076359,39,False,2,"Can you solve this real interview question? Combination Sum - Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:


Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.


Example 2:


Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]


Example 3:


Input: candidates = [2], target = 1
Output: []


 

Constraints:

 * 1 <= candidates.length <= 30
 * 2 <= candidates[i] <= 40
 * All elements of candidates are distinct.
 * 1 <= target <= 40",Solutions (5.4K),15.5K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/combination-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    candidates: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().combinationSum(candidates, target)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(remain, comb, start):
            if remain == 0:
                result.append(list(comb))
                return
            elif remain < 0:
                return

            for i in range(start, len(candidates)):
                comb.append(candidates[i])
                backtrack(remain - candidates[i], comb, i)
                comb.pop()
        
        result = []
        backtrack(target, [], 0)
        return result"
False,0,0,40,combination-sum-ii,Combination Sum II,combination-sum-ii,False,721748,1351532,40,False,2,"Can you solve this real interview question? Combination Sum II - Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:


Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]


Example 2:


Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]


 

Constraints:

 * 1 <= candidates.length <= 100
 * 1 <= candidates[i] <= 50
 * 1 <= target <= 30",Solutions (2.7K),8.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/combination-sum-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    candidates: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().combinationSum2(candidates, target)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(start, path, target):
            if target == 0:
                res.append(path)
                return
            for i in range(start, len(candidates)):
                if i > start and candidates[i] == candidates[i-1]:
                    continue
                if candidates[i] > target:
                    break
                backtrack(i + 1, path + [candidates[i]], target - candidates[i])
        
        candidates.sort()
        res = []
        backtrack(0, [], target)
        
        return res"
False,0,0,41,first-missing-positive,First Missing Positive,first-missing-positive,False,854079,2327661,41,False,3,"Can you solve this real interview question? First Missing Positive - Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:


Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.


Example 2:


Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.


Example 3:


Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.


 

Constraints:

 * 1 <= nums.length <= 105
 * -231 <= nums[i] <= 231 - 1",Solutions (6.6K),13.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/first-missing-positive/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().firstMissingPositive(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def firstMissingPositive(self, nums: List[int]) -> int:
        pass"
False,0,0,42,trapping-rain-water,Trapping Rain Water,trapping-rain-water,False,1481071,2501977,42,False,3,"Can you solve this real interview question? Trapping Rain Water - Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png]


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.


Example 2:


Input: height = [4,2,0,3,2,5]
Output: 9


 

Constraints:

 * n == height.length
 * 1 <= n <= 2 * 104
 * 0 <= height[i] <= 105",Solutions (6.6K),25.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/trapping-rain-water/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def trap(self, height: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    height: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().trap(height)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def trap(self, height: List[int]) -> int:
        pass"
False,0,0,43,multiply-strings,Multiply Strings,multiply-strings,False,644372,1646329,43,False,2,"Can you solve this real interview question? Multiply Strings - Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.

 

Example 1:

Input: num1 = ""2"", num2 = ""3""
Output: ""6""


Example 2:

Input: num1 = ""123"", num2 = ""456""
Output: ""56088""


 

Constraints:

 * 1 <= num1.length, num2.length <= 200
 * num1 and num2 consist of digits only.
 * Both num1 and num2 do not contain any leading zero, except the number 0 itself.",Solutions (3.1K),6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/multiply-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: str = deserialize(""str"", read_line())
    num2: str = deserialize(""str"", read_line())
    ans = Solution().multiply(num1, num2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def multiply(self, num1: str, num2: str) -> str:
        def multiply_strings(num1, num2):
            if num1 == ""0"" or num2 == ""0"":
                return ""0""
            
            m, n = len(num1), len(num2)
            products = [0] * (m + n)
            
            for i in reversed(range(m)):
                for j in reversed(range(n)):
                    mul = (ord(num1[i]) - ord('0')) * (ord(num2[j]) - ord('0'))
                    p1, p2 = i + j, i + j + 1
                    summ = mul + products[p2]
                    
                    products[p1] += summ // 10
                    products[p2] = summ % 10
            
            result = """"
            for product in products:
                if not (len(result) == 0 and product == 0):
                    result += str(product)
            
            return result

        return multiply_strings(num1, num2)"
False,0,0,44,wildcard-matching,Wildcard Matching,wildcard-matching,False,461690,1715010,44,False,3,"Can you solve this real interview question? Wildcard Matching - Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

 * '?' Matches any single character.
 * '*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

 

Example 1:


Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:


Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.


Example 3:


Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.


 

Constraints:

 * 0 <= s.length, p.length <= 2000
 * s contains only lowercase English letters.
 * p contains only lowercase English letters, '?' or '*'.",Solutions (1.8K),6.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/wildcard-matching/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    p: str = deserialize(""str"", read_line())
    ans = Solution().isMatch(s, p)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isMatch(self, s: str, p: str) -> bool:
        dp = [[False] * (len(p) + 1) for _ in range(len(s) + 1)]
        dp[0][0] = True
        
        for j in range(1, len(p) + 1):
            if p[j - 1] == '*':
                dp[0][j] = dp[0][j - 1]
        
        for i in range(1, len(s) + 1):
            for j in range(1, len(p) + 1):
                if p[j - 1] in {s[i - 1], '?'}:
                    dp[i][j] = dp[i - 1][j - 1]
                elif p[j - 1] == '*':
                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]
        
        return dp[len(s)][len(p)]"
False,0,0,45,jump-game-ii,Jump Game II,jump-game-ii,False,863029,2168125,45,False,2,"Can you solve this real interview question? Jump Game II - You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

 * 0 <= j <= nums[i] and
 * i + j < n

Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 

Example 1:


Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:


Input: nums = [2,3,0,1,4]
Output: 2


 

Constraints:

 * 1 <= nums.length <= 104
 * 0 <= nums[i] <= 1000
 * It's guaranteed that you can reach nums[n - 1].",Solutions (4.4K),12K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def jump(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().jump(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def jump(self, nums: List[int]) -> int:
        n = len(nums)
        jumps = 0
        current_end, farthest = 0, 0
        
        for i in range(n - 1):
            farthest = max(farthest, i + nums[i])
            if i == current_end:
                jumps += 1
                current_end = farthest
        
        return jumps"
False,0,0,46,permutations,Permutations,permutations,False,1529525,2023011,46,False,2,"Can you solve this real interview question? Permutations - Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]


Example 3:

Input: nums = [1]
Output: [[1]]


 

Constraints:

 * 1 <= nums.length <= 6
 * -10 <= nums[i] <= 10
 * All the integers of nums are unique.",Solutions (6.9K),15.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/permutations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().permute(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        import itertools
        return list(itertools.permutations(nums))"
False,0,0,47,permutations-ii,Permutations II,permutations-ii,False,769486,1342847,47,False,2,"Can you solve this real interview question? Permutations II - Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:


Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]


Example 2:


Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


 

Constraints:

 * 1 <= nums.length <= 8
 * -10 <= nums[i] <= 10",Solutions (3.5K),7.3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/permutations-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().permuteUnique(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        import itertools
        return list(set(itertools.permutations(nums)))"
False,0,0,48,rotate-image,Rotate Image,rotate-image,False,1237975,1745800,48,False,2,"Can you solve this real interview question? Rotate Image - You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place [https://en.wikipedia.org/wiki/In-place_algorithm], which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg]


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]


Example 2:

[https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg]


Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]


 

Constraints:

 * n == matrix.length == matrix[i].length
 * 1 <= n <= 20
 * -1000 <= matrix[i][j] <= 1000",Solutions (9.2K),14.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/rotate-image/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """"""
        Do not return anything, modify matrix in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    rotate(matrix)
    ans = matrix
    print(""\noutput:"", serialize(ans, ""List[List[int]]""))
","class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        matrix.reverse()
        for i in range(len(matrix)):
            for j in range(i):
                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"
False,0,0,49,group-anagrams,Group Anagrams,group-anagrams,False,1889610,2832076,49,False,2,"Can you solve this real interview question? Group Anagrams - Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]


Example 2:

Input: strs = [""""]
Output: [[""""]]


Example 3:

Input: strs = [""a""]
Output: [[""a""]]


 

Constraints:

 * 1 <= strs.length <= 104
 * 0 <= strs[i].length <= 100
 * strs[i] consists of lowercase English letters.",Solutions (7.5K),14.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/group-anagrams/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().groupAnagrams(strs)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        import collections
        ans = collections.defaultdict(list)
        for s in strs:
            ans[tuple(sorted(s))].append(s)
        return ans.values()"
False,0,0,50,powx-n,"Pow(x, n)",powx-n,False,1163797,3525436,50,False,2,"Can you solve this real interview question? Pow(x, n) - Implement pow(x, n) [http://www.cplusplus.com/reference/valarray/pow/], which calculates x raised to the power n (i.e., xn).

 

Example 1:


Input: x = 2.00000, n = 10
Output: 1024.00000


Example 2:


Input: x = 2.10000, n = 3
Output: 9.26100


Example 3:


Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25


 

Constraints:

 * -100.0 < x < 100.0
 * -231 <= n <= 231-1
 * n is an integer.
 * -104 <= xn <= 104",Solutions (4.9K),6.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/powx-n/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def myPow(self, x: float, n: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    x: float = deserialize(""float"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().myPow(x, n)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def myPow(self, x: float, n: int) -> float:
        return x ** n"
False,0,0,51,n-queens,N-Queens,n-queens,False,525905,820614,51,False,3,"Can you solve this real interview question? N-Queens - The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/13/queens.jpg]


Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above


Example 2:


Input: n = 1
Output: [[""Q""]]


 

Constraints:

 * 1 <= n <= 9",Solutions (3.8K),9.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/n-queens/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().solveNQueens(n)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        def is_safe(board, row, col, n):
            for i in range(row):
                if board[i][col] == 'Q':
                    return False
                if col-(row-i) >= 0 and board[i][col-(row-i)] == 'Q':
                    return False
                if col+(row-i) < n and board[i][col+(row-i)] == 'Q':
                    return False
            return True

        def solve(board, row, n, res):
            if row == n:
                temp = []
                for i in range(n):
                    temp.append("""".join(board[i]))
                res.append(temp)
                return
            for i in range(n):
                if is_safe(board, row, i, n):
                    board[row][i] = 'Q'
                    solve(board, row+1, n, res)
                    board[row][i] = '.'

        board = [['.' for _ in range(n)] for _ in range(n)]
        res = []
        solve(board, 0, n, res)
        return res"
False,0,0,52,n-queens-ii,N-Queens II,n-queens-ii,False,303457,424206,52,False,3,"Can you solve this real interview question? N-Queens II - The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return the number of distinct solutions to the n-queens puzzle.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/13/queens.jpg]


Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 9",Solutions (2K),3.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/n-queens-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalNQueens(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().totalNQueens(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalNQueens(self, n: int) -> int:
        def is_not_under_attack(row, col, cols, left_diagonal, right_diagonal):
            return cols[col] + left_diagonal[row - col] + right_diagonal[row + col] == 0
        
        def backtrack(row, cols, left_diagonal, right_diagonal):
            nonlocal count
            if row == n:
                count += 1
                return
            for col in range(n):
                if is_not_under_attack(row, col, cols, left_diagonal, right_diagonal):
                    cols[col] = 1
                    left_diagonal[row - col] = 1
                    right_diagonal[row + col] = 1
                    backtrack(row + 1, cols, left_diagonal, right_diagonal)
                    cols[col] = 0
                    left_diagonal[row - col] = 0
                    right_diagonal[row + col] = 0
        
        cols = [0] * n
        left_diagonal = [0] * (2 * n - 1)
        right_diagonal = [0] * (2 * n - 1)
        count = 0
        backtrack(0, cols, left_diagonal, right_diagonal)
        return count"
False,0,0,53,maximum-subarray,Maximum Subarray,maximum-subarray,False,3068058,6116575,53,False,2,"Can you solve this real interview question? Maximum Subarray - Given an integer array nums, find the subarray with the largest sum, and return its sum.

 

Example 1:


Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.


Example 2:


Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.


Example 3:


Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104

 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.",Solutions (9.8K),28.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSubArray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = cur_sum = nums[0]
        for num in nums[1:]:
            cur_sum = max(num, cur_sum + num)
            max_sum = max(max_sum, cur_sum)
        return max_sum"
False,0,0,54,spiral-matrix,Spiral Matrix,spiral-matrix,False,988919,2204848,54,False,2,"Can you solve this real interview question? Spiral Matrix - Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg]


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]


Example 2:

[https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg]


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 10
 * -100 <= matrix[i][j] <= 100",Solutions (8.3K),10.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/spiral-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().spiralOrder(matrix)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        result = []
        while matrix:
            result += matrix.pop(0)
            matrix = list(zip(*matrix))[::-1]
        return result"
False,0,0,55,jump-game,Jump Game,jump-game,False,1346991,3461824,55,False,2,"Can you solve this real interview question? Jump Game - You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

 

Example 1:


Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:


Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.


 

Constraints:

 * 1 <= nums.length <= 104
 * 0 <= nums[i] <= 105",Solutions (6.9K),15.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canJump(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canJump(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canJump(self, nums: List[int]) -> bool:
        max_reachable = 0
        for i in range(len(nums)):
            if i > max_reachable:
                return False
            max_reachable = max(max_reachable, i + nums[i])
        return True"
False,0,0,56,merge-intervals,Merge Intervals,merge-intervals,False,1829657,3963157,56,False,2,"Can you solve this real interview question? Merge Intervals - Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:


Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].


Example 2:


Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


 

Constraints:

 * 1 <= intervals.length <= 104
 * intervals[i].length == 2
 * 0 <= starti <= endi <= 104",Solutions (7.2K),18.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/merge-intervals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().merge(intervals)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])
        merged = []
        for interval in intervals:
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                merged[-1][1] = max(merged[-1][1], interval[1])
        return merged"
False,0,0,58,length-of-last-word,Length of Last Word,length-of-last-word,False,1070052,2503647,58,False,1,"Can you solve this real interview question? Length of Last Word - Given a string s consisting of words and spaces, return the length of the last word in the string.

A word is a maximal substring consisting of non-space characters only.

 

Example 1:


Input: s = ""Hello World""
Output: 5
Explanation: The last word is ""World"" with length 5.


Example 2:


Input: s = ""   fly me   to   the moon  ""
Output: 4
Explanation: The last word is ""moon"" with length 4.


Example 3:


Input: s = ""luffy is still joyboy""
Output: 6
Explanation: The last word is ""joyboy"" with length 6.


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of only English letters and spaces ' '.
 * There will be at least one word in s.",Solutions (10.4K),2.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/length-of-last-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().lengthOfLastWord(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lengthOfLastWord(self, s: str) -> int:
        words = s.split()
        if len(words) == 0:
            return 0
        return len(words[-1])"
False,0,0,59,spiral-matrix-ii,Spiral Matrix II,spiral-matrix-ii,False,428630,636801,59,False,2,"Can you solve this real interview question? Spiral Matrix II - Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg]


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]


Example 2:


Input: n = 1
Output: [[1]]


 

Constraints:

 * 1 <= n <= 20",Solutions (4.7K),4.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/spiral-matrix-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().generateMatrix(n)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        matrix = [[0] * n for _ in range(n)]
        top, bottom, left, right = 0, n - 1, 0, n - 1
        num = 1

        while num <= n * n:
            for i in range(left, right + 1):
                matrix[top][i] = num
                num += 1
            top += 1

            for i in range(top, bottom + 1):
                matrix[i][right] = num
                num += 1
            right -= 1

            for i in range(right, left - 1, -1):
                matrix[bottom][i] = num
                num += 1
            bottom -= 1

            for i in range(bottom, top - 1, -1):
                matrix[i][left] = num
                num += 1
            left += 1

        return matrix"
False,0,0,60,permutation-sequence,Permutation Sequence,permutation-sequence,False,320065,721816,60,False,3,"Can you solve this real interview question? Permutation Sequence - The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

 1. ""123""
 2. ""132""
 3. ""213""
 4. ""231""
 5. ""312""
 6. ""321""

Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: ""213""


Example 2:

Input: n = 4, k = 9
Output: ""2314""


Example 3:

Input: n = 3, k = 1
Output: ""123""


 

Constraints:

 * 1 <= n <= 9
 * 1 <= k <= n!",Solutions (2.3K),5.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/permutation-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getPermutation(n, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        import math
        nums = [str(i) for i in range(1, n+1)]
        k -= 1
        factorial = math.factorial(n)
        res = ''
        
        while n > 0:
            factorial //= n
            index = k // factorial
            res += nums.pop(index)
            k %= factorial
            n -= 1
        
        return res"
False,0,0,62,unique-paths,Unique Paths,unique-paths,False,1331896,2126513,62,False,2,"Can you solve this real interview question? Unique Paths - There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png]


Input: m = 3, n = 7
Output: 28


Example 2:


Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down


 

Constraints:

 * 1 <= m, n <= 100",Solutions (8.8K),13.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-paths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().uniquePaths(m, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1] * n for _ in range(m)]
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[-1][-1]"
False,0,0,63,unique-paths-ii,Unique Paths II,unique-paths-ii,False,662687,1682677,63,False,2,"Can you solve this real interview question? Unique Paths II - You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg]


Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right


Example 2:

[https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg]


Input: obstacleGrid = [[0,1],[0,0]]
Output: 1


 

Constraints:

 * m == obstacleGrid.length
 * n == obstacleGrid[i].length
 * 1 <= m, n <= 100
 * obstacleGrid[i][j] is 0 or 1.",Solutions (4.2K),6.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-paths-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    obstacleGrid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().uniquePathsWithObstacles(obstacleGrid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        
        dp = [[0] * n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                elif i == 0 and j == 0:
                    dp[i][j] = 1
                elif i == 0:
                    dp[i][j] = dp[i][j - 1]
                elif j == 0:
                    dp[i][j] = dp[i - 1][j]
                else:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        
        return dp[m - 1][n - 1]"
False,0,0,64,minimum-path-sum,Minimum Path Sum,minimum-path-sum,False,861318,1409245,64,False,2,"Can you solve this real interview question? Minimum Path Sum - Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg]


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


Example 2:


Input: grid = [[1,2,3],[4,5,6]]
Output: 12


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 200
 * 0 <= grid[i][j] <= 100",Solutions (5.8K),10.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-path-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minPathSum(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        for i in range(1, n):
            grid[0][i] += grid[0][i - 1]
        
        for j in range(1, m):
            grid[j][0] += grid[j - 1][0]
        
        for i in range(1, m):
            for j in range(1, n):
                grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])
        
        return grid[-1][-1]"
False,0,0,65,valid-number,Valid Number,valid-number,False,301516,1612311,65,False,3,"Can you solve this real interview question? Valid Number - A valid number can be split up into these components (in order):

 1. A decimal number or an integer.
 2. (Optional) An 'e' or 'E', followed by an integer.

A decimal number can be split up into these components (in order):

 1. (Optional) A sign character (either '+' or '-').
 2. One of the following formats:
    1. One or more digits, followed by a dot '.'.
    2. One or more digits, followed by a dot '.', followed by one or more digits.
    3. A dot '.', followed by one or more digits.

An integer can be split up into these components (in order):

 1. (Optional) A sign character (either '+' or '-').
 2. One or more digits.

For example, all the following are valid numbers: [""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90E3"", ""3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""], while the following are not valid numbers: [""abc"", ""1a"", ""1e"", ""e3"", ""99e2.5"", ""--6"", ""-+3"", ""95a54e53""].

Given a string s, return true if s is a valid number.

 

Example 1:


Input: s = ""0""
Output: true


Example 2:


Input: s = ""e""
Output: false


Example 3:


Input: s = "".""
Output: false


 

Constraints:

 * 1 <= s.length <= 20
 * s consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.",Solutions (2.1K),903,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isNumber(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().isNumber(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isNumber(self, s: str) -> bool:
        s = s.strip()  
        if not s:
            return False
        
        seen_number = seen_dot = seen_e = False
        for i, char in enumerate(s):
            if char in ['+', '-']:
                if i > 0 and s[i - 1] != 'e':
                    return False
            elif char.isdigit():
                seen_number = True
            elif char == '.':
                if seen_dot or seen_e:
                    return False
                seen_dot = True
            elif char in ['e', 'E']:
                if seen_e or not seen_number:
                    return False
                seen_e = True
                seen_number = False
            else:
                return False
            
        return seen_number"
False,0,0,66,plus-one,Plus One,plus-one,False,1614179,3697364,66,False,1,"Can you solve this real interview question? Plus One - You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 

Example 1:


Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].


Example 2:


Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].


Example 3:


Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].


 

Constraints:

 * 1 <= digits.length <= 100
 * 0 <= digits[i] <= 9
 * digits does not contain any leading 0's.",Solutions (11.5K),6.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/plus-one/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    digits: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().plusOne(digits)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        i = len(digits) - 1
        while i >= 0:
            if digits[i] < 9:
                digits[i] += 1
                return digits
            digits[i] = 0
            i -= 1
        return [1] + digits"
False,0,0,67,add-binary,Add Binary,add-binary,False,1115640,2129915,67,False,1,"Can you solve this real interview question? Add Binary - Given two binary strings a and b, return their sum as a binary string.

 

Example 1:

Input: a = ""11"", b = ""1""
Output: ""100""


Example 2:

Input: a = ""1010"", b = ""1011""
Output: ""10101""


 

Constraints:

 * 1 <= a.length, b.length <= 104
 * a and b consist only of '0' or '1' characters.
 * Each string does not contain leading zeros except for the zero itself.",Solutions (6.7K),7.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/add-binary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    a: str = deserialize(""str"", read_line())
    b: str = deserialize(""str"", read_line())
    ans = Solution().addBinary(a, b)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def addBinary(self, a: str, b: str) -> str:
        return bin(int(a, 2) + int(b, 2))[2:]"
False,0,0,68,,Text Justification,text-justification,False,288442,772113,68,False,3,"Can you solve this real interview question? Text Justification - Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left-justified, and no extra space is inserted between words.

Note:

 * A word is defined as a character sequence consisting of non-space characters only.
 * Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
 * The input array words contains at least one word.

 

Example 1:


Input: words = [""This"", ""is"", ""an"", ""example"", ""of"", ""text"", ""justification.""], maxWidth = 16
Output:
[
   ""This    is    an"",
   ""example  of text"",
   ""justification.  ""
]

Example 2:


Input: words = [""What"",""must"",""be"",""acknowledgment"",""shall"",""be""], maxWidth = 16
Output:
[
  ""What   must   be"",
  ""acknowledgment  "",
  ""shall be        ""
]
Explanation: Note that the last line is ""shall be    "" instead of ""shall     be"", because the last line must be left-justified instead of fully-justified.
Note that the second line is also left-justified because it contains only one word.

Example 3:


Input: words = [""Science"",""is"",""what"",""we"",""understand"",""well"",""enough"",""to"",""explain"",""to"",""a"",""computer."",""Art"",""is"",""everything"",""else"",""we"",""do""], maxWidth = 20
Output:
[
  ""Science  is  what we"",
  ""understand      well"",
  ""enough to explain to"",
  ""a  computer.  Art is"",
  ""everything  else  we"",
  ""do                  ""
]

 

Constraints:

 * 1 <= words.length <= 300
 * 1 <= words[i].length <= 20
 * words[i] consists of only English letters and symbols.
 * 1 <= maxWidth <= 100
 * words[i].length <= maxWidth",Solutions (1.9K),2.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/text-justification/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    maxWidth: int = deserialize(""int"", read_line())
    ans = Solution().fullJustify(words, maxWidth)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def fullJustify(self, words: List[str], maxWidth: int) -> List[str]:
        def create_line(words_in_line, is_last_line):
            line = """"
            if is_last_line or len(words_in_line) == 1:
                line += "" "".join(words_in_line) + "" "" * (maxWidth - len("" "".join(words_in_line)))
            else:
                num_words = len(words_in_line)
                num_spaces = maxWidth - sum(len(word) for word in words_in_line)
                space_between_words, extra_spaces = divmod(num_spaces, num_words - 1)
                for i in range(num_words - 1):
                    line += words_in_line[i] + "" "" * space_between_words + ("" "" * (1 if extra_spaces > 0 else 0))
                    extra_spaces -= 1
                line += words_in_line[-1]
            return line
        
        result = []
        words_in_line = []
        line_length = 0
        
        for word in words:
            if line_length + len(word) + len(words_in_line) <= maxWidth:
                words_in_line.append(word)
                line_length += len(word)
            else:
                result.append(create_line(words_in_line, False))
                words_in_line = [word]
                line_length = len(word)
        
        result.append(create_line(words_in_line, True))
        
        return result"
False,0,0,69,sqrtx,Sqrt(x),sqrtx,False,1410510,3772865,69,False,1,"Can you solve this real interview question? Sqrt(x) - Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.

You must not use any built-in exponent function or operator.

 * For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.

 

Example 1:


Input: x = 4
Output: 2
Explanation: The square root of 4 is 2, so we return 2.


Example 2:


Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned.


 

Constraints:

 * 0 <= x <= 231 - 1",Solutions (6.3K),6.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/sqrtx/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mySqrt(self, x: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    ans = Solution().mySqrt(x)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mySqrt(self, x: int) -> int:
        left, right = 0, x
        while left <= right:
            mid = (left + right) // 2
            if mid * mid <= x < (mid + 1) * (mid + 1):
                return mid
            elif mid * mid < x:
                left = mid + 1
            else:
                right = mid - 1"
False,0,0,70,climbing-stairs,Climbing Stairs,climbing-stairs,False,2266394,4344331,70,False,1,"Can you solve this real interview question? Climbing Stairs - You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:


Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps


Example 2:


Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


 

Constraints:

 * 1 <= n <= 45",Solutions (11K),17.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/climbing-stairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def climbStairs(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().climbStairs(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        first = 1
        second = 2
        for i in range(3, n+1):
            third = first + second
            first = second
            second = third
        return second"
False,0,0,71,simplify-path,Simplify Path,simplify-path,False,495414,1260025,71,False,2,"Can you solve this real interview question? Simplify Path - Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.

The canonical path should have the following format:

 * The path starts with a single slash '/'.
 * Any two directories are separated by a single slash '/'.
 * The path does not end with a trailing '/'.
 * The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')

Return the simplified canonical path.

 

Example 1:


Input: path = ""/home/""
Output: ""/home""
Explanation: Note that there is no trailing slash after the last directory name.


Example 2:


Input: path = ""/../""
Output: ""/""
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.


Example 3:


Input: path = ""/home//foo/""
Output: ""/home/foo""
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.


 

Constraints:

 * 1 <= path.length <= 3000
 * path consists of English letters, digits, period '.', slash '/' or '_'.
 * path is a valid absolute Unix path.",Solutions (2.2K),3.3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/simplify-path/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def simplifyPath(self, path: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    path: str = deserialize(""str"", read_line())
    ans = Solution().simplifyPath(path)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def simplifyPath(self, path: str) -> str:
        stack = []
        components = path.split('/')
        
        for component in components:
            if component == '' or component == '.':
                continue
            elif component == '..':
                if stack:
                    stack.pop()
            else:
                stack.append(component)
        
        return '/' + '/'.join(stack)"
False,0,0,72,edit-distance,Edit Distance,edit-distance,False,630833,1160305,72,False,3,"Can you solve this real interview question? Edit Distance - Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

 * Insert a character
 * Delete a character
 * Replace a character

 

Example 1:


Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')


Example 2:


Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


 

Constraints:

 * 0 <= word1.length, word2.length <= 500
 * word1 and word2 consist of lowercase English letters.",Solutions (3.7K),12.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/edit-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().minDistance(word1, word2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m = len(word1)
        n = len(word2)
        
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(m + 1):
            dp[i][0] = i
        
        for j in range(n + 1):
            dp[0][j] = j
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1
        
        return dp[m][n]"
False,0,0,73,set-matrix-zeroes,Set Matrix Zeroes,set-matrix-zeroes,False,949754,1857730,73,False,2,"Can you solve this real interview question? Set Matrix Zeroes - Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.

You must do it in place [https://en.wikipedia.org/wiki/In-place_algorithm].

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg]


Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]


Example 2:

[https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg]


Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]


 

Constraints:

 * m == matrix.length
 * n == matrix[0].length
 * 1 <= m, n <= 200
 * -231 <= matrix[i][j] <= 231 - 1

 

Follow up:

 * A straightforward solution using O(mn) space is probably a bad idea.
 * A simple improvement uses O(m + n) space, but still not the best solution.
 * Could you devise a constant space solution?",Solutions (4.6K),10.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/set-matrix-zeroes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        """"""
        Do not return anything, modify matrix in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    setZeroes(matrix)
    ans = matrix
    print(""\noutput:"", serialize(ans, ""List[List[int]]""))
","class Solution:
    def setZeroes(self, matrix: List[List[int]]) -> None:
        def setZeroes(self, matrix: List[List[int]]) -> None:
            m, n = len(matrix), len(matrix[0])
            first_row_has_zero = any(val == 0 for val in matrix[0])
            first_col_has_zero = any(matrix[i][0] == 0 for i in range(m))
            
            for i in range(1, m):
                for j in range(1, n):
                    if matrix[i][j] == 0:
                        matrix[i][0] = 0
                        matrix[0][j] = 0
            
            for i in range(1, m):
                for j in range(1, n):
                    if matrix[i][0] == 0 or matrix[0][j] == 0:
                        matrix[i][j] = 0
            
            if first_row_has_zero:
                for j in range(n):
                    matrix[0][j] = 0
            
            if first_col_has_zero:
                for i in range(m):
                    matrix[i][0] = 0"
False,0,0,74,search-in-2d-matrix,Search a 2D Matrix,search-a-2d-matrix,False,1169217,2454410,74,False,2,"Can you solve this real interview question? Search a 2D Matrix - You are given an m x n integer matrix matrix with the following two properties:

 * Each row is sorted in non-decreasing order.
 * The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/05/mat.jpg]


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg]


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 100
 * -104 <= matrix[i][j], target <= 104",Solutions (10.2K),11.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/search-a-2d-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().searchMatrix(matrix, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def binary_search(matrix, target):
            m, n = len(matrix), len(matrix[0])
            left, right = 0, m * n - 1
            while left <= right:
                pivot_idx = (left + right) // 2
                pivot_element = matrix[pivot_idx // n][pivot_idx % n]
                if target == pivot_element:
                    return True
                else:
                    if target < pivot_element:
                        right = pivot_idx - 1
                    else:
                        left = pivot_idx + 1
            return False
        
        if not matrix or not matrix[0]:
            return False
        
        return binary_search(matrix, target)"
False,0,0,75,sort-colors,Sort Colors,sort-colors,False,1373184,2349322,75,False,2,"Can you solve this real interview question? Sort Colors - Given an array nums with n objects colored red, white, or blue, sort them in-place [https://en.wikipedia.org/wiki/In-place_algorithm] so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

 

Example 1:


Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]


Example 2:


Input: nums = [2,0,1]
Output: [0,1,2]


 

Constraints:

 * n == nums.length
 * 1 <= n <= 300
 * nums[i] is either 0, 1, or 2.

 

Follow up: Could you come up with a one-pass algorithm using only constant extra space?",Solutions (9K),14.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-colors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    sortColors(nums)
    ans = nums
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def sortColors(self, nums: List[int]) -> None:
        low, mid, high = 0, 0, len(nums) - 1
        while mid <= high:
            if nums[mid] == 0:
                nums[low], nums[mid] = nums[mid], nums[low]
                low += 1
                mid += 1
            elif nums[mid] == 1:
                mid += 1
            else:
                nums[high], nums[mid] = nums[mid], nums[high]
                high -= 1"
False,0,0,76,minimum-window-substring,Minimum Window Substring,minimum-window-substring,False,983479,2406177,76,False,3,"Can you solve this real interview question? Minimum Window Substring - Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string """".

The testcases will be generated such that the answer is unique.

 

Example 1:


Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""
Explanation: The minimum window substring ""BANC"" includes 'A', 'B', and 'C' from string t.


Example 2:


Input: s = ""a"", t = ""a""
Output: ""a""
Explanation: The entire string s is the minimum window.


Example 3:


Input: s = ""a"", t = ""aa""
Output: """"
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


 

Constraints:

 * m == s.length
 * n == t.length
 * 1 <= m, n <= 105
 * s and t consist of uppercase and lowercase English letters.

 

Follow up: Could you find an algorithm that runs in O(m + n) time?",Solutions (3.6K),14.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-window-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minWindow(self, s: str, t: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().minWindow(s, t)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def minWindow(self, s: str, t: str) -> str:
        pass"
False,0,0,77,combinations,Combinations,combinations,False,650937,972728,77,False,2,"Can you solve this real interview question? Combinations - Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:


Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.


Example 2:


Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.


 

Constraints:

 * 1 <= n <= 20
 * 1 <= k <= n",Solutions (3K),5.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/combinations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().combine(n, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def combine(self, n: int, k: int) -> List[List[int]]:
        from itertools import combinations
        return list(combinations(range(1, n+1), k) )"
False,0,0,78,subsets,Subsets,subsets,False,1401995,1873641,78,False,2,"Can you solve this real interview question? Subsets - Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:


Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Example 2:


Input: nums = [0]
Output: [[],[0]]


 

Constraints:

 * 1 <= nums.length <= 10
 * -10 <= nums[i] <= 10
 * All the numbers of nums are unique.",Solutions (7.5K),14K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().subsets(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(start, path):
            res.append(path)
            for i in range(start, len(nums)):
                backtrack(i + 1, path + [nums[i]])

        res = []
        backtrack(0, [])
        return res"
False,0,0,79,word-search,Word Search,word-search,False,1247102,3101148,79,False,2,"Can you solve this real interview question? Word Search - Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/04/word2.jpg]


Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg]


Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
Output: true


Example 3:

[https://assets.leetcode.com/uploads/2020/10/15/word3.jpg]


Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
Output: false


 

Constraints:

 * m == board.length
 * n = board[i].length
 * 1 <= m, n <= 6
 * 1 <= word.length <= 15
 * board and word consists of only lowercase and uppercase English letters.

 

Follow up: Could you use search pruning to make your solution faster with a larger board?",Solutions (4.4K),13K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/word-search/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    word: str = deserialize(""str"", read_line())
    ans = Solution().exist(board, word)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        def dfs(i, j, index):
            if index == len(word):
                return True
            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[index]:
                return False
            temp, board[i][j] = board[i][j], ''
            res = dfs(i + 1, j, index + 1) or dfs(i - 1, j, index + 1) or dfs(i, j + 1, index + 1) or dfs(i, j - 1, index + 1)
            board[i][j] = temp
            return res
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if dfs(i, j, 0):
                    return True
        return False"
False,0,0,80,remove-duplicates-from-sorted-array-ii,Remove Duplicates from Sorted Array II,remove-duplicates-from-sorted-array-ii,False,493907,945459,80,False,2,"Can you solve this real interview question? Remove Duplicates from Sorted Array II - Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place [https://en.wikipedia.org/wiki/In-place_algorithm] such that each unique element appears at most twice. The relative order of the elements should be kept the same.

Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.

Return k after placing the final result in the first k slots of nums.

Do not allocate extra space for another array. You must do this by modifying the input array in-place [https://en.wikipedia.org/wiki/In-place_algorithm] with O(1) extra memory.

Custom Judge:

The judge will test your solution with the following code:


int[] nums = [...]; // Input array
int[] expectedNums = [...]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums[i] == expectedNums[i];
}


If all assertions pass, then your solution will be accepted.

 

Example 1:


Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3,_]
Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


Example 2:


Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3,_,_]
Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -104 <= nums[i] <= 104
 * nums is sorted in non-decreasing order.",Solutions (3.3K),4.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().removeDuplicates(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return len(nums)
        
        slow = 2
        fast = 2
        
        while fast < len(nums):
            if nums[slow - 2] != nums[fast]:
                nums[slow] = nums[fast]
                slow += 1
            fast += 1
        
        return slow"
False,0,0,81,search-in-rotated-sorted-array-ii,Search in Rotated Sorted Array II,search-in-rotated-sorted-array-ii,False,500177,1400160,81,False,2,"Can you solve this real interview question? Search in Rotated Sorted Array II - There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true


Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false


 

Constraints:

 * 1 <= nums.length <= 5000
 * -104 <= nums[i] <= 104
 * nums is guaranteed to be rotated at some pivot.
 * -104 <= target <= 104

 

Follow up: This problem is similar to Search in Rotated Sorted Array [/problems/search-in-rotated-sorted-array/description/], but nums may contain duplicates. Would this affect the runtime complexity? How and why?",Solutions (2.3K),5.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().search(nums, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        start, end = 0, len(nums) - 1
        
        while start <= end:
            mid = (start + end) // 2
            if nums[mid] == target:
                return True
            
            while start < mid and nums[start] == nums[mid]:
                start += 1
                
            if nums[start] <= nums[mid]:
                if nums[start] <= target < nums[mid]:
                    end = mid - 1
                else:
                    start = mid + 1
            else:
                if nums[mid] < target <= nums[end]:
                    start = mid + 1
                else:
                    end = mid - 1
        
        return False"
False,0,0,84,largest-rectangle-in-histogram,Largest Rectangle in Histogram,largest-rectangle-in-histogram,False,649128,1525707,84,False,3,"Can you solve this real interview question? Largest Rectangle in Histogram - Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg]


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.


Example 2:

[https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg]


Input: heights = [2,4]
Output: 4


 

Constraints:

 * 1 <= heights.length <= 105
 * 0 <= heights[i] <= 104",Solutions (3K),13.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-rectangle-in-histogram/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    heights: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestRectangleArea(heights)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestRectangleArea(self, heights: List[int]) -> int:
        stack = []
        heights.append(0)
        res = 0
        for i in range(len(heights)):
            while stack and heights[i] < heights[stack[-1]]:
                h = heights[stack.pop()]
                w = i if not stack else i - stack[-1] - 1
                res = max(res, h * w)
            stack.append(i)
        return res"
False,0,0,85,maximal-rectangle,Maximal Rectangle,maximal-rectangle,False,338756,758101,85,False,3,"Can you solve this real interview question? Maximal Rectangle - Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg]


Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.


Example 2:


Input: matrix = [[""0""]]
Output: 0


Example 3:


Input: matrix = [[""1""]]
Output: 1


 

Constraints:

 * rows == matrix.length
 * cols == matrix[i].length
 * 1 <= row, cols <= 200
 * matrix[i][j] is '0' or '1'.",Solutions (1.6K),8.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/maximal-rectangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().maximalRectangle(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximalRectangle(self, matrix: List[List[str]]) -> int:
        # Add your solution here
        pass"
False,0,0,87,scramble-string,Scramble String,scramble-string,False,162754,450942,87,False,3,"Can you solve this real interview question? Scramble String - We can scramble a string s to get a string t using the following algorithm:

 1. If the length of the string is 1, stop.
 2. If the length of the string is > 1, do the following:
    * Split the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
    * Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
    * Apply step 1 recursively on each of the two substrings x and y.

Given two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.

 

Example 1:


Input: s1 = ""great"", s2 = ""rgeat""
Output: true
Explanation: One possible scenario applied on s1 is:
""great"" --> ""gr/eat"" // divide at random index.
""gr/eat"" --> ""gr/eat"" // random decision is not to swap the two substrings and keep them in order.
""gr/eat"" --> ""g/r / e/at"" // apply the same algorithm recursively on both substrings. divide at random index each of them.
""g/r / e/at"" --> ""r/g / e/at"" // random decision was to swap the first substring and to keep the second substring in the same order.
""r/g / e/at"" --> ""r/g / e/ a/t"" // again apply the algorithm recursively, divide ""at"" to ""a/t"".
""r/g / e/ a/t"" --> ""r/g / e/ a/t"" // random decision is to keep both substrings in the same order.
The algorithm stops now, and the result string is ""rgeat"" which is s2.
As one possible scenario led s1 to be scrambled to s2, we return true.


Example 2:


Input: s1 = ""abcde"", s2 = ""caebd""
Output: false


Example 3:


Input: s1 = ""a"", s2 = ""a""
Output: true


 

Constraints:

 * s1.length == s2.length
 * 1 <= s1.length <= 30
 * s1 and s2 consist of lowercase English letters.",Solutions (867),2.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/scramble-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().isScramble(s1, s2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isScramble(self, s1: str, s2: str) -> bool:
        if len(s1) != len(s2):
            return False
        if s1 == s2:
            return True
        if sorted(s1) != sorted(s2):
            return False
        
        n = len(s1)
        dp = [[[False] * n for _ in range(n)] for _ in range(n)]

        for i in range(n):
            for j in range(n):
                dp[0][i][j] = s1[i] == s2[j]

        for l in range(2, n + 1):
            for i in range(n - l + 1):
                for j in range(n - l + 1):
                    for k in range(1, l):
                        if (dp[k - 1][i][j] and dp[l - k - 1][i + k][j + k]) or \
                           (dp[k - 1][i][j + l - k] and dp[l - k - 1][i + k][j]):
                            dp[l - 1][i][j] = True
                            break
        return dp[n - 1][0][0]"
False,0,0,88,merge-sorted-arrays,Merge Sorted Array,merge-sorted-array,False,1934171,4156405,88,False,1,"Can you solve this real interview question? Merge Sorted Array - You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:


Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.


Example 2:


Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].


Example 3:


Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.


 

Constraints:

 * nums1.length == m + n
 * nums2.length == n
 * 0 <= m, n <= 200
 * 1 <= m + n <= 200
 * -109 <= nums1[i], nums2[j] <= 109

 

Follow up: Can you come up with an algorithm that runs in O(m + n) time?",Solutions (12K),9.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/merge-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """"""
        Do not return anything, modify nums1 in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    merge(nums1, m, nums2, n)
    ans = nums1
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        nums1[:] = sorted(nums1[:m] + nums2)"
False,0,0,89,gray-code,Gray Code,gray-code,False,258692,453062,89,False,2,"Can you solve this real interview question? Gray Code - An n-bit gray code sequence is a sequence of 2n integers where:

 * Every integer is in the inclusive range [0, 2n - 1],
 * The first integer is 0,
 * An integer appears no more than once in the sequence,
 * The binary representation of every pair of adjacent integers differs by exactly one bit, and
 * The binary representation of the first and last integers differs by exactly one bit.

Given an integer n, return any valid n-bit gray code sequence.

 

Example 1:


Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit


Example 2:


Input: n = 1
Output: [0,1]


 

Constraints:

 * 1 <= n <= 16",Solutions (1.5K),1.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/gray-code/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def grayCode(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().grayCode(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def grayCode(self, n: int) -> List[int]:
        return [i ^ (i >> 1) for i in range(2 ** n)]"
False,0,0,90,subsets-ii,Subsets II,subsets-ii,False,678414,1215149,90,False,2,"Can you solve this real interview question? Subsets II - Given an integer array nums that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]


Example 2:

Input: nums = [0]
Output: [[],[0]]


 

Constraints:

 * 1 <= nums.length <= 10
 * -10 <= nums[i] <= 10",Solutions (3.6K),7.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/subsets-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().subsetsWithDup(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        nums.sort()

        def backtrack(start, path):
            res.append(path[:])
            for i in range(start, len(nums)):
                if i > start and nums[i] == nums[i-1]:
                    continue
                path.append(nums[i])
                backtrack(i+1, path)
                path.pop()

        backtrack(0, [])
        return res"
False,0,0,91,decode-ways,Decode Ways,decode-ways,False,992405,3035849,91,False,2,"Can you solve this real interview question? Decode Ways - A message containing letters from A-Z can be encoded into numbers using the following mapping:


'A' -> ""1""
'B' -> ""2""
...
'Z' -> ""26""


To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, ""11106"" can be mapped into:

 * ""AAJF"" with the grouping (1 1 10 6)
 * ""KJF"" with the grouping (11 10 6)

Note that the grouping (1 11 06) is invalid because ""06"" cannot be mapped into 'F' since ""6"" is different from ""06"".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: s = ""12""
Output: 2
Explanation: ""12"" could be decoded as ""AB"" (1 2) or ""L"" (12).


Example 2:


Input: s = ""226""
Output: 3
Explanation: ""226"" could be decoded as ""BZ"" (2 26), ""VF"" (22 6), or ""BBF"" (2 2 6).


Example 3:


Input: s = ""06""
Output: 0
Explanation: ""06"" cannot be mapped to ""F"" because of the leading zero (""6"" is different from ""06"").


 

Constraints:

 * 1 <= s.length <= 100
 * s contains only digits and may contain leading zero(s).",Solutions (4.4K),9.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-ways/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numDecodings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numDecodings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numDecodings(self, s: str) -> int:
        if s[0] == '0':
            return 0
        dp = [0] * (len(s) + 1)
        dp[0] = 1
        dp[1] = 1 if s[0] != '0' else 0
        
        for i in range(2, len(s) + 1):
            if 1 <= int(s[i-1:i]) <= 9:
                dp[i] += dp[i-1]
            if 10 <= int(s[i-2:i]) <= 26:
                dp[i] += dp[i-2]
        
        return dp[-1]"
False,0,0,93,restore-ip-addresses,Restore IP Addresses,restore-ip-addresses,False,395515,835524,93,False,2,"Can you solve this real interview question? Restore IP Addresses - A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

 * For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses, but ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses.

Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

 

Example 1:


Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]


Example 2:


Input: s = ""0000""
Output: [""0.0.0.0""]


Example 3:


Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]


 

Constraints:

 * 1 <= s.length <= 20
 * s consists of digits only.",Solutions (2.7K),4.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/restore-ip-addresses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().restoreIpAddresses(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        def backtrack(start, path):
            nonlocal res
            
            if len(path) == 4:
                if start == len(s):
                    res.append(""."".join(path))
                return

            for size in range(1, 4):
                if start + size > len(s):
                    break
                
                if size > 1 and s[start] == '0':
                    break
                
                if int(s[start:start+size]) <= 255:
                    backtrack(start + size, path + [s[start:start+size]])
        
        res = []
        backtrack(0, [])
        return res"
False,0,0,96,unique-binary-search-trees,Unique Binary Search Trees,unique-binary-search-trees,False,561029,940926,96,False,2,"Can you solve this real interview question? Unique Binary Search Trees - Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg]


Input: n = 3
Output: 5


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 19",Solutions (3K),8.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-binary-search-trees/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTrees(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numTrees(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTrees(self, n: int) -> int:
        dp = [0] * (n+1)
        dp[0] = dp[1] = 1
        
        for i in range(2, n+1):
            for j in range(1, i+1):
                dp[i] += dp[j-1] * dp[i-j]
        
        return dp[n]"
False,0,0,97,interleaving-strings,Interleaving String,interleaving-string,False,369771,990737,97,False,2,"Can you solve this real interview question? Interleaving String - Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.

An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:

 * s = s1 + s2 + ... + sn
 * t = t1 + t2 + ... + tm
 * |n - m| <= 1
 * The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...

Note: a + b is the concatenation of strings a and b.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg]


Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
Output: true
Explanation: One way to obtain s3 is:
Split s1 into s1 = ""aa"" + ""bc"" + ""c"", and s2 into s2 = ""dbbc"" + ""a"".
Interleaving the two splits, we get ""aa"" + ""dbbc"" + ""bc"" + ""a"" + ""c"" = ""aadbbcbcac"".
Since s3 can be obtained by interleaving s1 and s2, we return true.


Example 2:


Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
Output: false
Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.


Example 3:


Input: s1 = """", s2 = """", s3 = """"
Output: true


 

Constraints:

 * 0 <= s1.length, s2.length <= 100
 * 0 <= s3.length <= 200
 * s1, s2, and s3 consist of lowercase English letters.

 

Follow up: Could you solve it using only O(s2.length) additional memory space?",Solutions (2.1K),6.3K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/interleaving-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    s3: str = deserialize(""str"", read_line())
    ans = Solution().isInterleave(s1, s2, s3)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        m, n = len(s1), len(s2)
        
        if m + n != len(s3):
            return False
        
        dp = [False] * (n + 1)
        
        for i in range(m + 1):
            for j in range(n + 1):
                if i == 0 and j == 0:
                    dp[j] = True
                elif i == 0:
                    dp[j] = dp[j - 1] and s2[j - 1] == s3[i + j - 1]
                elif j == 0:
                    dp[j] = dp[j] and s1[i - 1] == s3[i + j - 1]
                else:
                    dp[j] = (dp[j] and s1[i - 1] == s3[i + j - 1]) or (dp[j - 1] and s2[j - 1] == s3[i + j - 1])
        
        return dp[n]"
False,0,0,115,distinct-subsequences,Distinct Subsequences,distinct-subsequences,False,283986,639490,115,False,3,"Can you solve this real interview question? Distinct Subsequences - Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:


Input: s = ""rabbbit"", t = ""rabbit""
Output: 3
Explanation:
As shown below, there are 3 ways you can generate ""rabbit"" from s.
rabbbit
rabbbit
rabbbit


Example 2:


Input: s = ""babgbag"", t = ""bag""
Output: 5
Explanation:
As shown below, there are 5 ways you can generate ""bag"" from s.
babgbag
babgbag
babgbag
babgbag
babgbag

 

Constraints:

 * 1 <= s.length, t.length <= 1000
 * s and t consist of English letters.",Solutions (1.7K),5.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/distinct-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().numDistinct(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]
        for i in range(len(s) + 1):
            dp[i][0] = 1
        for i in range(1, len(s) + 1):
            for j in range(1, len(t) + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]
                else:
                    dp[i][j] = dp[i - 1][j]
        return dp[len(s)][len(t)]"
False,0,0,118,pascals-triangle,Pascal's Triangle,pascals-triangle,False,1175797,1664803,118,False,1,"Can you solve this real interview question? Pascal's Triangle - Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]

 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]


Example 2:

Input: numRows = 1
Output: [[1]]


 

Constraints:

 * 1 <= numRows <= 30",Solutions (8.8K),9.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/pascals-triangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    numRows: int = deserialize(""int"", read_line())
    ans = Solution().generate(numRows)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        triangle = []
        for i in range(numRows):
            row = [None for _ in range(i + 1)]
            row[0], row[-1] = 1, 1
            for j in range(1, len(row) - 1):
                row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
            triangle.append(row)
        return triangle"
False,0,0,119,pascals-triangle-ii,Pascal's Triangle II,pascals-triangle-ii,False,659219,1086482,119,False,1,"Can you solve this real interview question? Pascal's Triangle II - Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

[https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif]

 

Example 1:

Input: rowIndex = 3
Output: [1,3,3,1]


Example 2:

Input: rowIndex = 0
Output: [1]


Example 3:

Input: rowIndex = 1
Output: [1,1]


 

Constraints:

 * 0 <= rowIndex <= 33

 

Follow up: Could you optimize your algorithm to use only O(rowIndex) extra space?",Solutions (4.5K),3.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/pascals-triangle-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    rowIndex: int = deserialize(""int"", read_line())
    ans = Solution().getRow(rowIndex)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        result = [1] * (rowIndex + 1)
        for i in range(1, rowIndex):
            result[i] = int(result[i - 1] * (rowIndex - i + 1) / i)
        return result"
False,0,0,120,triangle,Triangle,triangle,False,575104,1056762,120,False,2,"Can you solve this real interview question? Triangle - Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:


Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).


Example 2:


Input: triangle = [[-10]]
Output: -10


 

Constraints:

 * 1 <= triangle.length <= 200
 * triangle[0].length == 1
 * triangle[i].length == triangle[i - 1].length + 1
 * -104 <= triangle[i][j] <= 104

 

Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?",Solutions (4.3K),7.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/triangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    triangle: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumTotal(triangle)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTotal(self, triangle: List[List[int]]) -> int:
        n = len(triangle)
        dp = triangle[-1]
        
        for i in range(n - 2, -1, -1):
            for j in range(len(triangle[i])):
                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])
        
        return dp[0]"
False,0,0,121,best-time-to-buy-and-sell-stock,Best Time to Buy and Sell Stock,best-time-to-buy-and-sell-stock,False,3191917,5874759,121,False,1,"Can you solve this real interview question? Best Time to Buy and Sell Stock - You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:


Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Example 2:


Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.


 

Constraints:

 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 104",Solutions (10.7K),24.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfit(prices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        min_price = float('inf')
        max_profit = 0
        
        for price in prices:
            min_price = min(min_price, price)
            max_profit = max(max_profit, price - min_price)
        
        return max_profit"
False,0,0,122,best-time-to-buy-and-sell-stock-ii,Best Time to Buy and Sell Stock II,best-time-to-buy-and-sell-stock-ii,False,1399680,2192218,122,False,2,"Can you solve this real interview question? Best Time to Buy and Sell Stock II - You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:


Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.


Example 2:


Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.


Example 3:


Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.


 

Constraints:

 * 1 <= prices.length <= 3 * 104
 * 0 <= prices[i] <= 104",Solutions (5.8K),10.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfit(prices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                max_profit += prices[i] - prices[i - 1]
        return max_profit"
False,0,0,123,best-time-to-buy-and-sell-stock-iii,Best Time to Buy and Sell Stock III,best-time-to-buy-and-sell-stock-iii,False,468001,1030198,123,False,3,"Can you solve this real interview question? Best Time to Buy and Sell Stock III - You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:


Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.

Example 2:


Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.


Example 3:


Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


 

Constraints:

 * 1 <= prices.length <= 105
 * 0 <= prices[i] <= 105",Solutions (1.9K),7.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfit(prices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        buy1 = buy2 = float('inf')
        sell1 = sell2 = 0
        
        for price in prices:
            buy1 = min(buy1, price)
            sell1 = max(sell1, price - buy1)
            buy2 = min(buy2, price - sell1)
            sell2 = max(sell2, price - buy2)
        
        return sell2"
False,0,0,125,valid-palindrome,Valid Palindrome,valid-palindrome,False,1847921,4169649,125,False,1,"Can you solve this real interview question? Valid Palindrome - A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:


Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.


Example 2:


Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.


Example 3:


Input: s = "" ""
Output: true
Explanation: s is an empty string """" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


 

Constraints:

 * 1 <= s.length <= 2 * 105
 * s consists only of printable ASCII characters.",Solutions (9.2K),6.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPalindrome(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().isPalindrome(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPalindrome(self, s: str) -> bool:
        s = ''.join(e for e in s if e.isalnum()).lower()
        return s == s[::-1]"
False,0,0,126,word-ladder-ii,Word Ladder II,word-ladder-ii,False,339488,1234299,126,False,3,"Can you solve this real interview question? Word Ladder II - A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

 * Every adjacent pair of words differs by a single letter.
 * Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
 * sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].

 

Example 1:


Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog""
""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""


Example 2:


Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


 

Constraints:

 * 1 <= beginWord.length <= 5
 * endWord.length == beginWord.length
 * 1 <= wordList.length <= 500
 * wordList[i].length == beginWord.length
 * beginWord, endWord, and wordList[i] consist of lowercase English letters.
 * beginWord != endWord
 * All the words in wordList are unique.
 * The sum of all shortest transformation sequences does not exceed 105.",Solutions (1.4K),5.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/word-ladder-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    beginWord: str = deserialize(""str"", read_line())
    endWord: str = deserialize(""str"", read_line())
    wordList: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findLadders(beginWord, endWord, wordList)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        import string
        import collections
        
        wordList = set(wordList)
        res = []
        layer = {}
        layer[beginWord] = [[beginWord]]
        
        while layer:
            newLayer = collections.defaultdict(list)
            for word in layer:
                if word == endWord:
                    res.extend(k for k in layer[word])
                else:
                    for i in range(len(word)):
                        for c in string.ascii_lowercase:
                            nextWord = word[:i] + c + word[i+1:]
                            if nextWord in wordList:
                                newLayer[nextWord] += [j + [nextWord] for j in layer[word]]
            
            wordList -= set(newLayer.keys())
            layer = newLayer
        
        return res"
False,0,0,127,word-ladder,Word Ladder,word-ladder,False,895785,2413529,127,False,3,"Can you solve this real interview question? Word Ladder - A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:

 * Every adjacent pair of words differs by a single letter.
 * Every si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.
 * sk == endWord

Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

 

Example 1:


Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: One shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long.


Example 2:


Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: 0
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


 

Constraints:

 * 1 <= beginWord.length <= 10
 * endWord.length == beginWord.length
 * 1 <= wordList.length <= 5000
 * wordList[i].length == beginWord.length
 * beginWord, endWord, and wordList[i] consist of lowercase English letters.
 * beginWord != endWord
 * All the words in wordList are unique.",Solutions (2.7K),10.1K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/word-ladder/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    beginWord: str = deserialize(""str"", read_line())
    endWord: str = deserialize(""str"", read_line())
    wordList: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().ladderLength(beginWord, endWord, wordList)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        import string
        from collections import deque

        wordList = set(wordList)
        queue = deque([(beginWord, 1)])

        while queue:
            word, length = queue.popleft()
            if word == endWord:
                return length
            for i in range(len(word)):
                for c in string.ascii_lowercase:
                    next_word = word[:i] + c + word[i + 1:]
                    if next_word in wordList:
                        wordList.remove(next_word)
                        queue.append((next_word, length + 1))
        
        return 0"
False,0,0,128,longest-consecutive-sequence,Longest Consecutive Sequence,longest-consecutive-sequence,False,1066468,2196950,128,False,2,"Can you solve this real interview question? Longest Consecutive Sequence - Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:


Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.


Example 2:


Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9


 

Constraints:

 * 0 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (5.7K),15.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-consecutive-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestConsecutive(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        num_set = set(nums)
        longest_streak = 0
        
        for num in num_set:
            if num - 1 not in num_set:
                current_num = num
                current_streak = 1
                
                while current_num + 1 in num_set:
                    current_num += 1
                    current_streak += 1
                    
                longest_streak = max(longest_streak, current_streak)
        
        return longest_streak"
False,0,0,130,surrounded-regions,Surrounded Regions,surrounded-regions,False,519335,1415711,130,False,2,"Can you solve this real interview question? Surrounded Regions - Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg]


Input: board = [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"",""O"",""X""],[""X"",""O"",""X"",""X""]]
Output: [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""O"",""X"",""X""]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.


Example 2:


Input: board = [[""X""]]
Output: [[""X""]]


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m, n <= 200
 * board[i][j] is 'X' or 'O'.",Solutions (3.6K),6.8K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/surrounded-regions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    solve(board)
    ans = board
    print(""\noutput:"", serialize(ans, ""List[List[str]]""))
","class Solution:
    def solve(self, board: List[List[str]]) -> None:
        if not board:
            return
        
        rows, cols = len(board), len(board[0])
        
        def dfs(r, c):
            if r < 0 or c < 0 or r >= rows or c >= cols or board[r][c] != 'O':
                return
            board[r][c] = '*'
            dfs(r-1, c)
            dfs(r+1, c)
            dfs(r, c-1)
            dfs(r, c+1)
        
        for i in range(rows):
            for j in range(cols):
                if (i == 0 or j == 0 or i == rows-1 or j == cols-1) and board[i][j] == 'O':
                    dfs(i, j)
        
        for i in range(rows):
            for j in range(cols):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == '*':
                    board[i][j] = 'O'"
False,0,0,131,palindrome-partitioning,Palindrome Partitioning,palindrome-partitioning,False,626594,967447,131,False,2,"Can you solve this real interview question? Palindrome Partitioning - Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]


Example 2:

Input: s = ""a""
Output: [[""a""]]


 

Constraints:

 * 1 <= s.length <= 16
 * s contains only lowercase English letters.",Solutions (2.9K),10.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-partitioning/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().partition(s)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def partition(self, s: str) -> List[List[str]]:
        def is_palindrome(s):
            return s == s[::-1]
        
        def backtrack(start, path):
            if start == len(s):
                res.append(path[:])
            
            for end in range(start, len(s)):
                if is_palindrome(s[start:end+1]):
                    path.append(s[start:end+1])
                    backtrack(end+1, path)
                    path.pop()
        
        res = []
        backtrack(0, [])
        return res"
False,0,0,132,palindrome-partitioning-ii,Palindrome Partitioning II,palindrome-partitioning-ii,False,237629,703940,132,False,3,"Can you solve this real interview question? Palindrome Partitioning II - Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

 

Example 1:


Input: s = ""aab""
Output: 1
Explanation: The palindrome partitioning [""aa"",""b""] could be produced using 1 cut.


Example 2:


Input: s = ""a""
Output: 0


Example 3:


Input: s = ""ab""
Output: 1


 

Constraints:

 * 1 <= s.length <= 2000
 * s consists of lowercase English letters only.",Solutions (1.1K),4.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-partitioning-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCut(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minCut(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCut(self, s: str) -> int:
        n = len(s)
        cut = [0] * n
        dp = [[False] * n for _ in range(n)]

        for i in range(n):
            min_cut = i
            for j in range(i + 1):
                if s[i] == s[j] and (i - j <= 1 or dp[j + 1][i - 1]):
                    dp[j][i] = True
                    min_cut = 0 if j == 0 else min(min_cut, cut[j - 1] + 1)
            cut[i] = min_cut

        return cut[n - 1]"
False,0,0,134,gas-station,Gas Station,gas-station,False,574841,1247935,134,False,2,"Can you solve this real interview question? Gas Station - There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique

 

Example 1:


Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.


Example 2:


Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.


 

Constraints:

 * n == gas.length == cost.length
 * 1 <= n <= 105
 * 0 <= gas[i], cost[i] <= 104",Solutions (3.3K),9.6K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/gas-station/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    gas: List[int] = deserialize(""List[int]"", read_line())
    cost: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canCompleteCircuit(gas, cost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        total_tank = 0
        current_tank = 0
        starting_station = 0
        
        for i in range(len(gas)):
            total_tank += gas[i] - cost[i]
            current_tank += gas[i] - cost[i]
            
            if current_tank < 0:
                starting_station = i + 1
                current_tank = 0
                
        return starting_station if total_tank >= 0 else -1"
False,0,0,135,candy,Candy,candy,False,301088,734725,135,False,3,"Can you solve this real interview question? Candy - There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

 * Each child must have at least one candy.
 * Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:


Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.


Example 2:


Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.


 

Constraints:

 * n == ratings.length
 * 1 <= n <= 2 * 104
 * 0 <= ratings[i] <= 2 * 104",Solutions (1.8K),5.2K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/candy/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def candy(self, ratings: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ratings: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().candy(ratings)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def candy(self, ratings: List[int]) -> int:
        pass"
False,0,0,136,single-number,Single Number,single-number,False,2100916,2975106,136,False,1,"Can you solve this real interview question? Single Number - Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1


Example 2:

Input: nums = [4,1,2,1,2]
Output: 4


Example 3:

Input: nums = [1]
Output: 1


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -3 * 104 <= nums[i] <= 3 * 104
 * Each element in the array appears twice except for one element which appears only once.",Solutions (7.4K),13.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/single-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().singleNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        res = 0
        for num in nums:
            res ^= num
        return res"
False,0,0,137,single-number-ii,Single Number II,single-number-ii,False,403724,690969,137,False,2,"Can you solve this real interview question? Single Number II - Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,3,2]
Output: 3


Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -231 <= nums[i] <= 231 - 1
 * Each element in nums appears exactly three times except for one element which appears once.",Solutions (2.3K),5.4K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/single-number-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().singleNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        ones = 0
        twos = 0
        for num in nums:
            ones = (ones ^ num) & ~twos
            twos = (twos ^ num) & ~ones
        return ones"
False,0,0,139,word-break,Word Break,word-break,False,1305489,2865395,139,False,2,"Can you solve this real interview question? Word Break - Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:


Input: s = ""leetcode"", wordDict = [""leet"",""code""]
Output: true
Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".


Example 2:


Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
Output: true
Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"".
Note that you are allowed to reuse a dictionary word.


Example 3:


Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: false


 

Constraints:

 * 1 <= s.length <= 300
 * 1 <= wordDict.length <= 1000
 * 1 <= wordDict[i].length <= 20
 * s and wordDict[i] consist of only lowercase English letters.
 * All the strings of wordDict are unique.",Solutions (4.4K),13.7K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/word-break/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    wordDict: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().wordBreak(s, wordDict)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dp = [False] * (len(s) + 1)
        dp[0] = True
        for i in range(1, len(s) + 1):
            for j in range(i):
                if dp[j] and s[j:i] in wordDict:
                    dp[i] = True
                    break
        return dp[len(s)]"
False,0,0,140,word-break-ii,Word Break II,word-break-ii,False,508149,1123854,140,False,3,"Can you solve this real interview question? Word Break II - Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:


Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]


Example 2:


Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
Explanation: Note that you are allowed to reuse a dictionary word.


Example 3:


Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: []


 

Constraints:

 * 1 <= s.length <= 20
 * 1 <= wordDict.length <= 1000
 * 1 <= wordDict[i].length <= 10
 * s and wordDict[i] consist of only lowercase English letters.
 * All the strings of wordDict are unique.",Solutions (3.3K),5.9K,"# Created by asetti2002 at 2024/04/17 02:19
# leetgo: 1.4.3
# https://leetcode.com/problems/word-break-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    wordDict: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().wordBreak(s, wordDict)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> List[str]:
        def dfs(start, path):
            if start == len(s):
                res.append(' '.join(path))
                return
            for word in wordDict:
                if s.startswith(word, start):
                    dfs(start + len(word), path + [word])
        
        res = []
        dfs(0, [])
        return res"
False,0,0,149,max-points-on-a-line,Max Points on a Line,max-points-on-a-line,False,333702,1329773,149,False,3,"Can you solve this real interview question? Max Points on a Line - Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg]


Input: points = [[1,1],[2,2],[3,3]]
Output: 3


Example 2:

[https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg]


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4


 

Constraints:

 * 1 <= points.length <= 300
 * points[i].length == 2
 * -104 <= xi, yi <= 104
 * All the points are unique.",Solutions (2.6K),3.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/max-points-on-a-line/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxPoints(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        pass"
False,0,0,150,evaluate-reverse-polish-notation,Evaluate Reverse Polish Notation,evaluate-reverse-polish-notation,False,635533,1390373,150,False,2,"Can you solve this real interview question? Evaluate Reverse Polish Notation - You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation [http://en.wikipedia.org/wiki/Reverse_Polish_notation].

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

 * The valid operators are '+', '-', '*', and '/'.
 * Each operand may be an integer or another expression.
 * The division between two integers always truncates toward zero.
 * There will not be any division by zero.
 * The input represents a valid arithmetic expression in a reverse polish notation.
 * The answer and all the intermediate calculations can be represented in a 32-bit integer.

 

Example 1:


Input: tokens = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9


Example 2:


Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6


Example 3:


Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22


 

Constraints:

 * 1 <= tokens.length <= 104
 * tokens[i] is either an operator: ""+"", ""-"", ""*"", or ""/"", or an integer in the range [-200, 200].",Solutions (4.1K),5.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/evaluate-reverse-polish-notation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tokens: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().evalRPN(tokens)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack = []
        for token in tokens:
            if token.isdigit() or (token[1:].isdigit() and token[0] == '-'):
                stack.append(int(token))
            else:
                b = stack.pop()
                a = stack.pop()
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                else:
                    stack.append(int(a / b))
        return stack[0]"
False,0,0,151,reverse-words-in-a-string,Reverse Words in a String,reverse-words-in-a-string,False,899769,2753148,151,False,2,"Can you solve this real interview question? Reverse Words in a String - Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.

 

Example 1:


Input: s = ""the sky is blue""
Output: ""blue is sky the""


Example 2:


Input: s = ""  hello world  ""
Output: ""world hello""
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:


Input: s = ""a good   example""
Output: ""example good a""
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.


 

Constraints:

 * 1 <= s.length <= 104
 * s contains English letters (upper-case and lower-case), digits, and spaces ' '.
 * There is at least one word in s.

 

Follow-up: If the string data type is mutable in your language, can you solve it in-place with O(1) extra space?",Solutions (6.4K),5.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-words-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseWords(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reverseWords(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseWords(self, s: str) -> str:
        return ' '.join(s.split()[::-1])"
False,0,0,152,maximum-product-subarray,Maximum Product Subarray,maximum-product-subarray,False,970697,2784516,152,False,2,"Can you solve this real interview question? Maximum Product Subarray - Given an integer array nums, find a subarray that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:


Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.


Example 2:


Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * -10 <= nums[i] <= 10
 * The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.",Solutions (3.7K),15.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProduct(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        max_product = min_product = result = nums[0]
        
        for num in nums[1:]:
            if num < 0:
                max_product, min_product = min_product, max_product
            
            max_product = max(num, max_product * num)
            min_product = min(num, min_product * num)
            
            result = max(result, max_product)
        
        return result"
False,0,0,153,find-minimum-in-rotated-sorted-array,Find Minimum in Rotated Sorted Array,find-minimum-in-rotated-sorted-array,False,1248319,2556306,153,False,2,"Can you solve this real interview question? Find Minimum in Rotated Sorted Array - Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

 * [4,5,6,7,0,1,2] if it was rotated 4 times.
 * [0,1,2,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:


Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.


Example 2:


Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.


Example 3:


Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 


 

Constraints:

 * n == nums.length
 * 1 <= n <= 5000
 * -5000 <= nums[i] <= 5000
 * All the integers of nums are unique.
 * nums is sorted and rotated between 1 and n times.",Solutions (5.9K),10.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMin(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMin(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMin(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if nums[mid] < nums[right]:
                right = mid
            else:
                left = mid + 1
        return nums[left]"
False,0,0,154,find-minimum-in-rotated-sorted-array-ii,Find Minimum in Rotated Sorted Array II,find-minimum-in-rotated-sorted-array-ii,False,378750,871140,154,False,3,"Can you solve this real interview question? Find Minimum in Rotated Sorted Array II - Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

 * [4,5,6,7,0,1,4] if it was rotated 4 times.
 * [0,1,4,4,5,6,7] if it was rotated 7 times.

Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [1,3,5]
Output: 1


Example 2:

Input: nums = [2,2,2,0,1]
Output: 0


 

Constraints:

 * n == nums.length
 * 1 <= n <= 5000
 * -5000 <= nums[i] <= 5000
 * nums is sorted and rotated between 1 and n times.

 

Follow up: This problem is similar to Find Minimum in Rotated Sorted Array [https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/], but nums may contain duplicates. Would this affect the runtime complexity? How and why?

 ",Solutions (2K),3.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMin(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMin(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMin(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right and nums[left] >= nums[right]:
            mid = (left + right) // 2
            if nums[mid] > nums[right]:
                left = mid + 1
            elif nums[mid] < nums[left]:
                right = mid
            else:
                left += 1
        return nums[left]"
False,0,0,162,find-peak-element,Find Peak Element,find-peak-element,False,987569,2145534,162,False,2,"Can you solve this real interview question? Find Peak Element - A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

 

Example 1:


Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:


Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.

 

Constraints:

 * 1 <= nums.length <= 1000
 * -231 <= nums[i] <= 231 - 1
 * nums[i] != nums[i + 1] for all valid i.",Solutions (4.5K),8.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/find-peak-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findPeakElement(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if nums[mid] < nums[mid + 1]:
                left = mid + 1
            else:
                right = mid
        return left"
False,0,0,164,maximum-gap,Maximum Gap,maximum-gap,False,164630,380381,164,False,3,"Can you solve this real interview question? Maximum Gap - Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.

 

Example 1:


Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.


Example 2:


Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109",Solutions (943),2.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-gap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumGap(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumGap(self, nums: List[int]) -> int:
        pass"
False,0,0,165,compare-version-numbers,Compare Version Numbers,compare-version-numbers,False,346024,969624,165,False,2,"Can you solve this real interview question? Compare Version Numbers - Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:

 * If version1 < version2, return -1.
 * If version1 > version2, return 1.
 * Otherwise, return 0.

 

Example 1:


Input: version1 = ""1.01"", version2 = ""1.001""
Output: 0
Explanation: Ignoring leading zeroes, both ""01"" and ""001"" represent the same integer ""1"".


Example 2:


Input: version1 = ""1.0"", version2 = ""1.0.0""
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as ""0"".


Example 3:


Input: version1 = ""0.1"", version2 = ""1.1""
Output: -1
Explanation: version1's revision 0 is ""0"", while version2's revision 0 is ""1"". 0 < 1, so version1 < version2.


 

Constraints:

 * 1 <= version1.length, version2.length <= 500
 * version1 and version2 only contain digits and '.'.
 * version1 and version2 are valid version numbers.
 * All the given revisions in version1 and version2 can be stored in a 32-bit integer.",Solutions (2.4K),1.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/compare-version-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    version1: str = deserialize(""str"", read_line())
    version2: str = deserialize(""str"", read_line())
    ans = Solution().compareVersion(version1, version2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1 = list(map(int, version1.split('.')))
        v2 = list(map(int, version2.split('.'))

        while len(v1) < len(v2):
            v1.append(0)
        while len(v2) < len(v1):
            v2.append(0)

        for i in range(len(v1)):
            if v1[i] < v2[i]:
                return -1
            elif v1[i] > v2[i]:
                return 1

        return 0"
False,0,0,166,fraction-to-recurring-decimal,Fraction to Recurring Decimal,fraction-to-recurring-decimal,False,204633,842091,166,False,2,"Can you solve this real interview question? Fraction to Recurring Decimal - Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:


Input: numerator = 1, denominator = 2
Output: ""0.5""


Example 2:


Input: numerator = 2, denominator = 1
Output: ""2""


Example 3:


Input: numerator = 4, denominator = 333
Output: ""0.(012)""


 

Constraints:

 * -231 <= numerator, denominator <= 231 - 1
 * denominator != 0",Solutions (734),1.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/fraction-to-recurring-decimal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    numerator: int = deserialize(""int"", read_line())
    denominator: int = deserialize(""int"", read_line())
    ans = Solution().fractionToDecimal(numerator, denominator)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def fractionToDecimal(self, numerator: int, denominator: int) -> str:
        answer = """"
        return answer"
False,0,0,167,two-sum-ii-input-array-is-sorted,Two Sum II - Input Array Is Sorted,two-sum-ii-input-array-is-sorted,False,1404883,2340653,167,False,2,"Can you solve this real interview question? Two Sum II - Input Array Is Sorted - Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:


Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].


Example 2:


Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].


Example 3:


Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].


 

Constraints:

 * 2 <= numbers.length <= 3 * 104
 * -1000 <= numbers[i] <= 1000
 * numbers is sorted in non-decreasing order.
 * -1000 <= target <= 1000
 * The tests are generated such that there is exactly one solution.",Solutions (6.8K),9.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    numbers: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().twoSum(numbers, target)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        left, right = 0, len(numbers) - 1
        while left < right:
            total = numbers[left] + numbers[right]
            if total == target:
                return [left + 1, right + 1]
            elif total < target:
                left += 1
            else:
                right -= 1"
False,0,0,168,,Excel Sheet Column Title,excel-sheet-column-title,False,369273,1041687,168,False,1,"Can you solve this real interview question? Excel Sheet Column Title - Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

For example:


A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...


 

Example 1:


Input: columnNumber = 1
Output: ""A""


Example 2:


Input: columnNumber = 28
Output: ""AB""


Example 3:


Input: columnNumber = 701
Output: ""ZY""


 

Constraints:

 * 1 <= columnNumber <= 231 - 1",Solutions (2K),3.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/excel-sheet-column-title/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def convertToTitle(self, columnNumber: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    columnNumber: int = deserialize(""int"", read_line())
    ans = Solution().convertToTitle(columnNumber)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def convertToTitle(self, columnNumber: int) -> str:
        result = """"
        while columnNumber > 0:
            columnNumber -= 1
            result = chr(columnNumber % 26 + 65) + result
            columnNumber //= 26
        return result"
False,0,0,169,majority-element,Majority Element,majority-element,False,1654778,2589174,169,False,1,"Can you solve this real interview question? Majority Element - Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3


Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


 

Constraints:

 * n == nums.length
 * 1 <= n <= 5 * 104
 * -109 <= nums[i] <= 109

 

Follow-up: Could you solve the problem in linear time and in O(1) space?",Solutions (7.7K),14.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/majority-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().majorityElement(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        count = 0
        candidate = None
        
        for num in nums:
            if count == 0:
                candidate = num
            count += 1 if num == candidate else -1
            
        return candidate"
False,0,0,171,excel-sheet-column-number,Excel Sheet Column Number,excel-sheet-column-number,False,585814,945021,171,False,1,"Can you solve this real interview question? Excel Sheet Column Number - Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.

For example:


A -> 1
B -> 2
C -> 3
...
Z -> 26
AA -> 27
AB -> 28 
...


 

Example 1:


Input: columnTitle = ""A""
Output: 1


Example 2:


Input: columnTitle = ""AB""
Output: 28


Example 3:


Input: columnTitle = ""ZY""
Output: 701


 

Constraints:

 * 1 <= columnTitle.length <= 7
 * columnTitle consists only of uppercase English letters.
 * columnTitle is in the range [""A"", ""FXSHRXW""].",Solutions (3.8K),4.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/excel-sheet-column-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def titleToNumber(self, columnTitle: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    columnTitle: str = deserialize(""str"", read_line())
    ans = Solution().titleToNumber(columnTitle)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def titleToNumber(self, columnTitle: str) -> int:
        result = 0
        for i in range(len(columnTitle)):
            result = result * 26 + ord(columnTitle[i]) - ord('A') + 1
        return result"
False,0,0,172,factorial-trailing-zeroes,Factorial Trailing Zeroes,factorial-trailing-zeroes,False,361825,858119,172,False,2,"Can you solve this real interview question? Factorial Trailing Zeroes - Given an integer n, return the number of trailing zeroes in n!.

Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.

 

Example 1:


Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.


Example 2:


Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.


Example 3:


Input: n = 0
Output: 0


 

Constraints:

 * 0 <= n <= 104

 

Follow up: Could you write a solution that works in logarithmic time complexity?",Solutions (1.8K),2.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/factorial-trailing-zeroes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def trailingZeroes(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().trailingZeroes(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def trailingZeroes(self, n: int) -> int:
        count = 0
        while n > 0:
            n //= 5
            count += n
        return count"
False,0,0,174,dungeon-game,Dungeon Game,dungeon-game,False,195883,522681,174,False,3,"Can you solve this real interview question? Dungeon Game - The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg]


Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.


Example 2:


Input: dungeon = [[0]]
Output: 1


 

Constraints:

 * m == dungeon.length
 * n == dungeon[i].length
 * 1 <= m, n <= 200
 * -1000 <= dungeon[i][j] <= 1000",Solutions (1.5K),5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/dungeon-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dungeon: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().calculateMinimumHP(dungeon)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
        m = len(dungeon)
        n = len(dungeon[0])
        dp = [[0] * n for _ in range(m)]
        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])

        for i in range(m-2, -1, -1):
            dp[i][n-1] = max(1, dp[i+1][n-1] - dungeon[i][n-1])

        for j in range(n-2, -1, -1):
            dp[m-1][j] = max(1, dp[m-1][j+1] - dungeon[m-1][j])

        for i in range(m-2, -1, -1):
            for j in range(n-2, -1, -1):
                dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j])

        return dp[0][0]"
False,0,0,179,largest-number,Largest Number,largest-number,False,384588,1114125,179,False,2,"Can you solve this real interview question? Largest Number - Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:


Input: nums = [10,2]
Output: ""210""


Example 2:


Input: nums = [3,30,34,5,9]
Output: ""9534330""


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 109",Solutions (2K),6.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestNumber(nums)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        pass  # Your solution here"
False,0,0,187,repeated-dna-sequences,Repeated DNA Sequences,repeated-dna-sequences,False,318229,678265,187,False,2,"Can you solve this real interview question? Repeated DNA Sequences - The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.

 * For example, ""ACGAATTCCG"" is a DNA sequence.

When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.

 

Example 1:

Input: s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
Output: [""AAAAACCCCC"",""CCCCCAAAAA""]


Example 2:

Input: s = ""AAAAAAAAAAAAA""
Output: [""AAAAAAAAAA""]


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either 'A', 'C', 'G', or 'T'.",Solutions (1.7K),2.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/repeated-dna-sequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRepeatedDnaSequences(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().findRepeatedDnaSequences(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findRepeatedDnaSequences(self, s: str) -> List[str]:
        repeated = set()
        res = set()
        for i in range(len(s) - 9):
            sub_s = s[i:i+10]
            if sub_s in repeated:
                res.add(sub_s)
            repeated.add(sub_s)
        return list(res)"
False,0,0,188,best-time-to-buy-and-sell-stock-iv,Best Time to Buy and Sell Stock IV,best-time-to-buy-and-sell-stock-iv,False,349973,900979,188,False,3,"Can you solve this real interview question? Best Time to Buy and Sell Stock IV - You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.

Find the maximum profit you can achieve. You may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:


Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.


Example 2:


Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.


 

Constraints:

 * 1 <= k <= 100
 * 1 <= prices.length <= 1000
 * 0 <= prices[i] <= 1000",Solutions (1.9K),6.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfit(k, prices)
    print(""\noutput:"", serialize(ans, ""integer""))
","
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        if k >= len(prices) // 2:
            return sum(max(prices[i + 1] - prices[i], 0) for i in range(len(prices) - 1)
        
        dp = [[0] * len(prices) for _ in range(k + 1)]
        for kk in range(1, k + 1):
            max_profit_with_stock = -prices[0]
            for i in range(1, len(prices)):
                dp[kk][i] = max(dp[kk][i - 1], prices[i] + max_profit_with_stock)
                max_profit_with_stock = max(max_profit_with_stock, dp[kk - 1][i] - prices[i])
        
        return dp[k][-1]"
False,0,0,189,rotate-array,Rotate Array,rotate-array,False,1443020,3664752,189,False,2,"Can you solve this real interview question? Rotate Array - Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:


Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]


Example 2:


Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]


 

Constraints:

 * 1 <= nums.length <= 105
 * -231 <= nums[i] <= 231 - 1
 * 0 <= k <= 105

 

Follow up:

 * Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
 * Could you do it in-place with O(1) extra space?",Solutions (7.8K),13.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/rotate-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    rotate(nums, k)
    ans = nums
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        k = k % len(nums)
        nums[:] = nums[-k:] + nums[:-k]"
False,0,0,190,reverse-bits,Reverse Bits,reverse-bits,False,609863,1132023,190,False,1,"Can you solve this real interview question? Reverse Bits - Reverse bits of a given 32 bits unsigned integer.

Note:

 * Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
 * In Java, the compiler represents the signed integers using 2's complement notation [https://en.wikipedia.org/wiki/Two%27s_complement]. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.

 

Example 1:


Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.


Example 2:


Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.


 

Constraints:

 * The input must be a binary string of length 32

 

Follow up: If this function is called many times, how would you optimize it?",Solutions (3.3K),4.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseBits(self, n: int) -> int:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    n: str = deserialize(""str"", read_line())
    ans = Solution().reverseBits(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reverseBits(self, n: int) -> int:
        return int(bin(n)[2:].zfill(32)[::-1], 2)"
False,0,0,191,number-of-1-bits,Number of 1 Bits,number-of-1-bits,False,1069371,1608322,191,False,1,"Can you solve this real interview question? Number of 1 Bits - Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight [http://en.wikipedia.org/wiki/Hamming_weight]).

Note:

 * Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
 * In Java, the compiler represents the signed integers using 2's complement notation [https://en.wikipedia.org/wiki/Two%27s_complement]. Therefore, in Example 3, the input represents the signed integer. -3.

 

Example 1:


Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.


Example 2:


Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.


Example 3:


Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.


 

Constraints:

 * The input must be a binary string of length 32.

 

Follow up: If this function is called many times, how would you optimize it?",Solutions (5.2K),5.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-1-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hammingWeight(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().hammingWeight(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def hammingWeight(self, n: int) -> int:
        return bin(n).count('1')"
False,0,0,198,house-robber,House Robber,house-robber,False,1562294,3163580,198,False,2,"Can you solve this real interview question? House Robber - You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:


Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.


Example 2:


Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
Total amount you can rob = 2 + 9 + 1 = 12.


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 400",Solutions (8.1K),17.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/house-robber/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rob(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().rob(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rob(self, nums: List[int]) -> int:
        if not nums:
            return 0
        
        if len(nums) == 1:
            return nums[0]
        
        dp = [0] * len(nums)
        
        dp[0] = nums[0]
        dp[1] = max(nums[0], nums[1])
        
        for i in range(2, len(nums)):
            dp[i] = max(dp[i-1], dp[i-2] + nums[i])
        
        return dp[-1]"
False,0,0,200,number-of-islands,Number of Islands,number-of-islands,False,2098598,3684859,200,False,2,"Can you solve this real interview question? Number of Islands - Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:


Input: grid = [
  [""1"",""1"",""1"",""1"",""0""],
  [""1"",""1"",""0"",""1"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""0"",""0"",""0""]
]
Output: 1


Example 2:


Input: grid = [
  [""1"",""1"",""0"",""0"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""1"",""0"",""0""],
  [""0"",""0"",""0"",""1"",""1""]
]
Output: 3


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 300
 * grid[i][j] is '0' or '1'.",Solutions (7.5K),19.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-islands/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    grid: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().numIslands(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        def dfs(grid, i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == '0':
                return
            grid[i][j] = '0'
            dfs(grid, i+1, j)
            dfs(grid, i-1, j)
            dfs(grid, i, j+1)
            dfs(grid, i, j-1)
        
        count = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1':
                    count += 1
                    dfs(grid, i, j)
        
        return count"
False,0,0,201,bitwise-and-of-numbers-range,Bitwise AND of Numbers Range,bitwise-and-of-numbers-range,False,238386,560778,201,False,2,"Can you solve this real interview question? Bitwise AND of Numbers Range - Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.

 

Example 1:


Input: left = 5, right = 7
Output: 4


Example 2:


Input: left = 0, right = 0
Output: 0


Example 3:


Input: left = 1, right = 2147483647
Output: 0


 

Constraints:

 * 0 <= left <= right <= 231 - 1",Solutions (1.3K),2.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/bitwise-and-of-numbers-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().rangeBitwiseAnd(left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rangeBitwiseAnd(self, left: int, right: int) -> int:
        shift = 0
        while left < right:
            left >>= 1
            right >>= 1
            shift += 1
        return left << shift"
False,0,0,202,happy-number,Happy Number,happy-number,False,1109686,2025418,202,False,1,"Can you solve this real interview question? Happy Number - Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

 * Starting with any positive integer, replace the number by the sum of the squares of its digits.
 * Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
 * Those numbers for which this process ends in 1 are happy.

Return true if n is a happy number, and false if not.

 

Example 1:


Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1


Example 2:


Input: n = 2
Output: false


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (5.8K),8.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/happy-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isHappy(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isHappy(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isHappy(self, n: int) -> bool:
        def get_next(num):
            total_sum = 0
            while num > 0:
                num, digit = divmod(num, 10)
                total_sum += digit ** 2
            return total_sum
        
        seen = set()
        while n != 1 and n not in seen:
            seen.add(n)
            n = get_next(n)
        
        return n == 1"
False,0,0,204,count-primes,Count Primes,count-primes,False,716852,2165317,204,False,2,"Can you solve this real interview question? Count Primes - Given an integer n, return the number of prime numbers that are strictly less than n.

 

Example 1:


Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.


Example 2:


Input: n = 0
Output: 0


Example 3:


Input: n = 1
Output: 0


 

Constraints:

 * 0 <= n <= 5 * 106",Solutions (2.2K),6.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/count-primes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPrimes(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countPrimes(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPrimes(self, n: int) -> int:
        if n < 2:
            return 0
        primes = [True] * n
        primes[0] = primes[1] = False
        for i in range(2, int(n ** 0.5) + 1):
            if primes[i]:
                primes[i*i:n:i] = [False] * len(primes[i*i:n:i])
        return sum(primes)"
False,0,0,205,isomorphic-strings,Isomorphic Strings,isomorphic-strings,False,844028,1969135,205,False,1,"Can you solve this real interview question? Isomorphic Strings - Given two strings s and t, determine if they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced to get t.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.

 

Example 1:

Input: s = ""egg"", t = ""add""
Output: true


Example 2:

Input: s = ""foo"", t = ""bar""
Output: false


Example 3:

Input: s = ""paper"", t = ""title""
Output: true


 

Constraints:

 * 1 <= s.length <= 5 * 104
 * t.length == s.length
 * s and t consist of any valid ascii character.",Solutions (4.5K),6.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/isomorphic-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().isIsomorphic(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
        
        mapping_s = {}
        mapping_t = {}
        
        for i in range(len(s)):
            char_s = s[i]
            char_t = t[i]
            
            if char_s in mapping_s:
                if mapping_s[char_s] != char_t:
                    return False
            else:
                mapping_s[char_s] = char_t
                
            if char_t in mapping_t:
                if mapping_t[char_t] != char_s:
                    return False
            else:
                mapping_t[char_t] = char_s
                
        return True"
False,0,0,207,course-schedule,Course Schedule,course-schedule,False,1137112,2506004,207,False,2,"Can you solve this real interview question? Course Schedule - There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

 * For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return true if you can finish all courses. Otherwise, return false.

 

Example 1:


Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.


Example 2:


Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


 

Constraints:

 * 1 <= numCourses <= 2000
 * 0 <= prerequisites.length <= 5000
 * prerequisites[i].length == 2
 * 0 <= ai, bi < numCourses
 * All the pairs prerequisites[i] are unique.",Solutions (4.6K),13K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/course-schedule/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    numCourses: int = deserialize(""int"", read_line())
    prerequisites: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().canFinish(numCourses, prerequisites)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        from collections import defaultdict
        graph = defaultdict(list)
        for course, prereq in prerequisites:
            graph[course].append(prereq)
        
        visited = [0] * numCourses
        for course in range(numCourses):
            if not self.dfs(graph, visited, course):
                return False
        return True
    
    def dfs(self, graph, visited, course):
        if visited[course] == 1:
            return False
        if visited[course] == 2:
            return True
        
        visited[course] = 1
        for prereq in graph[course]:
            if not self.dfs(graph, visited, prereq):
                return False
        
        visited[course] = 2
        return True"
False,0,0,209,minimum-size-subarray-sum,Minimum Size Subarray Sum,minimum-size-subarray-sum,False,676149,1504304,209,False,2,"Can you solve this real interview question? Minimum Size Subarray Sum - Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:


Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.


Example 2:


Input: target = 4, nums = [1,4,4]
Output: 1


Example 3:


Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0


 

Constraints:

 * 1 <= target <= 109
 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 104

 

Follow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).",Solutions (3.3K),9.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-size-subarray-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSubArrayLen(target, nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = 0
        total = 0
        result = float('inf')
        
        for right in range(len(nums)):
            total += nums[right]
            
            while total >= target:
                result = min(result, right - left + 1)
                total -= nums[left]
                left += 1
        
        return result if result != float('inf') else 0"
False,0,0,210,course-schedule-ii,Course Schedule II,course-schedule-ii,False,795891,1643227,210,False,2,"Can you solve this real interview question? Course Schedule II - There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

 * For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.

Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.

 

Example 1:


Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].


Example 2:


Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].


Example 3:


Input: numCourses = 1, prerequisites = []
Output: [0]


 

Constraints:

 * 1 <= numCourses <= 2000
 * 0 <= prerequisites.length <= numCourses * (numCourses - 1)
 * prerequisites[i].length == 2
 * 0 <= ai, bi < numCourses
 * ai != bi
 * All the pairs [ai, bi] are distinct.",Solutions (3.7K),8.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/course-schedule-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    numCourses: int = deserialize(""int"", read_line())
    prerequisites: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findOrder(numCourses, prerequisites)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        from collections import deque, defaultdict
        
        graph = defaultdict(list)
        indegree = [0] * numCourses
        
        for course, pre_course in prerequisites:
            graph[pre_course].append(course)
            indegree[course] += 1
        
        queue = deque([course for course in range(numCourses) if indegree[course] == 0])
        order = []
        
        while queue:
            node = queue.popleft()
            order.append(node)
            
            for neighbor in graph[node]:
                indegree[neighbor] -= 1
                if indegree[neighbor] == 0:
                    queue.append(neighbor)
        
        return order if len(order) == numCourses else []"
False,0,0,212,word-search-ii,Word Search II,word-search-ii,False,549100,1506652,212,False,3,"Can you solve this real interview question? Word Search II - Given an m x n board of characters and a list of strings words, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/07/search1.jpg]


Input: board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]], words = [""oath"",""pea"",""eat"",""rain""]
Output: [""eat"",""oath""]


Example 2:

[https://assets.leetcode.com/uploads/2020/11/07/search2.jpg]


Input: board = [[""a"",""b""],[""c"",""d""]], words = [""abcb""]
Output: []


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m, n <= 12
 * board[i][j] is a lowercase English letter.
 * 1 <= words.length <= 3 * 104
 * 1 <= words[i].length <= 10
 * words[i] consists of lowercase English letters.
 * All the strings of words are unique.",Solutions (2.3K),8.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/word-search-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findWords(board, words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findWords(self, board: List[List[str]], words: List[str]) -> List[str]:
        # Add your code here
        pass"
False,0,0,213,house-robber-ii,House Robber II,house-robber-ii,False,558817,1363223,213,False,2,"Can you solve this real interview question? House Robber II - You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

 

Example 1:


Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.


Example 2:


Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.


Example 3:


Input: nums = [1,2,3]
Output: 3


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 1000",Solutions (3.7K),8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/house-robber-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rob(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().rob(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) == 1:
            return nums[0]
        
        return max(self.rob_helper(nums[1:]), self.rob_helper(nums[:-1]))

    def rob_helper(self, nums: List[int]) -> int:
        prev_prev = 0
        prev = 0
        
        for num in nums:
            temp = prev
            prev = max(prev_prev + num, prev)
            prev_prev = temp
        
        return prev"
False,0,0,214,shortest-palindrome,Shortest Palindrome,shortest-palindrome,False,153781,475797,214,False,3,"Can you solve this real interview question? Shortest Palindrome - You are given a string s. You can convert s to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.

 

Example 1:

Input: s = ""aacecaaa""
Output: ""aaacecaaa""


Example 2:

Input: s = ""abcd""
Output: ""dcbabcd""


 

Constraints:

 * 0 <= s.length <= 5 * 104
 * s consists of lowercase English letters only.",Solutions (830),3.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestPalindrome(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().shortestPalindrome(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shortestPalindrome(self, s: str) -> str:
        rev_s = s[::-1]
        for i in range(len(s) + 1):
            if s.startswith(rev_s[i:]):
                return s[:i] + rev_s[:i] + s[i:]"
False,0,0,215,kth-largest-element-in-an-array,Kth Largest Element in an Array,kth-largest-element-in-an-array,False,1699500,2569907,215,False,2,"Can you solve this real interview question? Kth Largest Element in an Array - Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the kth largest element in the sorted order, not the kth distinct element.

You must solve it in O(n) time complexity.

 

Example 1:

Input: nums = [3,2,1,5,6,4], k = 2
Output: 5


Example 2:

Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4


 

Constraints:

 * 1 <= k <= nums.length <= 105
 * -104 <= nums[i] <= 104",Solutions (7.2K),13.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-largest-element-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKthLargest(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        return sorted(nums, reverse=True)[k-1]"
False,0,0,216,combination-sum-iii,Combination Sum III,combination-sum-iii,False,392417,580703,216,False,2,"Can you solve this real interview question? Combination Sum III - Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

 * Only numbers 1 through 9 are used.
 * Each number is used at most once.

Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:


Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.

Example 2:


Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.


Example 3:


Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.


 

Constraints:

 * 2 <= k <= 9
 * 1 <= n <= 60",Solutions (3.5K),4.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/combination-sum-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().combinationSum3(k, n)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        res = []
        def backtrack(remain, comb, next_start):
            if remain == 0 and len(comb) == k:
                res.append(list(comb))
                return
            elif remain < 0 or len(comb) == k:
                return
            for i in range(next_start, 10):
                comb.append(i)
                backtrack(remain - i, comb, i + 1)
                comb.pop()
        
        backtrack(n, [], 1)
        return res"
False,0,0,217,contains-duplicate,Contains Duplicate,contains-duplicate,False,2590326,4218083,217,False,1,"Can you solve this real interview question? Contains Duplicate - Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

Example 1:

Input: nums = [1,2,3,1]
Output: true


Example 2:

Input: nums = [1,2,3,4]
Output: false


Example 3:

Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true


 

Constraints:

 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (9K),8.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/contains-duplicate/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().containsDuplicate(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        return len(nums) != len(set(nums))"
False,0,0,218,the-skyline-problem,The Skyline Problem,the-skyline-problem,False,261614,625686,218,False,3,"Can you solve this real interview question? The Skyline Problem - A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:

 * lefti is the x coordinate of the left edge of the ith building.
 * righti is the x coordinate of the right edge of the ith building.
 * heighti is the height of the ith building.

You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

The skyline should be represented as a list of ""key points"" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/01/merged.jpg]


Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.


Example 2:


Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]


 

Constraints:

 * 1 <= buildings.length <= 104
 * 0 <= lefti < righti <= 231 - 1
 * 1 <= heighti <= 231 - 1
 * buildings is sorted by lefti in non-decreasing order.",Solutions (1.2K),5.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/the-skyline-problem/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    buildings: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getSkyline(buildings)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def getSkyline(self, buildings: List[List[int]]) -> List[List[int]]:
        pass"
False,0,0,219,contains-duplicate-ii,Contains Duplicate II,contains-duplicate-ii,False,651640,1532155,219,False,1,"Can you solve this real interview question? Contains Duplicate II - Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.

 

Example 1:


Input: nums = [1,2,3,1], k = 3
Output: true


Example 2:


Input: nums = [1,0,1,1], k = 1
Output: true


Example 3:


Input: nums = [1,2,3,1,2,3], k = 2
Output: false


 

Constraints:

 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109
 * 0 <= k <= 105",Solutions (3.9K),4.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/contains-duplicate-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().containsNearbyDuplicate(nums, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        seen = {}
        for i, num in enumerate(nums):
            if num in seen and i - seen[num] <= k:
                return True
            seen[num] = i
        return False"
False,0,0,220,contains-duplicate-iii,Contains Duplicate III,contains-duplicate-iii,False,227058,1026085,220,False,3,"Can you solve this real interview question? Contains Duplicate III - You are given an integer array nums and two integers indexDiff and valueDiff.

Find a pair of indices (i, j) such that:

 * i != j,
 * abs(i - j) <= indexDiff.
 * abs(nums[i] - nums[j]) <= valueDiff, and

Return true if such pair exists or false otherwise.

 

Example 1:


Input: nums = [1,2,3,1], indexDiff = 3, valueDiff = 0
Output: true
Explanation: We can choose (i, j) = (0, 3).
We satisfy the three conditions:
i != j --> 0 != 3
abs(i - j) <= indexDiff --> abs(0 - 3) <= 3
abs(nums[i] - nums[j]) <= valueDiff --> abs(1 - 1) <= 0


Example 2:


Input: nums = [1,5,9,1,5,9], indexDiff = 2, valueDiff = 3
Output: false
Explanation: After trying all the possible pairs (i, j), we cannot satisfy the three conditions, so we return false.


 

Constraints:

 * 2 <= nums.length <= 105
 * -109 <= nums[i] <= 109
 * 1 <= indexDiff <= nums.length
 * 0 <= valueDiff <= 109",Solutions (894),499,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/contains-duplicate-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    indexDiff: int = deserialize(""int"", read_line())
    valueDiff: int = deserialize(""int"", read_line())
    ans = Solution().containsNearbyAlmostDuplicate(nums, indexDiff, valueDiff)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def containsNearbyAlmostDuplicate(self, nums: List[int], indexDiff: int, valueDiff: int) -> bool:
        pass"
False,0,0,221,maximal-square,Maximal Square,maximal-square,False,571961,1272915,221,False,2,"Can you solve this real interview question? Maximal Square - Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg]


Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 4


Example 2:

[https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg]


Input: matrix = [[""0"",""1""],[""1"",""0""]]
Output: 1


Example 3:


Input: matrix = [[""0""]]
Output: 0


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 300
 * matrix[i][j] is '0' or '1'.",Solutions (1.9K),8.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/maximal-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().maximalSquare(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        max_side = 0
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if matrix[i - 1][j - 1] == ""1"":
                    dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j]) + 1
                    max_side = max(max_side, dp[i][j])
        
        return max_side * max_side"
False,0,0,223,rectangle-area,Rectangle Area,rectangle-area,False,198356,439751,223,False,2,"Can you solve this real interview question? Rectangle Area - Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).

The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).

 

Example 1:

Rectangle Area [https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png]


Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
Output: 45


Example 2:


Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2
Output: 16


 

Constraints:

 * -104 <= ax1 <= ax2 <= 104
 * -104 <= ay1 <= ay2 <= 104
 * -104 <= bx1 <= bx2 <= 104
 * -104 <= by1 <= by2 <= 104",Solutions (1.5K),1.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/rectangle-area/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ax1: int = deserialize(""int"", read_line())
    ay1: int = deserialize(""int"", read_line())
    ax2: int = deserialize(""int"", read_line())
    ay2: int = deserialize(""int"", read_line())
    bx1: int = deserialize(""int"", read_line())
    by1: int = deserialize(""int"", read_line())
    bx2: int = deserialize(""int"", read_line())
    by2: int = deserialize(""int"", read_line())
    ans = Solution().computeArea(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def computeArea(self, ax1: int, ay1: int, ax2: int, ay2: int, bx1: int, by1: int, bx2: int, by2: int) -> int:
        return (ax2 - ax1) * (ay2 - ay1) + (bx2 - bx1) * (by2 - by1) - max(0, min(ax2, bx2) - max(ax1, bx1)) * max(0, min(ay2, by2) - max(ay1, by1))"
False,0,0,224,basic-calculator,Basic Calculator,basic-calculator,False,374515,883008,224,False,3,"Can you solve this real interview question? Basic Calculator - Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:


Input: s = ""1 + 1""
Output: 2


Example 2:


Input: s = "" 2-1 + 2 ""
Output: 3


Example 3:


Input: s = ""(1+(4+5+2)-3)+(6+8)""
Output: 23


 

Constraints:

 * 1 <= s.length <= 3 * 105
 * s consists of digits, '+', '-', '(', ')', and ' '.
 * s represents a valid expression.
 * '+' is not used as a unary operation (i.e., ""+1"" and ""+(2 + 3)"" is invalid).
 * '-' could be used as a unary operation (i.e., ""-1"" and ""-(2 + 3)"" is valid).
 * There will be no two consecutive operators in the input.
 * Every number and running calculation will fit in a signed 32-bit integer.",Solutions (1.5K),5.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/basic-calculator/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calculate(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().calculate(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def calculate(self, s: str) -> int:
        pass"
False,0,0,227,basic-calculator-ii,Basic Calculator II,basic-calculator-ii,False,508601,1199213,227,False,2,"Can you solve this real interview question? Basic Calculator II - Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = ""3+2*2""
Output: 7


Example 2:

Input: s = "" 3/2 ""
Output: 1


Example 3:

Input: s = "" 3+5 / 2 ""
Output: 5


 

Constraints:

 * 1 <= s.length <= 3 * 105
 * s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.
 * s represents a valid expression.
 * All the integers in the expression are non-negative integers in the range [0, 231 - 1].
 * The answer is guaranteed to fit in a 32-bit integer.",Solutions (1.6K),5.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/basic-calculator-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calculate(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().calculate(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def calculate(self, s: str) -> int:
        def calculate_no_brackets(s):
            pass
        
        return calculate_no_brackets(s)"
False,0,0,228,summary-ranges,Summary Ranges,summary-ranges,False,340095,721145,228,False,1,"Can you solve this real interview question? Summary Ranges - You are given a sorted unique integer array nums.

A range [a,b] is the set of all integers from a to b (inclusive).

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.

Each range [a,b] in the list should be output as:

 * ""a->b"" if a != b
 * ""a"" if a == b

 

Example 1:


Input: nums = [0,1,2,4,5,7]
Output: [""0->2"",""4->5"",""7""]
Explanation: The ranges are:
[0,2] --> ""0->2""
[4,5] --> ""4->5""
[7,7] --> ""7""


Example 2:


Input: nums = [0,2,3,4,6,8,9]
Output: [""0"",""2->4"",""6"",""8->9""]
Explanation: The ranges are:
[0,0] --> ""0""
[2,4] --> ""2->4""
[6,6] --> ""6""
[8,9] --> ""8->9""


 

Constraints:

 * 0 <= nums.length <= 20
 * -231 <= nums[i] <= 231 - 1
 * All the values of nums are unique.
 * nums is sorted in ascending order.",Solutions (2.9K),2.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/summary-ranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().summaryRanges(nums)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        ranges = []
        i = 0
        while i < len(nums):
            start = nums[i]
            while i + 1 < len(nums) and nums[i + 1] - nums[i] == 1:
                i += 1
            end = nums[i]
            if start == end:
                ranges.append(str(start))
            else:
                ranges.append(str(start) + ""->"" + str(end))
            i += 1
        return ranges"
False,0,0,229,majority-element-ii,Majority Element II,majority-element-ii,False,387202,860576,229,False,2,"Can you solve this real interview question? Majority Element II - Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:


Input: nums = [3,2,3]
Output: [3]


Example 2:


Input: nums = [1]
Output: [1]


Example 3:


Input: nums = [1,2]
Output: [1,2]


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * -109 <= nums[i] <= 109

 

Follow up: Could you solve the problem in linear time and in O(1) space?",Solutions (2.6K),7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/majority-element-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().majorityElement(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        res = []
        count1, count2, candidate1, candidate2 = 0, 0, None, None
        
        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
            elif count1 == 0:
                candidate1 = num
                count1 += 1
            elif count2 == 0:
                candidate2 = num
                count2 += 1
            else:
                count1 -= 1
                count2 -= 1
        
        count1 = count2 = 0
        
        for num in nums:
            if num == candidate1:
                count1 += 1
            elif num == candidate2:
                count2 += 1
        
        if count1 > len(nums) // 3:
            res.append(candidate1)
        if count2 > len(nums) // 3:
            res.append(candidate2)
        
        return res"
False,0,0,231,power-of-two,Power of Two,power-of-two,False,859056,1868185,231,False,1,"Can you solve this real interview question? Power of Two - Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two, if there exists an integer x such that n == 2x.

 

Example 1:


Input: n = 1
Output: true
Explanation: 20 = 1


Example 2:


Input: n = 16
Output: true
Explanation: 24 = 16


Example 3:


Input: n = 3
Output: false


 

Constraints:

 * -231 <= n <= 231 - 1

 

Follow up: Could you solve it without loops/recursion?",Solutions (5.5K),5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/power-of-two/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isPowerOfTwo(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        return n > 0 and (n & (n - 1)) == 0"
False,0,0,233,number-of-digit-one,Number of Digit One,number-of-digit-one,False,75316,221833,233,False,3,"Can you solve this real interview question? Number of Digit One - Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.

 

Example 1:


Input: n = 13
Output: 6


Example 2:


Input: n = 0
Output: 0


 

Constraints:

 * 0 <= n <= 109",Solutions (539),1.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-digit-one/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDigitOne(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countDigitOne(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDigitOne(self, n: int) -> int:
        count = 0
        for i in range(1, n + 1):
            count += str(i).count('1')
        return count"
False,0,0,238,product-of-array-except-self,Product of Array Except Self,product-of-array-except-self,False,1565805,2407796,238,False,2,"Can you solve this real interview question? Product of Array Except Self - Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]


Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]


 

Constraints:

 * 2 <= nums.length <= 105
 * -30 <= nums[i] <= 30
 * The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)",Solutions (6.2K),16.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/product-of-array-except-self/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().productExceptSelf(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        output = [1]*n
        left, right = 1, 1
        
        for i in range(n):
            output[i] *= left
            left *= nums[i]
        
        for i in range(n-1, -1, -1):
            output[i] *= right
            right *= nums[i]
        
        return output"
False,0,0,239,sliding-window-maximum,Sliding Window Maximum,sliding-window-maximum,False,736841,1590853,239,False,3,"Can you solve this real interview question? Sliding Window Maximum - You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:


Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7


Example 2:


Input: nums = [1], k = 1
Output: [1]


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104
 * 1 <= k <= nums.length",Solutions (4K),14K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/sliding-window-maximum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxSlidingWindow(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        result = []
        max_val = max(nums[:k])
        result.append(max_val)
        for i in range(k, len(nums)):
            if nums[i] >= max_val:
                max_val = nums[i]
            elif nums[i - k] == max_val:
                max_val = max(nums[i - k + 1:i + 1])
            result.append(max_val)
        return result"
False,0,0,240,search-a-2d-matrix-ii,Search a 2D Matrix II,search-a-2d-matrix-ii,False,773190,1516481,240,False,2,"Can you solve this real interview question? Search a 2D Matrix II - Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

 * Integers in each row are sorted in ascending from left to right.
 * Integers in each column are sorted in ascending from top to bottom.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg]


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg]


Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= n, m <= 300
 * -109 <= matrix[i][j] <= 109
 * All the integers in each row are sorted in ascending order.
 * All the integers in each column are sorted in ascending order.
 * -109 <= target <= 109",Solutions (3.7K),10.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/search-a-2d-matrix-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().searchMatrix(matrix, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        row = 0
        col = len(matrix[0]) - 1
        
        while row < len(matrix) and col >= 0:
            if matrix[row][col] == target:
                return True
            elif matrix[row][col] < target:
                row += 1
            else:
                col -= 1
        
        return False"
False,0,0,241,,Different Ways to Add Parentheses,different-ways-to-add-parentheses,False,191149,299379,241,False,2,"Can you solve this real interview question? Different Ways to Add Parentheses - Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.

The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.

 

Example 1:


Input: expression = ""2-1-1""
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2


Example 2:


Input: expression = ""2*3-4*5""
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10


 

Constraints:

 * 1 <= expression.length <= 20
 * expression consists of digits and the operator '+', '-', and '*'.
 * All the integer values in the input expression are in the range [0, 99].",Solutions (1.1K),4.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/different-ways-to-add-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().diffWaysToCompute(expression)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def diffWaysToCompute(self, expression: str) -> List[int]:
        # Your code here
        pass"
False,0,0,242,valid-anagram,Valid Anagram,valid-anagram,False,2047065,3247876,242,False,1,"Can you solve this real interview question? Valid Anagram - Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = ""anagram"", t = ""nagaram""
Output: true


Example 2:

Input: s = ""rat"", t = ""car""
Output: false


 

Constraints:

 * 1 <= s.length, t.length <= 5 * 104
 * s and t consist of lowercase English letters.

 

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",Solutions (9.9K),8.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-anagram/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().isAnagram(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return sorted(s) == sorted(t)"
False,0,0,258,add-digits,Add Digits,add-digits,False,552882,864798,258,False,1,"Can you solve this real interview question? Add Digits - Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.

 

Example 1:


Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.


Example 2:


Input: num = 0
Output: 0


 

Constraints:

 * 0 <= num <= 231 - 1

 

Follow up: Could you do it without any loop/recursion in O(1) runtime?",Solutions (3.6K),3.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/add-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addDigits(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().addDigits(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def addDigits(self, num: int) -> int:
        if num == 0:
            return 0
        return 1 + (num - 1) % 9"
False,0,0,260,single-number-iii,Single Number III,single-number-iii,False,292651,432594,260,False,2,"Can you solve this real interview question? Single Number III - Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:


Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.


Example 2:


Input: nums = [-1,0]
Output: [-1,0]


Example 3:


Input: nums = [0,1]
Output: [1,0]


 

Constraints:

 * 2 <= nums.length <= 3 * 104
 * -231 <= nums[i] <= 231 - 1
 * Each integer in nums will appear twice, only two integers will appear once.",Solutions (1.9K),4.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/single-number-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().singleNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def singleNumber(self, nums: List[int]) -> List[int]:
        bitmask = 0
        for num in nums:
            bitmask ^= num
        diff = bitmask & (-bitmask)
        x = 0
        for num in nums:
            if num & diff != 0:
                x ^= num
        return [x, bitmask ^ x]"
False,0,0,263,ugly-number,Ugly Number,ugly-number,False,416508,984571,263,False,1,"Can you solve this real interview question? Ugly Number - An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return true if n is an ugly number.

 

Example 1:


Input: n = 6
Output: true
Explanation: 6 = 2 × 3


Example 2:


Input: n = 1
Output: true
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.


Example 3:


Input: n = 14
Output: false
Explanation: 14 is not ugly since it includes the prime factor 7.


 

Constraints:

 * -231 <= n <= 231 - 1",Solutions (2.6K),2.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/ugly-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isUgly(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isUgly(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isUgly(self, n: int) -> bool:
        if n <= 0:
            return False
        while n % 2 == 0:
            n /= 2
        while n % 3 == 0:
            n /= 3
        while n % 5 == 0:
            n /= 5
        return n == 1"
False,0,0,264,ugly-number-ii,Ugly Number II,ugly-number-ii,False,301968,653939,264,False,2,"Can you solve this real interview question? Ugly Number II - An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.

Given an integer n, return the nth ugly number.

 

Example 1:


Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.


Example 2:


Input: n = 1
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.


 

Constraints:

 * 1 <= n <= 1690",Solutions (1.2K),5.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/ugly-number-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nthUglyNumber(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().nthUglyNumber(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nthUglyNumber(self, n: int) -> int:
        ugly_nums = [1]
        i2 = i3 = i5 = 0
        while len(ugly_nums) < n:
            new_ugly = min(ugly_nums[i2]*2, ugly_nums[i3]*3, ugly_nums[i5]*5)
            ugly_nums.append(new_ugly)
            if new_ugly == ugly_nums[i2]*2:
                i2 += 1
            if new_ugly == ugly_nums[i3]*3:
                i3 += 1
            if new_ugly == ugly_nums[i5]*5:
                i5 += 1
        return ugly_nums[-1]"
False,0,0,268,missing-number,Missing Number,missing-number,False,1440129,2304891,268,False,1,"Can you solve this real interview question? Missing Number - Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

 

Example 1:


Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.


Example 2:


Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.


Example 3:


Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 104
 * 0 <= nums[i] <= n
 * All the numbers of nums are unique.

 

Follow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?",Solutions (8.9K),9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/missing-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().missingNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        n = len(nums)
        total_sum = n * (n + 1) // 2
        actual_sum = sum(nums)
        return total_sum - actual_sum"
False,0,0,273,integer-to-english-words,Integer to English Words,integer-to-english-words,False,339650,1132844,273,False,3,"Can you solve this real interview question? Integer to English Words - Convert a non-negative integer num to its English words representation.

 

Example 1:


Input: num = 123
Output: ""One Hundred Twenty Three""


Example 2:


Input: num = 12345
Output: ""Twelve Thousand Three Hundred Forty Five""


Example 3:


Input: num = 1234567
Output: ""One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven""


 

Constraints:

 * 0 <= num <= 231 - 1",Solutions (1.4K),2.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/integer-to-english-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberToWords(self, num: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().numberToWords(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def numberToWords(self, num: int) -> str:
        pass"
False,0,0,274,h-index,H-Index,h-index,False,258169,673559,274,False,2,"Can you solve this real interview question? H-Index - Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.

According to the definition of h-index on Wikipedia [https://en.wikipedia.org/wiki/H-index]: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.

 

Example 1:


Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:


Input: citations = [1,3,1]
Output: 1


 

Constraints:

 * n == citations.length
 * 1 <= n <= 5000
 * 0 <= citations[i] <= 1000",Solutions (1.2K),1.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/h-index/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hIndex(self, citations: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    citations: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().hIndex(citations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def hIndex(self, citations: List[int]) -> int:
        citations.sort()
        n = len(citations)
        
        left, right = 0, n - 1
        while left <= right:
            mid = left + (right - left) // 2
            if citations[mid] == n - mid:
                return n - mid
            elif citations[mid] < n - mid:
                left = mid + 1
            else:
                right = mid - 1
        
        return n - left"
False,0,0,275,h-index-ii,H-Index II,h-index-ii,False,173976,463607,275,False,2,"Can you solve this real interview question? H-Index II - Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index.

According to the definition of h-index on Wikipedia [https://en.wikipedia.org/wiki/H-index]: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.

You must write an algorithm that runs in logarithmic time.

 

Example 1:


Input: citations = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.
Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:


Input: citations = [1,2,100]
Output: 2


 

Constraints:

 * n == citations.length
 * 1 <= n <= 105
 * 0 <= citations[i] <= 1000
 * citations is sorted in ascending order.",Solutions (652),891,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/h-index-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hIndex(self, citations: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    citations: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().hIndex(citations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def hIndex(self, citations: List[int]) -> int:
        n = len(citations)
        left, right = 0, n - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            if citations[mid] == n - mid:
                return n - mid
            elif citations[mid] < n - mid:
                left = mid + 1
            else:
                right = mid - 1
        
        return n - left"
False,0,0,279,perfect-squares,Perfect Squares,perfect-squares,False,651866,1238452,279,False,2,"Can you solve this real interview question? Perfect Squares - Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:


Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.


Example 2:


Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


 

Constraints:

 * 1 <= n <= 104",Solutions (2.9K),9.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/perfect-squares/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSquares(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numSquares(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSquares(self, n: int) -> int:
        import math
        while n % 4 == 0:
            n /= 4
        if n % 8 == 7:
            return 4
        a = 0
        while a * a <= n:
            b = int(math.sqrt(n - a * a))
            if a * a + b * b == n:
                return (a > 0) + (b > 0)
            a += 1
        return 3"
False,0,0,282,expression-add-operators,Expression Add Operators,expression-add-operators,False,197747,504662,282,False,3,"Can you solve this real interview question? Expression Add Operators - Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:


Input: num = ""123"", target = 6
Output: [""1*2*3"",""1+2+3""]
Explanation: Both ""1*2*3"" and ""1+2+3"" evaluate to 6.


Example 2:


Input: num = ""232"", target = 8
Output: [""2*3+2"",""2+3*2""]
Explanation: Both ""2*3+2"" and ""2+3*2"" evaluate to 8.


Example 3:


Input: num = ""3456237490"", target = 9191
Output: []
Explanation: There are no expressions that can be created from ""3456237490"" to evaluate to 9191.


 

Constraints:

 * 1 <= num.length <= 10
 * num consists of only digits.
 * -231 <= target <= 231 - 1",Solutions (527),2.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/expression-add-operators/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addOperators(self, num: str, target: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().addOperators(num, target)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def addOperators(self, num: str, target: int) -> List[str]:
        def backtrack(index, prev_operand, current_operand, value, expression):
            pass

        def recurse(index, prev_operand, current_operand, value, expression):
            pass

        output = []
        if not num:
            return output
        recurse(0, 0, 0, 0, [])
        return output"
False,0,0,283,move-zeroes,Move Zeroes,move-zeroes,False,2156363,3512439,283,False,1,"Can you solve this real interview question? Move Zeroes - Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]


Example 2:

Input: nums = [0]
Output: [0]


 

Constraints:

 * 1 <= nums.length <= 104
 * -231 <= nums[i] <= 231 - 1

 

Follow up: Could you minimize the total number of operations done?",Solutions (11.1K),13.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/move-zeroes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    moveZeroes(nums)
    ans = nums
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        zeros = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                nums.pop(i)
                zeros += 1
        nums.extend([0]*zeros)"
False,0,0,287,find-the-duplicate-number,Find the Duplicate Number,find-the-duplicate-number,False,1135926,1922347,287,False,2,"Can you solve this real interview question? Find the Duplicate Number - Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:


Input: nums = [1,3,4,2,2]
Output: 2


Example 2:


Input: nums = [3,1,3,4,2]
Output: 3


 

Constraints:

 * 1 <= n <= 105
 * nums.length == n + 1
 * 1 <= nums[i] <= n
 * All the integers in nums appear only once except for precisely one integer which appears two or more times.

 

Follow up:

 * How can we prove that at least one duplicate number must exist in nums?
 * Can you solve the problem in linear runtime complexity?",Solutions (5.6K),18.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-duplicate-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findDuplicate(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow = nums[0]
        fast = nums[0]
        
        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]
            if slow == fast:
                break
        
        slow = nums[0]
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]
        
        return slow"
False,0,0,289,game-of-life,Game of Life,game-of-life,False,386962,576398,289,False,2,"Can you solve this real interview question? Game of Life - According to Wikipedia's article [https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life]: ""The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.""

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors [https://en.wikipedia.org/wiki/Moore_neighborhood] (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

 1. Any live cell with fewer than two live neighbors dies as if caused by under-population.
 2. Any live cell with two or three live neighbors lives on to the next generation.
 3. Any live cell with more than three live neighbors dies, as if by over-population.
 4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.

The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg]


Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]


Example 2:

[https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg]


Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m, n <= 25
 * board[i][j] is 0 or 1.

 

Follow up:

 * Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.
 * In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",Solutions (3.1K),5.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/game-of-life/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """"""
        Do not return anything, modify board in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    gameOfLife(board)
    ans = board
    print(""\noutput:"", serialize(ans, ""List[List[int]]""))
","
```python
class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        m, n = len(board), len(board[0])
        def count_live_neighbors(board, i, j):
            count = 0
            for x in range(max(i-1, 0), min(i+2, m)):
                for y in range(max(j-1, 0), min(j+2, n)):
                    count += board[x][y] & 1
            count -= board[i][j] & 1
            return count
        
        for i in range(m):
            for j in range(n):
                live_neighbors = count_live_neighbors(board, i, j)
                if board[i][j] == 1 and 2 <= live_neighbors <= 3:
                    board[i][j] = 3
                if board[i][j] == 0 and live_neighbors == 3:
                    board[i][j] = 2
        
        for i in range(m):
            for j in range(n):
                board[i][j] >>= 1
```"
False,0,0,290,word-pattern,Word Pattern,word-pattern,False,511650,1228331,290,False,1,"Can you solve this real interview question? Word Pattern - Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:


Input: pattern = ""abba"", s = ""dog cat cat dog""
Output: true


Example 2:


Input: pattern = ""abba"", s = ""dog cat cat fish""
Output: false


Example 3:


Input: pattern = ""aaaa"", s = ""dog cat cat dog""
Output: false


 

Constraints:

 * 1 <= pattern.length <= 300
 * pattern contains only lower-case English letters.
 * 1 <= s.length <= 3000
 * s contains only lowercase English letters and spaces ' '.
 * s does not contain any leading or trailing spaces.
 * All the words in s are separated by a single space.",Solutions (5K),6.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/word-pattern/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    pattern: str = deserialize(""str"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().wordPattern(pattern, s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def wordPattern(self, pattern: str, s: str) -> bool:
        words = s.split()
        if len(pattern) != len(words):
            return False
        
        char_to_word = {}
        word_to_char = {}
        
        for char, word in zip(pattern, words):
            if char not in char_to_word:
                char_to_word[char] = word
            if word not in word_to_char:
                word_to_char[word] = char
            if char_to_word[char] != word or word_to_char[word] != char:
                return False
        
        return True"
False,0,0,292,nim-game,Nim Game,nim-game,False,317003,565120,292,False,1,"Can you solve this real interview question? Nim Game - You are playing the following Nim Game with your friend:

 * Initially, there is a heap of stones on the table.
 * You and your friend will alternate taking turns, and you go first.
 * On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
 * The one who removes the last stone is the winner.

Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.

 

Example 1:


Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
In all outcomes, your friend wins.


Example 2:


Input: n = 1
Output: true


Example 3:


Input: n = 2
Output: true


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (932),1.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/nim-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canWinNim(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().canWinNim(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canWinNim(self, n: int) -> bool:
        return n % 4 != 0"
False,0,0,299,bulls-and-cows,Bulls and Cows,bulls-and-cows,False,337903,684403,299,False,2,"Can you solve this real interview question? Bulls and Cows - You are playing the Bulls and Cows [https://en.wikipedia.org/wiki/Bulls_and_Cows] game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:

 * The number of ""bulls"", which are digits in the guess that are in the correct position.
 * The number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.

Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.

The hint should be formatted as ""xAyB"", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.

 

Example 1:


Input: secret = ""1807"", guess = ""7810""
Output: ""1A3B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1807""
  |
""7810""

Example 2:


Input: secret = ""1123"", guess = ""0111""
Output: ""1A1B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1123""        ""1123""
  |      or     |
""0111""        ""0111""
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.


 

Constraints:

 * 1 <= secret.length, guess.length <= 1000
 * secret.length == guess.length
 * secret and guess consist of digits only.",Solutions (2K),2.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/bulls-and-cows/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    secret: str = deserialize(""str"", read_line())
    guess: str = deserialize(""str"", read_line())
    ans = Solution().getHint(secret, guess)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def getHint(self, secret: str, guess: str) -> str:
        bulls = sum(s == g for s, g in zip(secret, guess))
        cows = sum((secret.count(x) - bulls) * min(secret.count(x), guess.count(x)) for x in set(secret))
        return f""{bulls}A{cows}B"""
False,0,0,300,longest-increasing-subsequence,Longest Increasing Subsequence,longest-increasing-subsequence,False,1173281,2252367,300,False,2,"Can you solve this real interview question? Longest Increasing Subsequence - Given an integer array nums, return the length of the longest strictly increasing subsequence.

 

Example 1:


Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


Example 2:


Input: nums = [0,1,0,3,2,3]
Output: 4


Example 3:


Input: nums = [7,7,7,7,7,7,7]
Output: 1


 

Constraints:

 * 1 <= nums.length <= 2500
 * -104 <= nums[i] <= 104

 

Follow up: Can you come up with an algorithm that runs in O(n log(n)) time complexity?",Solutions (4.2K),16.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-increasing-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().lengthOfLIS(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        dp = [1] * len(nums)
        for i in range(len(nums)):
            for j in range(i):
                if nums[i] > nums[j]:
                    dp[i] = max(dp[i], dp[j] + 1)
        return max(dp)"
False,0,0,301,remove-invalid-parentheses,Remove Invalid Parentheses,remove-invalid-parentheses,False,379197,803947,301,False,3,"Can you solve this real interview question? Remove Invalid Parentheses - Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

 

Example 1:


Input: s = ""()())()""
Output: [""(())()"",""()()()""]


Example 2:


Input: s = ""(a)())()""
Output: [""(a())()"",""(a)()()""]


Example 3:


Input: s = "")(""
Output: [""""]


 

Constraints:

 * 1 <= s.length <= 25
 * s consists of lowercase English letters and parentheses '(' and ')'.
 * There will be at most 20 parentheses in s.",Solutions (976),5.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-invalid-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeInvalidParentheses(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removeInvalidParentheses(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def removeInvalidParentheses(self, s: str) -> List[str]:
        def isValid(s):
            count = 0
            for char in s:
                if char == '(':
                    count += 1
                elif char == ')':
                    count -= 1
                    if count < 0:
                        return False
            return count == 0
        
        def backtrack(start, left_count, right_count, left_removed, right_removed, path):
            nonlocal res
            
            if left_count < 0 or right_count < 0 or left_removed < 0 or right_removed < 0:
                return
            
            if start == len(s):
                if left_count == 0 and right_count == 0:
                    res.add(''.join(path))
                return
            
            if s[start] == '(':
                backtrack(start + 1, left_count, right_count, left_removed - 1, right_removed, path)
                path.append('(')
                backtrack(start + 1, left_count + 1, right_count, left_removed, right_removed, path)
                path.pop()
            elif s[start] == ')':
                backtrack(start + 1, left_count, right_count, left_removed, right_removed - 1, path)
                path.append(')')
                backtrack(start + 1, left_count, right_count + 1, left_removed, right_removed, path)
                path.pop()
            else:
                path.append(s[start])
                backtrack(start + 1, left_count, right_count, left_removed, right_removed, path)
                path.pop()
        
        res = set()
        left_removed = 0
        right_removed = 0
        for char in s:
            if char == '(':
                left_removed += 1
            elif char == ')':
                if left_removed > 0:
                    left_removed -= 1
                else:
                    right_removed += 1
        
        backtrack(0, 0, 0, left_removed, right_removed, [])
        
        return list(res)"
False,0,0,306,,Additive Number,additive-number,False,78295,251956,306,False,2,"Can you solve this real interview question? Additive Number - An additive number is a string whose digits can form an additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits, return true if it is an additive number or false otherwise.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.

 

Example 1:


Input: ""112358""
Output: true
Explanation: 
The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8


Example 2:


Input: ""199100199""
Output: true
Explanation: 
The additive sequence is: 1, 99, 100, 199. 
1 + 99 = 100, 99 + 100 = 199


 

Constraints:

 * 1 <= num.length <= 35
 * num consists only of digits.

 

Follow up: How would you handle overflow for very large input integers?",Solutions (604),956,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/additive-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isAdditiveNumber(self, num: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().isAdditiveNumber(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isAdditiveNumber(self, num: str) -> bool:
        def is_valid(num1, num2, start):
            if start == len(num):
                return True
            num3 = num1 + num2
            num3_str = str(num3)
            if num.startswith(num3_str, start):
                return is_valid(num2, num3, start + len(num3_str))
            return False
        
        for i in range(1, len(num) // 2 + 1):
            for j in range(1, len(num) // 2 + 1):
                num1_str = num[:i]
                num2_str = num[i:i+j]
                if (len(num1_str) > 1 and num1_str[0] == '0') or (len(num2_str) > 1 and num2_str[0] == '0'):
                    continue
                num1 = int(num1_str)
                num2 = int(num2_str)
                if is_valid(num1, num2, i+j):
                    return True
        return False"
False,0,0,309,best-time-to-buy-and-sell-stock-with-cooldown,Best Time to Buy and Sell Stock with Cooldown,best-time-to-buy-and-sell-stock-with-cooldown,False,395163,703475,309,False,2,"Can you solve this real interview question? Best Time to Buy and Sell Stock with Cooldown - You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:

 * After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:


Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]


Example 2:


Input: prices = [1]
Output: 0


 

Constraints:

 * 1 <= prices.length <= 5000
 * 0 <= prices[i] <= 1000",Solutions (2.2K),8.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfit(prices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        
        n = len(prices)
        dp = [[0] * 2 for _ in range(n)]
        dp[0][0] = 0
        dp[0][1] = -prices[0]
        
        for i in range(1, n):
            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i])
            dp[i][1] = max(dp[i-1][1], dp[i-2][0] - prices[i])
        
        return dp[n-1][0]"
False,0,0,310,minimum-height-trees,Minimum Height Trees,minimum-height-trees,False,243002,630517,310,False,2,"Can you solve this real interview question? Minimum Height Trees - A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/01/e1.jpg]


Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/01/e2.jpg]


Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]


 

Constraints:

 * 1 <= n <= 2 * 104
 * edges.length == n - 1
 * 0 <= ai, bi < n
 * ai != bi
 * All the pairs (ai, bi) are distinct.
 * The given input is guaranteed to be a tree and there will be no repeated edges.",Solutions (948),6.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-height-trees/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findMinHeightTrees(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findMinHeightTrees(self, n: int, edges: List[List[int]]) -> List[int]:
        # Add your code here
        pass"
False,0,0,312,burst-balloons,Burst Balloons,burst-balloons,False,223359,392142,312,False,3,"Can you solve this real interview question? Burst Balloons - You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

 

Example 1:


Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:


Input: nums = [1,5]
Output: 10


 

Constraints:

 * n == nums.length
 * 1 <= n <= 300
 * 0 <= nums[i] <= 100",Solutions (948),7.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/burst-balloons/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxCoins(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        pass"
False,0,0,313,,Super Ugly Number,super-ugly-number,False,115983,254820,313,False,2,"Can you solve this real interview question? Super Ugly Number - A super ugly number is a positive integer whose prime factors are in the array primes.

Given an integer n and an array of integers primes, return the nth super ugly number.

The nth super ugly number is guaranteed to fit in a 32-bit signed integer.

 

Example 1:


Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].


Example 2:


Input: n = 1, primes = [2,3,5]
Output: 1
Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].


 

Constraints:

 * 1 <= n <= 105
 * 1 <= primes.length <= 100
 * 2 <= primes[i] <= 1000
 * primes[i] is guaranteed to be a prime number.
 * All the values of primes are unique and sorted in ascending order.",Solutions (531),1.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/super-ugly-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    primes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().nthSuperUglyNumber(n, primes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        import heapq
        heap = [1]
        visited = set()
        for _ in range(n):
            num = heapq.heappop(heap)
            for prime in primes:
                tmp = num * prime
                if tmp not in visited:
                    visited.add(tmp)
                    heapq.heappush(heap, tmp)
        return num"
False,0,0,315,count-of-smaller-numbers-after-self,Count of Smaller Numbers After Self,count-of-smaller-numbers-after-self,False,289293,679475,315,False,3,"Can you solve this real interview question? Count of Smaller Numbers After Self - Given an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].

 

Example 1:


Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).
To the right of 2 there is only 1 smaller element (1).
To the right of 6 there is 1 smaller element (1).
To the right of 1 there is 0 smaller element.


Example 2:


Input: nums = [-1]
Output: [0]


Example 3:


Input: nums = [-1,-1]
Output: [0,0]


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104",Solutions (1.9K),8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/count-of-smaller-numbers-after-self/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countSmaller(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countSmaller(self, nums: List[int]) -> List[int]:
        def merge_sort(enum):
            half = len(enum) // 2
            if half:
                left, right = merge_sort(enum[:half]), merge_sort(enum[half:])
                for i in reversed(range(len(enum))):
                    if not right or left and left[-1][1] > right[-1][1]:
                        smaller[left[-1][0]] += len(right)
                        enum[i] = left.pop()
                    else:
                        enum[i] = right.pop()
            return enum
        
        smaller = [0] * len(nums)
        merge_sort(list(enumerate(nums)))
        return smaller"
False,0,0,316,remove-duplicate-letters,Remove Duplicate Letters,remove-duplicate-letters,False,225213,500923,316,False,2,"Can you solve this real interview question? Remove Duplicate Letters - Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

 

Example 1:


Input: s = ""bcabc""
Output: ""abc""


Example 2:


Input: s = ""cbacdcbc""
Output: ""acdb""


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of lowercase English letters.

 

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/ [https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/]",Solutions (1.2K),6.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-duplicate-letters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removeDuplicateLetters(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        stack = []
        seen = set()
        last_occurrence = {c: i for i, c in enumerate(s)}

        for i, c in enumerate(s):
            if c not in seen:
                while stack and c < stack[-1] and i < last_occurrence[stack[-1]]:
                    seen.discard(stack.pop())
                seen.add(c)
                stack.append(c)

        return """".join(stack)"
False,0,0,318,maximum-product-of-word-lengths,Maximum Product of Word Lengths,maximum-product-of-word-lengths,False,200479,334748,318,False,2,"Can you solve this real interview question? Maximum Product of Word Lengths - Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.

 

Example 1:


Input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""]
Output: 16
Explanation: The two words can be ""abcw"", ""xtfn"".


Example 2:


Input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]
Output: 4
Explanation: The two words can be ""ab"", ""cd"".


Example 3:


Input: words = [""a"",""aa"",""aaa"",""aaaa""]
Output: 0
Explanation: No such pair of words.


 

Constraints:

 * 2 <= words.length <= 1000
 * 1 <= words[i].length <= 1000
 * words[i] consists only of lowercase English letters.",Solutions (1.2K),3.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-of-word-lengths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProduct(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().maxProduct(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProduct(self, words: List[str]) -> int:
        def is_valid(word1, word2):
            return not any(letter in word2 for letter in word1)
        
        max_product = 0
        for i in range(len(words)):
            for j in range(i+1, len(words)):
                if is_valid(words[i], words[j]):
                    max_product = max(max_product, len(words[i]) * len(words[j]))
        
        return max_product"
False,0,0,319,bulb-switcher,Bulb Switcher,bulb-switcher,False,129656,268392,319,False,2,"Can you solve this real interview question? Bulb Switcher - There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.

Return the number of bulbs that are on after n rounds.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg]


Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].
After the first round, the three bulbs are [on, on, on].
After the second round, the three bulbs are [on, off, on].
After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.

Example 2:


Input: n = 0
Output: 0


Example 3:


Input: n = 1
Output: 1


 

Constraints:

 * 0 <= n <= 109",Solutions (532),1.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/bulb-switcher/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bulbSwitch(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().bulbSwitch(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bulbSwitch(self, n: int) -> int:
        return int(n ** 0.5)"
False,0,0,321,,Create Maximum Number,create-maximum-number,False,54092,186298,321,False,3,"Can you solve this real interview question? Create Maximum Number - You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.

Create the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the k digits representing the answer.

 

Example 1:


Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]


Example 2:


Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]


Example 3:


Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]


 

Constraints:

 * m == nums1.length
 * n == nums2.length
 * 1 <= m, n <= 500
 * 0 <= nums1[i], nums2[i] <= 9
 * 1 <= k <= m + n",Solutions (198),1.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/create-maximum-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxNumber(nums1, nums2, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxNumber(self, nums1: List[int], nums2: List[int], k: int) -> List[int]:
        pass"
False,0,0,322,coin-change,Coin Change,coin-change,False,1346384,3204580,322,False,2,"Can you solve this real interview question? Coin Change - You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:


Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1


Example 2:


Input: coins = [2], amount = 3
Output: -1


Example 3:


Input: coins = [1], amount = 0
Output: 0


 

Constraints:

 * 1 <= coins.length <= 12
 * 1 <= coins[i] <= 231 - 1
 * 0 <= amount <= 104",Solutions (4.5K),15.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/coin-change/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    coins: List[int] = deserialize(""List[int]"", read_line())
    amount: int = deserialize(""int"", read_line())
    ans = Solution().coinChange(coins, amount)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [float('inf')] * (amount + 1)
        dp[0] = 0
        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] = min(dp[i], dp[i - coin] + 1)
        return dp[amount] if dp[amount] != float('inf') else -1"
False,0,0,324,,Wiggle Sort II,wiggle-sort-ii,False,139790,420133,324,False,2,"Can you solve this real interview question? Wiggle Sort II - Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....

You may assume the input array always has a valid answer.

 

Example 1:


Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.


Example 2:


Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * 0 <= nums[i] <= 5000
 * It is guaranteed that there will be an answer for the given input nums.

 

Follow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?",Solutions (597),2.7K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/wiggle-sort-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wiggleSort(self, nums: List[int]) -> None:
        """"""
        Do not return anything, modify nums in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    wiggleSort(nums)
    ans = nums
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def wiggleSort(self, nums: List[int]) -> None:
        nums.sort()
        half = len(nums[::2])
        nums[::2], nums[1::2] = nums[:half][::-1], nums[half:][::-1]"
False,0,0,326,power-of-three,Power of Three,power-of-three,False,665684,1463123,326,False,1,"Can you solve this real interview question? Power of Three - Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

 

Example 1:


Input: n = 27
Output: true
Explanation: 27 = 33


Example 2:


Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.


Example 3:


Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).


 

Constraints:

 * -231 <= n <= 231 - 1

 

Follow up: Could you solve it without loops/recursion?",Solutions (2.8K),2.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/power-of-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPowerOfThree(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isPowerOfThree(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:

    def isPowerOfThree(self, n: int) -> bool:
        return n > 0 and 1162261467 % n == 0"
False,0,0,327,,Count of Range Sum,count-of-range-sum,False,67910,189324,327,False,3,"Can you solve this real interview question? Count of Range Sum - Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:


Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.


Example 2:


Input: nums = [0], lower = 0, upper = 0
Output: 1


 

Constraints:

 * 1 <= nums.length <= 105
 * -231 <= nums[i] <= 231 - 1
 * -105 <= lower <= upper <= 105
 * The answer is guaranteed to fit in a 32-bit integer.",Solutions (353),2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/count-of-range-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    lower: int = deserialize(""int"", read_line())
    upper: int = deserialize(""int"", read_line())
    ans = Solution().countRangeSum(nums, lower, upper)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countRangeSum(self, nums: List[int], lower: int, upper: int) -> int:
        import bisect

        def count_while_sorting(prefix_sums, lower, upper):
            def merge_sort(start, end):
                if end - start <= 1: return 0
                mid = (start + end) // 2
                count = merge_sort(start, mid) + merge_sort(mid, end)
                j = k = t = mid
                cache = [0] * (end - start)
                for i in range(start, mid):
                    while k < end and prefix_sums[k] - prefix_sums[i] < lower: k += 1
                    while j < end and prefix_sums[j] - prefix_sums[i] <= upper: j += 1
                    while t < end and prefix_sums[t] < prefix_sums[i]:
                        cache[t - start] = prefix_sums[t]
                        t += 1
                    cache[i - start] = prefix_sums[i]
                    count += j - k
                while t < end: cache[t - start] = prefix_sums[t]; t += 1
                prefix_sums[start:end] = cache
                return count

            return merge_sort(0, len(prefix_sums))

        prefix_sums = [0] + list(nums)
        for i in range(1, len(prefix_sums)):
            prefix_sums[i] += prefix_sums[i - 1]
        return count_while_sorting(prefix_sums, lower, upper)"
False,0,0,329,longest-increasing-path-in-a-matrix,Longest Increasing Path in a Matrix,longest-increasing-path-in-a-matrix,False,436866,833340,329,False,3,"Can you solve this real interview question? Longest Increasing Path in a Matrix - Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg]


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].


Example 2:

[https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg]


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


Example 3:


Input: matrix = [[1]]
Output: 1


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 200
 * 0 <= matrix[i][j] <= 231 - 1",Solutions (2.6K),7.8K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-increasing-path-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().longestIncreasingPath(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        # Your solution here"
False,0,0,330,patching-array,Patching Array,patching-array,False,61126,151807,330,False,3,"Can you solve this real interview question? Patching Array - Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.

 

Example 1:


Input: nums = [1,3], n = 6
Output: 1
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.
Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].
Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].
So we only need 1 patch.


Example 2:


Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].


Example 3:


Input: nums = [1,2,2], n = 5
Output: 0


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 104
 * nums is sorted in ascending order.
 * 1 <= n <= 231 - 1",Solutions (237),1.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/patching-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPatches(self, nums: List[int], n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().minPatches(nums, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPatches(self, nums: List[int], n: int) -> int:
        patches = 0
        missing = 1
        i = 0
        
        while missing <= n:
            if i < len(nums) and nums[i] <= missing:
                missing += nums[i]
                i += 1
            else:
                missing *= 2
                patches += 1
                
        return patches"
False,0,0,331,verify-preorder-serialization-of-a-binary-tree,Verify Preorder Serialization of a Binary Tree,verify-preorder-serialization-of-a-binary-tree,False,127637,286342,331,False,2,"Can you solve this real interview question? Verify Preorder Serialization of a Binary Tree - One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.

[https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg]

For example, the above binary tree can be serialized to the string ""9,3,4,#,#,1,#,#,2,#,6,#,#"", where '#' represents a null node.

Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid.

 * For example, it could never contain two consecutive commas, such as ""1,,3"".

Note: You are not allowed to reconstruct the tree.

 

Example 1:

Input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#""
Output: true


Example 2:

Input: preorder = ""1,#""
Output: false


Example 3:

Input: preorder = ""9,#,#,1""
Output: false


 

Constraints:

 * 1 <= preorder.length <= 104
 * preorder consist of integers in the range [0, 100] and '#' separated by commas ','.",Solutions (818),2.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isValidSerialization(self, preorder: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    preorder: str = deserialize(""str"", read_line())
    ans = Solution().isValidSerialization(preorder)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isValidSerialization(self, preorder: str) -> bool:
        stack = []
        for node in preorder.split(','):
            stack.append(node)
            while len(stack) >= 3 and stack[-1] == stack[-2] == '#' and stack[-3] != '#':
                stack.pop()
                stack.pop()
                stack.pop()
                stack.append('#')
        return len(stack) == 1 and stack[0] == '#'"
False,0,0,332,reconstruct-itinerary,Reconstruct Itinerary,reconstruct-itinerary,False,324601,787450,332,False,3,"Can you solve this real interview question? Reconstruct Itinerary - You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from ""JFK"", thus, the itinerary must begin with ""JFK"". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.

 * For example, the itinerary [""JFK"", ""LGA""] has a smaller lexical order than [""JFK"", ""LGB""].

You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg]


Input: tickets = [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]]
Output: [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]


Example 2:

[https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg]


Input: tickets = [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]]
Output: [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]
Explanation: Another possible reconstruction is [""JFK"",""SFO"",""ATL"",""JFK"",""ATL"",""SFO""] but it is larger in lexical order.


 

Constraints:

 * 1 <= tickets.length <= 300
 * tickets[i].length == 2
 * fromi.length == 3
 * toi.length == 3
 * fromi and toi consist of uppercase English letters.
 * fromi != toi",Solutions (1.1K),4.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/reconstruct-itinerary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    tickets: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().findItinerary(tickets)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findItinerary(self, tickets: List[List[str]]) -> List[str]:
        def dfs(curr):
            while graph[curr]:
                dfs(graph[curr].pop(0))
            itinerary.append(curr)

        graph = defaultdict(list)
        for frm, to in sorted(tickets, reverse=True):
            graph[frm].append(to)

        itinerary = []
        dfs(""JFK"")
        return itinerary[::-1]"
False,0,0,334,increasing-triplet-subsequence,Increasing Triplet Subsequence,increasing-triplet-subsequence,False,380066,889721,334,False,2,"Can you solve this real interview question? Increasing Triplet Subsequence - Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:


Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.


Example 2:


Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.


Example 3:


Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.


 

Constraints:

 * 1 <= nums.length <= 5 * 105
 * -231 <= nums[i] <= 231 - 1

 

Follow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?",Solutions (2K),6.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/increasing-triplet-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().increasingTriplet(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        small = float('inf')
        big = float('inf')
        
        for num in nums:
            if num <= small:
                small = num
            elif num <= big:
                big = num
            else:
                return True
        
        return False"
False,0,0,335,,Self Crossing,self-crossing,False,30083,102164,335,False,3,"Can you solve this real interview question? Self Crossing - You are given an array of integers distance.

You start at the point (0, 0) on an X-Y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.

Return true if your path crosses itself or false if it does not.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/21/11.jpg]


Input: distance = [2,1,1,2]
Output: true
Explanation: The path crosses itself at the point (0, 1).


Example 2:

[https://assets.leetcode.com/uploads/2022/12/21/22.jpg]


Input: distance = [1,2,3,4]
Output: false
Explanation: The path does not cross itself at any point.


Example 3:

[https://assets.leetcode.com/uploads/2022/12/21/33.jpg]


Input: distance = [1,1,1,2,1]
Output: true
Explanation: The path crosses itself at the point (0, 0).


 

Constraints:

 * 1 <= distance.length <= 105
 * 1 <= distance[i] <= 105",Solutions (161),313,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/self-crossing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isSelfCrossing(self, distance: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    distance: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isSelfCrossing(distance)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isSelfCrossing(self, distance: List[int]) -> bool:
        x, y, a, b, c, d = 0, 0, 0, 0, 0, 0
        for dist in distance:
            if d >= b > 0 and (a >= c or (a >= c - distance[i] and i + 1 < len(distance) and distance[i + 1] >= distance[i] - d)):
            return True
        a, b, c, d = i + 1 < len(distance) and distance[i + 1] or 0, a, b, c
    return False"
False,0,0,336,palindrome-pairs,Palindrome Pairs,palindrome-pairs,False,191430,547042,336,False,3,"Can you solve this real interview question? Palindrome Pairs - You are given a 0-indexed array of unique strings words.

A palindrome pair is a pair of integers (i, j) such that:

 * 0 <= i, j < words.length,
 * i != j, and
 * words[i] + words[j] (the concatenation of the two strings) is a palindrome.

Return an array of all the palindrome pairs of words.

 

Example 1:


Input: words = [""abcd"",""dcba"",""lls"",""s"",""sssll""]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are [""abcddcba"",""dcbaabcd"",""slls"",""llssssll""]


Example 2:


Input: words = [""bat"",""tab"",""cat""]
Output: [[0,1],[1,0]]
Explanation: The palindromes are [""battab"",""tabbat""]


Example 3:


Input: words = [""a"",""""]
Output: [[0,1],[1,0]]
Explanation: The palindromes are [""a"",""a""]


 

Constraints:

 * 1 <= words.length <= 5000
 * 0 <= words[i].length <= 300
 * words[i] consists of lowercase English letters.",Solutions (772),4.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().palindromePairs(words)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        def is_palindrome(word):
            return word == word[::-1]
        
        def all_pairs(words):
            pairs = []
            for i in range(len(words)):
                for j in range(len(words)):
                    if i != j:
                        combined = words[i] + words[j]
                        if is_palindrome(combined):
                            pairs.append([i, j])
            return pairs
        
        return all_pairs(words)"
False,0,0,338,counting-bits,Counting Bits,counting-bits,False,747052,986843,338,False,1,"Can you solve this real interview question? Counting Bits - Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:


Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10


Example 2:


Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101


 

Constraints:

 * 0 <= n <= 105

 

Follow up:

 * It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?
 * Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?",Solutions (5.4K),8.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/counting-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countBits(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countBits(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countBits(self, n: int) -> List[int]:
        ans = [0] * (n+1)
        for i in range(1, n+1):
            ans[i] = ans[i>>1] + (i & 1)
        return ans"
False,0,0,341,flatten-nested-iterator,Flatten Nested List Iterator,flatten-nested-list-iterator,False,359373,581426,341,False,2,"Can you solve this real interview question? Flatten Nested List Iterator - You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.

Implement the NestedIterator class:

 * NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.
 * int next() Returns the next integer in the nested list.
 * boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.

Your code will be tested with the following pseudocode:


initialize iterator with nestedList
res = []
while iterator.hasNext()
    append iterator.next() to the end of res
return res


If res matches the expected flattened list, then your code will be judged as correct.

 

Example 1:


Input: nestedList = [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].


Example 2:


Input: nestedList = [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].


 

Constraints:

 * 1 <= nestedList.length <= 500
 * The values of the integers in the nested list is in the range [-106, 106].",Solutions (2K),4.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/flatten-nested-list-iterator/

from typing import *
from leetgo_py import *

# @lc code=begin

# """"""
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """"""
#class NestedInteger:
#    def isInteger(self) -> bool:
#        """"""
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        """"""
#
#    def getInteger(self) -> int:
#        """"""
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        """"""
#
#    def getList(self) -> [NestedInteger]:
#        """"""
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        """"""

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        
    
    def next(self) -> int:
        
    
    def hasNext(self) -> bool:
         

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    nestedList: List[NestedInteger] = deserialize(""List[NestedInteger]"", read_line())
    ans = Solution().(nestedList)
    print(""\noutput:"", serialize(ans, ""integer""))
","class NestedIterator:
    def __init__(self, nestedList):
        self.stack = nestedList[::-1]
    
    def isInteger(self) -> bool:
        return self.hasNext() and isinstance(self.stack[-1], int)
    
    def next(self) -> int:
        return self.stack.pop()
    
    def hasNext(self) -> bool:
        while self.stack:
            if self.isInteger():
                return True
            top = self.stack.pop()
            if isinstance(top, list):
                self.stack.extend(top[::-1])
        return False"
False,0,0,342,power-of-four,Power of Four,power-of-four,False,447480,970577,342,False,1,"Can you solve this real interview question? Power of Four - Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

 

Example 1:

Input: n = 16
Output: true


Example 2:

Input: n = 5
Output: false


Example 3:

Input: n = 1
Output: true


 

Constraints:

 * -231 <= n <= 231 - 1

 

Follow up: Could you solve it without loops/recursion?",Solutions (4.1K),3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/power-of-four/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isPowerOfFour(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPowerOfFour(self, n: int) -> bool:
        return n > 0 and (n & (n - 1) == 0) and (n - 1) % 3 == 0"
False,0,0,343,,Integer Break,integer-break,False,226698,404930,343,False,2,"Can you solve this real interview question? Integer Break - Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.

Return the maximum product you can get.

 

Example 1:


Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.


Example 2:


Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.


 

Constraints:

 * 2 <= n <= 58",Solutions (2.2K),3.6K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/integer-break/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def integerBreak(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().integerBreak(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def integerBreak(self, n: int) -> int:
        if n == 2:
            return 1

        if n == 3:
            return 2
        
        if n % 3 == 0:
            return 3 ** (n // 3)
        
        if n % 3 == 1:
            return 3 ** ((n // 3) - 1) * 4
        
        if n % 3 == 2:
            return 3 ** (n // 3) * 2"
False,0,0,344,reverse-string,Reverse String,reverse-string,False,2031629,2649002,344,False,1,"Can you solve this real interview question? Reverse String - Write a function that reverses a string. The input string is given as an array of characters s.

You must do this by modifying the input array in-place [https://en.wikipedia.org/wiki/In-place_algorithm] with O(1) extra memory.

 

Example 1:

Input: s = [""h"",""e"",""l"",""l"",""o""]
Output: [""o"",""l"",""l"",""e"",""h""]


Example 2:

Input: s = [""H"",""a"",""n"",""n"",""a"",""h""]
Output: [""h"",""a"",""n"",""n"",""a"",""H""]


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is a printable ascii character [https://en.wikipedia.org/wiki/ASCII#Printable_characters].",Solutions (8.6K),7.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseString(self, s: List[str]) -> None:
        """"""
        Do not return anything, modify s in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    s: List[str] = deserialize(""List[str]"", read_line())
    reverseString(s)
    ans = s
    print(""\noutput:"", serialize(ans, ""List[str]""))
","class Solution:
    def reverseString(self, s: List[str]) -> None:
        s[:] = s[::-1]"
False,0,0,345,reverse-vowels-of-a-string,Reverse Vowels of a String,reverse-vowels-of-a-string,False,488073,974689,345,False,1,"Can you solve this real interview question? Reverse Vowels of a String - Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

 

Example 1:

Input: s = ""hello""
Output: ""holle""


Example 2:

Input: s = ""leetcode""
Output: ""leotcede""


 

Constraints:

 * 1 <= s.length <= 3 * 105
 * s consist of printable ASCII characters.",Solutions (4.2K),3.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-vowels-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseVowels(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reverseVowels(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseVowels(self, s: str) -> str:
        vowels = set('aeiouAEIOU')
        s = list(s)
        left, right = 0, len(s) - 1
        while left < right:
            while left < right and s[left] not in vowels:
                left += 1
            while left < right and s[right] not in vowels:
                right -= 1
            s[left], s[right] = s[right], s[left]
            left += 1
            right -= 1
        return ''.join(s)"
False,0,0,347,top-k-frequent-elements,Top K Frequent Elements,top-k-frequent-elements,False,1352190,2104661,347,False,2,"Can you solve this real interview question? Top K Frequent Elements - Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]


Example 2:

Input: nums = [1], k = 1
Output: [1]


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104
 * k is in the range [1, the number of unique elements in the array].
 * It is guaranteed that the answer is unique.

 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.",Solutions (7K),13.1K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/top-k-frequent-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().topKFrequent(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        import collections
        
        count = collections.Counter(nums)
        return [num for num, _ in count.most_common(k)]"
False,0,0,349,intersection-of-two-arrays,Intersection of Two Arrays,intersection-of-two-arrays,False,828252,1168611,349,False,1,"Can you solve this real interview question? Intersection of Two Arrays - Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:


Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]


Example 2:


Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 1000
 * 0 <= nums1[i], nums2[i] <= 1000",Solutions (4.9K),4.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/intersection-of-two-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().intersection(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        return list(set(nums1) & set(nums2))"
False,0,0,350,intersection-of-two-arrays-ii,Intersection of Two Arrays II,intersection-of-two-arrays-ii,False,1031095,1843363,350,False,1,"Can you solve this real interview question? Intersection of Two Arrays II - Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

 

Example 1:


Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]


Example 2:


Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 1000
 * 0 <= nums1[i], nums2[i] <= 1000

 

Follow up:

 * What if the given array is already sorted? How would you optimize your algorithm?
 * What if nums1's size is small compared to nums2's size? Which algorithm is better?
 * What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",Solutions (5.6K),6.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/intersection-of-two-arrays-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().intersect(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        import collections
        return list((collections.Counter(nums1) & collections.Counter(nums2)).elements())"
False,0,0,354,russian-doll-envelopes,Russian Doll Envelopes,russian-doll-envelopes,False,186019,489946,354,False,3,"Can you solve this real interview question? Russian Doll Envelopes - You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.

 

Example 1:


Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).


Example 2:


Input: envelopes = [[1,1],[1,1],[1,1]]
Output: 1


 

Constraints:

 * 1 <= envelopes.length <= 105
 * envelopes[i].length == 2
 * 1 <= wi, hi <= 105",Solutions (980),5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/russian-doll-envelopes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    envelopes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxEnvelopes(envelopes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
        envelopes.sort(key=lambda x: (x[0], -x[1]))
        dp = []
        for w, h in envelopes:
            left, right = 0, len(dp)
            while left < right:
                mid = left + (right - left) // 2
                if dp[mid][1] < h:
                    left = mid + 1
                else:
                    right = mid
            if right == len(dp):
                dp.append((w, h))
            else:
                dp[right] = (w, h)
        return len(dp)"
False,0,0,357,,Count Numbers with Unique Digits,count-numbers-with-unique-digits,False,116081,224006,357,False,2,"Can you solve this real interview question? Count Numbers with Unique Digits - Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.

 

Example 1:


Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99


Example 2:


Input: n = 0
Output: 1


 

Constraints:

 * 0 <= n <= 8",Solutions (1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/count-numbers-with-unique-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countNumbersWithUniqueDigits(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countNumbersWithUniqueDigits(self, n: int) -> int:
        if n == 0:
            return 1
        dp = [9]
        for i in range(9, 0, -1):
            dp.append(dp[-1] * i)
        return sum(dp[:n]) + 1"
False,0,0,363,max-sum-of-rectangle-no-larger-than-k,Max Sum of Rectangle No Larger Than K,max-sum-of-rectangle-no-larger-than-k,False,118143,268436,363,False,3,"Can you solve this real interview question? Max Sum of Rectangle No Larger Than K - Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg]


Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).


Example 2:


Input: matrix = [[2,2,-1]], k = 3
Output: 3


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 100
 * -100 <= matrix[i][j] <= 100
 * -105 <= k <= 105

 

Follow up: What if the number of rows is much larger than the number of columns?",Solutions (508),3.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxSumSubmatrix(matrix, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumSubmatrix(self, matrix: List[List[int]], k: int) -> int:
        pass"
False,0,0,365,,Water and Jug Problem,water-and-jug-problem,False,78665,210257,365,False,2,"Can you solve this real interview question? Water and Jug Problem - You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.

If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.

Operations allowed:

 * Fill any of the jugs with water.
 * Empty any of the jugs.
 * Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.

 

Example 1:


Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
Output: true
Explanation: The famous Die Hardhttps://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01 example 


Example 2:


Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
Output: false


Example 3:


Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
Output: true


 

Constraints:

 * 1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106",Solutions (501),1.2K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/water-and-jug-problem/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canMeasureWater(self, x: int, y: int, target: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    y: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().canMeasureWater(x, y, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canMeasureWater(self, x: int, y: int, target: int) -> bool:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a

        if x + y < target:
            return False
        if x == target or y == target or x + y == target:
            return True
        return target % gcd(x, y) == 0"
False,0,0,367,valid-perfect-square,Valid Perfect Square,valid-perfect-square,False,470306,1085490,367,False,1,"Can you solve this real interview question? Valid Perfect Square - Given a positive integer num, return true if num is a perfect square or false otherwise.

A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.

You must not use any built-in library function, such as sqrt.

 

Example 1:


Input: num = 16
Output: true
Explanation: We return true because 4 * 4 = 16 and 4 is an integer.


Example 2:


Input: num = 14
Output: false
Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer.


 

Constraints:

 * 1 <= num <= 231 - 1",Solutions (3.8K),3.4K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-perfect-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().isPerfectSquare(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPerfectSquare(self, num: int) -> bool:
        left, right = 1, num
        
        while left <= right:
            mid = left + (right - left) // 2
            square = mid * mid
            
            if square == num:
                return True
            elif square < num:
                left = mid + 1
            else:
                right = mid - 1
        
        return False"
False,0,0,368,largest-divisible-subset,Largest Divisible Subset,largest-divisible-subset,False,175904,423989,368,False,2,"Can you solve this real interview question? Largest Divisible Subset - Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

 * answer[i] % answer[j] == 0, or
 * answer[j] % answer[i] == 0

If there are multiple solutions, return any of them.

 

Example 1:


Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.


Example 2:


Input: nums = [1,2,4,8]
Output: [1,2,4,8]


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 2 * 109
 * All the integers in nums are unique.",Solutions (980),4.3K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-divisible-subset/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestDivisibleSubset(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def largestDivisibleSubset(self, nums: List[int]) -> List[int]:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        if not nums:
            return []
        
        nums.sort()
        n = len(nums)
        dp = [1] * n
        prev = [-1] * n
        max_len, max_idx = 1, 0
        
        for i in range(n):
            for j in range(i):
                if nums[i] % nums[j] == 0:
                    if dp[i] < dp[j] + 1:
                        dp[i] = dp[j] + 1
                        prev[i] = j
            if dp[i] > max_len:
                max_len = dp[i]
                max_idx = i
        
        subset = []
        while max_idx != -1:
            subset.append(nums[max_idx])
            max_idx = prev[max_idx]
        
        return subset[::-1]"
False,0,0,371,sum-of-two-integers,Sum of Two Integers,sum-of-two-integers,False,373704,737165,371,False,2,"Can you solve this real interview question? Sum of Two Integers - Given two integers a and b, return the sum of the two integers without using the operators + and -.

 

Example 1:

Input: a = 1, b = 2
Output: 3


Example 2:

Input: a = 2, b = 3
Output: 5


 

Constraints:

 * -1000 <= a, b <= 1000",Solutions (1.7K),3.5K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-two-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getSum(self, a: int, b: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    ans = Solution().getSum(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getSum(self, a: int, b: int) -> int:
        mask = 0xFFFFFFFF
        while b != 0:
            a, b = (a ^ b) & mask, ((a & b) << 1) & mask
        return a if a <= 0x7FFFFFFF else ~(a ^ mask)"
False,0,0,372,,Super Pow,super-pow,False,58090,159641,372,False,2,"Can you solve this real interview question? Super Pow - Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.

 

Example 1:


Input: a = 2, b = [3]
Output: 8


Example 2:


Input: a = 2, b = [1,0]
Output: 1024


Example 3:


Input: a = 1, b = [4,3,3,8,5,2]
Output: 1


 

Constraints:

 * 1 <= a <= 231 - 1
 * 1 <= b.length <= 2000
 * 0 <= b[i] <= 9
 * b does not contain leading zeros.",Solutions (436),716,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/super-pow/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def superPow(self, a: int, b: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().superPow(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def superPow(self, a: int, b: List[int]) -> int:
        res = 1
        for i in b:
            res = (pow(res, 10, 1337) * pow(a, i, 1337)) % 1337
        return res"
False,0,0,373,,Find K Pairs with Smallest Sums,find-k-pairs-with-smallest-sums,False,195551,511191,373,False,2,"Can you solve this real interview question? Find K Pairs with Smallest Sums - You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

 

Example 1:


Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]


Example 2:


Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]


Example 3:


Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * -109 <= nums1[i], nums2[i] <= 109
 * nums1 and nums2 both are sorted in ascending order.
 * 1 <= k <= 104",Solutions (942),3.9K,"# Created by asetti2002 at 2024/04/17 02:18
# leetgo: 1.4.3
# https://leetcode.com/problems/find-k-pairs-with-smallest-sums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kSmallestPairs(nums1, nums2, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def kSmallestPairs(self, nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:
        import heapq
        if not nums1 or not nums2:
            return []
        result = []
        heap = []
        for i in range(min(k, len(nums1))):
            heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))
        while len(result) < k and heap:
            val, i, j = heapq.heappop(heap)
            result.append([nums1[i], nums2[j]])
            if j + 1 < len(nums2):
                heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))
        return result"
False,0,0,375,guess-higher-or-lower-number-ii,Guess Number Higher or Lower II,guess-number-higher-or-lower-ii,False,104308,222640,375,False,2,"Can you solve this real interview question? Guess Number Higher or Lower II - We are playing the Guessing Game. The game will work as follows:

 1. I pick a number between 1 and n.
 2. You guess a number.
 3. If you guess the right number, you win the game.
 4. If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
 5. Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.

Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/10/graph.png]


Input: n = 10
Output: 16
Explanation: The winning strategy is as follows:
- The range is [1,10]. Guess 7.
    - If this is my number, your total is $0. Otherwise, you pay $7.
    - If my number is higher, the range is [8,10]. Guess 9.
        - If this is my number, your total is $7. Otherwise, you pay $9.
        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.
        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.
    - If my number is lower, the range is [1,6]. Guess 3.
        - If this is my number, your total is $7. Otherwise, you pay $3.
        - If my number is higher, the range is [4,6]. Guess 5.
            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.
            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.
            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.
        - If my number is lower, the range is [1,2]. Guess 1.
            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.
            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.
The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.


Example 2:


Input: n = 1
Output: 0
Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.


Example 3:


Input: n = 2
Output: 1
Explanation: There are two possible numbers, 1 and 2.
- Guess 1.
    - If this is my number, your total is $0. Otherwise, you pay $1.
    - If my number is higher, it must be 2. Guess 2. Your total is $1.
The worst case is that you pay $1.


 

Constraints:

 * 1 <= n <= 200",Solutions (498),1.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/guess-number-higher-or-lower-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMoneyAmount(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().getMoneyAmount(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMoneyAmount(self, n: int) -> int:
        dp = [[0] * (n + 1) for _ in range(n + 1)]
        for lo in range(n - 1, 0, -1):
            for hi in range(lo + 1, n + 1):
                dp[lo][hi] = min(x + max(dp[lo][x - 1], dp[x + 1][hi]) for x in range(lo, hi))
        return dp[1][n]"
False,0,0,376,wiggle-subsequence,Wiggle Subsequence,wiggle-subsequence,False,217483,450071,376,False,2,"Can you solve this real interview question? Wiggle Subsequence - A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.

 * For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
 * In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.

A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.

 

Example 1:


Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).


Example 2:


Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.
One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).


Example 3:


Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] <= 1000

 

Follow up: Could you solve this in O(n) time?",Solutions (2.2K),4.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/wiggle-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().wiggleMaxLength(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        if len(nums) < 2:
            return len(nums)
        
        up = down = 1
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1
        
        return max(up, down)"
False,0,0,377,combination-sum-iv,Combination Sum IV,combination-sum-iv,False,351935,674522,377,False,2,"Can you solve this real interview question? Combination Sum IV - Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:


Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.


Example 2:


Input: nums = [9], target = 3
Output: 0


 

Constraints:

 * 1 <= nums.length <= 200
 * 1 <= nums[i] <= 1000
 * All the elements of nums are unique.
 * 1 <= target <= 1000

 

Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",Solutions (2K),5.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/combination-sum-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().combinationSum4(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        dp = [0] * (target + 1)
        dp[0] = 1
        
        for i in range(1, target + 1):
            for num in nums:
                if i >= num:
                    dp[i] += dp[i - num]
        
        return dp[target]"
False,0,0,378,kth-smallest-element-in-a-sorted-matrix,Kth Smallest Element in a Sorted Matrix,kth-smallest-element-in-a-sorted-matrix,False,527495,854243,378,False,2,"Can you solve this real interview question? Kth Smallest Element in a Sorted Matrix - Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.

Note that it is the kth smallest element in the sorted order, not the kth distinct element.

You must find a solution with a memory complexity better than O(n2).

 

Example 1:


Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13


Example 2:


Input: matrix = [[-5]], k = 1
Output: -5


 

Constraints:

 * n == matrix.length == matrix[i].length
 * 1 <= n <= 300
 * -109 <= matrix[i][j] <= 109
 * All the rows and columns of matrix are guaranteed to be sorted in non-decreasing order.
 * 1 <= k <= n2

 

Follow up:

 * Could you solve the problem with a constant memory (i.e., O(1) memory complexity)?
 * Could you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper [http://www.cse.yorku.ca/~andy/pubs/X+Y.pdf] fun.",Solutions (3K),8.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthSmallest(matrix, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        import heapq
        n = len(matrix)
        heap = [(matrix[i][0], i, 0) for i in range(n)]
        heapq.heapify(heap)
        
        for _ in range(k):
            val, r, c = heapq.heappop(heap)
            if c + 1 < n:
                heapq.heappush(heap, (matrix[r][c + 1], r, c + 1))
        
        return val"
False,0,0,383,ransom-note,Ransom Note,ransom-note,False,724335,1244775,383,False,1,"Can you solve this real interview question? Ransom Note - Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.

 

Example 1:

Input: ransomNote = ""a"", magazine = ""b""
Output: false


Example 2:

Input: ransomNote = ""aa"", magazine = ""ab""
Output: false


Example 3:

Input: ransomNote = ""aa"", magazine = ""aab""
Output: true


 

Constraints:

 * 1 <= ransomNote.length, magazine.length <= 105
 * ransomNote and magazine consist of lowercase English letters.",Solutions (5.2K),3.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/ransom-note/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    ransomNote: str = deserialize(""str"", read_line())
    magazine: str = deserialize(""str"", read_line())
    ans = Solution().canConstruct(ransomNote, magazine)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        from collections import Counter
        return not Counter(ransomNote) - Counter(magazine)"
False,0,0,386,,Lexicographical Numbers,lexicographical-numbers,False,100003,162448,386,False,2,"Can you solve this real interview question? Lexicographical Numbers - Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]


Example 2:

Input: n = 2
Output: [1,2]


 

Constraints:

 * 1 <= n <= 5 * 104",Solutions (835),1.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/lexicographical-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lexicalOrder(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().lexicalOrder(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def lexicalOrder(self, n: int) -> List[int]:
        def dfs(num, n, res):
            if num > n:
                return
            res.append(num)
            for i in range(10):
                new_num = num * 10 + i
                if new_num <= n:
                    dfs(new_num, n, res)
        
        res = []
        for i in range(1, 10):
            dfs(i, n, res)
        
        return res"
False,0,0,387,first-unique-character-in-a-string,First Unique Character in a String,first-unique-character-in-a-string,False,1366877,2295730,387,False,1,"Can you solve this real interview question? First Unique Character in a String - Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = ""leetcode""
Output: 0


Example 2:

Input: s = ""loveleetcode""
Output: 2


Example 3:

Input: s = ""aabb""
Output: -1


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only lowercase English letters.",Solutions (6.7K),7.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/first-unique-character-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def firstUniqChar(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().firstUniqChar(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def firstUniqChar(self, s: str) -> int:
        char_count = {}
        for char in s:
            if char in char_count:
                char_count[char] += 1
            else:
                char_count[char] = 1
        
        for i in range(len(s)):
            if char_count[s[i]] == 1:
                return i
        
        return -1"
False,0,0,388,,Longest Absolute File Path,longest-absolute-file-path,False,141160,302676,388,False,2,"Can you solve this real interview question? Longest Absolute File Path - Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:

[https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg]

Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.

In text form, it looks like this (with ⟶ representing the tab character):


dir
⟶ subdir1
⟶ ⟶ file1.ext
⟶ ⟶ subsubdir1
⟶ subdir2
⟶ ⟶ subsubdir2
⟶ ⟶ ⟶ file2.ext


If we were to write this representation in code, it will look like this: ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"". Note that the '\n' and '\t' are the new-line and tab characters.

Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is ""dir/subdir2/subsubdir2/file2.ext"". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.

Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.

Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg]


Input: input = ""dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext""
Output: 20
Explanation: We have only one file, and the absolute path is ""dir/subdir2/file.ext"" of length 20.


Example 2:

[https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg]


Input: input = ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext""
Output: 32
Explanation: We have two files:
""dir/subdir1/file1.ext"" of length 21
""dir/subdir2/subsubdir2/file2.ext"" of length 32.
We return 32 since it is the longest absolute path to a file.


Example 3:


Input: input = ""a""
Output: 0
Explanation: We do not have any files, just a single directory named ""a"".


 

Constraints:

 * 1 <= input.length <= 104
 * input may contain lowercase or uppercase English letters, a new line character '\n', a tab character '\t', a dot '.', a space ' ', and digits.
 * All file and directory names have positive length.",Solutions (818),1.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-absolute-file-path/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lengthLongestPath(self, input: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    input: str = deserialize(""str"", read_line())
    ans = Solution().lengthLongestPath(input)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lengthLongestPath(self, input: str) -> int:
        # implementation here
        pass"
False,0,0,389,find-the-difference,Find the Difference,find-the-difference,False,484495,808579,389,False,1,"Can you solve this real interview question? Find the Difference - You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:


Input: s = ""abcd"", t = ""abcde""
Output: ""e""
Explanation: 'e' is the letter that was added.


Example 2:


Input: s = """", t = ""y""
Output: ""y""


 

Constraints:

 * 0 <= s.length <= 1000
 * t.length == s.length + 1
 * s and t consist of lowercase English letters.",Solutions (4.4K),3.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().findTheDifference(s, t)
    print(""\noutput:"", serialize(ans, ""character""))
","class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        return chr(sum(map(ord, t)) - sum(map(ord, s)) )"
False,0,0,390,,Elimination Game,elimination-game,False,56777,123042,390,False,2,"Can you solve this real interview question? Elimination Game - You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:

 * Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.
 * Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
 * Keep repeating the steps again, alternating left to right and right to left, until a single number remains.

Given the integer n, return the last number that remains in arr.

 

Example 1:


Input: n = 9
Output: 6
Explanation:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 109",Solutions (416),1.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/elimination-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lastRemaining(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().lastRemaining(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lastRemaining(self, n: int) -> int:
        if n == 1:
            return 1
        return 2 * (n // 2 + 1 - self.lastRemaining(n // 2))"
False,0,0,391,,Perfect Rectangle,perfect-rectangle,False,38883,118491,391,False,3,"Can you solve this real interview question? Perfect Rectangle - Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg]


Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.


Example 2:

[https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg]


Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.


Example 3:

[https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg]


Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.


 

Constraints:

 * 1 <= rectangles.length <= 2 * 104
 * rectangles[i].length == 4
 * -105 <= xi, yi, ai, bi <= 105",Solutions (264),766,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/perfect-rectangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    rectangles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isRectangleCover(rectangles)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isRectangleCover(self, rectangles: List[List[int]]) -> bool:
        pass"
False,0,0,392,is-subsequence,Is Subsequence,is-subsequence,False,798435,1675280,392,False,1,"Can you solve this real interview question? Is Subsequence - Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., ""ace"" is a subsequence of ""abcde"" while ""aec"" is not).

 

Example 1:

Input: s = ""abc"", t = ""ahbgdc""
Output: true


Example 2:

Input: s = ""axc"", t = ""ahbgdc""
Output: false


 

Constraints:

 * 0 <= s.length <= 100
 * 0 <= t.length <= 104
 * s and t consist only of lowercase English letters.

 

Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 109, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?",Solutions (7.4K),7.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/is-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().isSubsequence(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        i, j = 0, 0
        while i < len(s) and j < len(t):
            if s[i] == t[j]:
                i += 1
            j += 1
        return i == len(s)"
False,0,0,393,utf-8-validation,UTF-8 Validation,utf-8-validation,False,116296,258025,393,False,2,"Can you solve this real interview question? UTF-8 Validation - Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:

 1. For a 1-byte character, the first bit is a 0, followed by its Unicode code.
 2. For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.

This is how the UTF-8 encoding would work:


     Number of Bytes   |        UTF-8 Octet Sequence
                       |              (binary)
   --------------------+-----------------------------------------
            1          |   0xxxxxxx
            2          |   110xxxxx 10xxxxxx
            3          |   1110xxxx 10xxxxxx 10xxxxxx
            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx


x denotes a bit in the binary form of a byte that may be either 0 or 1.

Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.

 

Example 1:


Input: data = [197,130,1]
Output: true
Explanation: data represents the octet sequence: 11000101 10000010 00000001.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.


Example 2:


Input: data = [235,140,4]
Output: false
Explanation: data represented the octet sequence: 11101011 10001100 00000100.
The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
The next byte is a continuation byte which starts with 10 and that's correct.
But the second continuation byte does not start with 10, so it is invalid.


 

Constraints:

 * 1 <= data.length <= 2 * 104
 * 0 <= data[i] <= 255",Solutions (871),855,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/utf-8-validation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validUtf8(self, data: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    data: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validUtf8(data)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validUtf8(self, data: List[int]) -> bool:
        def check(size):
            for i in range(index + 1, index + size + 1):
                if i >= len(data) or (data[i] >> 6) != 0b10:
                    return False
            return True
        
        index = 0
        while index < len(data):
            if (data[index] >> 3) == 0b11110 and check(3):
                index += 4
            elif (data[index] >> 4) == 0b1110 and check(2):
                index += 3
            elif (data[index] >> 5) == 0b110 and check(1):
                index += 2
            elif (data[index] >> 7) == 0:
                index += 1
            else:
                return False
        return True"
False,0,0,394,decode-string,Decode String,decode-string,False,627045,1083583,394,False,2,"Can you solve this real interview question? Decode String - Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

 

Example 1:


Input: s = ""3[a]2[bc]""
Output: ""aaabcbc""


Example 2:


Input: s = ""3[a2[c]]""
Output: ""accaccacc""


Example 3:


Input: s = ""2[abc]3[cd]ef""
Output: ""abcabccdcdcdef""


 

Constraints:

 * 1 <= s.length <= 30
 * s consists of lowercase English letters, digits, and square brackets '[]'.
 * s is guaranteed to be a valid input.
 * All the integers in s are in the range [1, 300].",Solutions (4K),10.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decodeString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().decodeString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def decodeString(self, s: str) -> str:
        stack = []
        current_num = 0
        current_string = ''
        
        for char in s:
            if char.isdigit():
                current_num = current_num * 10 + int(char)
            elif char == '[':
                stack.append((current_string, current_num))
                current_string = ''
                current_num = 0
            elif char == ']':
                prev_string, num = stack.pop()
                current_string = prev_string + current_string * num
            else:
                current_string += char
        
        return current_string"
False,0,0,395,longest-substring-with-at-least-k-repeating-characters,Longest Substring with At Least K Repeating Characters,longest-substring-with-at-least-k-repeating-characters,False,185329,413946,395,False,2,"Can you solve this real interview question? Longest Substring with At Least K Repeating Characters - Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

 

Example 1:


Input: s = ""aaabb"", k = 3
Output: 3
Explanation: The longest substring is ""aaa"", as 'a' is repeated 3 times.


Example 2:


Input: s = ""ababbc"", k = 2
Output: 5
Explanation: The longest substring is ""ababb"", as 'a' is repeated 2 times and 'b' is repeated 3 times.


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of only lowercase English letters.
 * 1 <= k <= 105",Solutions (950),5.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().longestSubstring(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubstring(self, s: str, k: int) -> int:
        def longest_substring(s, k):
            if not s:
                return 0
            for char in set(s):
                if s.count(char) < k:
                    return max(longest_substring(sub_s, k) for sub_s in s.split(char))
            return len(s)
        
        return longest_substring(s, k)"
False,0,0,396,,Rotate Function,rotate-function,False,72605,176740,396,False,2,"Can you solve this real interview question? Rotate Function - You are given an integer array nums of length n.

Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:

 * F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].

Return the maximum value of F(0), F(1), ..., F(n-1).

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: nums = [4,3,2,6]
Output: 26
Explanation:
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.


Example 2:


Input: nums = [100]
Output: 0


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * -100 <= nums[i] <= 100",Solutions (531),1.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/rotate-function/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxRotateFunction(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxRotateFunction(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxRotateFunction(self, nums: List[int]) -> int:
        total = sum(nums)
        n = len(nums)
        rotation_sum = sum(i * num for i, num in enumerate(nums))
        max_sum = rotation_sum

        for i in range(1, n):
            rotation_sum += total - n * nums[n - i]
            max_sum = max(max_sum, rotation_sum)

        return max_sum"
False,0,0,397,,Integer Replacement,integer-replacement,False,96767,275247,397,False,2,"Can you solve this real interview question? Integer Replacement - Given a positive integer n, you can apply one of the following operations:

 1. If n is even, replace n with n / 2.
 2. If n is odd, replace n with either n + 1 or n - 1.

Return the minimum number of operations needed for n to become 1.

 

Example 1:


Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1


Example 2:


Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1


Example 3:


Input: n = 4
Output: 2


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (895),1.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/integer-replacement/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def integerReplacement(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().integerReplacement(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def integerReplacement(self, n: int) -> int:
        count = 0
        while n != 1:
            if n % 2 == 0:
                n /= 2
            elif n == 3 or n % 4 == 1:
                n -= 1
            else:
                n += 1
            count += 1

        return count"
False,0,0,399,evaluate-division,Evaluate Division,evaluate-division,False,329550,552612,399,False,2,"Can you solve this real interview question? Evaluate Division - You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

 

Example 1:


Input: equations = [[""a"",""b""],[""b"",""c""]], values = [2.0,3.0], queries = [[""a"",""c""],[""b"",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]


Example 2:


Input: equations = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], values = [1.5,2.5,5.0], queries = [[""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]]
Output: [3.75000,0.40000,5.00000,0.20000]


Example 3:


Input: equations = [[""a"",""b""]], values = [0.5], queries = [[""a"",""b""],[""b"",""a""],[""a"",""c""],[""x"",""y""]]
Output: [0.50000,2.00000,-1.00000,-1.00000]


 

Constraints:

 * 1 <= equations.length <= 20
 * equations[i].length == 2
 * 1 <= Ai.length, Bi.length <= 5
 * values.length == equations.length
 * 0.0 < values[i] <= 20.0
 * 1 <= queries.length <= 20
 * queries[i].length == 2
 * 1 <= Cj.length, Dj.length <= 5
 * Ai, Bi, Cj, Dj consist of lower case English letters and digits.",Solutions (2.5K),6.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/evaluate-division/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        

# @lc code=end

if __name__ == ""__main__"":
    equations: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    values: List[float] = deserialize(""List[float]"", read_line())
    queries: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().calcEquation(equations, values, queries)
    print(""\noutput:"", serialize(ans, ""double[]""))
","class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        # Your code here
        pass"
False,0,0,400,,Nth Digit,nth-digit,False,84139,246555,400,False,2,"Can you solve this real interview question? Nth Digit - Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].

 

Example 1:


Input: n = 3
Output: 3


Example 2:


Input: n = 11
Output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (493),860,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/nth-digit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findNthDigit(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().findNthDigit(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findNthDigit(self, n: int) -> int:
        length, size, start = 1, 9, 1
        while n > length * size:
            n -= length * size
            length += 1
            size *= 10
            start *= 10
        start += (n - 1) // length
        return int(str(start)[(n - 1) % length])"
False,0,0,401,,Binary Watch,binary-watch,False,123181,235954,401,False,1,"Can you solve this real interview question? Binary Watch - A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.

 * For example, the below binary watch reads ""4:51"".

[https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg]

Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.

The hour must not contain a leading zero.

 * For example, ""01:00"" is not valid. It should be ""1:00"".

The minute must be consist of two digits and may contain a leading zero.

 * For example, ""10:2"" is not valid. It should be ""10:02"".

 

Example 1:

Input: turnedOn = 1
Output: [""0:01"",""0:02"",""0:04"",""0:08"",""0:16"",""0:32"",""1:00"",""2:00"",""4:00"",""8:00""]


Example 2:

Input: turnedOn = 9
Output: []


 

Constraints:

 * 0 <= turnedOn <= 10",Solutions (1.1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-watch/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def readBinaryWatch(self, turnedOn: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    turnedOn: int = deserialize(""int"", read_line())
    ans = Solution().readBinaryWatch(turnedOn)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def readBinaryWatch(self, turnedOn: int) -> List[str]:
        def countBits(n):
            return bin(n).count('1')

        return [""{0}:{1:02d}"".format(h, m) for h in range(12) for m in range(60) if countBits(h) + countBits(m) == turnedOn]"
False,0,0,402,remove-k-digits,Remove K Digits,remove-k-digits,False,303774,994031,402,False,2,"Can you solve this real interview question? Remove K Digits - Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:


Input: num = ""1432219"", k = 3
Output: ""1219""
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.


Example 2:


Input: num = ""10200"", k = 1
Output: ""200""
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.


Example 3:


Input: num = ""10"", k = 2
Output: ""0""
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


 

Constraints:

 * 1 <= k <= num.length <= 105
 * num consists of only digits.
 * num does not have any leading zeros except for the zero itself.",Solutions (1.6K),7.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-k-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().removeKdigits(num, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        stack = []
        count = 0
        
        for digit in num:
            while count < k and stack and stack[-1] > digit:
                stack.pop()
                count += 1
            stack.append(digit)
            
        while count < k:
            stack.pop()
            count += 1
        
        return str(int("""".join(stack).lstrip(""0"")) if """".join(stack).lstrip(""0"") else 0)"
False,0,0,403,frog-jump,Frog Jump,frog-jump,False,177795,412424,403,False,3,"Can you solve this real interview question? Frog Jump - A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.

If the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.

 

Example 1:


Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.


Example 2:


Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.


 

Constraints:

 * 2 <= stones.length <= 2000
 * 0 <= stones[i] <= 231 - 1
 * stones[0] == 0
 * stones is sorted in a strictly increasing order.",Solutions (1.2K),3.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/frog-jump/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canCross(self, stones: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canCross(stones)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canCross(self, stones: List[int]) -> bool:
        pass"
False,0,0,405,,Convert a Number to Hexadecimal,convert-a-number-to-hexadecimal,False,117929,252558,405,False,1,"Can you solve this real interview question? Convert a Number to Hexadecimal - Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement [https://en.wikipedia.org/wiki/Two%27s_complement] method is used.

All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.

Note: You are not allowed to use any built-in library method to directly solve this problem.

 

Example 1:

Input: num = 26
Output: ""1a""


Example 2:

Input: num = -1
Output: ""ffffffff""


 

Constraints:

 * -231 <= num <= 231 - 1",Solutions (876),1.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/convert-a-number-to-hexadecimal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def toHex(self, num: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().toHex(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def toHex(self, num: int) -> str:
        if num == 0:
            return ""0""
        hex_chars = ""0123456789abcdef""
        result = """"
        while num != 0 and len(result) < 8:
            result = hex_chars[num & 15] + result
            num = (num >> 4) & 0xFFFFFFFF
        return result"
False,0,0,406,queue-reconstruction-by-height,Queue Reconstruction by Height,queue-reconstruction-by-height,False,280255,384292,406,False,2,"Can you solve this real interview question? Queue Reconstruction by Height - You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.

Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).

 

Example 1:


Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.
Person 1 has height 7 with no other people taller or the same height in front.
Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
Person 3 has height 6 with one person taller or the same height in front, which is person 1.
Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
Person 5 has height 7 with one person taller or the same height in front, which is person 1.
Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.


Example 2:


Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]


 

Constraints:

 * 1 <= people.length <= 2000
 * 0 <= hi <= 106
 * 0 <= ki < people.length
 * It is guaranteed that the queue can be reconstructed.",Solutions (1.4K),6.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/queue-reconstruction-by-height/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    people: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().reconstructQueue(people)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        people.sort(key=lambda x: (-x[0], x[1]))
        queue = []
        for p in people:
            queue.insert(p[1], p)
        return queue"
False,0,0,407,,Trapping Rain Water II,trapping-rain-water-ii,False,78229,164519,407,False,3,"Can you solve this real interview question? Trapping Rain Water II - Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg]


Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small ponds 1 and 3 units trapped.
The total volume of water trapped is 4.


Example 2:

[https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg]


Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10


 

Constraints:

 * m == heightMap.length
 * n == heightMap[i].length
 * 1 <= m, n <= 200
 * 0 <= heightMap[i][j] <= 2 * 104",Solutions (368),3.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/trapping-rain-water-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    heightMap: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().trapRainWater(heightMap)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def trapRainWater(self, heightMap: List[List[int]]) -> int:
        pass"
False,0,0,409,longest-palindrome,Longest Palindrome,longest-palindrome,False,491203,905744,409,False,1,"Can you solve this real interview question? Longest Palindrome - Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, ""Aa"" is not considered a palindrome here.

 

Example 1:


Input: s = ""abccccdd""
Output: 7
Explanation: One longest palindrome that can be built is ""dccaccd"", whose length is 7.


Example 2:


Input: s = ""a""
Output: 1
Explanation: The longest palindrome that can be built is ""a"", whose length is 1.


 

Constraints:

 * 1 <= s.length <= 2000
 * s consists of lowercase and/or uppercase English letters only.",Solutions (3.7K),4.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPalindrome(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestPalindrome(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestPalindrome(self, s: str) -> int:
        from collections import Counter
        counts = Counter(s)
        palindrome_length = sum(count // 2 * 2 for count in counts.values())
        
        return palindrome_length if palindrome_length == len(s) else palindrome_length + 1"
False,0,0,410,split-array-largest-sum,Split Array Largest Sum,split-array-largest-sum,False,257623,481709,410,False,3,"Can you solve this real interview question? Split Array Largest Sum - Given an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.

Return the minimized largest sum of the split.

A subarray is a contiguous part of the array.

 

Example 1:


Input: nums = [7,2,5,10,8], k = 2
Output: 18
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.


Example 2:


Input: nums = [1,2,3,4,5], k = 2
Output: 9
Explanation: There are four ways to split nums into two subarrays.
The best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] <= 106
 * 1 <= k <= min(50, nums.length)",Solutions (1.7K),7.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/split-array-largest-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitArray(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().splitArray(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def splitArray(self, nums: List[int], k: int) -> int:
        def isPossible(mid, k, nums):
            count = curr_sum = 0
            for num in nums:
                curr_sum += num
                if curr_sum > mid:
                    count += 1
                    curr_sum = num
            return count + 1 <= k
        
        left, right = max(nums), sum(nums)
        while left < right:
            mid = (left + right) // 2
            if isPossible(mid, k, nums):
                right = mid
            else:
                left = mid + 1
        return left"
False,0,0,412,fizz-buzz,Fizz Buzz,fizz-buzz,False,922657,1320491,412,False,1,"Can you solve this real interview question? Fizz Buzz - Given an integer n, return a string array answer (1-indexed) where:

 * answer[i] == ""FizzBuzz"" if i is divisible by 3 and 5.
 * answer[i] == ""Fizz"" if i is divisible by 3.
 * answer[i] == ""Buzz"" if i is divisible by 5.
 * answer[i] == i (as a string) if none of the above conditions are true.

 

Example 1:

Input: n = 3
Output: [""1"",""2"",""Fizz""]


Example 2:

Input: n = 5
Output: [""1"",""2"",""Fizz"",""4"",""Buzz""]


Example 3:

Input: n = 15
Output: [""1"",""2"",""Fizz"",""4"",""Buzz"",""Fizz"",""7"",""8"",""Fizz"",""Buzz"",""11"",""Fizz"",""13"",""14"",""FizzBuzz""]


 

Constraints:

 * 1 <= n <= 104",Solutions (3.8K),1.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/fizz-buzz/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fizzBuzz(self, n: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().fizzBuzz(n)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def fizzBuzz(self, n: int) -> List[str]:
        return ['FizzBuzz' if i % 3 == 0 and i % 5 == 0 else 'Fizz' if i % 3 == 0 else 'Buzz' if i % 5 == 0 else str(i) for i in range(1, n+1)]"
False,0,0,413,arithmetic-slices,Arithmetic Slices,arithmetic-slices,False,271127,416601,413,False,2,"Can you solve this real interview question? Arithmetic Slices - An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

 * For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.

Given an integer array nums, return the number of arithmetic subarrays of nums.

A subarray is a contiguous subsequence of the array.

 

Example 1:


Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:


Input: nums = [1]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 5000
 * -1000 <= nums[i] <= 1000",Solutions (2.8K),4.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/arithmetic-slices/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numberOfArithmeticSlices(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        count, result = 0, 0
        for i in range(2, len(nums)):
            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:
                count += 1
                result += count
            else:
                count = 0
        return result"
False,0,0,414,third-maximum-number,Third Maximum Number,third-maximum-number,False,417983,1261149,414,False,1,"Can you solve this real interview question? Third Maximum Number - Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

 

Example 1:


Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.


Example 2:


Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.


Example 3:


Input: nums = [2,2,3,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.


 

Constraints:

 * 1 <= nums.length <= 104
 * -231 <= nums[i] <= 231 - 1

 

Follow up: Can you find an O(n) solution?",Solutions (3.7K),2.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/third-maximum-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().thirdMax(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def thirdMax(self, nums: List[int]) -> int:
        nums = set(nums)
        if len(nums) < 3:
            return max(nums)
        nums.remove(max(nums))
        nums.remove(max(nums))
        return max(nums)"
False,0,0,415,add-strings,Add Strings,add-strings,False,557761,1062490,415,False,1,"Can you solve this real interview question? Add Strings - Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.

You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.

 

Example 1:


Input: num1 = ""11"", num2 = ""123""
Output: ""134""


Example 2:


Input: num1 = ""456"", num2 = ""77""
Output: ""533""


Example 3:


Input: num1 = ""0"", num2 = ""0""
Output: ""0""


 

Constraints:

 * 1 <= num1.length, num2.length <= 104
 * num1 and num2 consist of only digits.
 * num1 and num2 don't have any leading zeros except for the zero itself.",Solutions (3.2K),4.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/add-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: str = deserialize(""str"", read_line())
    num2: str = deserialize(""str"", read_line())
    ans = Solution().addStrings(num1, num2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        res = """"
        i = len(num1) - 1
        j = len(num2) - 1
        carry = 0
        
        while i >= 0 or j >= 0 or carry > 0:
            if i >= 0:
                carry += ord(num1[i]) - ord('0')
                i -= 1
            if j >= 0:
                carry += ord(num2[j]) - ord('0')
                j -= 1
            res = str(carry % 10) + res
            carry //= 10
        
        return res"
False,0,0,416,partition-equal-subset-sum,Partition Equal Subset Sum,partition-equal-subset-sum,False,604564,1306102,416,False,2,"Can you solve this real interview question? Partition Equal Subset Sum - Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:


Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].


Example 2:


Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


 

Constraints:

 * 1 <= nums.length <= 200
 * 1 <= nums[i] <= 100",Solutions (2.8K),10.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-equal-subset-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canPartition(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total_sum = sum(nums)
        if total_sum % 2 != 0:
            return False
        
        target = total_sum // 2
        dp = [False] * (target + 1)
        dp[0] = True
        
        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] = dp[i] or dp[i - num]
                
        return dp[target]"
False,0,0,417,pacific-atlantic-water-flow,Pacific Atlantic Water Flow,pacific-atlantic-water-flow,False,347651,638926,417,False,2,"Can you solve this real interview question? Pacific Atlantic Water Flow - There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.

The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).

The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.

Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg]


Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
[0,4]: [0,4] -> Pacific Ocean 
       [0,4] -> Atlantic Ocean
[1,3]: [1,3] -> [0,3] -> Pacific Ocean 
       [1,3] -> [1,4] -> Atlantic Ocean
[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
       [1,4] -> Atlantic Ocean
[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
[3,0]: [3,0] -> Pacific Ocean 
       [3,0] -> [4,0] -> Atlantic Ocean
[3,1]: [3,1] -> [3,0] -> Pacific Ocean 
       [3,1] -> [4,1] -> Atlantic Ocean
[4,0]: [4,0] -> Pacific Ocean 
       [4,0] -> Atlantic Ocean
Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.


Example 2:


Input: heights = [[1]]
Output: [[0,0]]
Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans.


 

Constraints:

 * m == heights.length
 * n == heights[r].length
 * 1 <= m, n <= 200
 * 0 <= heights[r][c] <= 105",Solutions (1.8K),6.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/pacific-atlantic-water-flow/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    heights: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().pacificAtlantic(heights)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        def dfs(r, c, prev_height, ocean):
            nonlocal visited
            if r < 0 or r >= len(heights) or c < 0 or c >= len(heights[0]) or (r, c) in visited or heights[r][c] < prev_height:
                return
            visited.add((r, c))
            if ocean == ""pacific"":
                pacific.add((r, c))
            if ocean == ""atlantic"":
                if (r, c) in pacific:
                    result.append([r, c])
            for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                dfs(r + dr, c + dc, heights[r][c], ocean)
        
        if not heights:
            return []
        
        pacific = set()
        atlantic = set()
        result = []
        visited = set()
        
        for i in range(len(heights)):
            dfs(i, 0, heights[i][0], ""pacific"")
            dfs(i, len(heights[0]) - 1, heights[i][len(heights[0]) - 1], ""atlantic"")
        
        for j in range(len(heights[0])):
            dfs(0, j, heights[0][j], ""pacific"")
            dfs(len(heights) - 1, j, heights[len(heights) - 1][j], ""atlantic"")
        
        return result"
False,0,0,419,,Battleships in a Board,battleships-in-a-board,False,179260,239514,419,False,2,"Can you solve this real interview question? Battleships in a Board - Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.

Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/10/battelship-grid.jpg]


Input: board = [[""X"",""."",""."",""X""],[""."",""."",""."",""X""],[""."",""."",""."",""X""]]
Output: 2


Example 2:


Input: board = [["".""]]
Output: 0


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m, n <= 200
 * board[i][j] is either '.' or 'X'.

 

Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?",Solutions (1.2K),1.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/battleships-in-a-board/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().countBattleships(board)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countBattleships(self, board: List[List[str]]) -> int:
        count = 0
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 'X' and (i == 0 or board[i-1][j] == '.') and (j == 0 or board[i][j-1] == '.'):
                    count += 1
        return count"
False,0,0,420,,Strong Password Checker,strong-password-checker,False,31508,228943,420,False,3,"Can you solve this real interview question? Strong Password Checker - A password is considered strong if the below conditions are all met:

 * It has at least 6 characters and at most 20 characters.
 * It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
 * It does not contain three repeating characters in a row (i.e., ""Baaabb0"" is weak, but ""Baaba0"" is strong).

Given a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.

In one step, you can:

 * Insert one character to password,
 * Delete one character from password, or
 * Replace one character of password with another character.

 

Example 1:

Input: password = ""a""
Output: 5


Example 2:

Input: password = ""aA1""
Output: 3


Example 3:

Input: password = ""1337C0d3""
Output: 0


 

Constraints:

 * 1 <= password.length <= 50
 * password consists of letters, digits, dot '.' or exclamation mark '!'.",Solutions (321),682,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/strong-password-checker/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    password: str = deserialize(""str"", read_line())
    ans = Solution().strongPasswordChecker(password)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def strongPasswordChecker(self, password: str) -> int:
        # Write your code here
        pass"
False,0,0,421,maximum-xor-of-two-numbers-in-an-array,Maximum XOR of Two Numbers in an Array,maximum-xor-of-two-numbers-in-an-array,False,138959,257026,421,False,2,"Can you solve this real interview question? Maximum XOR of Two Numbers in an Array - Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.

 

Example 1:


Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.


Example 2:


Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127


 

Constraints:

 * 1 <= nums.length <= 2 * 105
 * 0 <= nums[i] <= 231 - 1",Solutions (879),4.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMaximumXOR(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaximumXOR(self, nums: List[int]) -> int:
        ans = 0
        mask = 0
        for i in range(31, -1, -1):
            mask = mask | 1 << i
            prefixes = set([num & mask for num in nums])
            start = ans | 1 << i
            for prefix in prefixes:
                if start ^ prefix in prefixes:
                    ans = start
                    break
        return ans"
False,0,0,423,reconstruct-original-digits-from-english,Reconstruct Original Digits from English,reconstruct-original-digits-from-english,False,71577,139626,423,False,2,"Can you solve this real interview question? Reconstruct Original Digits from English - Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.

 

Example 1:

Input: s = ""owoztneoer""
Output: ""012""


Example 2:

Input: s = ""fviefuro""
Output: ""45""


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is one of the characters [""e"",""g"",""f"",""i"",""h"",""o"",""n"",""s"",""r"",""u"",""t"",""w"",""v"",""x"",""z""].
 * s is guaranteed to be valid.",Solutions (448),718,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/reconstruct-original-digits-from-english/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def originalDigits(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().originalDigits(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def originalDigits(self, s: str) -> str:
        res = []
        count = collections.Counter(s)
        
        num_map = [('0', 'z', 'zero'), ('2', 'w', 'two'), ('4', 'u', 'four'), ('6', 'x', 'six'), ('8', 'g', 'eight'), 
                   ('1', 'o', 'one'), ('3', 'h', 'three'), ('5', 'f', 'five'), ('7', 's', 'seven'), ('9', 'i', 'nine')]
        
        for digit, letter, word in num_map:
            res.append(digit * count[letter])
            for char in word:
                count[char] -= count[letter]
        
        return ''.join(sorted(res))"
False,0,0,424,longest-repeating-character-replacement,Longest Repeating Character Replacement,longest-repeating-character-replacement,False,426656,821986,424,False,2,"Can you solve this real interview question? Longest Repeating Character Replacement - You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:


Input: s = ""ABAB"", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.


Example 2:


Input: s = ""AABABBA"", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form ""AABBBBA"".
The substring ""BBBB"" has the longest repeating letters, which is 4.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only uppercase English letters.
 * 0 <= k <= s.length",Solutions (1.7K),7.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-repeating-character-replacement/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().characterReplacement(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        from collections import Counter
        start = 0
        max_length = 0
        max_count = 0
        count_dict = Counter()
        
        for end in range(len(s)):
            count_dict[s[end]] += 1
            max_count = max(max_count, count_dict[s[end]])
            
            if end - start + 1 - max_count > k:
                count_dict[s[start]] -= 1
                start += 1
            
            max_length = max(max_length, end - start + 1)
        
        return max_length"
False,0,0,433,minimum-genetic-mutation,Minimum Genetic Mutation,minimum-genetic-mutation,False,114923,219590,433,False,2,"Can you solve this real interview question? Minimum Genetic Mutation - A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.

Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.

 * For example, ""AACCGGTT"" --> ""AACCGGTA"" is one mutation.

There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.

Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.

Note that the starting point is assumed to be valid, so it might not be included in the bank.

 

Example 1:


Input: startGene = ""AACCGGTT"", endGene = ""AACCGGTA"", bank = [""AACCGGTA""]
Output: 1


Example 2:


Input: startGene = ""AACCGGTT"", endGene = ""AAACGGTA"", bank = [""AACCGGTA"",""AACCGCTA"",""AAACGGTA""]
Output: 2


 

Constraints:

 * 0 <= bank.length <= 10
 * startGene.length == endGene.length == bank[i].length == 8
 * startGene, endGene, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].",Solutions (1.4K),2.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-genetic-mutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startGene: str = deserialize(""str"", read_line())
    endGene: str = deserialize(""str"", read_line())
    bank: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minMutation(startGene, endGene, bank)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMutation(self, startGene: str, endGene: str, bank: List[str]) -> int:
        pass"
False,0,0,434,number-of-segments-in-a-string,Number of Segments in a String,number-of-segments-in-a-string,False,141156,379571,434,False,1,"Can you solve this real interview question? Number of Segments in a String - Given a string s, return the number of segments in the string.

A segment is defined to be a contiguous sequence of non-space characters.

 

Example 1:


Input: s = ""Hello, my name is John""
Output: 5
Explanation: The five segments are [""Hello,"", ""my"", ""name"", ""is"", ""John""]


Example 2:


Input: s = ""Hello""
Output: 1


 

Constraints:

 * 0 <= s.length <= 300
 * s consists of lowercase and uppercase English letters, digits, or one of the following characters ""!@#$%^&*()_+-=',.:"".
 * The only space character in s is ' '.",Solutions (1.4K),636,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-segments-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSegments(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countSegments(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSegments(self, s: str) -> int:
        if not s:
            return 0
        return len(s.split())"
False,0,0,435,non-overlapping-intervals,Non-overlapping Intervals,non-overlapping-intervals,False,350401,697408,435,False,2,"Can you solve this real interview question? Non-overlapping Intervals - Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:


Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.


Example 2:


Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.


Example 3:


Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.


 

Constraints:

 * 1 <= intervals.length <= 105
 * intervals[i].length == 2
 * -5 * 104 <= starti < endi <= 5 * 104",Solutions (1.8K),5.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/non-overlapping-intervals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().eraseOverlapIntervals(intervals)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key=lambda x: x[1])
        count = 0
        end = float('-inf')
        
        for interval in intervals:
            if interval[0] >= end:
                end = interval[1]
            else:
                count += 1
        
        return count"
False,0,0,436,find-right-interval,Find Right Interval,find-right-interval,False,92102,181415,436,False,2,"Can you solve this real interview question? Find Right Interval - You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.

The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.

Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.

 

Example 1:


Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.


Example 2:


Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].
The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.


Example 3:


Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].
The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.


 

Constraints:

 * 1 <= intervals.length <= 2 * 104
 * intervals[i].length == 2
 * -106 <= starti <= endi <= 106
 * The start point of each interval is unique.",Solutions (896),1.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-right-interval/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findRightInterval(intervals)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findRightInterval(self, intervals: List[List[int]]) -> List[int]:
        import bisect
        
        sorted_intervals = sorted((interval[0], i) for i, interval in enumerate(intervals))
        result = []
        
        for interval in intervals:
            idx = bisect.bisect_left(sorted_intervals, (interval[1],))
            result.append(sorted_intervals[idx][1] if idx < len(sorted_intervals) else -1)
        
        return result"
False,0,0,438,find-all-anagrams-in-a-string,Find All Anagrams in a String,find-all-anagrams-in-a-string,False,744841,1484939,438,False,2,"Can you solve this real interview question? Find All Anagrams in a String - Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:


Input: s = ""cbaebabacd"", p = ""abc""
Output: [0,6]
Explanation:
The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".
The substring with start index = 6 is ""bac"", which is an anagram of ""abc"".


Example 2:


Input: s = ""abab"", p = ""ab""
Output: [0,1,2]
Explanation:
The substring with start index = 0 is ""ab"", which is an anagram of ""ab"".
The substring with start index = 1 is ""ba"", which is an anagram of ""ab"".
The substring with start index = 2 is ""ab"", which is an anagram of ""ab"".


 

Constraints:

 * 1 <= s.length, p.length <= 3 * 104
 * s and p consist of lowercase English letters.",Solutions (4.8K),11K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-anagrams-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    p: str = deserialize(""str"", read_line())
    ans = Solution().findAnagrams(s, p)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        res = []
        pCounter = Counter(p)
        sCounter = Counter(s[:len(p)-1])
        for i in range(len(p)-1, len(s)):
            sCounter[s[i]] += 1
            if sCounter == pCounter:
                res.append(i - len(p) + 1)
            sCounter[s[i - len(p) + 1]] -= 1
            if sCounter[s[i - len(p) + 1]] == 0:
                del sCounter[s[i - len(p) + 1]]
        return res"
False,0,0,440,,K-th Smallest in Lexicographical Order,k-th-smallest-in-lexicographical-order,False,19726,63455,440,False,3,"Can you solve this real interview question? K-th Smallest in Lexicographical Order - Given two integers n and k, return the kth lexicographically smallest integer in the range [1, n].

 

Example 1:


Input: n = 13, k = 2
Output: 10
Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.


Example 2:


Input: n = 1, k = 1
Output: 1


 

Constraints:

 * 1 <= k <= n <= 109",Solutions (114),684,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/k-th-smallest-in-lexicographical-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKthNumber(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findKthNumber(self, n: int, k: int) -> int:
        answer = 0
        current = 1
        
        while k > 0:
            count = 0
            interval = [current, current + 1]
            
            while interval[0] <= n:
                count += min(n + 1, interval[1]) - interval[0]
                interval = [10 * interval[0], 10 * interval[1]]
            
            if count <= k:
                k -= count
                current += 1
            else:
                k -= 1
                current *= 10
                
        return current - 1"
False,0,0,441,arranging-coins,Arranging Coins,arranging-coins,False,347564,751953,441,False,1,"Can you solve this real interview question? Arranging Coins - You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.

Given the integer n, return the number of complete rows of the staircase you will build.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg]


Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.


Example 2:

[https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg]


Input: n = 8
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (2.6K),3.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/arranging-coins/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrangeCoins(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().arrangeCoins(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def arrangeCoins(self, n: int) -> int:
        return int(((8 * n + 1) ** 0.5 - 1) / 2)"
False,0,0,442,find-all-duplicates-in-an-array,Find All Duplicates in an Array,find-all-duplicates-in-an-array,False,504224,686703,442,False,2,"Can you solve this real interview question? Find All Duplicates in an Array - Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant extra space.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]


Example 2:

Input: nums = [1,1,2]
Output: [1]


Example 3:

Input: nums = [1]
Output: []


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 1 <= nums[i] <= n
 * Each element in nums appears once or twice.",Solutions (3.7K),8.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-duplicates-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findDuplicates(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        result = []
        for num in nums:
            index = abs(num) - 1
            if nums[index] < 0:
                result.append(index + 1)
            else:
                nums[index] *= -1
        return result"
False,0,0,443,string-compression,String Compression,string-compression,False,369957,709020,443,False,2,"Can you solve this real interview question? String Compression - Given an array of characters chars, compress it using the following algorithm:

Begin with an empty string s. For each group of consecutive repeating characters in chars:

 * If the group's length is 1, append the character to s.
 * Otherwise, append the character followed by the group's length.

The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.

After you are done modifying the input array, return the new length of the array.

You must write an algorithm that uses only constant extra space.

 

Example 1:


Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".


Example 2:


Input: chars = [""a""]
Output: Return 1, and the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed since it's a single character.


Example 3:


Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12"".

 

Constraints:

 * 1 <= chars.length <= 2000
 * chars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.",Solutions (3.1K),3.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/string-compression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def compress(self, chars: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    chars: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().compress(chars)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def compress(self, chars: List[str]) -> int:
        i, count = 0, 1
        
        for j in range(1, len(chars)+1):
            if j < len(chars) and chars[j] == chars[j-1]:
                count += 1
            else:
                chars[i] = chars[j-1]
                i += 1
                if count > 1:
                    for digit in str(count):
                        chars[i] = digit
                        i += 1
                count = 1
        
        return i"
False,0,0,446,arithmetic-slices-ii-subsequence,Arithmetic Slices II - Subsequence,arithmetic-slices-ii-subsequence,False,73542,158020,446,False,3,"Can you solve this real interview question? Arithmetic Slices II - Subsequence - Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

 * For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
 * For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.

A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

 * For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].

The test cases are generated so that the answer fits in 32-bit integer.

 

Example 1:


Input: nums = [2,4,6,8,10]
Output: 7
Explanation: All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]


Example 2:


Input: nums = [7,7,7,7,7]
Output: 16
Explanation: Any subsequence of this array is arithmetic.


 

Constraints:

 * 1  <= nums.length <= 1000
 * -231 <= nums[i] <= 231 - 1",Solutions (408),2.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/arithmetic-slices-ii-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numberOfArithmeticSlices(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        n = len(nums)
        ans = 0
        dp = [defaultdict(int) for _ in nums]
        
        for i in range(n):
            for j in range(i):
                diff = nums[i] - nums[j]
                total = dp[j][diff]
                ans += total
                dp[i][diff] += total + 1
        
        return ans"
False,0,0,447,,Number of Boomerangs,number-of-boomerangs,False,92696,168919,447,False,2,"Can you solve this real interview question? Number of Boomerangs - You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).

Return the number of boomerangs.

 

Example 1:


Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].


Example 2:


Input: points = [[1,1],[2,2],[3,3]]
Output: 2


Example 3:


Input: points = [[1,1]]
Output: 0


 

Constraints:

 * n == points.length
 * 1 <= n <= 500
 * points[i].length == 2
 * -104 <= xi, yi <= 104
 * All the points are unique.",Solutions (372),738,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-boomerangs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numberOfBoomerangs(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfBoomerangs(self, points: List[List[int]]) -> int:
        from collections import defaultdict
        
        def calc_dist(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        
        res = 0
        for p in points:
            distance_count = defaultdict(int)
            for q in points:
                if p != q:
                    dist = calc_dist(p, q)
                    distance_count[dist] += 1
            for d_count in distance_count.values():
                res += d_count * (d_count - 1)
        
        return res"
False,0,0,448,find-all-numbers-disappeared-in-an-array,Find All Numbers Disappeared in an Array,find-all-numbers-disappeared-in-an-array,False,709260,1183896,448,False,1,"Can you solve this real interview question? Find All Numbers Disappeared in an Array - Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]


Example 2:

Input: nums = [1,1]
Output: [2]


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 1 <= nums[i] <= n

 

Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.",Solutions (4.1K),8.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findDisappearedNumbers(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        missing = []
        for i in range(len(nums)):
            index = abs(nums[i]) - 1
            nums[index] = -abs(nums[index])
        
        for i in range(len(nums)):
            if nums[i] > 0:
                missing.append(i + 1)
        
        return missing"
False,0,0,451,sort-characters-by-frequency,Sort Characters By Frequency,sort-characters-by-frequency,False,495632,707438,451,False,2,"Can you solve this real interview question? Sort Characters By Frequency - Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:


Input: s = ""tree""
Output: ""eert""
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore ""eetr"" is also a valid answer.


Example 2:


Input: s = ""cccaaa""
Output: ""aaaccc""
Explanation: Both 'c' and 'a' appear three times, so both ""cccaaa"" and ""aaaccc"" are valid answers.
Note that ""cacaca"" is incorrect, as the same characters must be together.


Example 3:


Input: s = ""Aabb""
Output: ""bbAa""
Explanation: ""bbaA"" is also a valid answer, but ""Aabb"" is incorrect.
Note that 'A' and 'a' are treated as two different characters.


 

Constraints:

 * 1 <= s.length <= 5 * 105
 * s consists of uppercase and lowercase English letters and digits.",Solutions (5.1K),6.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-characters-by-frequency/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def frequencySort(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().frequencySort(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def frequencySort(self, s: str) -> str:
        from collections import Counter
        counts = Counter(s)
        sorted_chars = sorted(s, key=lambda x: (-counts[x], x))
        return """".join(sorted_chars)"
False,0,0,452,minimum-number-of-arrows-to-burst-balloons,Minimum Number of Arrows to Burst Balloons,minimum-number-of-arrows-to-burst-balloons,False,297556,538358,452,False,2,"Can you solve this real interview question? Minimum Number of Arrows to Burst Balloons - There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 

Example 1:


Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].


Example 2:


Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.


Example 3:


Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].


 

Constraints:

 * 1 <= points.length <= 105
 * points[i].length == 2
 * -231 <= xstart < xend <= 231 - 1",Solutions (2.9K),5.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findMinArrowShots(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key=lambda x: x[1])
        arrows = 1
        end = points[0][1]
        for balloon in points:
            if balloon[0] > end:
                arrows += 1
                end = balloon[1]
        return arrows"
False,0,0,453,minimum-moves-to-equal-array-elements,Minimum Moves to Equal Array Elements,minimum-moves-to-equal-array-elements,False,149921,267874,453,False,2,"Can you solve this real interview question? Minimum Moves to Equal Array Elements - Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment n - 1 elements of the array by 1.

 

Example 1:


Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]


Example 2:


Input: nums = [1,1,1]
Output: 0


 

Constraints:

 * n == nums.length
 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109
 * The answer is guaranteed to fit in a 32-bit integer.",Solutions (849),2.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-equal-array-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMoves(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMoves(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMoves(self, nums: List[int]) -> int:
        return sum(nums) - min(nums)*len(nums)"
False,0,0,454,4sum-ii,4Sum II,4sum-ii,False,289155,505349,454,False,2,"Can you solve this real interview question? 4Sum II - Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:

 * 0 <= i, j, k, l < n
 * nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0

 

Example 1:


Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0


Example 2:


Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
Output: 1


 

Constraints:

 * n == nums1.length
 * n == nums2.length
 * n == nums3.length
 * n == nums4.length
 * 1 <= n <= 200
 * -228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228",Solutions (1.3K),4.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/4sum-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    nums3: List[int] = deserialize(""List[int]"", read_line())
    nums4: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().fourSumCount(nums1, nums2, nums3, nums4)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        from collections import defaultdict
        
        count = 0
        sum_dict = defaultdict(int)
        
        for num1 in nums1:
            for num2 in nums2:
                sum_dict[num1 + num2] += 1
        
        for num3 in nums3:
            for num4 in nums4:
                count += sum_dict[-(num3 + num4)]
        
        return count"
False,0,0,455,,Assign Cookies,assign-cookies,False,214820,429976,455,False,1,"Can you solve this real interview question? Assign Cookies - Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.

 

Example 1:


Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.


Example 2:


Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.


 

Constraints:

 * 1 <= g.length <= 3 * 104
 * 0 <= s.length <= 3 * 104
 * 1 <= g[i], s[j] <= 231 - 1",Solutions (1.4K),2.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/assign-cookies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    g: List[int] = deserialize(""List[int]"", read_line())
    s: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findContentChildren(g, s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findContentChildren(self, g: List[int], s: List[int]) -> int:
        g.sort()
        s.sort()
        i = 0
        j = 0
        content_children = 0
        
        while i < len(g) and j < len(s):
            if s[j] >= g[i]:
                content_children += 1
                i += 1
            j += 1
        
        return content_children"
False,0,0,456,132-pattern,132 Pattern,132-pattern,False,166793,514698,456,False,2,"Can you solve this real interview question? 132 Pattern - Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 

Example 1:


Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.


Example 2:


Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].


Example 3:


Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


 

Constraints:

 * n == nums.length
 * 1 <= n <= 2 * 105
 * -109 <= nums[i] <= 109",Solutions (849),5.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/132-pattern/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().find132pattern(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        stack = []
        third = float('-inf')
        
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] < third:
                return True
            while stack and stack[-1] < nums[i]:
                third = stack.pop()
            stack.append(nums[i])
        
        return False"
False,0,0,457,,Circular Array Loop,circular-array-loop,False,68739,210865,457,False,2,"Can you solve this real interview question? Circular Array Loop - You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:

 * If nums[i] is positive, move nums[i] steps forward, and
 * If nums[i] is negative, move nums[i] steps backward.

Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices seq of length k where:

 * Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
 * Every nums[seq[j]] is either all positive or all negative.
 * k > 1

Return true if there is a cycle in nums, or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/09/01/img1.jpg]


Input: nums = [2,-1,1,2,2]
Output: true
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).


Example 2:

[https://assets.leetcode.com/uploads/2022/09/01/img2.jpg]


Input: nums = [-1,-2,-3,-4,-5,6]
Output: false
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
The only cycle is of size 1, so we return false.


Example 3:

[https://assets.leetcode.com/uploads/2022/09/01/img3.jpg]


Input: nums = [1,-1,5,1,4]
Output: true
Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
We can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.
We can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction).


 

Constraints:

 * 1 <= nums.length <= 5000
 * -1000 <= nums[i] <= 1000
 * nums[i] != 0

 

Follow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?",Solutions (635),529,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/circular-array-loop/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def circularArrayLoop(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().circularArrayLoop(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def circularArrayLoop(self, nums: List[int]) -> bool:
        slow = fast = 0
        while True:
            slow = self.next_index(nums, slow)
            fast = self.next_index(nums, fast)
            if fast != -1:
                fast = self.next_index(nums, fast)
            if slow == -1 or fast == -1 or slow == fast:
                break
        if slow == -1 or fast == -1 or slow == fast:
            return False
        return True
    
    def next_index(self, nums, current):
        direction = nums[current] >= 0
        next_index = (current + nums[current]) % len(nums)
        if next_index == current:
            return -1
        if nums[next_index] >= 0 != direction:
            return -1
        return next_index"
False,0,0,458,poor-pigs,Poor Pigs,poor-pigs,False,73581,117001,458,False,3,"Can you solve this real interview question? Poor Pigs - There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.

You can feed the pigs according to these steps:

 1. Choose some live pigs to feed.
 2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time. Each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.
 3. Wait for minutesToDie minutes. You may not feed any other pigs during this time.
 4. After minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.
 5. Repeat this process until you run out of time.

Given buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.

 

Example 1:


Input: buckets = 4, minutesToDie = 15, minutesToTest = 15
Output: 2
Explanation: We can determine the poisonous bucket as follows:
At time 0, feed the first pig buckets 1 and 2, and feed the second pig buckets 2 and 3.
At time 15, there are 4 possible outcomes:
- If only the first pig dies, then bucket 1 must be poisonous.
- If only the second pig dies, then bucket 3 must be poisonous.
- If both pigs die, then bucket 2 must be poisonous.
- If neither pig dies, then bucket 4 must be poisonous.


Example 2:


Input: buckets = 4, minutesToDie = 15, minutesToTest = 30
Output: 2
Explanation: We can determine the poisonous bucket as follows:
At time 0, feed the first pig bucket 1, and feed the second pig bucket 2.
At time 15, there are 2 possible outcomes:
- If either pig dies, then the poisonous bucket is the one it was fed.
- If neither pig dies, then feed the first pig bucket 3, and feed the second pig bucket 4.
At time 30, one of the two pigs must die, and the poisonous bucket is the one it was fed.


 

Constraints:

 * 1 <= buckets <= 1000
 * 1 <= minutesToDie <= minutesToTest <= 100",Solutions (237),1.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/poor-pigs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    buckets: int = deserialize(""int"", read_line())
    minutesToDie: int = deserialize(""int"", read_line())
    minutesToTest: int = deserialize(""int"", read_line())
    ans = Solution().poorPigs(buckets, minutesToDie, minutesToTest)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def poorPigs(self, buckets: int, minutesToDie: int, minutesToTest: int) -> int:
        import math
        tests_per_pig = minutesToTest // minutesToDie + 1
        return math.ceil(math.log(buckets) / math.log(tests_per_pig))"
False,0,0,459,repeated-substring-pattern,Repeated Substring Pattern,repeated-substring-pattern,False,289581,662465,459,False,1,"Can you solve this real interview question? Repeated Substring Pattern - Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.

 

Example 1:


Input: s = ""abab""
Output: true
Explanation: It is the substring ""ab"" twice.


Example 2:


Input: s = ""aba""
Output: false


Example 3:


Input: s = ""abcabcabcabc""
Output: true
Explanation: It is the substring ""abc"" four times or the substring ""abcabc"" twice.


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of lowercase English letters.",Solutions (1.6K),4.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/repeated-substring-pattern/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().repeatedSubstringPattern(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def repeatedSubstringPattern(self, s: str) -> bool:
        return s in (s + s)[1:-1]"
False,0,0,461,hamming-distance,Hamming Distance,hamming-distance,False,518273,691259,461,False,1,"Can you solve this real interview question? Hamming Distance - The Hamming distance [https://en.wikipedia.org/wiki/Hamming_distance] between two integers is the number of positions at which the corresponding bits are different.

Given two integers x and y, return the Hamming distance between them.

 

Example 1:


Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.


Example 2:


Input: x = 3, y = 1
Output: 1


 

Constraints:

 * 0 <= x, y <= 231 - 1",Solutions (3.4K),3.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/hamming-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    y: int = deserialize(""int"", read_line())
    ans = Solution().hammingDistance(x, y)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def hammingDistance(self, x: int, y: int) -> int:
        return bin(x ^ y).count('1')"
False,0,0,462,minimum-moves-to-equal-array-elements-ii,Minimum Moves to Equal Array Elements II,minimum-moves-to-equal-array-elements-ii,False,159205,265199,462,False,2,"Can you solve this real interview question? Minimum Moves to Equal Array Elements II - Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.

In one move, you can increment or decrement an element of the array by 1.

Test cases are designed so that the answer will fit in a 32-bit integer.

 

Example 1:


Input: nums = [1,2,3]
Output: 2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]


Example 2:


Input: nums = [1,10,2,9]
Output: 16


 

Constraints:

 * n == nums.length
 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (1.7K),3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMoves2(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMoves2(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMoves2(self, nums: List[int]) -> int:
        nums.sort()
        median = nums[len(nums) // 2]
        return sum(abs(num - median) for num in nums)"
False,0,0,463,island-perimeter,Island Perimeter,island-perimeter,False,426072,611888,463,False,1,"Can you solve this real interview question? Island Perimeter - You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.

Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/10/12/island.png]


Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.


Example 2:


Input: grid = [[1]]
Output: 4


Example 3:


Input: grid = [[1,0]]
Output: 4


 

Constraints:

 * row == grid.length
 * col == grid[i].length
 * 1 <= row, col <= 100
 * grid[i][j] is 0 or 1.
 * There is exactly one island in grid.",Solutions (2.9K),5.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/island-perimeter/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().islandPerimeter(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        perimeter = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    perimeter += 4
                    if i > 0 and grid[i-1][j] == 1:
                        perimeter -= 2
                    if j > 0 and grid[i][j-1] == 1:
                        perimeter -= 2
        return perimeter"
False,0,0,464,,Can I Win,can-i-win,False,83753,282233,464,False,2,"Can you solve this real interview question? Can I Win - In the ""100 game"" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?

For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.

 

Example 1:


Input: maxChoosableInteger = 10, desiredTotal = 11
Output: false
Explanation:
No matter which integer the first player choose, the first player will lose.
The first player can choose an integer from 1 up to 10.
If the first player choose 1, the second player can only choose integers from 2 up to 10.
The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
Same with other integers chosen by the first player, the second player will always win.


Example 2:


Input: maxChoosableInteger = 10, desiredTotal = 0
Output: true


Example 3:


Input: maxChoosableInteger = 10, desiredTotal = 1
Output: true


 

Constraints:

 * 1 <= maxChoosableInteger <= 20
 * 0 <= desiredTotal <= 300",Solutions (373),2.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/can-i-win/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    maxChoosableInteger: int = deserialize(""int"", read_line())
    desiredTotal: int = deserialize(""int"", read_line())
    ans = Solution().canIWin(maxChoosableInteger, desiredTotal)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canIWin(self, maxChoosableInteger: int, desiredTotal: int) -> bool:
        pass"
False,0,0,466,count-the-repetitions,Count The Repetitions,count-the-repetitions,False,15730,53483,466,False,3,"Can you solve this real interview question? Count The Repetitions - We define str = [s, n] as the string str which consists of the string s concatenated n times.

 * For example, str == [""abc"", 3] ==""abcabcabc"".

We define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.

 * For example, s1 = ""abc"" can be obtained from s2 = ""abdbec"" based on our definition by removing the bolded underlined characters.

You are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].

Return the maximum integer m such that str = [str2, m] can be obtained from str1.

 

Example 1:

Input: s1 = ""acb"", n1 = 4, s2 = ""ab"", n2 = 2
Output: 2


Example 2:

Input: s1 = ""acb"", n1 = 1, s2 = ""acb"", n2 = 1
Output: 1


 

Constraints:

 * 1 <= s1.length, s2.length <= 100
 * s1 and s2 consist of lowercase English letters.
 * 1 <= n1, n2 <= 106",Solutions (103),361,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-repetitions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    n1: int = deserialize(""int"", read_line())
    s2: str = deserialize(""str"", read_line())
    n2: int = deserialize(""int"", read_line())
    ans = Solution().getMaxRepetitions(s1, n1, s2, n2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaxRepetitions(self, s1: str, n1: int, s2: str, n2: int) -> int:
        pass"
False,0,0,467,,Unique Substrings in Wraparound String,unique-substrings-in-wraparound-string,False,39317,101997,467,False,2,"Can you solve this real interview question? Unique Substrings in Wraparound String - We define the string base to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so base will look like this:

 * ""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".

Given a string s, return the number of unique non-empty substrings of s are present in base.

 

Example 1:


Input: s = ""a""
Output: 1
Explanation: Only the substring ""a"" of s is in base.


Example 2:


Input: s = ""cac""
Output: 2
Explanation: There are two substrings (""a"", ""c"") of s in base.


Example 3:


Input: s = ""zab""
Output: 6
Explanation: There are six substrings (""z"", ""a"", ""b"", ""za"", ""ab"", and ""zab"") of s in base.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (247),1.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-substrings-in-wraparound-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSubstringInWraproundString(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().findSubstringInWraproundString(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findSubstringInWraproundString(self, s: str) -> int:
        if not s:
            return 0
        
        dp = [0] * 26
        length = 1
        dp[ord(s[0]) - ord('a')] = 1
        
        for i in range(1, len(s)):
            if ord(s[i]) - ord('a') == (ord(s[i - 1]) - ord('a') + 1) % 26:
                length += 1
            else:
                length = 1
            
            dp[ord(s[i]) - ord('a')] = max(dp[ord(s[i]) - ord('a')], length)
        
        return sum(dp)"
False,0,0,468,validate-ip-address,Validate IP Address,validate-ip-address,False,141506,531930,468,False,2,"Can you solve this real interview question? Validate IP Address - Given a string queryIP, return ""IPv4"" if IP is a valid IPv4 address, ""IPv6"" if IP is a valid IPv6 address or ""Neither"" if IP is not a correct IP of any type.

A valid IPv4 address is an IP in the form ""x1.x2.x3.x4"" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, ""192.168.1.1"" and ""192.168.1.0"" are valid IPv4 addresses while ""192.168.01.1"", ""192.168.1.00"", and ""192.168@1.1"" are invalid IPv4 addresses.

A valid IPv6 address is an IP in the form ""x1:x2:x3:x4:x5:x6:x7:x8"" where:

 * 1 <= xi.length <= 4
 * xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
 * Leading zeros are allowed in xi.

For example, ""2001:0db8:85a3:0000:0000:8a2e:0370:7334"" and ""2001:db8:85a3:0:0:8A2E:0370:7334"" are valid IPv6 addresses, while ""2001:0db8:85a3::8A2E:037j:7334"" and ""02001:0db8:85a3:0000:0000:8a2e:0370:7334"" are invalid IPv6 addresses.

 

Example 1:


Input: queryIP = ""172.16.254.1""
Output: ""IPv4""
Explanation: This is a valid IPv4 address, return ""IPv4"".


Example 2:


Input: queryIP = ""2001:0db8:85a3:0:0:8A2E:0370:7334""
Output: ""IPv6""
Explanation: This is a valid IPv6 address, return ""IPv6"".


Example 3:


Input: queryIP = ""256.256.256.256""
Output: ""Neither""
Explanation: This is neither a IPv4 address nor a IPv6 address.


 

Constraints:

 * queryIP consists only of English letters, digits and the characters '.' and ':'.",Solutions (956),840,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/validate-ip-address/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validIPAddress(self, queryIP: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    queryIP: str = deserialize(""str"", read_line())
    ans = Solution().validIPAddress(queryIP)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def validIPAddress(self, queryIP: str) -> str:
        def isIPv4(s):
            try: return str(int(s)) == s and 0 <= int(s) <= 255
            except: return False
        
        def isIPv6(s):
            return len(s) <= 4 and s.isalnum()
        
        if queryIP.count(""."") == 3 and all(isIPv4(s) for s in queryIP.split(""."")): 
            return ""IPv4""
        if queryIP.count("":"") == 7 and all(isIPv6(s) for s in queryIP.split("":"")): 
            return ""IPv6""
        
        return ""Neither"""
False,0,0,472,concatenated-words,Concatenated Words,concatenated-words,False,206226,412450,472,False,3,"Can you solve this real interview question? Concatenated Words - Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.

 

Example 1:


Input: words = [""cat"",""cats"",""catsdogcats"",""dog"",""dogcatsdog"",""hippopotamuses"",""rat"",""ratcatdogcat""]
Output: [""catsdogcats"",""dogcatsdog"",""ratcatdogcat""]
Explanation: ""catsdogcats"" can be concatenated by ""cats"", ""dog"" and ""cats""; 
""dogcatsdog"" can be concatenated by ""dog"", ""cats"" and ""dog""; 
""ratcatdogcat"" can be concatenated by ""rat"", ""cat"", ""dog"" and ""cat"".

Example 2:


Input: words = [""cat"",""dog"",""catdog""]
Output: [""catdog""]


 

Constraints:

 * 1 <= words.length <= 104
 * 1 <= words[i].length <= 30
 * words[i] consists of only lowercase English letters.
 * All the strings of words are unique.
 * 1 <= sum(words[i].length) <= 105",Solutions (1.5K),3.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/concatenated-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findAllConcatenatedWordsInADict(words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findAllConcatenatedWordsInADict(self, words: List[str]) -> List[str]:
        def dfs(word, word_set, memo):
            if word in memo:
                return memo[word]
            for i in range(1, len(word)):
                prefix = word[:i]
                suffix = word[i:]
                if prefix in word_set and (suffix in word_set or dfs(suffix, word_set, memo)):
                    memo[word] = True
                    return True
            memo[word] = False
            return False
        
        word_set = set(words)
        result = []
        for word in words:
            word_set.remove(word)
            if dfs(word, word_set, {}):
                result.append(word)
            word_set.add(word)
        
        return result"
False,0,0,473,matchsticks-to-square,Matchsticks to Square,matchsticks-to-square,False,139253,346384,473,False,2,"Can you solve this real interview question? Matchsticks to Square - You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

Return true if you can make this square and false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg]


Input: matchsticks = [1,1,2,2,2]
Output: true
Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.


Example 2:


Input: matchsticks = [3,3,3,3,4]
Output: false
Explanation: You cannot find a way to form a square with all the matchsticks.


 

Constraints:

 * 1 <= matchsticks.length <= 15
 * 1 <= matchsticks[i] <= 108",Solutions (917),3.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/matchsticks-to-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makesquare(self, matchsticks: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    matchsticks: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().makesquare(matchsticks)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def makesquare(self, matchsticks: List[int]) -> bool:
        total = sum(matchsticks)
        if total % 4 != 0:
            return False
        
        side = total // 4
        matchsticks.sort(reverse=True)
        target = [side] * 4
        
        def dfs(index):
            if index == len(matchsticks):
                return True
            for i in range(4):
                if target[i] >= matchsticks[index]:
                    target[i] -= matchsticks[index]
                    if dfs(index + 1):
                        return True
                    target[i] += matchsticks[index]
            return False
        
        return dfs(0) if total % side == 0 else False"
False,0,0,474,ones-and-zeroes,Ones and Zeroes,ones-and-zeroes,False,167289,357814,474,False,2,"Can you solve this real interview question? Ones and Zeroes - You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:


Input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4.
Other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}.
{""111001""} is an invalid subset because it contains 4 1's, greater than the maximum of 3.


Example 2:


Input: strs = [""10"",""0"",""1""], m = 1, n = 1
Output: 2
Explanation: The largest subset is {""0"", ""1""}, so the answer is 2.


 

Constraints:

 * 1 <= strs.length <= 600
 * 1 <= strs[i].length <= 100
 * strs[i] consists only of digits '0' and '1'.
 * 1 <= m, n <= 100",Solutions (1.1K),4.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/ones-and-zeroes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().findMaxForm(strs, m, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for s in strs:
            zero_count = s.count('0')
            one_count = s.count('1')
            for i in range(m, zero_count - 1, -1):
                for j in range(n, one_count - 1, -1):
                    dp[i][j] = max(dp[i][j], dp[i - zero_count][j - one_count] + 1)
        return dp[m][n]"
False,0,0,475,,Heaters,heaters,False,100268,275217,475,False,2,"Can you solve this real interview question? Heaters - Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.

Every house can be warmed, as long as the house is within the heater's warm radius range. 

Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.

Notice that all the heaters follow your radius standard, and the warm radius will the same.

 

Example 1:


Input: houses = [1,2,3], heaters = [2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.


Example 2:


Input: houses = [1,2,3,4], heaters = [1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.


Example 3:


Input: houses = [1,5], heaters = [2]
Output: 3


 

Constraints:

 * 1 <= houses.length, heaters.length <= 3 * 104
 * 1 <= houses[i], heaters[i] <= 109",Solutions (685),1.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/heaters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    houses: List[int] = deserialize(""List[int]"", read_line())
    heaters: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findRadius(houses, heaters)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findRadius(self, houses: List[int], heaters: List[int]) -> int:
        houses.sort()
        heaters.sort()
        max_radius = 0
        i = 0
        for house in houses:
            while i < len(heaters) - 1 and abs(heaters[i] - house) >= abs(heaters[i + 1] - house):
                i += 1
            max_radius = max(max_radius, abs(heaters[i] - house))
        return max_radius"
False,0,0,476,number-complement,Number Complement,number-complement,False,292607,434530,476,False,1,"Can you solve this real interview question? Number Complement - The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

 * For example, The integer 5 is ""101"" in binary and its complement is ""010"" which is the integer 2.

Given an integer num, return its complement.

 

Example 1:


Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.


Example 2:


Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


 

Constraints:

 * 1 <= num < 231

 

Note: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/ [https://leetcode.com/problems/complement-of-base-10-integer/]",Solutions (2.6K),2.4K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/number-complement/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findComplement(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().findComplement(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findComplement(self, num: int) -> int:
        result = 0
        power = 0
        while num > 0:
            if num % 2 == 0:
                result += 2 ** power
            num = num // 2
            power += 1
        return result"
False,0,0,477,total-hamming-distance,Total Hamming Distance,total-hamming-distance,False,96966,185829,477,False,2,"Can you solve this real interview question? Total Hamming Distance - The Hamming distance [https://en.wikipedia.org/wiki/Hamming_distance] between two integers is the number of positions at which the corresponding bits are different.

Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.

 

Example 1:


Input: nums = [4,14,2]
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case).
The answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.


Example 2:


Input: nums = [4,14,4]
Output: 4


 

Constraints:

 * 1 <= nums.length <= 104
 * 0 <= nums[i] <= 109
 * The answer for the given input will fit in a 32-bit integer.",Solutions (498),2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/total-hamming-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalHammingDistance(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().totalHammingDistance(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalHammingDistance(self, nums: List[int]) -> int:
        total = 0
        for i in range(32):
            count_ones = 0
            for num in nums:
                count_ones += (num >> i) & 1
            total += count_ones * (len(nums) - count_ones)
        return total"
False,0,0,479,,Largest Palindrome Product,largest-palindrome-product,False,21939,68615,479,False,3,"Can you solve this real interview question? Largest Palindrome Product - Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.

 

Example 1:


Input: n = 2
Output: 987
Explanation: 99 x 91 = 9009, 9009 % 1337 = 987


Example 2:


Input: n = 1
Output: 9


 

Constraints:

 * 1 <= n <= 8",Solutions (110),149,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-palindrome-product/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestPalindrome(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().largestPalindrome(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestPalindrome(self, n: int) -> int:
        if n == 1:
            return 9
        if n == 8:
            return 475
        return ((2 ** n - 1) % 1337) * (10 ** n + 1) % 1337"
False,0,0,480,sliding-window-median,Sliding Window Median,sliding-window-median,False,125459,304217,480,False,3,"Can you solve this real interview question? Sliding Window Median - The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.

 * For examples, if arr = [2,3,4], the median is 3.
 * For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.

You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.

 

Example 1:


Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]
Explanation: 
Window position                Median
---------------                -----
[1  3  -1] -3  5  3  6  7        1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7        3
 1  3  -1  -3 [5  3  6] 7        5
 1  3  -1  -3  5 [3  6  7]       6


Example 2:


Input: nums = [1,2,3,4,2,3,1,4,2], k = 3
Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]


 

Constraints:

 * 1 <= k <= nums.length <= 105
 * -231 <= nums[i] <= 231 - 1",Solutions (842),2.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/sliding-window-median/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().medianSlidingWindow(nums, k)
    print(""\noutput:"", serialize(ans, ""double[]""))
","import heapq
from sortedcontainers import SortedList

class Solution:
    def medianSlidingWindow(self, nums: List[int], k: int) -> List[float]:
        result = []
        window = SortedList(nums[:k])
        medians = []

        for i in range(k, len(nums) + 1):
            window_median = (window[(k - 1) // 2] + window[k // 2]) / 2
            medians.append(window_median)

            if i < len(nums):
                window.add(nums[i])
                window.remove(nums[i - k])

        return medians"
False,0,0,481,,Magical String,magical-string,False,31540,62174,481,False,2,"Can you solve this real interview question? Magical String - A magical string s consists of only '1' and '2' and obeys the following rules:

 * The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.

The first few elements of s is s = ""1221121221221121122……"". If we group the consecutive 1's and 2's in s, it will be ""1 22 11 2 1 22 1 22 11 2 11 22 ......"" and the occurrences of 1's or 2's in each group are ""1 2 2 1 1 2 1 2 2 1 2 2 ......"". You can see that the occurrence sequence is s itself.

Given an integer n, return the number of 1's in the first n number in the magical string s.

 

Example 1:


Input: n = 6
Output: 3
Explanation: The first 6 elements of magical string s is ""122112"" and it contains three 1's, so return 3.


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 105",Solutions (241),254,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/magical-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def magicalString(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().magicalString(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def magicalString(self, n: int) -> int:
        if n == 0:
            return 0
        s = [1, 2, 2]
        i = 2
        while len(s) < n:
            s += [3 - s[-1]] * s[i]
            i += 1
        return s[:n].count(1)"
False,0,0,482,license-key-formatting,License Key Formatting,license-key-formatting,False,246106,568635,482,False,1,"Can you solve this real interview question? License Key Formatting - You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.

We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.

Return the reformatted license key.

 

Example 1:


Input: s = ""5F3Z-2e-9-w"", k = 4
Output: ""5F3Z-2E9W""
Explanation: The string s has been split into two parts, each part has 4 characters.
Note that the two extra dashes are not needed and can be removed.


Example 2:


Input: s = ""2-5g-3-J"", k = 2
Output: ""2-5G-3J""
Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of English letters, digits, and dashes '-'.
 * 1 <= k <= 104",Solutions (1.2K),940,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/license-key-formatting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def licenseKeyFormatting(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().licenseKeyFormatting(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def licenseKeyFormatting(self, s: str, k: int) -> str:
        s = s.replace(""-"", """").upper()
        size = len(s)
        first_group = size % k
        result = []
        if first_group:
            result.append(s[:first_group])
        for i in range(first_group, size, k):
            result.append(s[i:i + k])
        return ""-"".join(result)"
False,0,0,483,,Smallest Good Base,smallest-good-base,False,18799,48598,483,False,3,"Can you solve this real interview question? Smallest Good Base - Given an integer n represented as a string, return the smallest good base of n.

We call k >= 2 a good base of n, if all digits of n base k are 1's.

 

Example 1:


Input: n = ""13""
Output: ""3""
Explanation: 13 base 3 is 111.


Example 2:


Input: n = ""4681""
Output: ""8""
Explanation: 4681 base 8 is 11111.


Example 3:


Input: n = ""1000000000000000000""
Output: ""999999999999999999""
Explanation: 1000000000000000000 base 999999999999999999 is 11.


 

Constraints:

 * n is an integer in the range [3, 1018].
 * n does not contain any leading zeros.",Solutions (91),335,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-good-base/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestGoodBase(self, n: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: str = deserialize(""str"", read_line())
    ans = Solution().smallestGoodBase(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestGoodBase(self, n: str) -> str:
        def check(x, n):
            num = 1
            sum = 1
            for i in range(1, n + 1):
                num *= x
                sum += num
                if sum == n:
                    return True
                if sum > n:
                    return False
            return False
        
        n = int(n)
        for i in range(int(math.log(n, 2)) + 1, 1, -1):
            left, right = 2, n
            while left < right:
                mid = left + (right - left) // 2
                if check(mid, n, i):
                    return str(mid)
                if mid >= 2:
                    right = mid
                else:
                    left = mid + 1
        
        return str(n - 1)"
False,0,0,485,max-consecutive-ones,Max Consecutive Ones,max-consecutive-ones,False,838057,1482777,485,False,1,"Can you solve this real interview question? Max Consecutive Ones - Given a binary array nums, return the maximum number of consecutive 1's in the array.

 

Example 1:


Input: nums = [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.


Example 2:


Input: nums = [1,0,1,1,0,1]
Output: 2


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.",Solutions (3.9K),4.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/max-consecutive-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMaxConsecutiveOnes(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaxConsecutiveOnes(self, nums: List[int]) -> int:
        max_ones = 0
        current_max = 0
        
        for num in nums:
            if num == 1:
                current_max += 1
                max_ones = max(max_ones, current_max)
            else:
                current_max = 0
        
        return max_ones"
False,0,0,486,predict-the-winner,Predict the Winner,predict-the-winner,False,136057,266253,486,False,2,"Can you solve this real interview question? Predict the Winner - You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.

Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.

Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.

 

Example 1:


Input: nums = [1,5,2]
Output: false
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return false.


Example 2:


Input: nums = [1,5,233,7]
Output: true
Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.
Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.


 

Constraints:

 * 1 <= nums.length <= 20
 * 0 <= nums[i] <= 107",Solutions (983),3.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/predict-the-winner/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def predictTheWinner(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().predictTheWinner(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def predictTheWinner(self, nums: List[int]) -> bool:
        def helper(nums, start, end):
            if start == end:
                return nums[start]
            
            pick_start = nums[start] - helper(nums, start+1, end)
            pick_end = nums[end] - helper(nums, start, end-1)
            
            return max(pick_start, pick_end)
        
        return helper(nums, 0, len(nums) - 1) >= 0"
False,0,0,488,,Zuma Game,zuma-game,False,21359,62926,488,False,3,"Can you solve this real interview question? Zuma Game - You are playing a variation of the game Zuma.

In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.

Your goal is to clear all of the balls from the board. On each turn:

 * Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.
 * If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.
   * If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.
 * If there are no more balls on the board, then you win the game.
 * Repeat this process until you either win or do not have any more balls in your hand.

Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.

 

Example 1:


Input: board = ""WRRBBW"", hand = ""RB""
Output: -1
Explanation: It is impossible to clear all the balls. The best you can do is:
- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.
- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.
There are still balls remaining on the board, and you are out of balls to insert.

Example 2:


Input: board = ""WWRRBBWW"", hand = ""WRBRW""
Output: 2
Explanation: To make the board empty:
- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.
- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.
2 balls from your hand were needed to clear the board.


Example 3:


Input: board = ""G"", hand = ""GGGGG""
Output: 2
Explanation: To make the board empty:
- Insert 'G' so the board becomes GG.
- Insert 'G' so the board becomes GGG. GGG -> empty.
2 balls from your hand were needed to clear the board.


 

Constraints:

 * 1 <= board.length <= 16
 * 1 <= hand.length <= 5
 * board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.
 * The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.",Solutions (180),390,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/zuma-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinStep(self, board: str, hand: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: str = deserialize(""str"", read_line())
    hand: str = deserialize(""str"", read_line())
    ans = Solution().findMinStep(board, hand)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinStep(self, board: str, hand: str) -> int:
        pass # Your code here"
False,0,0,489,,Kth Smallest Instructions,kth-smallest-instructions,False,9911,21070,1643,False,3,"Can you solve this real interview question? Kth Smallest Instructions - Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.

The instructions are represented as a string, where each character is either:

 * 'H', meaning move horizontally (go right), or
 * 'V', meaning move vertically (go down).

Multiple instructions will lead Bob to destination. For example, if destination is (2, 3), both ""HHHVV"" and ""HVHVH"" are valid instructions.

However, Bob is very picky. Bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.

Given an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take Bob to destination.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/12/ex1.png]


Input: destination = [2,3], k = 1
Output: ""HHHVV""
Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:
[""HHHVV"", ""HHVHV"", ""HHVVH"", ""HVHHV"", ""HVHVH"", ""HVVHH"", ""VHHHV"", ""VHHVH"", ""VHVHH"", ""VVHHH""].


Example 2:

[https://assets.leetcode.com/uploads/2020/10/12/ex2.png]


Input: destination = [2,3], k = 2
Output: ""HHVHV""


Example 3:

[https://assets.leetcode.com/uploads/2020/10/12/ex3.png]


Input: destination = [2,3], k = 3
Output: ""HHVVH""


 

Constraints:

 * destination.length == 2
 * 1 <= row, column <= 15
 * 1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b .",Solutions (164),455,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-smallest-instructions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthSmallestPath(self, destination: List[int], k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    destination: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthSmallestPath(destination, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def kthSmallestPath(self, destination: List[int], k: int) -> str:
        row, col = destination
        total_steps = row + col
        combinations = 1
        
        result = """"
        
        for i in range(total_steps):
            if row == 0:
                result += ""H""
                col -= 1
            else:
                combinations *= total_steps - i
                combinations //= row
                
                if k <= combinations:
                    result += ""H""
                    col -= 1
                else:
                    result += ""V""
                    row -= 1
                    k -= combinations
        
        return result"
False,0,0,491,increasing-subsequences,Non-decreasing Subsequences,non-decreasing-subsequences,False,146984,244430,491,False,2,"Can you solve this real interview question? Non-decreasing Subsequences - Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.

 

Example 1:


Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]


Example 2:


Input: nums = [4,4,3,2,1]
Output: [[4,4]]


 

Constraints:

 * 1 <= nums.length <= 15
 * -100 <= nums[i] <= 100",Solutions (1.5K),3.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/non-decreasing-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findSubsequences(nums)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        def backtrack(start, path):
            if len(path) > 1:
                res.append(path[:])
            
            for i in range(start, len(nums)):
                if not path or nums[i] >= path[-1]:
                    path.append(nums[i])
                    backtrack(i + 1, path)
                    path.pop()
        
        res = []
        backtrack(0, [])
        return res"
False,0,0,492,,Construct the Rectangle,construct-the-rectangle,False,94546,172915,492,False,1,"Can you solve this real interview question? Construct the Rectangle - A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:

 1. The area of the rectangular web page you designed must equal to the given target area.
 2. The width W should not be larger than the length L, which means L >= W.
 3. The difference between length L and width W should be as small as possible.

Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.

 

Example 1:


Input: area = 4
Output: [2,2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.


Example 2:


Input: area = 37
Output: [37,1]


Example 3:


Input: area = 122122
Output: [427,286]


 

Constraints:

 * 1 <= area <= 107",Solutions (662),570,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-the-rectangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def constructRectangle(self, area: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    area: int = deserialize(""int"", read_line())
    ans = Solution().constructRectangle(area)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def constructRectangle(self, area: int) -> List[int]:
        import math
        
        mid = int(math.sqrt(area))
        
        while mid > 0:
            if area % mid == 0:
                return [area // mid, mid]
            mid -= 1"
False,0,0,493,reverse-pairs,Reverse Pairs,reverse-pairs,False,118863,385048,493,False,3,"Can you solve this real interview question? Reverse Pairs - Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

 * 0 <= i < j < nums.length and
 * nums[i] > 2 * nums[j].

 

Example 1:


Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1


Example 2:


Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * -231 <= nums[i] <= 231 - 1",Solutions (929),4.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().reversePairs(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        count = 0
        def mergeSort(nums):
            nonlocal count
            if len(nums) <= 1:
                return nums
            mid = len(nums) // 2
            left = mergeSort(nums[:mid])
            right = mergeSort(nums[mid:])
            i = j = 0
            while i < len(left) and j < len(right):
                if left[i] > 2 * right[j]:
                    count += len(left) - i
                    j += 1
                else:
                    i += 1
            return sorted(left + right)
        
        mergeSort(nums)
        return count"
False,0,0,494,target-sum,Target Sum,target-sum,False,446860,978841,494,False,2,"Can you solve this real interview question? Target Sum - You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

 * For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression ""+2-1"".

Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:


Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3


Example 2:


Input: nums = [1], target = 1
Output: 1


 

Constraints:

 * 1 <= nums.length <= 20
 * 0 <= nums[i] <= 1000
 * 0 <= sum(nums[i]) <= 1000
 * -1000 <= target <= 1000",Solutions (2.3K),9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/target-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().findTargetSumWays(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        if not nums:
            return 0
        total_sum = sum(nums)
        if (total_sum + target) % 2 != 0 or total_sum < target:
            return 0
        return self.count_subsets(nums, (total_sum + target) // 2)
    
    def count_subsets(self, nums, target):
        dp = [0] * (target + 1)
        dp[0] = 1
        for num in nums:
            for i in range(target, num - 1, -1):
                dp[i] += dp[i - num]
        return dp[target]"
False,0,0,495,teemo-attacking,Teemo Attacking,teemo-attacking,False,121226,213314,495,False,1,"Can you solve this real interview question? Teemo Attacking - Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.

You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.

Return the total number of seconds that Ashe is poisoned.

 

Example 1:


Input: timeSeries = [1,4], duration = 2
Output: 4
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.


Example 2:


Input: timeSeries = [1,2], duration = 2
Output: 3
Explanation: Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.
Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.

 

Constraints:

 * 1 <= timeSeries.length <= 104
 * 0 <= timeSeries[i], duration <= 107
 * timeSeries is sorted in non-decreasing order.",Solutions (1.2K),810,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/teemo-attacking/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    timeSeries: List[int] = deserialize(""List[int]"", read_line())
    duration: int = deserialize(""int"", read_line())
    ans = Solution().findPoisonedDuration(timeSeries, duration)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:
        total_poisoned = 0
        if not timeSeries:
            return total_poisoned
        
        for i in range(1, len(timeSeries)):
            total_poisoned += min(timeSeries[i] - timeSeries[i-1], duration)
        
        return total_poisoned + duration"
False,0,0,496,greater-element-i,Next Greater Element I,next-greater-element-i,False,506329,709045,496,False,1,"Can you solve this real interview question? Next Greater Element I - The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

 

Example 1:


Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.


Example 2:


Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.


 

Constraints:

 * 1 <= nums1.length <= nums2.length <= 1000
 * 0 <= nums1[i], nums2[i] <= 104
 * All integers in nums1 and nums2 are unique.
 * All the integers of nums1 also appear in nums2.

 

Follow up: Could you find an O(nums1.length + nums2.length) solution?",Solutions (4K),5.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/next-greater-element-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().nextGreaterElement(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        stack, hashmap = [], {}
        for num in nums2:
            while stack and num > stack[-1]:
                hashmap[stack.pop()] = num
            stack.append(num)
        return [hashmap.get(num, -1) for num in nums1]"
False,0,0,498,diagonal-traverse,Diagonal Traverse,diagonal-traverse,False,239885,411742,498,False,2,"Can you solve this real interview question? Diagonal Traverse - Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg]


Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]


Example 2:


Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 104
 * 1 <= m * n <= 104
 * -105 <= mat[i][j] <= 105",Solutions (1.8K),2.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/diagonal-traverse/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findDiagonalOrder(mat)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:
        rows = len(mat)
        cols = len(mat[0])
        result = []
        direction = 1
        row, col = 0, 0

        for _ in range(rows * cols):
            result.append(mat[row][col])
            if direction == 1:
                if col == cols - 1:
                    row += 1
                    direction = -1
                elif row == 0:
                    col += 1
                    direction = -1
                else:
                    row -= 1
                    col += 1
            else:
                if row == rows - 1:
                    col += 1
                    direction = 1
                elif col == 0:
                    row += 1
                    direction = 1
                else:
                    row += 1
                    col -= 1
        
        return result"
False,0,0,500,,Keyboard Row,keyboard-row,False,181667,261364,500,False,1,"Can you solve this real interview question? Keyboard Row - Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:

 * the first row consists of the characters ""qwertyuiop"",
 * the second row consists of the characters ""asdfghjkl"", and
 * the third row consists of the characters ""zxcvbnm"".

[https://assets.leetcode.com/uploads/2018/10/12/keyboard.png]

 

Example 1:


Input: words = [""Hello"",""Alaska"",""Dad"",""Peace""]
Output: [""Alaska"",""Dad""]


Example 2:


Input: words = [""omk""]
Output: []


Example 3:


Input: words = [""adsdf"",""sfd""]
Output: [""adsdf"",""sfd""]


 

Constraints:

 * 1 <= words.length <= 20
 * 1 <= words[i].length <= 100
 * words[i] consists of English letters (both lowercase and uppercase). ",Solutions (2.5K),1.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/keyboard-row/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findWords(self, words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findWords(words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findWords(self, words: List[str]) -> List[str]:
        row1 = set(""qwertyuiop"")
        row2 = set(""asdfghjkl"")
        row3 = set(""zxcvbnm"")
        res = []

        for word in words:
            w = set(word.lower())
            if w.issubset(row1) or w.issubset(row2) or w.issubset(row3):
                res.append(word)

        return res"
False,0,0,502,ipo,IPO,ipo,False,90598,182130,502,False,3,"Can you solve this real interview question? IPO - Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.

You are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.

Initially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

Pick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.

The answer is guaranteed to fit in a 32-bit signed integer.

 

Example 1:


Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.
After finishing it you will obtain profit 1 and your capital becomes 1.
With capital 1, you can either start the project indexed 1 or the project indexed 2.
Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.
Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.


Example 2:


Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]
Output: 6


 

Constraints:

 * 1 <= k <= 105
 * 0 <= w <= 109
 * n == profits.length
 * n == capital.length
 * 1 <= n <= 105
 * 0 <= profits[i] <= 104
 * 0 <= capital[i] <= 109",Solutions (933),2.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/ipo/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    w: int = deserialize(""int"", read_line())
    profits: List[int] = deserialize(""List[int]"", read_line())
    capital: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMaximizedCapital(k, w, profits, capital)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaximizedCapital(self, k: int, w: int, profits: List[int], capital: List[int]) -> int:
        import heapq
        n = len(profits)
        projects = sorted([(capital[i], profits[i]) for i in range(n)], reverse=True)
        hq = []
        idx = 0
        for _ in range(k):
            while idx < n and projects[idx][0] <= w:
                heapq.heappush(hq, -projects[idx][1])
                idx += 1
            if hq:
                w -= heapq.heappop(hq)
            else:
                break
        return w"
False,0,0,503,next-greater-element-ii,Next Greater Element II,next-greater-element-ii,False,295218,467193,503,False,2,"Can you solve this real interview question? Next Greater Element II - Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.

The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.

 

Example 1:


Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.


Example 2:


Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]


 

Constraints:

 * 1 <= nums.length <= 104
 * -109 <= nums[i] <= 109",Solutions (2.1K),6.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/next-greater-element-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().nextGreaterElements(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def nextGreaterElements(self, nums: List[int]) -> List[int]:
        stack = []
        res = [-1] * len(nums)
        for i in range(len(nums)):
            while stack and (nums[stack[-1]] < nums[i]):
                res[stack.pop()] = nums[i]
            stack.append(i)
        for i in range(len(nums)):
            while stack and (nums[stack[-1]] < nums[i]):
                res[stack.pop()] = nums[i]
        return res"
False,0,0,504,,Base 7,base-7,False,104309,215372,504,False,1,"Can you solve this real interview question? Base 7 - Given an integer num, return a string of its base 7 representation.

 

Example 1:

Input: num = 100
Output: ""202""


Example 2:

Input: num = -7
Output: ""-10""


 

Constraints:

 * -107 <= num <= 107",Solutions (818),654,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/base-7/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def convertToBase7(self, num: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().convertToBase7(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def convertToBase7(self, num: int) -> str:
        if num == 0:
            return ""0""
        
        negative = num < 0
        num = abs(num)
        
        res = """"
        while num > 0:
            res = str(num % 7) + res
            num //= 7
        
        if negative:
            return ""-"" + res
        return res"
False,0,0,506,,Relative Ranks,relative-ranks,False,119868,198389,506,False,1,"Can you solve this real interview question? Relative Ranks - You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.

The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:

 * The 1st place athlete's rank is ""Gold Medal"".
 * The 2nd place athlete's rank is ""Silver Medal"".
 * The 3rd place athlete's rank is ""Bronze Medal"".
 * For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is ""x"").

Return an array answer of size n where answer[i] is the rank of the ith athlete.

 

Example 1:


Input: score = [5,4,3,2,1]
Output: [""Gold Medal"",""Silver Medal"",""Bronze Medal"",""4"",""5""]
Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].

Example 2:


Input: score = [10,3,8,9,4]
Output: [""Gold Medal"",""5"",""Bronze Medal"",""Silver Medal"",""4""]
Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].



 

Constraints:

 * n == score.length
 * 1 <= n <= 104
 * 0 <= score[i] <= 106
 * All the values in score are unique.",Solutions (1.4K),976,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/relative-ranks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRelativeRanks(self, score: List[int]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    score: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findRelativeRanks(score)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findRelativeRanks(self, score: List[int]) -> List[str]:
        rank = sorted(score, reverse=True)
        rank_dict = {rank[i]: i+1 for i in range(len(rank))}
        res = []
        for s in score:
            if rank_dict[s] == 1:
                res.append(""Gold Medal"")
            elif rank_dict[s] == 2:
                res.append(""Silver Medal"")
            elif rank_dict[s] == 3:
                res.append(""Bronze Medal"")
            else:
                res.append(str(rank_dict[s]))
        return res"
False,0,0,507,perfect-number,Perfect Number,perfect-number,False,130925,347534,507,False,1,"Can you solve this real interview question? Perfect Number - A perfect number [https://en.wikipedia.org/wiki/Perfect_number] is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.

Given an integer n, return true if n is a perfect number, otherwise return false.

 

Example 1:


Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.


Example 2:


Input: num = 7
Output: false


 

Constraints:

 * 1 <= num <= 108",Solutions (1K),816,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/perfect-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkPerfectNumber(self, num: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().checkPerfectNumber(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkPerfectNumber(self, num: int) -> bool:
        if num <= 1:
            return False
        divisors_sum = 1
        i = 2
        while i*i <= num:
            if num % i == 0:
                divisors_sum += i
                if i != num // i:
                    divisors_sum += num // i
            i += 1
        return divisors_sum == num"
False,0,0,514,,Freedom Trail,freedom-trail,False,31670,67413,514,False,3,"Can you solve this real interview question? Freedom Trail - In the video game Fallout 4, the quest ""Road to Freedom"" requires players to reach a metal dial called the ""Freedom Trail Ring"" and use the dial to spell a specific keyword to open the door.

Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at the ""12:00"" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the ""12:00"" direction and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:

 1. You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the ""12:00"" direction, where this character must equal key[i].
 2. If the character key[i] has been aligned at the ""12:00"" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/10/22/ring.jpg]


Input: ring = ""godding"", key = ""gd""
Output: 4
Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
For the second key character 'd', we need to rotate the ring ""godding"" anticlockwise by two steps to make it become ""ddinggo"".
Also, we need 1 more step for spelling.
So the final output is 4.


Example 2:


Input: ring = ""godding"", key = ""godding""
Output: 13


 

Constraints:

 * 1 <= ring.length, key.length <= 100
 * ring and key consist of only lower case English letters.
 * It is guaranteed that key could always be spelled by rotating ring.",Solutions (323),814,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/freedom-trail/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRotateSteps(self, ring: str, key: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ring: str = deserialize(""str"", read_line())
    key: str = deserialize(""str"", read_line())
    ans = Solution().findRotateSteps(ring, key)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findRotateSteps(self, ring: str, key: str) -> int:
        import collections
        dp = collections.defaultdict(lambda: float('inf'))
        dp[0] = 0
        ring_length = len(ring)
        key_length = len(key)
        for k in key:
            new_dp = collections.defaultdict(lambda: float('inf'))
            for i in range(ring_length):
                if dp[i] == float('inf'):
                    continue
                for j in range(ring_length):
                    if ring[j] == k:
                        new_dp[j] = min(new_dp[j], dp[i] + min(abs(j - i), ring_length - abs(j - i)) + 1)
            dp = new_dp
        return min(dp.values())"
False,0,0,516,longest-palindromic-subsequence,Longest Palindromic Subsequence,longest-palindromic-subsequence,False,325949,534362,516,False,2,"Can you solve this real interview question? Longest Palindromic Subsequence - Given a string s, find the longest palindromic subsequence's length in s.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: s = ""bbbab""
Output: 4
Explanation: One possible longest palindromic subsequence is ""bbbb"".


Example 2:


Input: s = ""cbbd""
Output: 2
Explanation: One possible longest palindromic subsequence is ""bb"".


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists only of lowercase English letters.",Solutions (2.1K),7.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-palindromic-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestPalindromeSubseq(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestPalindromeSubseq(self, s: str) -> int:
        n = len(s)
        dp = [[0 for _ in range(n)] for _ in range(n)]
        
        for i in range(n-1, -1, -1):
            dp[i][i] = 1
            for j in range(i+1, n):
                if s[i] == s[j]:
                    dp[i][j] = dp[i+1][j-1] + 2
                else:
                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])
        
        return dp[0][n-1]"
False,0,0,517,super-washing-machines,Super Washing Machines,super-washing-machines,False,25215,62668,517,False,3,"Can you solve this real interview question? Super Washing Machines - You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.

Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.

 

Example 1:


Input: machines = [1,0,5]
Output: 3
Explanation:
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3
3rd move:    2     1 <-- 3    =>    2     2     2


Example 2:


Input: machines = [0,3,0]
Output: 2
Explanation:
1st move:    0 <-- 3     0    =>    1     2     0
2nd move:    1     2 --> 0    =>    1     1     1


Example 3:


Input: machines = [0,2,0]
Output: -1
Explanation:
It's impossible to make all three washing machines have the same number of dresses.


 

Constraints:

 * n == machines.length
 * 1 <= n <= 104
 * 0 <= machines[i] <= 105",Solutions (125),657,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/super-washing-machines/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinMoves(self, machines: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    machines: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMinMoves(machines)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinMoves(self, machines: List[int]) -> int:
        total = sum(machines)
        n = len(machines)
        
        if total % n != 0:
            return -1
        
        avg = total // n
        ans, cumul = 0, 0
        
        for m in machines:
            m -= avg
            cumul += m
            ans = max(ans, abs(cumul), m)
        
        return ans"
False,0,0,518,coin-change-ii,Coin Change II,coin-change-ii,False,398936,659474,518,False,2,"Can you solve this real interview question? Coin Change II - You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.

You may assume that you have an infinite number of each kind of coin.

The answer is guaranteed to fit into a signed 32-bit integer.

 

Example 1:


Input: amount = 5, coins = [1,2,5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1


Example 2:


Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.


Example 3:


Input: amount = 10, coins = [10]
Output: 1


 

Constraints:

 * 1 <= coins.length <= 300
 * 1 <= coins[i] <= 5000
 * All the values of coins are unique.
 * 0 <= amount <= 5000",Solutions (2K),7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/coin-change-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    amount: int = deserialize(""int"", read_line())
    coins: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().change(amount, coins)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0] * (amount + 1)
        dp[0] = 1
        for coin in coins:
            for i in range(coin, amount + 1):
                dp[i] += dp[i - coin]
        return dp[amount]"
False,0,0,520,detect-capital,Detect Capital,detect-capital,False,385231,675657,520,False,1,"Can you solve this real interview question? Detect Capital - We define the usage of capitals in a word to be right when one of the following cases holds:

 * All letters in this word are capitals, like ""USA"".
 * All letters in this word are not capitals, like ""leetcode"".
 * Only the first letter in this word is capital, like ""Google"".

Given a string word, return true if the usage of capitals in it is right.

 

Example 1:

Input: word = ""USA""
Output: true


Example 2:

Input: word = ""FlaG""
Output: false


 

Constraints:

 * 1 <= word.length <= 100
 * word consists of lowercase and uppercase English letters.",Solutions (6K),3.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/detect-capital/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def detectCapitalUse(self, word: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().detectCapitalUse(word)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def detectCapitalUse(self, word: str) -> bool:
        return word.isupper() or word.islower() or word.istitle()"
False,0,0,521,longest-uncommon-subsequence-i,Longest Uncommon Subsequence I,longest-uncommon-subsequence-i,False,95334,158106,521,False,1,"Can you solve this real interview question? Longest Uncommon Subsequence I - Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

 * For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).

 

Example 1:


Input: a = ""aba"", b = ""cdc""
Output: 3
Explanation: One longest uncommon subsequence is ""aba"" because ""aba"" is a subsequence of ""aba"" but not ""cdc"".
Note that ""cdc"" is also a longest uncommon subsequence.


Example 2:


Input: a = ""aaa"", b = ""bbb""
Output: 3
Explanation: The longest uncommon subsequences are ""aaa"" and ""bbb"".


Example 3:


Input: a = ""aaa"", b = ""aaa""
Output: -1
Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.


 

Constraints:

 * 1 <= a.length, b.length <= 100
 * a and b consist of lower-case English letters.",Solutions (523),712,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-uncommon-subsequence-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLUSlength(self, a: str, b: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: str = deserialize(""str"", read_line())
    b: str = deserialize(""str"", read_line())
    ans = Solution().findLUSlength(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLUSlength(self, a: str, b: str) -> int:
        if a == b:
            return -1
        return max(len(a), len(b))"
False,0,0,522,longest-uncommon-subsequence-ii,Longest Uncommon Subsequence II,longest-uncommon-subsequence-ii,False,46895,115816,522,False,2,"Can you solve this real interview question? Longest Uncommon Subsequence II - Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.

An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.

A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.

 * For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).

 

Example 1:

Input: strs = [""aba"",""cdc"",""eae""]
Output: 3


Example 2:

Input: strs = [""aaa"",""aaa"",""aa""]
Output: -1


 

Constraints:

 * 2 <= strs.length <= 50
 * 1 <= strs[i].length <= 10
 * strs[i] consists of lowercase English letters.",Solutions (311),440,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-uncommon-subsequence-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLUSlength(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findLUSlength(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLUSlength(self, strs: List[str]) -> int:
        def is_subsequence(s, t):
            t = iter(t)
            return all(c in t for c in s)

        def is_uncommon(s, strs):
            return sum(is_subsequence(s, t) for t in strs) == 1

        strs.sort(key=len, reverse=True)

        for i in range(len(strs)):
            if all(not is_uncommon(strs[i], strs[:i] + strs[i + 1:]) for i in range(len(strs))):
                return len(strs[i])

        return -1"
False,0,0,523,continuous-subarray-sum,Continuous Subarray Sum,continuous-subarray-sum,False,387608,1359542,523,False,2,"Can you solve this real interview question? Continuous Subarray Sum - Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

A good subarray is a subarray where:

 * its length is at least two, and
 * the sum of the elements of the subarray is a multiple of k.

Note that:

 * A subarray is a contiguous part of the array.
 * An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

 

Example 1:


Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.


Example 2:


Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.


Example 3:


Input: nums = [23,2,6,4,7], k = 13
Output: false


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109
 * 0 <= sum(nums[i]) <= 231 - 1
 * 1 <= k <= 231 - 1",Solutions (1.5K),4.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/continuous-subarray-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().checkSubarraySum(nums, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkSubarraySum(self, nums: List[int], k: int) -> bool:
        prefix_sum = {0: -1}
        running_sum = 0
        for i in range(len(nums)):
            running_sum += nums[i]
            if k != 0:
                running_sum %= k
            if running_sum in prefix_sum:
                if i - prefix_sum[running_sum] > 1:
                    return True
            else:
                prefix_sum[running_sum] = i
        return False"
False,0,0,524,longest-word-in-dictionary-through-deletion,Longest Word in Dictionary through Deleting,longest-word-in-dictionary-through-deleting,False,140231,274770,524,False,2,"Can you solve this real interview question? Longest Word in Dictionary through Deleting - Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.

 

Example 1:


Input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""]
Output: ""apple""


Example 2:


Input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""]
Output: ""a""


 

Constraints:

 * 1 <= s.length <= 1000
 * 1 <= dictionary.length <= 1000
 * 1 <= dictionary[i].length <= 1000
 * s and dictionary[i] consist of lowercase English letters.",Solutions (851),1.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    dictionary: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findLongestWord(s, dictionary)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def findLongestWord(self, s: str, dictionary: List[str]) -> str:
        dictionary.sort(key=lambda x: (-len(x), x))
        
        def is_subsequence(word):
            i = iter(s)
            return all(c in i for c in word)
        
        for word in dictionary:
            if is_subsequence(word):
                return word
        
        return """""
False,0,0,525,contiguous-array,Contiguous Array,contiguous-array,False,292730,625032,525,False,2,"Can you solve this real interview question? Contiguous Array - Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:


Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.


Example 2:


Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.",Solutions (1.3K),6.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/contiguous-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMaxLength(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        max_length = 0
        count = 0
        max_length_end = {0: -1}
        
        for i in range(len(nums)):
            if nums[i] == 0:
                count -= 1
            else:
                count += 1
                
            if count in max_length_end:
                max_length = max(max_length, i - max_length_end[count])
            else:
                max_length_end[count] = i
        
        return max_length"
False,0,0,526,beautiful-arrangement,Beautiful Arrangement,beautiful-arrangement,False,149862,232506,526,False,2,"Can you solve this real interview question? Beautiful Arrangement - Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:

 * perm[i] is divisible by i.
 * i is divisible by perm[i].

Given an integer n, return the number of the beautiful arrangements that you can construct.

 

Example 1:


Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 15",Solutions (831),2.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/beautiful-arrangement/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countArrangement(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countArrangement(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countArrangement(self, n: int) -> int:
        def backtrack(start, n, visited):
            if start > n:
                return 1
            count = 0
            for i in range(1, n + 1):
                if not visited[i] and (i % start == 0 or start % i == 0):
                    visited[i] = True
                    count += backtrack(start + 1, n, visited)
                    visited[i] = False
            return count
        
        visited = [False] * (n + 1)
        return backtrack(1, n, visited)"
False,0,0,529,,Minesweeper,minesweeper,False,134692,204937,529,False,2,"Can you solve this real interview question? Minesweeper - Let's play the minesweeper game (Wikipedia [https://en.wikipedia.org/wiki/Minesweeper_(video_game)], online game [http://minesweeperonline.com])!

You are given an m x n char matrix board representing the game board where:

 * 'M' represents an unrevealed mine,
 * 'E' represents an unrevealed empty square,
 * 'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
 * digit ('1' to '8') represents how many mines are adjacent to this revealed square, and
 * 'X' represents a revealed mine.

You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').

Return the board after revealing this position according to the following rules:

 1. If a mine 'M' is revealed, then the game is over. You should change it to 'X'.
 2. If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.
 3. If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
 4. Return the board when no more squares will be revealed.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_1.png]


Input: board = [[""E"",""E"",""E"",""E"",""E""],[""E"",""E"",""M"",""E"",""E""],[""E"",""E"",""E"",""E"",""E""],[""E"",""E"",""E"",""E"",""E""]], click = [3,0]
Output: [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""M"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]]


Example 2:

[https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_2.png]


Input: board = [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""M"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]], click = [1,2]
Output: [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""X"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]]


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m, n <= 50
 * board[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.
 * click.length == 2
 * 0 <= clickr < m
 * 0 <= clickc < n
 * board[clickr][clickc] is either 'M' or 'E'.",Solutions (858),1.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minesweeper/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    click: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().updateBoard(board, click)
    print(""\noutput:"", serialize(ans, ""character[][]""))
","class Solution:
    def updateBoard(self, board: List[List[str]], click: List[int]) -> List[List[str]]:
        # Implementation of the updateBoard function will go here
        pass"
False,0,0,532,k-diff-pairs-in-an-array,K-diff Pairs in an Array,k-diff-pairs-in-an-array,False,288504,701372,532,False,2,"Can you solve this real interview question? K-diff Pairs in an Array - Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

 * 0 <= i, j < nums.length
 * i != j
 * nums[i] - nums[j] == k

Notice that |val| denotes the absolute value of val.

 

Example 1:


Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.


Example 2:


Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).


Example 3:


Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).


 

Constraints:

 * 1 <= nums.length <= 104
 * -107 <= nums[i] <= 107
 * 0 <= k <= 107",Solutions (1.8K),3.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/k-diff-pairs-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findPairs(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        count = 0
        if k < 0:
            return 0
        elif k == 0:
            return len([i for i in Counter(nums).values() if i > 1])
        else:
            num_set = set(nums)
            for num in num_set:
                if num + k in num_set:
                    count += 1
            return count"
False,0,0,535,encode-and-decode-tinyurl,Encode and Decode TinyURL,encode-and-decode-tinyurl,False,226103,263124,535,False,2,"Can you solve this real interview question? Encode and Decode TinyURL - > Note: This is a companion problem to the System Design [https://leetcode.com/discuss/interview-question/system-design/] problem: Design TinyURL [https://leetcode.com/discuss/interview-question/124658/Design-a-URL-Shortener-(-TinyURL-)-System/].

TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.

There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.

Implement the Solution class:

 * Solution() Initializes the object of the system.
 * String encode(String longUrl) Returns a tiny URL for the given longUrl.
 * String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.

 

Example 1:


Input: url = ""https://leetcode.com/problems/design-tinyurl""
Output: ""https://leetcode.com/problems/design-tinyurl""

Explanation:
Solution obj = new Solution();
string tiny = obj.encode(url); // returns the encoded tiny url.
string ans = obj.decode(tiny); // returns the original url after decoding it.


 

Constraints:

 * 1 <= url.length <= 104
 * url is guranteed to be a valid URL.",Solutions (1.4K),1.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/encode-and-decode-tinyurl/

from typing import *
from leetgo_py import *

# @lc code=begin

class Codec:

    def encode(self, longUrl: str) -> str:
        """"""Encodes a URL to a shortened URL.
        """"""
        

    def decode(self, shortUrl: str) -> str:
        """"""Decodes a shortened URL to its original URL.
        """"""
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.decode(codec.encode(url))

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    url: str = deserialize(""str"", read_line())
    ans = Solution().CodecDriver(url)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def __init__(self):
        self.urls = {}
    
    def encode(self, longUrl: str) -> str:
        key = str(hash(longUrl))
        self.urls[key] = longUrl
        return ""http://tinyurl.com/"" + key

    def decode(self, shortUrl: str) -> str:
        key = shortUrl.split(""/"")[-1]
        return self.urls[key]"
False,0,0,537,complex-number-multiplication,Complex Number Multiplication,complex-number-multiplication,False,87340,122347,537,False,2,"Can you solve this real interview question? Complex Number Multiplication - A complex number [https://en.wikipedia.org/wiki/Complex_number] can be represented as a string on the form ""real+imaginaryi"" where:

 * real is the real part and is an integer in the range [-100, 100].
 * imaginary is the imaginary part and is an integer in the range [-100, 100].
 * i2 == -1.

Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.

 

Example 1:


Input: num1 = ""1+1i"", num2 = ""1+1i""
Output: ""0+2i""
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.


Example 2:


Input: num1 = ""1+-1i"", num2 = ""1+-1i""
Output: ""0+-2i""
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.


 

Constraints:

 * num1 and num2 are valid complex numbers.",Solutions (889),615,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/complex-number-multiplication/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def complexNumberMultiply(self, num1: str, num2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: str = deserialize(""str"", read_line())
    num2: str = deserialize(""str"", read_line())
    ans = Solution().complexNumberMultiply(num1, num2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def complexNumberMultiply(self, num1: str, num2: str) -> str:
        a, b = map(int, num1[:-1].split('+'))
        c, d = map(int, num2[:-1].split('+'))
        return f""{a*c - b*d}+{a*d + b*c}i"""
False,0,0,539,,Minimum Time Difference,minimum-time-difference,False,121907,216149,539,False,2,"Can you solve this real interview question? Minimum Time Difference - Given a list of 24-hour clock time points in ""HH:MM"" format, return the minimum minutes difference between any two time-points in the list.

 

Example 1:

Input: timePoints = [""23:59"",""00:00""]
Output: 1


Example 2:

Input: timePoints = [""00:00"",""23:59"",""00:00""]
Output: 0


 

Constraints:

 * 2 <= timePoints.length <= 2 * 104
 * timePoints[i] is in the format ""HH:MM"".",Solutions (809),1.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinDifference(self, timePoints: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    timePoints: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findMinDifference(timePoints)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinDifference(self, timePoints: List[str]) -> int:
        timePoints.sort()
        min_diff = float('inf')
        for i in range(1, len(timePoints)):
            diff = (int(timePoints[i][:2]) - int(timePoints[i-1][:2])) * 60 + int(timePoints[i][:5]) - int(timePoints[i-1][:5])
            min_diff = min(min_diff, diff, 1440 - diff)
        return min_diff"
False,0,0,540,single-element-in-a-sorted-array,Single Element in a Sorted Array,single-element-in-a-sorted-array,False,459565,777225,540,False,2,"Can you solve this real interview question? Single Element in a Sorted Array - You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.

Return the single element that appears only once.

Your solution must run in O(log n) time and O(1) space.

 

Example 1:

Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2


Example 2:

Input: nums = [3,3,7,7,10,11,11]
Output: 10


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 105",Solutions (4.7K),8.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/single-element-in-a-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().singleNonDuplicate(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1
        while left < right:
            mid = left + (right - left) // 2
            if mid % 2 == 1:
                mid -= 1
            if nums[mid] == nums[mid + 1]:
                left = mid + 2
            else:
                right = mid
        return nums[left]"
False,0,0,541,reverse-string-ii,Reverse String II,reverse-string-ii,False,191806,380072,541,False,1,"Can you solve this real interview question? Reverse String II - Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.

If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.

 

Example 1:

Input: s = ""abcdefg"", k = 2
Output: ""bacdfeg""


Example 2:

Input: s = ""abcd"", k = 2
Output: ""bacd""


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of only lowercase English letters.
 * 1 <= k <= 104",Solutions (1.6K),1.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-string-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseStr(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().reverseStr(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseStr(self, s: str, k: int) -> str:
        result = ''
        for i in range(0, len(s), 2*k):
            result += s[i:i+k][::-1] + s[i+k:i+2*k]
        return result"
False,0,0,542,01-matrix,01 Matrix,01-matrix,False,366807,820954,542,False,2,"Can you solve this real interview question? 01 Matrix - Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg]


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]


Example 2:

[https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg]


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 104
 * 1 <= m * n <= 104
 * mat[i][j] is either 0 or 1.
 * There is at least one 0 in mat.",Solutions (2K),6.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/01-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().updateMatrix(mat)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def updateMatrix(self, mat: List[List[int]]) -> List[List[int]]:
        # Insert solution code here
        pass"
False,0,0,546,remove-boxes,Remove Boxes,remove-boxes,False,39164,82363,546,False,3,"Can you solve this real interview question? Remove Boxes - You are given several boxes with different colors represented by different positive numbers.

You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.

Return the maximum points you can get.

 

Example 1:


Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
Explanation:
[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)


Example 2:


Input: boxes = [1,1,1]
Output: 9


Example 3:


Input: boxes = [1]
Output: 1


 

Constraints:

 * 1 <= boxes.length <= 100
 * 1 <= boxes[i] <= 100",Solutions (173),1.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-boxes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeBoxes(self, boxes: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    boxes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().removeBoxes(boxes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeBoxes(self, boxes: List[int]) -> int:
        n = len(boxes)
        dp = [[[0] * n for _ in range(n)] for _ in range(n)]

        def helper(i, j, k):
            if i > j:
                return 0
            if dp[i][j][k]:
                return dp[i][j][k]
            while i < j and boxes[j - 1] == boxes[j]:
                j -= 1
                k += 1
            result = helper(i, j - 1, 0) + (k + 1) * (k + 1)
            
            for m in range(i, j):
                if boxes[m] == boxes[j]:
                    result = max(result, helper(i, m, k + 1) + helper(m + 1, j - 1, 0))
                    
            dp[i][j][k] = result
            return result

        return helper(0, n - 1, 0)"
False,0,0,547,friend-circles,Number of Provinces,number-of-provinces,False,603788,947798,547,False,2,"Can you solve this real interview question? Number of Provinces - There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg]


Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2


Example 2:

[https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg]


Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3


 

Constraints:

 * 1 <= n <= 200
 * n == isConnected.length
 * n == isConnected[i].length
 * isConnected[i][j] is 1 or 0.
 * isConnected[i][i] == 1
 * isConnected[i][j] == isConnected[j][i]",Solutions (3.3K),7.3K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-provinces/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    isConnected: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findCircleNum(isConnected)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def dfs(i):
            visited.add(i)
            for j in range(n):
                if isConnected[i][j] and j not in visited:
                    dfs(j)
        
        n = len(isConnected)
        provinces = 0
        visited = set()
        
        for i in range(n):
            if i not in visited:
                provinces += 1
                dfs(i)
        
        return provinces"
False,0,0,551,student-attendance-record-i,Student Attendance Record I,student-attendance-record-i,False,174216,361508,551,False,1,"Can you solve this real interview question? Student Attendance Record I - You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

 * 'A': Absent.
 * 'L': Late.
 * 'P': Present.

The student is eligible for an attendance award if they meet both of the following criteria:

 * The student was absent ('A') for strictly fewer than 2 days total.
 * The student was never late ('L') for 3 or more consecutive days.

Return true if the student is eligible for an attendance award, or false otherwise.

 

Example 1:


Input: s = ""PPALLP""
Output: true
Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.


Example 2:


Input: s = ""PPALLL""
Output: false
Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either 'A', 'L', or 'P'.",Solutions (1.5K),542,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/student-attendance-record-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkRecord(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkRecord(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkRecord(self, s: str) -> bool:
        return s.count('A') < 2 and 'LLL' not in s"
False,0,0,552,student-attendance-record-ii,Student Attendance Record II,student-attendance-record-ii,False,58703,142077,552,False,3,"Can you solve this real interview question? Student Attendance Record II - An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

 * 'A': Absent.
 * 'L': Late.
 * 'P': Present.

Any student is eligible for an attendance award if they meet both of the following criteria:

 * The student was absent ('A') for strictly fewer than 2 days total.
 * The student was never late ('L') for 3 or more consecutive days.

Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.

 

Example 1:


Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
""PP"", ""AP"", ""PA"", ""LP"", ""PL"", ""AL"", ""LA"", ""LL""
Only ""AA"" is not eligible because there are 2 absences (there need to be fewer than 2).


Example 2:


Input: n = 1
Output: 3


Example 3:


Input: n = 10101
Output: 183236316


 

Constraints:

 * 1 <= n <= 105",Solutions (439),1.5K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/student-attendance-record-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkRecord(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().checkRecord(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def checkRecord(self, n: int) -> int:
        if n == 1:
            return 3
        MOD = 10**9 + 7
        dp = [[0] * 2 for _ in range(2)]
        dp[0][0] = 1
        dp[1][0] = 1
        dp[0][1] = 1
        for _ in range(2, n + 1):
            temp = [[0] * 2 for _ in range(2)]
            temp[0][0] = (dp[0][0] + dp[0][1] + dp[1][0]) % MOD
            temp[1][0] = dp[0][0]
            temp[0][1] = (dp[0][1] + dp[1][1]) % MOD
            temp[1][1] = dp[1][0]
            dp = temp
          
        return sum(map(sum, dp)) % MOD"
False,0,0,553,optimal-division,Optimal Division,optimal-division,False,35120,58654,553,False,2,"Can you solve this real interview question? Optimal Division - You are given an integer array nums. The adjacent integers in nums will perform the float division.

 * For example, for nums = [2,3,4], we will evaluate the expression ""2/3/4"".

However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.

Return the corresponding expression that has the maximum value in string format.

Note: your expression should not contain redundant parenthesis.

 

Example 1:


Input: nums = [1000,100,10,2]
Output: ""1000/(100/10/2)""
Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the bold parenthesis in ""1000/((100/10)/2)"" are redundant since they do not influence the operation priority.
So you should return ""1000/(100/10/2)"".
Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2


Example 2:


Input: nums = [2,3,4]
Output: ""2/(3/4)""
Explanation: (2/(3/4)) = 8/3 = 2.667
It can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667


 

Constraints:

 * 1 <= nums.length <= 10
 * 2 <= nums[i] <= 1000
 * There is only one optimal division for the given input.",Solutions (225),317,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/optimal-division/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def optimalDivision(self, nums: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().optimalDivision(nums)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def optimalDivision(self, nums: List[int]) -> str:
        if len(nums) == 1:
            return str(nums[0])
        if len(nums) == 2:
            return str(nums[0]) + ""/"" + str(nums[1])
        division = '/'.join(map(str, nums[1:]))
        return str(nums[0]) + ""/("" + division + "")"""
False,0,0,554,brick-wall,Brick Wall,brick-wall,False,114637,214135,554,False,2,"Can you solve this real interview question? Brick Wall - There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.

Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.

Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg]


Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
Output: 2


Example 2:


Input: wall = [[1],[1],[1]]
Output: 3


 

Constraints:

 * n == wall.length
 * 1 <= n <= 104
 * 1 <= wall[i].length <= 104
 * 1 <= sum(wall[i].length) <= 2 * 104
 * sum(wall[i]) is the same for each row i.
 * 1 <= wall[i][j] <= 231 - 1",Solutions (735),2.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/brick-wall/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def leastBricks(self, wall: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    wall: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().leastBricks(wall)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def leastBricks(self, wall: List[List[int]]) -> int:
        from collections import defaultdict
        
        edge_count = defaultdict(int)
        
        for row in wall:
            prefix_sum = 0
            for brick in row[:-1]:
                prefix_sum += brick
                edge_count[prefix_sum] += 1
                
        return len(wall) - max(edge_count.values(), default=0)"
False,0,0,556,next-greater-element-iii,Next Greater Element III,next-greater-element-iii,False,124564,366153,556,False,2,"Can you solve this real interview question? Next Greater Element III - Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.

 

Example 1:

Input: n = 12
Output: 21


Example 2:

Input: n = 21
Output: -1


 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (1.2K),3.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/next-greater-element-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextGreaterElement(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().nextGreaterElement(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nextGreaterElement(self, n: int) -> int:
        pass"
False,0,0,557,reverse-words-in-a-string-iii,Reverse Words in a String III,reverse-words-in-a-string-iii,False,671966,820951,557,False,1,"Can you solve this real interview question? Reverse Words in a String III - Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.

 

Example 1:

Input: s = ""Let's take LeetCode contest""
Output: ""s'teL ekat edoCteeL tsetnoc""


Example 2:

Input: s = ""God Ding""
Output: ""doG gniD""


 

Constraints:

 * 1 <= s.length <= 5 * 104
 * s contains printable ASCII characters.
 * s does not contain any leading or trailing spaces.
 * There is at least one word in s.
 * All the words in s are separated by a single space.",Solutions (5.9K),4.8K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-words-in-a-string-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseWords(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reverseWords(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseWords(self, s: str) -> str:
        return ' '.join(word[::-1] for word in s.split())"
False,0,0,560,subarray-sum-equals-k,Subarray Sum Equals K,subarray-sum-equals-k,False,947254,2167923,560,False,2,"Can you solve this real interview question? Subarray Sum Equals K - Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2


Example 2:

Input: nums = [1,2,3], k = 3
Output: 2


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * -1000 <= nums[i] <= 1000
 * -107 <= k <= 107",Solutions (2.7K),17.7K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/subarray-sum-equals-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().subarraySum(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        count = 0
        sum_map = {0: 1}
        total_sum = 0
        
        for num in nums:
            total_sum += num
            count += sum_map.get(total_sum - k, 0)
            sum_map[total_sum] = sum_map.get(total_sum, 0) + 1
        
        return count"
False,0,0,561,array-partition-i,Array Partition,array-partition,False,390674,506237,561,False,1,"Can you solve this real interview question? Array Partition - Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 

Example 1:


Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.

Example 2:


Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.


 

Constraints:

 * 1 <= n <= 104
 * nums.length == 2 * n
 * -104 <= nums[i] <= 104",Solutions (2.2K),1.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/array-partition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().arrayPairSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        return sum(nums[::2])"
False,0,0,564,find-the-closest-palindrome,Find the Closest Palindrome,find-the-closest-palindrome,False,37611,171747,564,False,3,"Can you solve this real interview question? Find the Closest Palindrome - Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.

The closest is defined as the absolute difference minimized between two integers.

 

Example 1:


Input: n = ""123""
Output: ""121""


Example 2:


Input: n = ""1""
Output: ""0""
Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.


 

Constraints:

 * 1 <= n.length <= 18
 * n consists of only digits.
 * n does not have leading zeros.
 * n is representing an integer in the range [1, 1018 - 1].",Solutions (251),612,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-closest-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nearestPalindromic(self, n: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: str = deserialize(""str"", read_line())
    ans = Solution().nearestPalindromic(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def nearestPalindromic(self, n: str) -> str:
        def is_palindrome(s):
            return s == s[::-1]
        
        n = int(n)
        lower = n - 1
        upper = n + 1
        
        while True:
            if is_palindrome(str(lower)):
                return str(lower)
            if is_palindrome(str(upper)):
                return str(upper)
            lower -= 1
            upper += 1"
False,0,0,565,array-nesting,Array Nesting,array-nesting,False,121621,215673,565,False,2,"Can you solve this real interview question? Array Nesting - You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].

You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:

 * The first element in s[k] starts with the selection of the element nums[k] of index = k.
 * The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
 * We stop adding right before a duplicate element occurs in s[k].

Return the longest length of a set s[k].

 

Example 1:


Input: nums = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.
One of the longest sets s[k]:
s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}


Example 2:


Input: nums = [0,1,2]
Output: 1


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] < nums.length
 * All the values of nums are unique.",Solutions (818),2.1K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/array-nesting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrayNesting(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().arrayNesting(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def arrayNesting(self, nums: List[int]) -> int:
        length = 0
        for i in range(len(nums)):
            count = 0
            j = i
            while nums[j] >= 0:
                count += 1
                tmp = nums[j]
                nums[j] = -1
                j = tmp
            length = max(length, count)
        return length"
False,0,0,566,reshape-the-matrix,Reshape the Matrix,reshape-the-matrix,False,335484,533675,566,False,1,"Can you solve this real interview question? Reshape the Matrix - In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.

You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.

The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg]


Input: mat = [[1,2],[3,4]], r = 1, c = 4
Output: [[1,2,3,4]]


Example 2:

[https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg]


Input: mat = [[1,2],[3,4]], r = 2, c = 4
Output: [[1,2],[3,4]]


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 100
 * -1000 <= mat[i][j] <= 1000
 * 1 <= r, c <= 300",Solutions (2.9K),3.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/reshape-the-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    r: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().matrixReshape(mat, r, c)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def matrixReshape(self, mat: List[List[int]], r: int, c: int) -> List[List[int]]:
        import numpy as np
        try:
            return np.reshape(mat, (r, c)).tolist()
        except:
            return mat"
False,0,0,567,short-permutation-in-a-long-string,Permutation in String,permutation-in-string,False,627845,1415621,567,False,2,"Can you solve this real interview question? Permutation in String - Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:


Input: s1 = ""ab"", s2 = ""eidbaooo""
Output: true
Explanation: s2 contains one permutation of s1 (""ba"").


Example 2:


Input: s1 = ""ab"", s2 = ""eidboaoo""
Output: false


 

Constraints:

 * 1 <= s1.length, s2.length <= 104
 * s1 and s2 consist of lowercase English letters.",Solutions (4.5K),9.6K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/permutation-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().checkInclusion(s1, s2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkInclusion(self, s1: str, s2: str) -> bool:
        from collections import Counter
        if len(s1) > len(s2):
            return False
        s1_count = Counter(s1)
        window = Counter(s2[:len(s1)])
        for i in range(len(s2) - len(s1) + 1):
            if i > 0:
                window[s2[i - 1]] -= 1
                if window[s2[i - 1]] == 0:
                    del window[s2[i - 1]]
                window[s2[i + len(s1) - 1]] += 1
            if window == s1_count:
                return True
        return False"
False,0,0,575,distribute-candies,Distribute Candies,distribute-candies,False,237886,358020,575,False,1,"Can you solve this real interview question? Distribute Candies - Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.

 

Example 1:


Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.


Example 2:


Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.


Example 3:


Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.


 

Constraints:

 * n == candyType.length
 * 2 <= n <= 104
 * n is even.
 * -105 <= candyType[i] <= 105",Solutions (1.6K),1.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/distribute-candies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distributeCandies(self, candyType: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    candyType: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().distributeCandies(candyType)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distributeCandies(self, candyType: List[int]) -> int:
        return min(len(set(candyType)), len(candyType) // 2)"
False,0,0,576,out-of-boundary-paths,Out of Boundary Paths,out-of-boundary-paths,False,115345,260563,576,False,2,"Can you solve this real interview question? Out of Boundary Paths - There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.

Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png]


Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
Output: 6


Example 2:

[https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png]


Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
Output: 12


 

Constraints:

 * 1 <= m, n <= 50
 * 0 <= maxMove <= 50
 * 0 <= startRow < m
 * 0 <= startColumn < n",Solutions (1.2K),2.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/out-of-boundary-paths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    maxMove: int = deserialize(""int"", read_line())
    startRow: int = deserialize(""int"", read_line())
    startColumn: int = deserialize(""int"", read_line())
    ans = Solution().findPaths(m, n, maxMove, startRow, startColumn)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * n for _ in range(m)]
        dp[startRow][startColumn] = 1
        result = 0
        
        for _ in range(maxMove):
            new_dp = [[0] * n for _ in range(m)]
            for i in range(m):
                for j in range(n):
                    for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
                        if 0 <= ni < m and 0 <= nj < n:
                            new_dp[ni][nj] += dp[i][j]
                            new_dp[ni][nj] %= MOD
                        else:
                            result += dp[i][j]
                            result %= MOD
            dp = new_dp
        
        return result"
False,0,0,581,shortest-unsorted-continous-subarray,Shortest Unsorted Continuous Subarray,shortest-unsorted-continuous-subarray,False,299124,821607,581,False,2,"Can you solve this real interview question? Shortest Unsorted Continuous Subarray - Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.

 

Example 1:


Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.


Example 2:


Input: nums = [1,2,3,4]
Output: 0


Example 3:


Input: nums = [1]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 104
 * -105 <= nums[i] <= 105

 

Follow up: Can you solve it in O(n) time complexity?",Solutions (1.9K),7.2K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findUnsortedSubarray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        stack = []
        l, r = len(nums), 0
        for i in range(len(nums)):
            while stack and nums[stack[-1]] > nums[i]:
                l = min(l, stack.pop())
            stack.append(i)
        stack = []
        for i in range(len(nums) - 1, -1, -1):
            while stack and nums[stack[-1]] < nums[i]:
                r = max(r, stack.pop())
            stack.append(i)
        return r - l + 1 if r - l > 0 else 0"
False,0,0,583,delete-operation-for-two-strings,Delete Operation for Two Strings,delete-operation-for-two-strings,False,200306,335249,583,False,2,"Can you solve this real interview question? Delete Operation for Two Strings - Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

 

Example 1:


Input: word1 = ""sea"", word2 = ""eat""
Output: 2
Explanation: You need one step to make ""sea"" to ""ea"" and another step to make ""eat"" to ""ea"".


Example 2:


Input: word1 = ""leetcode"", word2 = ""etco""
Output: 4


 

Constraints:

 * 1 <= word1.length, word2.length <= 500
 * word1 and word2 consist of only lowercase English letters.",Solutions (2.1K),4.9K,"# Created by asetti2002 at 2024/04/17 02:17
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-operation-for-two-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().minDistance(word1, word2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            dp[i][0] = dp[i - 1][0] + 1
        
        for j in range(1, n + 1):
            dp[0][j] = dp[0][j - 1] + 1
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1
        
        return dp[m][n]"
False,0,0,587,erect-the-fence,Erect the Fence,erect-the-fence,False,53667,102755,587,False,3,"Can you solve this real interview question? Erect the Fence - You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.

Fence the entire garden using the minimum length of rope, as it is expensive. The garden is well-fenced only if all the trees are enclosed.

Return the coordinates of trees that are exactly located on the fence perimeter. You may return the answer in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg]


Input: trees = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]
Explanation: All the trees will be on the perimeter of the fence except the tree at [2, 2], which will be inside the fence.


Example 2:

[https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg]


Input: trees = [[1,2],[2,2],[4,2]]
Output: [[4,2],[2,2],[1,2]]
Explanation: The fence forms a line that passes through all the trees.


 

Constraints:

 * 1 <= trees.length <= 3000
 * trees[i].length == 2
 * 0 <= xi, yi <= 100
 * All the given positions are unique.",Solutions (340),1.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/erect-the-fence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    trees: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().outerTrees(trees)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def outerTrees(self, trees: List[List[int]]) -> List[List[int]]:
        pass"
False,0,0,591,tag-validator,Tag Validator,tag-validator,False,12918,34744,591,False,3,"Can you solve this real interview question? Tag Validator - Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.

A code snippet is valid if all the following rules hold:

 1. The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.
 2. A closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.
 3. A valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.
 4. A valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.
 5. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.
 6. A < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).
 7. The cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.
 8. CDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.

 

Example 1:


Input: code = ""<DIV>This is the first line <![CDATA[<div>]]></DIV>""
Output: true
Explanation: 
The code is wrapped in a closed tag : <DIV> and </DIV>. 
The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. 
Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.
So TAG_CONTENT is valid, and then the code is valid. Thus return true.


Example 2:


Input: code = ""<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>""
Output: true
Explanation:
We first separate the code into : start_tag|tag_content|end_tag.
start_tag -> ""<DIV>""
end_tag -> ""</DIV>""
tag_content could also be separated into : text1|cdata|text2.
text1 -> "">>  ![cdata[]] ""
cdata -> ""<![CDATA[<div>]>]]>"", where the CDATA_CONTENT is ""<div>]>""
text2 -> ""]]>>]""
The reason why start_tag is NOT ""<DIV>>>"" is because of the rule 6.
The reason why cdata is NOT ""<![CDATA[<div>]>]]>]]>"" is because of the rule 7.


Example 3:


Input: code = ""<A>  <B> </A>   </B>""
Output: false
Explanation: Unbalanced. If ""<A>"" is closed, then ""<B>"" must be unmatched, and vice versa.


 

Constraints:

 * 1 <= code.length <= 500
 * code consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.",Solutions (104),149,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/tag-validator/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isValid(self, code: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    code: str = deserialize(""str"", read_line())
    ans = Solution().isValid(code)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isValid(self, code: str) -> bool:
        # Add your code here
        pass"
False,0,0,592,fraction-additon-and-subtraction,Fraction Addition and Subtraction,fraction-addition-and-subtraction,False,32166,61419,592,False,2,"Can you solve this real interview question? Fraction Addition and Subtraction - Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.

The final result should be an irreducible fraction [https://en.wikipedia.org/wiki/Irreducible_fraction]. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.

 

Example 1:


Input: expression = ""-1/2+1/2""
Output: ""0/1""


Example 2:


Input: expression = ""-1/2+1/2+1/3""
Output: ""1/3""


Example 3:


Input: expression = ""1/3-1/2""
Output: ""-1/6""


 

Constraints:

 * The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
 * Each fraction (input and output) has the format ±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.
 * The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.
 * The number of given fractions will be in the range [1, 10].
 * The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",Solutions (278),352,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/fraction-addition-and-subtraction/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fractionAddition(self, expression: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().fractionAddition(expression)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def fractionAddition(self, expression: str) -> str:
        from fractions import Fraction
        
        def helper(s):
            i = s.find('/')
            return Fraction(int(s[:i]), int(s[i+1:]))
        
        parts = map(helper, expression.replace(""+"", "" +"").replace(""-"", "" -"").split())
        result = sum(parts, start=Fraction(0))
        
        return str(result.numerator) + '/' + str(result.denominator)"
False,0,0,593,valid-square,Valid Square,valid-square,False,96600,219807,593,False,2,"Can you solve this real interview question? Valid Square - Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.

The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).

 

Example 1:


Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true


Example 2:


Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
Output: false


Example 3:


Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
Output: true


 

Constraints:

 * p1.length == p2.length == p3.length == p4.length == 2
 * -104 <= xi, yi <= 104",Solutions (793),927,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    p1: List[int] = deserialize(""List[int]"", read_line())
    p2: List[int] = deserialize(""List[int]"", read_line())
    p3: List[int] = deserialize(""List[int]"", read_line())
    p4: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validSquare(p1, p2, p3, p4)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        def dist(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        
        points = [p1, p2, p3, p4]
        dists = [dist(p1, p2) for p1 in points for p2 in points if p1 != p2]
        dists.sort()
        
        return dists[0] > 0 and dists[0] == dists[1] == dists[2] == dists[3] and dists[4] == dists[5]"
False,0,0,594,longest-harmonious-subsequence,Longest Harmonious Subsequence,longest-harmonious-subsequence,False,132810,248309,594,False,1,"Can you solve this real interview question? Longest Harmonious Subsequence - We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].


Example 2:


Input: nums = [1,2,3,4]
Output: 2


Example 3:


Input: nums = [1,1,1,1]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * -109 <= nums[i] <= 109",Solutions (857),1.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-harmonious-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLHS(self, nums: List[int]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLHS(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLHS(self, nums: List[int]) -> int:
        from collections import Counter
        
        num_counts = Counter(nums)
        max_length = 0
        
        for num in num_counts:
            if num + 1 in num_counts:
                max_length = max(max_length, num_counts[num] + num_counts[num + 1])
        
        return max_length"
False,0,0,598,range-addition-ii,Range Addition II,range-addition-ii,False,88113,159347,598,False,1,"Can you solve this real interview question? Range Addition II - You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return the number of maximum integers in the matrix after performing all the operations.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg]


Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.


Example 2:


Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4


Example 3:


Input: m = 3, n = 3, ops = []
Output: 9


 

Constraints:

 * 1 <= m, n <= 4 * 104
 * 0 <= ops.length <= 104
 * ops[i].length == 2
 * 1 <= ai <= m
 * 1 <= bi <= n",Solutions (655),814,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/range-addition-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ops: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxCount(m, n, ops)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCount(self, m: int, n: int, ops: List[List[int]]) -> int:
        s = min([i[0] for i in ops]) if ops else m
        t = min([i[1] for i in ops]) if ops else n
        return s * t"
False,0,0,599,minimum-index-sum-of-two-lists,Minimum Index Sum of Two Lists,minimum-index-sum-of-two-lists,False,185802,348431,599,False,1,"Can you solve this real interview question? Minimum Index Sum of Two Lists - Given two arrays of strings list1 and list2, find the common strings with the least index sum.

A common string is a string that appeared in both list1 and list2.

A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.

Return all the common strings with the least index sum. Return the answer in any order.

 

Example 1:


Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""Piatti"",""The Grill at Torrey Pines"",""Hungry Hunter Steakhouse"",""Shogun""]
Output: [""Shogun""]
Explanation: The only common string is ""Shogun"".


Example 2:


Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Shogun"",""Burger King""]
Output: [""Shogun""]
Explanation: The common string with the least index sum is ""Shogun"" with index sum = (0 + 1) = 1.


Example 3:


Input: list1 = [""happy"",""sad"",""good""], list2 = [""sad"",""happy"",""good""]
Output: [""sad"",""happy""]
Explanation: There are three common strings:
""happy"" with index sum = (0 + 1) = 1.
""sad"" with index sum = (1 + 0) = 1.
""good"" with index sum = (2 + 2) = 4.
The strings with the least index sum are ""sad"" and ""happy"".


 

Constraints:

 * 1 <= list1.length, list2.length <= 1000
 * 1 <= list1[i].length, list2[i].length <= 30
 * list1[i] and list2[i] consist of spaces ' ' and English letters.
 * All the strings of list1 are unique.
 * All the strings of list2 are unique.
 * There is at least a common string between list1 and list2.",Solutions (1.4K),1.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-index-sum-of-two-lists/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    list1: List[str] = deserialize(""List[str]"", read_line())
    list2: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findRestaurant(list1, list2)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findRestaurant(self, list1: List[str], list2: List[str]) -> List[str]:
        common = set(list1) & set(list2)
        index_sum = {word: list1.index(word) + list2.index(word) for word in common}
        min_sum = min(index_sum.values())
        return [word for word in common if index_sum[word] == min_sum]"
False,0,0,600,non-negative-integers-without-consecutive-ones,Non-negative Integers without Consecutive Ones,non-negative-integers-without-consecutive-ones,False,34076,87043,600,False,3,"Can you solve this real interview question? Non-negative Integers without Consecutive Ones - Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.

 

Example 1:


Input: n = 5
Output: 5
Explanation:
Here are the non-negative integers <= 5 with their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. 


Example 2:


Input: n = 1
Output: 2


Example 3:


Input: n = 2
Output: 3


 

Constraints:

 * 1 <= n <= 109",Solutions (265),1.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findIntegers(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().findIntegers(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findIntegers(self, n: int) -> int:
        if n == 1:
            return 2
        
        a, b = 1, 2
        for _ in range(n.bit_length() - 1):
            a, b = b, a + b
        
        total, mask = 0, 1
        bit_set = False
        for i in range(n.bit_length() - 1, -1, -1):
            if n & (1 << i):
                total += a
                if bit_set:
                    break
                bit_set = True
            else:
                bit_set = False
            mask <<= 1
            a, b = b, a + b
        
        return total + 1"
False,0,0,605,can-place-flowers,Can Place Flowers,can-place-flowers,False,419302,1275379,605,False,1,"Can you solve this real interview question? Can Place Flowers - You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.

 

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true


Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: false


 

Constraints:

 * 1 <= flowerbed.length <= 2 * 104
 * flowerbed[i] is 0 or 1.
 * There are no two adjacent flowers in flowerbed.
 * 0 <= n <= flowerbed.length",Solutions (3.1K),4.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/can-place-flowers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    flowerbed: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().canPlaceFlowers(flowerbed, n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        count = 0
        i = 0
        
        while i < len(flowerbed):
            if flowerbed[i] == 0 and (i == 0 or flowerbed[i-1] == 0) and (i == len(flowerbed)-1 or flowerbed[i+1] == 0):
                flowerbed[i] = 1
                count += 1
            i += 1
                
        return count >= n"
False,0,0,609,find-duplicate-file-in-system,Find Duplicate File in System,find-duplicate-file-in-system,False,143818,212392,609,False,2,"Can you solve this real interview question? Find Duplicate File in System - Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.

A group of duplicate files consists of at least two files that have the same content.

A single directory info string in the input list has the following format:

 * ""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""

It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory ""root/d1/d2/.../dm"". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.

The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:

 * ""directory_path/file_name.txt""

 

Example 1:

Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"",""root 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]


Example 2:

Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]


 

Constraints:

 * 1 <= paths.length <= 2 * 104
 * 1 <= paths[i].length <= 3000
 * 1 <= sum(paths[i].length) <= 5 * 105
 * paths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.
 * You may assume no files or directories share the same name in the same directory.
 * You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.

 

Follow up:

 * Imagine you are given a real file system, how will you search files? DFS or BFS?
 * If the file content is very large (GB level), how will you modify your solution?
 * If you can only read the file by 1kb each time, how will you modify your solution?
 * What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?
 * How to make sure the duplicated files you find are not false positive?",Solutions (1.2K),1.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/find-duplicate-file-in-system/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDuplicate(self, paths: List[str]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    paths: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findDuplicate(paths)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def findDuplicate(self, paths: List[str]) -> List[List[str]]:
        content_dict = {}
        for path in paths:
            parts = path.split()
            directory = parts[0]
            for file_part in parts[1:]:
                filename, content = file_part.split('(')
                if content in content_dict:
                    content_dict[content].append(directory + '/' + filename)
                else:
                    content_dict[content] = [directory + '/' + filename]
        
        return [files for files in content_dict.values() if len(files) > 1]"
False,0,0,611,valid-triangle-number,Valid Triangle Number,valid-triangle-number,False,166394,329370,611,False,2,"Can you solve this real interview question? Valid Triangle Number - Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.

 

Example 1:


Input: nums = [2,2,3,4]
Output: 3
Explanation: Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3


Example 2:


Input: nums = [4,2,3,4]
Output: 4


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] <= 1000",Solutions (692),3.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-triangle-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def triangleNumber(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().triangleNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def triangleNumber(self, nums: List[int]) -> int:
        nums.sort()
        count = 0
        n = len(nums)
        for i in range(2, n):
            left, right = 0, i - 1
            while left < right:
                if nums[left] + nums[right] > nums[i]:
                    count += right - _ left
                    right -= 1
                else:
                    left += 1
        return count"
False,0,0,621,task-scheduler,Task Scheduler,task-scheduler,False,420040,746266,621,False,2,"Can you solve this real interview question? Task Scheduler - Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.

 

Example 1:


Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 2
Output: 8
Explanation: 
A -> B -> idle -> A -> B -> idle -> A -> B
There is at least 2 units of time between any two same tasks.


Example 2:


Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 0
Output: 6
Explanation: On this case any permutation of size 6 would work since n = 0.
[""A"",""A"",""A"",""B"",""B"",""B""]
[""A"",""B"",""A"",""B"",""A"",""B""]
[""B"",""B"",""B"",""A"",""A"",""A""]
...
And so on.


Example 3:


Input: tasks = [""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], n = 2
Output: 16
Explanation: 
One possible solution is
A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A


 

Constraints:

 * 1 <= task.length <= 104
 * tasks[i] is upper-case English letter.
 * The integer n is in the range [0, 100].",Solutions (1.4K),8.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/task-scheduler/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[str] = deserialize(""List[str]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().leastInterval(tasks, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        char_map = [0] * 26
        for char in tasks:
            char_map[ord(char) - ord('A')] += 1
        char_map.sort()
        max_val = char_map[25] - 1
        idle_slots = max_val * n
        for i in range(24, -1, -1):
            idle_slots -= min(char_map[i], max_val)
        return max(idle_slots + len(tasks), len(tasks))"
False,0,0,628,maximmum-product-of-three-numbers,Maximum Product of Three Numbers,maximum-product-of-three-numbers,False,257508,560503,628,False,1,"Can you solve this real interview question? Maximum Product of Three Numbers - Given an integer array nums, find three numbers whose product is maximum and return the maximum product.

 

Example 1:

Input: nums = [1,2,3]
Output: 6


Example 2:

Input: nums = [1,2,3,4]
Output: 24


Example 3:

Input: nums = [-1,-2,-3]
Output: -6


 

Constraints:

 * 3 <= nums.length <= 104
 * -1000 <= nums[i] <= 1000",Solutions (1.5K),3.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-of-three-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumProduct(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumProduct(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumProduct(self, nums: List[int]) -> int:
        nums.sort()
        return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"
False,0,0,629,k-inverse-pairs-array,K Inverse Pairs Array,k-inverse-pairs-array,False,58069,136105,629,False,3,"Can you solve this real interview question? K Inverse Pairs Array - For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].

Given two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 109 + 7.

 

Example 1:


Input: n = 3, k = 0
Output: 1
Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.


Example 2:


Input: n = 3, k = 1
Output: 2
Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.


 

Constraints:

 * 1 <= n <= 1000
 * 0 <= k <= 1000",Solutions (323),1.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/k-inverse-pairs-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kInversePairs(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        dp[1][0] = 1
        for i in range(2, n + 1):
            dp[i][0] = 1
            for j in range(1, k + 1):
                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD
                if j >= i:
                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + MOD) % MOD
        return (dp[n][k] - dp[n][k - 1]) % MOD"
False,0,0,630,course-schedule-iii,Course Schedule III,course-schedule-iii,False,101254,252244,630,False,3,"Can you solve this real interview question? Course Schedule III - There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastDayi.

You will start on the 1st day and you cannot take two or more courses simultaneously.

Return the maximum number of courses that you can take.

 

Example 1:


Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]
Output: 3
Explanation: 
There are totally 4 courses, but you can take 3 courses at most:
First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.
Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. 
Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. 
The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.


Example 2:


Input: courses = [[1,2]]
Output: 1


Example 3:


Input: courses = [[3,2],[4,3]]
Output: 0


 

Constraints:

 * 1 <= courses.length <= 104
 * 1 <= durationi, lastDayi <= 104",Solutions (580),3.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/course-schedule-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def scheduleCourse(self, courses: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    courses: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().scheduleCourse(courses)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def scheduleCourse(self, courses: List[List[int]]) -> int:
        courses.sort(key=lambda x: x[1])
        queue = []
        time = 0
        for duration, end in courses:
            if time + duration <= end:
                heapq.heappush(queue, -duration)
                time += duration
            elif queue and duration < -queue[0]:
                popped = heapq.heappop(queue)
                heapq.heappush(queue, -duration)
                time += duration - popped
        return len(queue)"
False,0,0,632,smallest-range,Smallest Range Covering Elements from K Lists,smallest-range-covering-elements-from-k-lists,False,83383,136743,632,False,3,"Can you solve this real interview question? Smallest Range Covering Elements from K Lists - You have k lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the k lists.

We define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.

 

Example 1:


Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].
List 2: [0, 9, 12, 20], 20 is in range [20,24].
List 3: [5, 18, 22, 30], 22 is in range [20,24].


Example 2:


Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]


 

Constraints:

 * nums.length == k
 * 1 <= k <= 3500
 * 1 <= nums[i].length <= 50
 * -105 <= nums[i][j] <= 105
 * nums[i] is sorted in non-decreasing order.",Solutions (705),2.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().smallestRange(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallestRange(self, nums: List[List[int]]) -> List[int]:
        pass"
False,0,0,633,sum-of-square-numbers,Sum of Square Numbers,sum-of-square-numbers,False,167140,485987,633,False,2,"Can you solve this real interview question? Sum of Square Numbers - Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.

 

Example 1:


Input: c = 5
Output: true
Explanation: 1 * 1 + 2 * 2 = 5


Example 2:


Input: c = 3
Output: false


 

Constraints:

 * 0 <= c <= 231 - 1",Solutions (1.2K),2.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-square-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    c: int = deserialize(""int"", read_line())
    ans = Solution().judgeSquareSum(c)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def judgeSquareSum(self, c: int) -> bool:
        import math
        for a in range(int(math.sqrt(c)) + 1):
            b = math.sqrt(c - a*a)
            if b == int(b):
                return True
        return False"
False,0,0,636,exclusive-time-of-functions,Exclusive Time of Functions,exclusive-time-of-functions,False,187995,307334,636,False,2,"Can you solve this real interview question? Exclusive Time of Functions - On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.

Function calls are stored in a call stack [https://en.wikipedia.org/wiki/Call_stack]: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.

You are given a list logs, where logs[i] represents the ith log message formatted as a string ""{function_id}:{""start"" | ""end""}:{timestamp}"". For example, ""0:start:3"" means a function call with function ID 0 started at the beginning of timestamp 3, and ""1:end:2"" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.

A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.

Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/04/05/diag1b.png]


Input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""]
Output: [3,4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.
Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.
Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.
So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.


Example 2:


Input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"",""0:end:7""]
Output: [8]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
Function 0 (initial call) resumes execution then immediately calls itself again.
Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.
Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.
So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.


Example 3:


Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"",""0:end:7""]
Output: [7,1]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
Function 0 (initial call) resumes execution then immediately calls function 1.
Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.
Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.
So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.


 

Constraints:

 * 1 <= n <= 100
 * 1 <= logs.length <= 500
 * 0 <= function_id < n
 * 0 <= timestamp <= 109
 * No two start events will happen at the same timestamp.
 * No two end events will happen at the same timestamp.
 * Each function has an ""end"" log for each ""start"" log.",Solutions (741),1.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/exclusive-time-of-functions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    logs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().exclusiveTime(n, logs)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def exclusiveTime(self, n: int, logs: List[str]) -> List[int]:
        stack = []
        prev_time = 0
        res = [0] * n
        
        for log in logs:
            curr_id, status, curr_time = log.split(':')
            curr_id, curr_time = int(curr_id), int(curr_time)
            
            if status == 'start':
                if stack:
                    res[stack[-1]] += curr_time - prev_time
                stack.append(curr_id)
                prev_time = curr_time
            else:
                res[stack.pop()] += curr_time - prev_time + 1
                prev_time = curr_time + 1
        
        return res"
False,0,0,638,shopping-offers,Shopping Offers,shopping-offers,False,52170,97851,638,False,2,"Can you solve this real interview question? Shopping Offers - In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.

You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.

Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.

 

Example 1:


Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
Output: 14
Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.


Example 2:


Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]
Output: 11
Explanation: The price of A is $2, and $3 for B, $4 for C. 
You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
You cannot add more items, though only $9 for 2A ,2B and 1C.


 

Constraints:

 * n == price.length == needs.length
 * 1 <= n <= 6
 * 0 <= price[i], needs[i] <= 10
 * 1 <= special.length <= 100
 * special[i].length == n + 1
 * 0 <= special[i][j] <= 50",Solutions (418),1.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/shopping-offers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    price: List[int] = deserialize(""List[int]"", read_line())
    special: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    needs: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().shoppingOffers(price, special, needs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shoppingOffers(self, price: List[int], special: List[List[int]], needs: List[int]) -> int:
        pass"
False,0,0,639,decode-ways-ii,Decode Ways II,decode-ways-ii,False,66620,219181,639,False,3,"Can you solve this real interview question? Decode Ways II - A message containing letters from A-Z can be encoded into numbers using the following mapping:


'A' -> ""1""
'B' -> ""2""
...
'Z' -> ""26""


To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, ""11106"" can be mapped into:

 * ""AAJF"" with the grouping (1 1 10 6)
 * ""KJF"" with the grouping (11 10 6)

Note that the grouping (1 11 06) is invalid because ""06"" cannot be mapped into 'F' since ""6"" is different from ""06"".

In addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message ""1*"" may represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"". Decoding ""1*"" is equivalent to decoding any of the encoded messages it can represent.

Given a string s consisting of digits and '*' characters, return the number of ways to decode it.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""*""
Output: 9
Explanation: The encoded message can represent any of the encoded messages ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", or ""9"".
Each of these can be decoded to the strings ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", and ""I"" respectively.
Hence, there are a total of 9 ways to decode ""*"".


Example 2:


Input: s = ""1*""
Output: 18
Explanation: The encoded message can represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"".
Each of these encoded messages have 2 ways to be decoded (e.g. ""11"" can be decoded to ""AA"" or ""K"").
Hence, there are a total of 9 * 2 = 18 ways to decode ""1*"".


Example 3:


Input: s = ""2*""
Output: 15
Explanation: The encoded message can represent any of the encoded messages ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", or ""29"".
""21"", ""22"", ""23"", ""24"", ""25"", and ""26"" have 2 ways of being decoded, but ""27"", ""28"", and ""29"" only have 1 way.
Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode ""2*"".


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is a digit or '*'.",Solutions (477),1.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-ways-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numDecodings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numDecodings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numDecodings(self, s: str) -> int:
        MOD = 10**9 + 7
        
        def ways(ch):
            if ch == '0':
                return 0
            if ch == '*':
                return 9
            return 1 if ch != '0' and int(ch) <= 26 else 0
        
        def twoWays(ch1, ch2):
            if ch1 == '0' or ch1 > '2':
                return 0
            if ch2 == '*':
                if ch1 == '1':
                    return 9
                elif ch1 == '2':
                    return 6
            else:
                if ch1 == '1':
                    return 1
                elif ch1 == '2' and ch2 <= '6':
                    return 1
            return 0
        
        dp = [1, ways(s[0])]
        
        for i in range(1, len(s)):
            new_dp = [(dp[-1] * ways(s[i])) % MOD]
            new_dp.append((dp[-1] * twoWays(s[i - 1], s[i]) + dp[-2] * ways(s[i])) % MOD)
            dp = new_dp
        
        return dp[-1]"
False,0,0,640,solve-the-equation,Solve the Equation,solve-the-equation,False,35572,81974,640,False,2,"Can you solve this real interview question? Solve the Equation - Solve a given equation and return the value of 'x' in the form of a string ""x=#value"". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return ""No solution"" if there is no solution for the equation, or ""Infinite solutions"" if there are infinite solutions for the equation.

If there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.

 

Example 1:


Input: equation = ""x+5-3+x=6+x-2""
Output: ""x=2""


Example 2:


Input: equation = ""x=x""
Output: ""Infinite solutions""


Example 3:


Input: equation = ""2x=x""
Output: ""x=0""


 

Constraints:

 * 3 <= equation.length <= 1000
 * equation has exactly one '='.
 * equation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.",Solutions (384),433,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/solve-the-equation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def solveEquation(self, equation: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    equation: str = deserialize(""str"", read_line())
    ans = Solution().solveEquation(equation)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def solveEquation(self, equation: str) -> str:
        def evaluate_expression(expression):
            x_coefficient = 0
            constant = 0
            sign = 1
            i = 0
            n = len(expression)
            while i < n:
                if expression[i] == '+':
                    sign = 1
                    i += 1
                elif expression[i] == '-':
                    sign = -1
                    i += 1
                elif expression[i] == 'x':
                    if i > 0 and expression[i-1].isdigit():
                        x_coefficient += int(expression[i-1]) * sign
                    else:
                        x_coefficient += 1 * sign
                    i += 1
                else:
                    start = i
                    while i < n and expression[i].isdigit():
                        i += 1
                    num = int(expression[start:i]) * sign
                    if i < n and expression[i] == 'x':
                        x_coefficient += num
                        i += 1
                    else:
                        constant += num
            return x_coefficient, constant

        left, right = equation.split(""="")
        left_x_coefficient, left_constant = evaluate_expression(left)
        right_x_coefficient, right_constant = evaluate_expression(right)
        x_coefficient = left_x_coefficient - right_x_coefficient
        constant = right_constant - left_constant
        if x_coefficient == 0:
            if constant == 0:
                return ""Infinite solutions""
            else:
                return ""No solution""
        else:
            return ""x="" + str(constant // x_coefficient)"
False,0,0,643,maximum-average-subarray,Maximum Average Subarray I,maximum-average-subarray-i,False,198918,455045,643,False,1,"Can you solve this real interview question? Maximum Average Subarray I - You are given an integer array nums consisting of n elements, and an integer k.

Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

 

Example 1:


Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75


Example 2:


Input: nums = [5], k = 1
Output: 5.00000


 

Constraints:

 * n == nums.length
 * 1 <= k <= n <= 105
 * -104 <= nums[i] <= 104",Solutions (1.4K),2.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-average-subarray-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findMaxAverage(nums, k)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        left = 0
        total = sum(nums[:k])
        maximum = total
        for right in range(k, len(nums)):
            total += nums[right] - nums[left]
            maximum = max(maximum, total)
            left += 1
        return maximum / k"
False,0,0,645,set-mismatch,Set Mismatch,set-mismatch,False,263587,616799,645,False,1,"Can you solve this real interview question? Set Mismatch - You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array nums representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.

 

Example 1:

Input: nums = [1,2,2,4]
Output: [2,3]


Example 2:

Input: nums = [1,1]
Output: [1,2]


 

Constraints:

 * 2 <= nums.length <= 104
 * 1 <= nums[i] <= 104",Solutions (2.4K),3.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/set-mismatch/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findErrorNums(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        n = len(nums)
        total = sum(nums)
        duplicate = total - sum(set(nums))
        missing = duplicate + n*(n+1)//2 - total
        return [duplicate, missing]"
False,0,0,646,maximum-length-of-pair-chain,Maximum Length of Pair Chain,maximum-length-of-pair-chain,False,132295,234038,646,False,2,"Can you solve this real interview question? Maximum Length of Pair Chain - You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.

A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.

Return the length longest chain which can be formed.

You do not need to use up all the given intervals. You can select pairs in any order.

 

Example 1:


Input: pairs = [[1,2],[2,3],[3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4].


Example 2:


Input: pairs = [[1,2],[7,8],[4,5]]
Output: 3
Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].


 

Constraints:

 * n == pairs.length
 * 1 <= n <= 1000
 * -1000 <= lefti < righti <= 1000",Solutions (985),2.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-length-of-pair-chain/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    pairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findLongestChain(pairs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLongestChain(self, pairs: List[List[int]]) -> int:
        pairs.sort(key=lambda x: x[1])
        curr_end = float('-inf')
        ans = 0
        
        for pair in pairs:
            if pair[0] > curr_end:
                curr_end = pair[1]
                ans += 1
                
        return ans"
False,0,0,647,palindromic-substrings,Palindromic Substrings,palindromic-substrings,False,557250,833909,647,False,2,"Can you solve this real interview question? Palindromic Substrings - Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:


Input: s = ""abc""
Output: 3
Explanation: Three palindromic strings: ""a"", ""b"", ""c"".


Example 2:


Input: s = ""aaa""
Output: 6
Explanation: Six palindromic strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa"".


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of lowercase English letters.",Solutions (2.9K),8.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/palindromic-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubstrings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countSubstrings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSubstrings(self, s: str) -> int:
        res = 0
        for i in range(len(s)):
            for j in range(i, len(s)):
                if s[i:j+1] == s[i:j+1][::-1]:
                    res += 1
        return res"
False,0,0,648,replace-words,Replace Words,replace-words,False,117162,186883,648,False,2,"Can you solve this real interview question? Replace Words - In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root ""an"" is followed by the successor word ""other"", we can form a new word ""another"".

Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the sentence after the replacement.

 

Example 1:


Input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""the cat was rat by the bat""


Example 2:


Input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs""
Output: ""a a b c""


 

Constraints:

 * 1 <= dictionary.length <= 1000
 * 1 <= dictionary[i].length <= 100
 * dictionary[i] consists of only lower-case letters.
 * 1 <= sentence.length <= 106
 * sentence consists of only lower-case letters and spaces.
 * The number of words in sentence is in the range [1, 1000]
 * The length of each word in sentence is in the range [1, 1000]
 * Every two consecutive words in sentence will be separated by exactly one space.
 * sentence does not have leading or trailing spaces.",Solutions (1.3K),2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    dictionary: List[str] = deserialize(""List[str]"", read_line())
    sentence: str = deserialize(""str"", read_line())
    ans = Solution().replaceWords(dictionary, sentence)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def replaceWords(self, dictionary: List[str], sentence: str) -> str:
        roots = set(dictionary)
        def replace(word):
            for i in range(1, len(word)):
                if word[:i] in roots:
                    return word[:i]
            return word

        return ' '.join(map(replace, sentence.split()))"
False,0,0,649,dota2-senate,Dota2 Senate,dota2-senate,False,23057,56839,649,False,2,"Can you solve this real interview question? Dota2 Senate - In the world of Dota2, there are two parties: the Radiant and the Dire.

The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:

 * Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.
 * Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.

Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be ""Radiant"" or ""Dire"".

 

Example 1:


Input: senate = ""RD""
Output: ""Radiant""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.


Example 2:


Input: senate = ""RDD""
Output: ""Dire""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And the third senator comes from Dire and he can ban the first senator's right in round 1. 
And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.


 

Constraints:

 * n == senate.length
 * 1 <= n <= 104
 * senate[i] is either 'R' or 'D'.",Solutions (210),531,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/dota2-senate/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    senate: str = deserialize(""str"", read_line())
    ans = Solution().predictPartyVictory(senate)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def predictPartyVictory(self, senate: str) -> str:
        pass"
False,0,0,650,2-keys-keyboard,2 Keys Keyboard,2-keys-keyboard,False,114743,214907,650,False,2,"Can you solve this real interview question? 2 Keys Keyboard - There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:

 * Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).
 * Paste: You can paste the characters which are copied last time.

Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.

 

Example 1:


Input: n = 3
Output: 3
Explanation: Initially, we have one character 'A'.
In step 1, we use Copy All operation.
In step 2, we use Paste operation to get 'AA'.
In step 3, we use Paste operation to get 'AAA'.


Example 2:


Input: n = 1
Output: 0


 

Constraints:

 * 1 <= n <= 1000",Solutions (1.2K),3.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/2-keys-keyboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSteps(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minSteps(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSteps(self, n: int) -> int:
        res = 0
        d = 2
        while d * d <= n:
            while n % d == 0:
                res += d
                n //= d
            d += 1
        if n > 1:
            res += n
        return res

# Example usage:
# sol = Solution()
# print(sol.minSteps(3))  # Output: 3
# print(sol.minSteps(1))  # Output: 0"
False,0,0,657,judge-route-circle,Robot Return to Origin,robot-return-to-origin,False,365181,484761,657,False,1,"Can you solve this real interview question? Robot Return to Origin - There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).

Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.

Note: The way that the robot is ""facing"" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.

 

Example 1:


Input: moves = ""UD""
Output: true
Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.


Example 2:


Input: moves = ""LL""
Output: false
Explanation: The robot moves left twice. It ends up two ""moves"" to the left of the origin. We return false because it is not at the origin at the end of its moves.


 

Constraints:

 * 1 <= moves.length <= 2 * 104
 * moves only contains the characters 'U', 'D', 'L' and 'R'.",Solutions (2.1K),2.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/robot-return-to-origin/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def judgeCircle(self, moves: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    moves: str = deserialize(""str"", read_line())
    ans = Solution().judgeCircle(moves)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def judgeCircle(self, moves: str) -> bool:
        return moves.count('U') == moves.count('D') and moves.count('L') == moves.count('R')"
False,0,0,658,find-k-closest-elements,Find K Closest Elements,find-k-closest-elements,False,423016,903643,658,False,2,"Can you solve this real interview question? Find K Closest Elements - Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

 * |a - x| < |b - x|, or
 * |a - x| == |b - x| and a < b

 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]


Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]


 

Constraints:

 * 1 <= k <= arr.length
 * 1 <= arr.length <= 104
 * arr is sorted in ascending order.
 * -104 <= arr[i], x <= 104",Solutions (2.7K),6.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/find-k-closest-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    x: int = deserialize(""int"", read_line())
    ans = Solution().findClosestElements(arr, k, x)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        import bisect
        left = bisect.bisect_left(arr, x) - 1
        right = left + 1
        while right - left - 1 < k:
            if left == -1:
                right += 1
            elif right == len(arr) or abs(arr[left] - x) <= abs(arr[right] - x):
                left -= 1
            else:
                right += 1
        return arr[left + 1:right]"
False,0,0,659,split-array-into-consecutive-subsequences,Split Array into Consecutive Subsequences,split-array-into-consecutive-subsequences,False,122316,240721,659,False,2,"Can you solve this real interview question? Split Array into Consecutive Subsequences - You are given an integer array nums that is sorted in non-decreasing order.

Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:

 * Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).
 * All subsequences have a length of 3 or more.

Return true if you can split nums according to the above conditions, or false otherwise.

A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).

 

Example 1:


Input: nums = [1,2,3,3,4,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,5] --> 1, 2, 3
[1,2,3,3,4,5] --> 3, 4, 5


Example 2:


Input: nums = [1,2,3,3,4,4,5,5]
Output: true
Explanation: nums can be split into the following subsequences:
[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5
[1,2,3,3,4,4,5,5] --> 3, 4, 5


Example 3:


Input: nums = [1,2,3,4,4,5]
Output: false
Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.


 

Constraints:

 * 1 <= nums.length <= 104
 * -1000 <= nums[i] <= 1000
 * nums is sorted in non-decreasing order.",Solutions (861),4.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/split-array-into-consecutive-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPossible(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isPossible(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPossible(self, nums: List[int]) -> bool:
        prev = count = 0
        c1 = c2 = c3 = 0
        prev = float('-inf')
        prev_count = next_count = 0
        
        for i in nums:
            if i != prev:
                if c1 + c2 > 0 and c1 + c2 - prev_count > 0:
                    return False
                c1, c2, c3 = c1 - prev_count, c3, 0
                prev = i
                prev_count, next_count = next_count, 0
            count = c1 + c2
            if i != prev + 1:
                if c1 + c2 > 0:
                    return False
                c1 = c2 = 0
            c1, c2, c3 = max(0, count), c1, c2 + max(0, c3)
            prev = i
            prev_count, next_count = c1, c2 + c3
        
        return c1 + c2 == 0"
False,0,0,661,image-smoother,Image Smoother,image-smoother,False,71674,129413,661,False,1,"Can you solve this real interview question? Image Smoother - An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).

[https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg]

Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg]


Input: img = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[0,0,0],[0,0,0],[0,0,0]]
Explanation:
For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0


Example 2:

[https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg]


Input: img = [[100,200,100],[200,50,200],[100,200,100]]
Output: [[137,141,137],[141,138,141],[137,141,137]]
Explanation:
For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137
For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141
For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138


 

Constraints:

 * m == img.length
 * n == img[i].length
 * 1 <= m, n <= 200
 * 0 <= img[i][j] <= 255",Solutions (449),450,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/image-smoother/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    img: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().imageSmoother(img)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def imageSmoother(self, img: List[List[int]]) -> List[List[int]]:
        m, n = len(img), len(img[0])
        result = [[0] * n for _ in range(m)]
        
        for i in range(m):
            for j in range(n):
                total, count = 0, 0
                for x in range(max(0, i - 1), min(m, i + 2)):
                    for y in range(max(0, j - 1), min(n, j + 2)):
                        total += img[x][y]
                        count += 1
                result[i][j] = total // count
        
        return result"
False,0,0,664,strange-printer,Strange Printer,strange-printer,False,31584,67370,664,False,3,"Can you solve this real interview question? Strange Printer - There is a strange printer with the following two special properties:

 * The printer can only print a sequence of the same character each time.
 * At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.

Given a string s, return the minimum number of turns the printer needed to print it.

 

Example 1:


Input: s = ""aaabbb""
Output: 2
Explanation: Print ""aaa"" first and then print ""bbb"".


Example 2:


Input: s = ""aba""
Output: 2
Explanation: Print ""aaa"" first and then print ""b"" from the second place of the string, which will cover the existing character 'a'.


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of lowercase English letters.",Solutions (165),1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/strange-printer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def strangePrinter(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().strangePrinter(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def strangePrinter(self, s: str) -> int:
        n = len(s)
        dp = [[0 for _ in range(n)] for _ in range(n)]
        
        for l in range(n-1, -1, -1):
            dp[l][l] = 1
            for r in range(l+1, n):
                if s[l] == s[r]:
                    dp[l][r] = dp[l][r-1]
                else:
                    dp[l][r] = min([dp[l][k] + dp[k+1][r] for k in range(l, r)])
        
        return dp[0][n-1]"
False,0,0,665,non-decreasing-array,Non-decreasing Array,non-decreasing-array,False,238222,981635,665,False,2,"Can you solve this real interview question? Non-decreasing Array - Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).

 

Example 1:


Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.


Example 2:


Input: nums = [4,2,1]
Output: false
Explanation: You cannot get a non-decreasing array by modifying at most one element.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 104
 * -105 <= nums[i] <= 105",Solutions (1.8K),5.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/non-decreasing-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkPossibility(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().checkPossibility(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkPossibility(self, nums: List[int]) -> bool:
        modified = False
        for i in range(1, len(nums)):
            if nums[i] < nums[i - 1]:
                if modified:
                    return False
                if i < 2 or nums[i] >= nums[i - 2]:
                    nums[i - 1] = nums[i]
                else:
                    nums[i] = nums[i - 1]
                modified = True
        return True"
False,0,0,667,beautiful-arrangement-ii,Beautiful Arrangement II,beautiful-arrangement-ii,False,50297,84079,667,False,2,"Can you solve this real interview question? Beautiful Arrangement II - Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:

 * Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.

Return the list answer. If there multiple valid answers, return any of them.

 

Example 1:


Input: n = 3, k = 1
Output: [1,2,3]
Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1


Example 2:


Input: n = 3, k = 2
Output: [1,3,2]
Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.


 

Constraints:

 * 1 <= k < n <= 104",Solutions (392),730,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/beautiful-arrangement-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def constructArray(self, n: int, k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().constructArray(n, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def constructArray(self, n: int, k: int) -> List[int]:
        ans = [i for i in range(1, n-k)]
        for i in range(k+1):
            if i % 2 == 0:
                ans.append(n - k + i // 2)
            else:
                ans.append(n - i // 2)
        return ans"
False,0,0,668,kth-smallest-number-in-multiplication-table,Kth Smallest Number in Multiplication Table,kth-smallest-number-in-multiplication-table,False,55456,107871,668,False,3,"Can you solve this real interview question? Kth Smallest Number in Multiplication Table - Nearly everyone has used the Multiplication Table [https://en.wikipedia.org/wiki/Multiplication_table]. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).

Given three integers m, n, and k, return the kth smallest element in the m x n multiplication table.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/02/multtable1-grid.jpg]


Input: m = 3, n = 3, k = 5
Output: 3
Explanation: The 5th smallest number is 3.


Example 2:

[https://assets.leetcode.com/uploads/2021/05/02/multtable2-grid.jpg]


Input: m = 2, n = 3, k = 6
Output: 6
Explanation: The 6th smallest number is 6.


 

Constraints:

 * 1 <= m, n <= 3 * 104
 * 1 <= k <= m * n",Solutions (301),1.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKthNumber(self, m: int, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKthNumber(m, n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findKthNumber(self, m: int, n: int, k: int) -> int:
        left, right = 1, m * n
        
        while left < right:
            mid = left + (right - left) // 2
            count = 0
            for i in range(1, m + 1):
                count += min(mid // i, n)
            
            if count < k:
                left = mid + 1
            else:
                right = mid
        
        return left"
False,0,0,670,maximum-swap,Maximum Swap,maximum-swap,False,192636,402318,670,False,2,"Can you solve this real interview question? Maximum Swap - You are given an integer num. You can swap two digits at most once to get the maximum valued number.

Return the maximum valued number you can get.

 

Example 1:


Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.


Example 2:


Input: num = 9973
Output: 9973
Explanation: No swap.


 

Constraints:

 * 0 <= num <= 108",Solutions (1.4K),3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-swap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSwap(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().maximumSwap(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumSwap(self, num: int) -> int:
        num_str = list(str(num))
        
        last_occurrence = {int(val): i for i, val in enumerate(num_str)}
        
        for i, val in enumerate(num_str):
            for d in range(9, int(val), -1):
                if d in last_occurrence and last_occurrence[d] > i:
                    num_str[i], num_str[last_occurrence[d]] = num_str[last_occurrence[d]], num_str[i]
                    return int("""".join(num_str))
        
        return num"
False,0,0,672,bulb-switcher-ii,Bulb Switcher II,bulb-switcher-ii,False,19271,38005,672,False,2,"Can you solve this real interview question? Bulb Switcher II - There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:

 * Button 1: Flips the status of all the bulbs.
 * Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).
 * Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).
 * Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).

You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.

Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.

 

Example 1:


Input: n = 1, presses = 1
Output: 2
Explanation: Status can be:
- [off] by pressing button 1
- [on] by pressing button 2


Example 2:


Input: n = 2, presses = 1
Output: 3
Explanation: Status can be:
- [off, off] by pressing button 1
- [on, off] by pressing button 2
- [off, on] by pressing button 3


Example 3:


Input: n = 3, presses = 1
Output: 4
Explanation: Status can be:
- [off, off, off] by pressing button 1
- [off, on, off] by pressing button 2
- [on, off, on] by pressing button 3
- [off, on, on] by pressing button 4


 

Constraints:

 * 1 <= n <= 1000
 * 0 <= presses <= 1000",Solutions (112),86,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/bulb-switcher-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def flipLights(self, n: int, presses: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    presses: int = deserialize(""int"", read_line())
    ans = Solution().flipLights(n, presses)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def flipLights(self, n: int, presses: int) -> int:
        if n == 0:
            return 0
        if n == 1:
            return min(2, presses + 1)
        if n == 2:
            return min(3, 1 << min(2, presses))
        if presses == 1:
            return min(4, 1 << n if n < 3 else 8)
        if presses == 2:
            return min(7, 1 << min(3, n))
        return min(8, 1 << min(3, n))"
False,0,0,673,number-of-longest-increasing-subsequence,Number of Longest Increasing Subsequence,number-of-longest-increasing-subsequence,False,140911,329372,673,False,2,"Can you solve this real interview question? Number of Longest Increasing Subsequence - Given an integer array nums, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.

 

Example 1:


Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].


Example 2:


Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5.


 

Constraints:

 * 1 <= nums.length <= 2000
 * -106 <= nums[i] <= 106",Solutions (728),4.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-longest-increasing-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findNumberOfLIS(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findNumberOfLIS(self, nums: List[int]) -> int:
        n = len(nums)
        if n <= 1:
            return n
        
        lengths = [1] * n
        counts = [1] * n
        
        for i in range(n):
            for j in range(i):
                if nums[i] > nums[j]:
                    if lengths[j] + 1 > lengths[i]:
                        lengths[i] = lengths[j] + 1
                        counts[i] = counts[j]
                    elif lengths[j] + 1 == lengths[i]:
                        counts[i] += counts[j]
        
        max_length = max(lengths)
        res = 0
        for i in range(n):
            if lengths[i] == max_length:
                res += counts[i]
        
        return res"
False,0,0,674,longest-continuous-increasing-subsequence,Longest Continuous Increasing Subsequence,longest-continuous-increasing-subsequence,False,222623,451870,674,False,1,"Can you solve this real interview question? Longest Continuous Increasing Subsequence - Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

 

Example 1:


Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.


Example 2:


Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.


 

Constraints:

 * 1 <= nums.length <= 104
 * -109 <= nums[i] <= 109",Solutions (1.4K),2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-continuous-increasing-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLengthOfLCIS(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums:
            return 0
        max_len = 1
        curr_len = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                curr_len += 1
                max_len = max(max_len, curr_len)
            else:
                curr_len = 1
        return max_len"
False,0,0,675,cutoff-trees-for-golf-event,Cut Off Trees for Golf Event,cut-off-trees-for-golf-event,False,61694,180968,675,False,3,"Can you solve this real interview question? Cut Off Trees for Golf Event - You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:

 * 0 means the cell cannot be walked through.
 * 1 represents an empty cell that can be walked through.
 * A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.

In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).

Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.

Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg]


Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.


Example 2:

[https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg]


Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.


Example 3:


Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6
Explanation: You can follow the same path as Example 1 to cut off all the trees.
Note that you can cut off the first tree at (0, 0) before making any steps.


 

Constraints:

 * m == forest.length
 * n == forest[i].length
 * 1 <= m, n <= 50
 * 0 <= forest[i][j] <= 109
 * Heights of all trees are distinct.",Solutions (367),1.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/cut-off-trees-for-golf-event/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def cutOffTree(self, forest: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    forest: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().cutOffTree(forest)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def cutOffTree(self, forest: List[List[int]]) -> int:
        pass"
False,0,0,678,valid-parenthesis-string,Valid Parenthesis String,valid-parenthesis-string,False,202142,592965,678,False,2,"Can you solve this real interview question? Valid Parenthesis String - Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.

The following rules define a valid string:

 * Any left parenthesis '(' must have a corresponding right parenthesis ')'.
 * Any right parenthesis ')' must have a corresponding left parenthesis '('.
 * Left parenthesis '(' must go before the corresponding right parenthesis ')'.
 * '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string """".

 

Example 1:

Input: s = ""()""
Output: true


Example 2:

Input: s = ""(*)""
Output: true


Example 3:

Input: s = ""(*))""
Output: true


 

Constraints:

 * 1 <= s.length <= 100
 * s[i] is '(', ')' or '*'.",Solutions (1.2K),4.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-parenthesis-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkValidString(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkValidString(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkValidString(self, s: str) -> bool:
        stack = []
        stars = []
        
        for i, char in enumerate(s):
            if char == ""("":
                stack.append(i)
            elif char == ""*"":
                stars.append(i)
            else:
                if stack:
                    stack.pop()
                elif stars:
                    stars.pop()
                else:
                    return False
        
        while stack and stars:
            if stack[-1] < stars[-1]:
                stack.pop()
                stars.pop()
            else:
                break
        
        return len(stack) == 0"
False,0,0,679,24-game,24 Game,24-game,False,70603,143592,679,False,3,"Can you solve this real interview question? 24 Game - You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.

You are restricted with the following rules:

 * The division operator '/' represents real division, not integer division.
   * For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
 * Every operation done is between two numbers. In particular, we cannot use '-' as a unary operator.
   * For example, if cards = [1, 1, 1, 1], the expression ""-1 - 1 - 1 - 1"" is not allowed.
 * You cannot concatenate numbers together
   * For example, if cards = [1, 2, 1, 2], the expression ""12 + 12"" is not valid.

Return true if you can get such expression that evaluates to 24, and false otherwise.

 

Example 1:


Input: cards = [4,1,8,7]
Output: true
Explanation: (8-4) * (7-1) = 24


Example 2:


Input: cards = [1,2,1,2]
Output: false


 

Constraints:

 * cards.length == 4
 * 1 <= cards[i] <= 9",Solutions (357),1.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/24-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def judgePoint24(self, cards: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    cards: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().judgePoint24(cards)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def judgePoint24(self, cards: List[int]) -> bool:
        pass"
False,0,0,680,valid-palindrome-ii,Valid Palindrome II,valid-palindrome-ii,False,583951,1484409,680,False,1,"Can you solve this real interview question? Valid Palindrome II - Given a string s, return true if the s can be palindrome after deleting at most one character from it.

 

Example 1:


Input: s = ""aba""
Output: true


Example 2:


Input: s = ""abca""
Output: true
Explanation: You could delete the character 'c'.


Example 3:


Input: s = ""abc""
Output: false


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (2.8K),7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-palindrome-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validPalindrome(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().validPalindrome(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validPalindrome(self, s: str) -> bool:
        def is_palindrome_range(s, i, j):
            return all(s[k] == s[j - k + i] for k in range(i, j))
        
        for i in range(len(s) // 2):
            if s[i] != s[~i]:
                j = len(s) - 1 - i
                return is_palindrome_range(s, i + 1, j) or is_palindrome_range(s, i, j - 1)
        return True"
False,0,0,682,baseball-game,Baseball Game,baseball-game,False,241975,325940,682,False,1,"Can you solve this real interview question? Baseball Game - You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.

You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:

 * An integer x.
   * Record a new score of x.
 * '+'.
   * Record a new score that is the sum of the previous two scores.
 * 'D'.
   * Record a new score that is the double of the previous score.
 * 'C'.
   * Invalidate the previous score, removing it from the record.

Return the sum of all the scores on the record after applying all the operations.

The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.

 

Example 1:


Input: ops = [""5"",""2"",""C"",""D"",""+""]
Output: 30
Explanation:
""5"" - Add 5 to the record, record is now [5].
""2"" - Add 2 to the record, record is now [5, 2].
""C"" - Invalidate and remove the previous score, record is now [5].
""D"" - Add 2 * 5 = 10 to the record, record is now [5, 10].
""+"" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].
The total sum is 5 + 10 + 15 = 30.


Example 2:


Input: ops = [""5"",""-2"",""4"",""C"",""D"",""9"",""+"",""+""]
Output: 27
Explanation:
""5"" - Add 5 to the record, record is now [5].
""-2"" - Add -2 to the record, record is now [5, -2].
""4"" - Add 4 to the record, record is now [5, -2, 4].
""C"" - Invalidate and remove the previous score, record is now [5, -2].
""D"" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].
""9"" - Add 9 to the record, record is now [5, -2, -4, 9].
""+"" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].
""+"" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].
The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.


Example 3:


Input: ops = [""1"",""C""]
Output: 0
Explanation:
""1"" - Add 1 to the record, record is now [1].
""C"" - Invalidate and remove the previous score, record is now [].
Since the record is empty, the total sum is 0.


 

Constraints:

 * 1 <= operations.length <= 1000
 * operations[i] is ""C"", ""D"", ""+"", or a string representing an integer in the range [-3 * 104, 3 * 104].
 * For operation ""+"", there will always be at least two previous scores on the record.
 * For operations ""C"" and ""D"", there will always be at least one previous score on the record.",Solutions (2.6K),2.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/baseball-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calPoints(self, operations: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    operations: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().calPoints(operations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def calPoints(self, operations: List[str]) -> int:
        stack = []
        for op in operations:
            if op == 'C':
                stack.pop()
            elif op == 'D':
                stack.append(stack[-1] * 2)
            elif op == '+':
                stack.append(stack[-1] + stack[-2])
            else:
                stack.append(int(op))
        
        return sum(stack)"
False,0,0,684,redundant-connection,Redundant Connection,redundant-connection,False,265832,427353,684,False,2,"Can you solve this real interview question? Redundant Connection - In this problem, a tree is an undirected graph that is connected and has no cycles.

You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.

Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg]


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]


Example 2:

[https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg]


Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
Output: [1,4]


 

Constraints:

 * n == edges.length
 * 3 <= n <= 1000
 * edges[i].length == 2
 * 1 <= ai < bi <= edges.length
 * ai != bi
 * There are no repeated edges.
 * The given graph is connected.",Solutions (1.7K),5.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/redundant-connection/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findRedundantConnection(edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        def find(parent, i):
            if parent[i] == i:
                return i
            return find(parent, parent[i])

        parent = [0] * (len(edges) + 1)
        for i in range(1, len(parent)):
            parent[i] = i

        for edge in edges:
            node1 = find(parent, edge[0])
            node2 = find(parent, edge[1])

            if node1 == node2:
                return edge

            parent[node1] = node2

        return []"
False,0,0,685,redundant-connection-ii,Redundant Connection II,redundant-connection-ii,False,60255,176869,685,False,3,"Can you solve this real interview question? Redundant Connection II - In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.

The resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.

Return an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg]


Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]


Example 2:

[https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg]


Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
Output: [4,1]


 

Constraints:

 * n == edges.length
 * 3 <= n <= 1000
 * edges[i].length == 2
 * 1 <= ui, vi <= n
 * ui != vi",Solutions (396),2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/redundant-connection-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findRedundantDirectedConnection(edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findRedundantDirectedConnection(self, edges: List[List[int]]) -> List[int]:
        parent = [0] * (len(edges) + 1)
        def find(x):
            return x if parent[x] == 0 else find(parent[x])
        def union(x, y):
            rootX, rootY = find(x), find(y)
            if rootX == rootY:
                return [x, y]
            parent[rootX] = rootY
        candidates = []
        for x, y in edges:
            if parent[y] == 0:
                parent[y] = x
            else:
                candidates.append([x, y])
                candidates.append([parent[y], y])
                y = 0
        for x, y in candidates:
            if y == 0:
                return [x, y] if x < y else[y, x]"
False,0,0,686,repeated-string-match,Repeated String Match,repeated-string-match,False,137489,402328,686,False,2,"Can you solve this real interview question? Repeated String Match - Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b to be a substring of a after repeating it, return -1.

Notice: string ""abc"" repeated 0 times is """", repeated 1 time is ""abc"" and repeated 2 times is ""abcabc"".

 

Example 1:


Input: a = ""abcd"", b = ""cdabcdab""
Output: 3
Explanation: We return 3 because by repeating a three times ""abcdabcdabcd"", b is a substring of it.


Example 2:


Input: a = ""a"", b = ""aa""
Output: 2


 

Constraints:

 * 1 <= a.length, b.length <= 104
 * a and b consist of lowercase English letters.",Solutions (759),2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/repeated-string-match/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repeatedStringMatch(self, a: str, b: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: str = deserialize(""str"", read_line())
    b: str = deserialize(""str"", read_line())
    ans = Solution().repeatedStringMatch(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def repeatedStringMatch(self, a: str, b: str) -> int:
        def check(s):
            q = (len(b) - 1) // len(a) + 1
            if b in a * q:
                return q
            if b in a * (q + 1):
                return q + 1
            return -1

        return check(a)"
False,0,0,688,knight-probability-in-chessboard,Knight Probability in Chessboard,knight-probability-in-chessboard,False,93705,179858,688,False,2,"Can you solve this real interview question? Knight Probability in Chessboard - On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).

A chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.

[https://assets.leetcode.com/uploads/2018/10/12/knight.png]

Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.

The knight continues moving until it has made exactly k moves or has moved off the chessboard.

Return the probability that the knight remains on the board after it has stopped moving.

 

Example 1:


Input: n = 3, k = 2, row = 0, column = 0
Output: 0.06250
Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.
From each of those positions, there are also two moves that will keep the knight on the board.
The total probability the knight stays on the board is 0.0625.


Example 2:


Input: n = 1, k = 0, row = 0, column = 0
Output: 1.00000


 

Constraints:

 * 1 <= n <= 25
 * 0 <= k <= 100
 * 0 <= row, column <= n - 1",Solutions (793),2.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/knight-probability-in-chessboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    row: int = deserialize(""int"", read_line())
    column: int = deserialize(""int"", read_line())
    ans = Solution().knightProbability(n, k, row, column)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def knightProbability(self, n: int, k: int, row: int, column: int) -> float:
        dp = [[0 for _ in range(n)] for _ in range(n)]
        dp[row][column] = 1
        
        for _ in range(k):
            temp = [[0 for _ in range(n)] for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    for dx, dy in [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]:
                        x, y = i + dx, j + dy
                        if 0 <= x < n and 0 <= y < n:
                            temp[x][y] += dp[i][j] / 8
            dp = temp
        
        return sum(map(sum, dp))"
False,0,0,689,maximum-sum-of-3-non-overlapping-intervals,Maximum Sum of 3 Non-Overlapping Subarrays,maximum-sum-of-3-non-overlapping-subarrays,False,66908,136858,689,False,3,"Can you solve this real interview question? Maximum Sum of 3 Non-Overlapping Subarrays - Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

 

Example 1:


Input: nums = [1,2,1,2,6,7,5,1], k = 2
Output: [0,3,5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.


Example 2:


Input: nums = [1,2,1,2,1,2,1,2,1], k = 2
Output: [0,2,4]


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * 1 <= nums[i] < 216
 * 1 <= k <= floor(nums.length / 3)",Solutions (357),1.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxSumOfThreeSubarrays(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxSumOfThreeSubarrays(self, nums: List[int], k: int) -> List[int]:
        # Write your code here
        pass"
False,0,0,691,stickers-to-spell-word,Stickers to Spell Word,stickers-to-spell-word,False,37325,80623,691,False,3,"Can you solve this real interview question? Stickers to Spell Word - We are given n different types of stickers. Each sticker has a lowercase English word on it.

You would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.

Return the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.

Note: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.

 

Example 1:


Input: stickers = [""with"",""example"",""science""], target = ""thehat""
Output: 3
Explanation:
We can use 2 ""with"" stickers, and 1 ""example"" sticker.
After cutting and rearrange the letters of those stickers, we can form the target ""thehat"".
Also, this is the minimum number of stickers necessary to form the target string.


Example 2:


Input: stickers = [""notice"",""possible""], target = ""basicbasic""
Output: -1
Explanation:
We cannot form the target ""basicbasic"" from cutting letters from the given stickers.


 

Constraints:

 * n == stickers.length
 * 1 <= n <= 50
 * 1 <= stickers[i].length <= 10
 * 1 <= target.length <= 15
 * stickers[i] and target consist of lowercase English letters.",Solutions (204),951,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/stickers-to-spell-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minStickers(self, stickers: List[str], target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stickers: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().minStickers(stickers, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minStickers(self, stickers: List[str], target: str) -> int:
        pass"
False,0,0,692,top-k-frequent-words,Top K Frequent Words,top-k-frequent-words,False,534272,934851,692,False,2,"Can you solve this real interview question? Top K Frequent Words - Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.

 

Example 1:


Input: words = [""i"",""love"",""leetcode"",""i"",""love"",""coding""], k = 2
Output: [""i"",""love""]
Explanation: ""i"" and ""love"" are the two most frequent words.
Note that ""i"" comes before ""love"" due to a lower alphabetical order.


Example 2:


Input: words = [""the"",""day"",""is"",""sunny"",""the"",""the"",""the"",""sunny"",""is"",""is""], k = 4
Output: [""the"",""is"",""sunny"",""day""]
Explanation: ""the"", ""is"", ""sunny"" and ""day"" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.


 

Constraints:

 * 1 <= words.length <= 500
 * 1 <= words[i].length <= 10
 * words[i] consists of lowercase English letters.
 * k is in the range [1, The number of unique words[i]]

 

Follow-up: Could you solve it in O(n log(k)) time and O(n) extra space?",Solutions (4.1K),6.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/top-k-frequent-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().topKFrequent(words, k)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        import collections
        count = collections.Counter(words)
        return sorted(count.keys(), key=lambda x: (-count[x], x))[:k]"
False,0,0,693,binary-number-with-alternating-bits,Binary Number with Alternating Bits,binary-number-with-alternating-bits,False,111078,180396,693,False,1,"Can you solve this real interview question? Binary Number with Alternating Bits - Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.

 

Example 1:


Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101


Example 2:


Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.

Example 3:


Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.

 

Constraints:

 * 1 <= n <= 231 - 1",Solutions (1.4K),1.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-number-with-alternating-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hasAlternatingBits(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().hasAlternatingBits(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def hasAlternatingBits(self, n: int) -> bool:
        return bin(n).count('11') == 0 and bin(n).count('00') == 0"
False,0,0,695,max-area-of-island,Max Area of Island,max-area-of-island,False,691791,963796,695,False,2,"Can you solve this real interview question? Max Area of Island - You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg]


Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.


Example 2:


Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 50
 * grid[i][j] is either 0 or 1.",Solutions (4.6K),8.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/max-area-of-island/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxAreaOfIsland(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxAreaOfIsland(self, grid: List[List[int]]) -> int:
        def area(i, j):
            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j]:
                grid[i][j] = 0
                return 1 + sum(area(i + x, j + y) for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)])
            return 0
        
        return max(area(i, j) for i in range(len(grid)) for j in range(len(grid[0])) if grid[i][j])"
False,0,0,696,count-binary-substrings,Count Binary Substrings,count-binary-substrings,False,182429,278710,696,False,1,"Can you solve this real interview question? Count Binary Substrings - Given a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

 

Example 1:


Input: s = ""00110011""
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: ""0011"", ""01"", ""1100"", ""10"", ""0011"", and ""01"".
Notice that some of these substrings repeat and are counted the number of times they occur.
Also, ""00110011"" is not a valid substring because all the 0's (and 1's) are not grouped together.


Example 2:


Input: s = ""10101""
Output: 4
Explanation: There are 4 substrings: ""10"", ""01"", ""10"", ""01"" that have equal number of consecutive 1's and 0's.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (879),3.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/count-binary-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countBinarySubstrings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countBinarySubstrings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countBinarySubstrings(self, s: str) -> int:
        count = 0
        prev_count = 0
        curr_count = 1
        res = 0
        
        for i in range(1, len(s)):
            if s[i] == s[i - 1]:
                curr_count += 1
            else:
                prev_count = curr_count
                curr_count = 1
                
            if prev_count >= curr_count:
                res += 1
        
        return res"
False,0,0,697,degree-of-an-array,Degree of an Array,degree-of-an-array,False,177977,318186,697,False,1,"Can you solve this real interview question? Degree of an Array - Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

 

Example 1:


Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.


Example 2:


Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.


 

Constraints:

 * nums.length will be between 1 and 50,000.
 * nums[i] will be an integer between 0 and 49,999.",Solutions (1.3K),2.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/degree-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findShortestSubArray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        import collections
        num_count = collections.Counter(nums)
        degree = max(num_count.values())
        num_first = {}
        num_last = {}
        for i in range(len(nums)):
            if nums[i] not in num_first:
                num_first[nums[i]] = i
            num_last[nums[i]] = i
        res = float('inf')
        for num in num_count:
            if num_count[num] == degree:
                res = min(res, num_last[num] - num_first[num] + 1)
        return res"
False,0,0,698,partition-to-k-equal-sum-subsets,Partition to K Equal Sum Subsets,partition-to-k-equal-sum-subsets,False,232528,580800,698,False,2,"Can you solve this real interview question? Partition to K Equal Sum Subsets - Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.

 

Example 1:


Input: nums = [4,3,2,3,5,2,1], k = 4
Output: true
Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.


Example 2:


Input: nums = [1,2,3,4], k = 3
Output: false


 

Constraints:

 * 1 <= k <= nums.length <= 16
 * 1 <= nums[i] <= 104
 * The frequency of each element is in the range [1, 4].",Solutions (1.2K),6.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-to-k-equal-sum-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().canPartitionKSubsets(nums, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        target, rem = divmod(sum(nums), k)
        if rem != 0:
            return False
        dp = [False] * (1 << len(nums))
        dp[0] = True
        total = [0] * (1 << len(nums))
        
        for state in range(1 << len(nums)):
            if not dp[state]:
                continue
            for i in range(len(nums)):
                if state & (1 << i) == 0:
                    next_state = state | (1 << i)
                    if not dp[next_state] and (total[state] % target == 0) and (total[state] // target + nums[i] <= k):
                        dp[next_state] = True
                        total[next_state] = total[state] + nums[i]
        return dp[-1]"
False,0,0,699,falling-squares,Falling Squares,falling-squares,False,22745,51061,699,False,3,"Can you solve this real interview question? Falling Squares - There are several squares being dropped onto the X-axis of a 2D plane.

You are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the ith square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.

Each square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.

After each square is dropped, you must record the height of the current tallest stack of squares.

Return an integer array ans where ans[i] represents the height described above after dropping the ith square.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/28/fallingsq1-plane.jpg]


Input: positions = [[1,2],[2,3],[6,1]]
Output: [2,5,5]
Explanation:
After the first drop, the tallest stack is square 1 with a height of 2.
After the second drop, the tallest stack is squares 1 and 2 with a height of 5.
After the third drop, the tallest stack is still squares 1 and 2 with a height of 5.
Thus, we return an answer of [2, 5, 5].


Example 2:


Input: positions = [[100,100],[200,100]]
Output: [100,100]
Explanation:
After the first drop, the tallest stack is square 1 with a height of 100.
After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.
Thus, we return an answer of [100, 100].
Note that square 2 only brushes the right side of square 1, which does not count as landing on it.


 

Constraints:

 * 1 <= positions.length <= 1000
 * 1 <= lefti <= 108
 * 1 <= sideLengthi <= 106",Solutions (161),556,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/falling-squares/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fallingSquares(self, positions: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    positions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().fallingSquares(positions)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def fallingSquares(self, positions: List[List[int]]) -> List[int]:
        pass"
False,0,0,712,minimum-ascii-delete-sum-for-two-strings,Minimum ASCII Delete Sum for Two Strings,minimum-ascii-delete-sum-for-two-strings,False,75018,120082,712,False,2,"Can you solve this real interview question? Minimum ASCII Delete Sum for Two Strings - Given two strings s1 and s2, return the lowest ASCII sum of deleted characters to make two strings equal.

 

Example 1:


Input: s1 = ""sea"", s2 = ""eat""
Output: 231
Explanation: Deleting ""s"" from ""sea"" adds the ASCII value of ""s"" (115) to the sum.
Deleting ""t"" from ""eat"" adds 116 to the sum.
At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.


Example 2:


Input: s1 = ""delete"", s2 = ""leet""
Output: 403
Explanation: Deleting ""dee"" from ""delete"" to turn the string into ""let"",
adds 100[d] + 101[e] + 101[e] to the sum.
Deleting ""e"" from ""leet"" adds 101[e] to the sum.
At the end, both strings are equal to ""let"", and the answer is 100+101+101+101 = 403.
If instead we turned both strings into ""lee"" or ""eet"", we would get answers of 433 or 417, which are higher.


 

Constraints:

 * 1 <= s1.length, s2.length <= 1000
 * s1 and s2 consist of lowercase English letters.",Solutions (747),2.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().minimumDeleteSum(s1, s2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDeleteSum(self, s1: str, s2: str) -> int:
        m, n = len(s1), len(s2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])
        
        for j in range(1, n + 1):
            dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s1[i - 1] == s2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))
        
        return dp[m][n]"
False,0,0,713,subarray-product-less-than-k,Subarray Product Less Than K,subarray-product-less-than-k,False,221974,485713,713,False,2,"Can you solve this real interview question? Subarray Product Less Than K - Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.

 

Example 1:


Input: nums = [10,5,2,6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are:
[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]
Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.


Example 2:


Input: nums = [1,2,3], k = 0
Output: 0


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * 1 <= nums[i] <= 1000
 * 0 <= k <= 106",Solutions (1.1K),5.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/subarray-product-less-than-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numSubarrayProductLessThanK(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubarrayProductLessThanK(self, nums: List[int], k: int) -> int:
        if k <= 1:
            return 0
        
        count = 0
        left = 0
        prod = 1
        
        for right in range(len(nums)):
            prod *= nums[right]
            while prod >= k:
                prod /= nums[left]
                left += 1
            count += right - left + 1
        
        return count"
False,0,0,714,best-time-to-buy-and-sell-stock-with-transaction-fee,Best Time to Buy and Sell Stock with Transaction Fee,best-time-to-buy-and-sell-stock-with-transaction-fee,False,220863,339339,714,False,2,"Can you solve this real interview question? Best Time to Buy and Sell Stock with Transaction Fee - You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:


Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:


Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6


 

Constraints:

 * 1 <= prices.length <= 5 * 104
 * 1 <= prices[i] < 5 * 104
 * 0 <= fee < 5 * 104",Solutions (1.2K),5.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    fee: int = deserialize(""int"", read_line())
    ans = Solution().maxProfit(prices, fee)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, prices: List[int], fee: int) -> int:
        cash = 0
        hold = -prices[0]
        
        for i in range(1, len(prices)):
            cash = max(cash, hold + prices[i] - fee)
            hold = max(hold, cash - prices[i])
            
        return cash"
False,0,0,717,1-bit-and-2-bit-characters,1-bit and 2-bit Characters,1-bit-and-2-bit-characters,False,116127,253901,717,False,1,"Can you solve this real interview question? 1-bit and 2-bit Characters - We have two special characters:

 * The first character can be represented by one bit 0.
 * The second character can be represented by two bits (10 or 11).

Given a binary array bits that ends with 0, return true if the last character must be a one-bit character.

 

Example 1:


Input: bits = [1,0,0]
Output: true
Explanation: The only way to decode it is two-bit character and one-bit character.
So the last character is one-bit character.


Example 2:


Input: bits = [1,1,1,0]
Output: false
Explanation: The only way to decode it is two-bit character and two-bit character.
So the last character is not one-bit character.


 

Constraints:

 * 1 <= bits.length <= 1000
 * bits[i] is either 0 or 1.",Solutions (956),778,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/1-bit-and-2-bit-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isOneBitCharacter(self, bits: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    bits: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isOneBitCharacter(bits)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isOneBitCharacter(self, bits: List[int]) -> bool:
        ones_count = 0
        i = len(bits) - 2

        while i >= 0 and bits[i] == 1:
            ones_count += 1
            i -= 1

        return ones_count % 2 == 0"
False,0,0,718,maximum-length-of-repeated-subarray,Maximum Length of Repeated Subarray,maximum-length-of-repeated-subarray,False,259468,505999,718,False,2,"Can you solve this real interview question? Maximum Length of Repeated Subarray - Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.

 

Example 1:


Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]
Output: 3
Explanation: The repeated subarray with maximum length is [3,2,1].


Example 2:


Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]
Output: 5
Explanation: The repeated subarray with maximum length is [0,0,0,0,0].


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 1000
 * 0 <= nums1[i], nums2[i] <= 100",Solutions (1.6K),6.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-length-of-repeated-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLength(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLength(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLength(self, nums1: List[int], nums2: List[int]) -> int:
        dp = [[0] * (len(nums2) + 1) for _ in range(len(nums1) + 1)]
        
        max_len = 0
        for i in range(len(nums1) - 1, -1, -1):
            for j in range(len(nums2) - 1, -1, -1):
                if nums1[i] == nums2[j]:
                    dp[i][j] = dp[i + 1][j + 1] + 1
                    max_len = max(max_len, dp[i][j])
        
        return max_len"
False,0,0,719,find-k-th-smallest-pair-distance,Find K-th Smallest Pair Distance,find-k-th-smallest-pair-distance,False,74292,202624,719,False,3,"Can you solve this real interview question? Find K-th Smallest Pair Distance - The distance of a pair of integers a and b is defined as the absolute difference between a and b.

Given an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.

 

Example 1:


Input: nums = [1,3,1], k = 1
Output: 0
Explanation: Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.


Example 2:


Input: nums = [1,1,1], k = 2
Output: 0


Example 3:


Input: nums = [1,6,1], k = 3
Output: 5


 

Constraints:

 * n == nums.length
 * 2 <= n <= 104
 * 0 <= nums[i] <= 106
 * 1 <= k <= n * (n - 1) / 2",Solutions (280),2.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/find-k-th-smallest-pair-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().smallestDistancePair(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestDistancePair(self, nums: List[int], k: int) -> int:
        nums.sort()
        low, high = 0, nums[-1] - nums[0]
        
        while low < high:
            mid = (low + high) // 2
            count, left = 0, 0
            
            for right in range(len(nums)):
                while nums[right] - nums[left] > mid:
                    left += 1
                count += right - left
            
            if count >= k:
                high = mid
            else:
                low = mid + 1
        
        return low"
False,0,0,720,longest-word-in-dictionary,Longest Word in Dictionary,longest-word-in-dictionary,False,134661,259190,720,False,2,"Can you solve this real interview question? Longest Word in Dictionary - Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.

Note that the word should be built from left to right with each additional character being added to the end of a previous word. 

 

Example 1:


Input: words = [""w"",""wo"",""wor"",""worl"",""world""]
Output: ""world""
Explanation: The word ""world"" can be built one character at a time by ""w"", ""wo"", ""wor"", and ""worl"".


Example 2:


Input: words = [""a"",""banana"",""app"",""appl"",""ap"",""apply"",""apple""]
Output: ""apple""
Explanation: Both ""apply"" and ""apple"" can be built from other words in the dictionary. However, ""apple"" is lexicographically smaller than ""apply"".


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 30
 * words[i] consists of lowercase English letters.",Solutions (1K),1.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-word-in-dictionary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestWord(self, words: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().longestWord(words)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestWord(self, words: List[str]) -> str: 
        words.sort()
        words_set, res = set(['']), ''
        
        for word in words:
            if word[:-1] in words_set:
                words_set.add(word)
                if len(word) > len(res):
                    res = word
        
        return res"
False,0,0,721,accounts-merge,Accounts Merge,accounts-merge,False,303365,538526,721,False,2,"Can you solve this real interview question? Accounts Merge - Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.

 

Example 1:


Input: accounts = [[""John"",""johnsmith@mail.com"",""john_newyork@mail.com""],[""John"",""johnsmith@mail.com"",""john00@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Output: [[""John"",""john00@mail.com"",""john_newyork@mail.com"",""johnsmith@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Explanation:
The first and second John's are the same person as they have the common email ""johnsmith@mail.com"".
The third John and Mary are different people as none of their email addresses are used by other accounts.
We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.


Example 2:


Input: accounts = [[""Gabe"",""Gabe0@m.co"",""Gabe3@m.co"",""Gabe1@m.co""],[""Kevin"",""Kevin3@m.co"",""Kevin5@m.co"",""Kevin0@m.co""],[""Ethan"",""Ethan5@m.co"",""Ethan4@m.co"",""Ethan0@m.co""],[""Hanzo"",""Hanzo3@m.co"",""Hanzo1@m.co"",""Hanzo0@m.co""],[""Fern"",""Fern5@m.co"",""Fern1@m.co"",""Fern0@m.co""]]
Output: [[""Ethan"",""Ethan0@m.co"",""Ethan4@m.co"",""Ethan5@m.co""],[""Gabe"",""Gabe0@m.co"",""Gabe1@m.co"",""Gabe3@m.co""],[""Hanzo"",""Hanzo0@m.co"",""Hanzo1@m.co"",""Hanzo3@m.co""],[""Kevin"",""Kevin0@m.co"",""Kevin3@m.co"",""Kevin5@m.co""],[""Fern"",""Fern0@m.co"",""Fern1@m.co"",""Fern5@m.co""]]


 

Constraints:

 * 1 <= accounts.length <= 1000
 * 2 <= accounts[i].length <= 10
 * 1 <= accounts[i][j].length <= 30
 * accounts[i][0] consists of English letters.
 * accounts[i][j] (for j > 0) is a valid email.",Solutions (1.2K),5.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/accounts-merge/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    accounts: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().accountsMerge(accounts)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        def find(x):
            if parents[x] != x:
                parents[x] = find(parents[x])
            return parents[x]

        def union(x, y):
            parents[find(x)] = find(y)

        parents = {}
        emails_to_name = {}
        for account in accounts:
            name = account[0]
            for email in account[1:]:
                if email not in parents:
                    parents[email] = email
                    emails_to_name[email] = name
                union(email, account[1])

        merged_accounts = defaultdict(list)
        for email in parents:
            merged_accounts[find(email)].append(email)

        return [[emails_to_name[root]] + sorted(emails) for root, emails in merged_accounts.items()]"
False,0,0,722,remove-comments,Remove Comments,remove-comments,False,64039,167578,722,False,2,"Can you solve this real interview question? Remove Comments - Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the ith line of the source code. This represents the result of splitting the original source code string by the newline character '\n'.

In C++, there are two types of comments, line comments, and block comments.

 * The string ""//"" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.
 * The string ""/*"" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of ""*/"" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string ""/*/"" does not yet end the block comment, as the ending would be overlapping the beginning.

The first effective comment takes precedence over others.

 * For example, if the string ""//"" occurs in a block comment, it is ignored.
 * Similarly, if the string ""/*"" occurs in a line or block comment, it is also ignored.

If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.

There will be no control characters, single quote, or double quote characters.

 * For example, source = ""string s = ""/* Not a comment. */"";"" will not be a test case.

Also, nothing else such as defines or macros will interfere with the comments.

It is guaranteed that every open block comment will eventually be closed, so ""/*"" outside of a line or block comment always starts a new comment.

Finally, implicit newline characters can be deleted by block comments. Please see the examples below for details.

After removing the comments from the source code, return the source code in the same format.

 

Example 1:


Input: source = [""/*Test program */"", ""int main()"", ""{ "", ""  // variable declaration "", ""int a, b, c;"", ""/* This is a test"", ""   multiline  "", ""   comment for "", ""   testing */"", ""a = b + c;"", ""}""]
Output: [""int main()"",""{ "",""  "",""int a, b, c;"",""a = b + c;"",""}""]
Explanation: The line by line code is visualized as below:
/*Test program */
int main()
{ 
  // variable declaration 
int a, b, c;
/* This is a test
   multiline  
   comment for 
   testing */
a = b + c;
}
The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.
The line by line output code is visualized as below:
int main()
{ 
  
int a, b, c;
a = b + c;
}


Example 2:


Input: source = [""a/*comment"", ""line"", ""more_comment*/b""]
Output: [""ab""]
Explanation: The original source string is ""a/*comment\nline\nmore_comment*/b"", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string ""ab"", which when delimited by newline characters becomes [""ab""].


 

Constraints:

 * 1 <= source.length <= 100
 * 0 <= source[i].length <= 80
 * source[i] consists of printable ASCII characters.
 * Every open block comment is eventually closed.
 * There are no single-quote or double-quote in the input.",Solutions (384),653,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-comments/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeComments(self, source: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    source: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().removeComments(source)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def removeComments(self, source: List[str]) -> List[str]:
        result = []
        block_comment = False
        new_source = """"
        
        for line in source:
            i = 0
            while i < len(line):
                if not block_comment:
                    if i + 1 < len(line) and line[i:i + 2] == ""//"":
                        break
                    elif i + 1 < len(line) and line[i:i + 2] == ""/*"":
                        block_comment = True
                        i += 1
                    else:
                        new_source += line[i]
                else:
                    if i + 1 < len(line) and line[i:i + 2] == ""*/"":
                        block_comment = False
                        i += 1
                i += 1
            
            if not block_comment and new_source:
                result.append(new_source)
                new_source = """"
        
        return result"
False,0,0,724,find-pivot-index,Find Pivot Index,find-pivot-index,False,781758,1432386,724,False,1,"Can you solve this real interview question? Find Pivot Index - Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 

Example 1:


Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11


Example 2:


Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.

Example 3:


Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0


 

Constraints:

 * 1 <= nums.length <= 104
 * -1000 <= nums[i] <= 1000

 

Note: This question is the same as 1991: https://leetcode.com/problems/find-the-middle-index-in-array/ [https://leetcode.com/problems/find-the-middle-index-in-array/]",Solutions (4.3K),6.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/find-pivot-index/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().pivotIndex(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def pivotIndex(self, nums: List[int]) -> int:
        total_sum = sum(nums)
        left_sum = 0
        
        for i in range(len(nums)):
            if left_sum == total_sum - left_sum - nums[i]:
                return i
            left_sum += nums[i]
        
        return -1"
False,0,0,726,number-of-atoms,Number of Atoms,number-of-atoms,False,52565,100799,726,False,3,"Can you solve this real interview question? Number of Atoms - Given a string formula representing a chemical formula, return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.

 * For example, ""H2O"" and ""H2O2"" are possible, but ""H1O2"" is impossible.

Two formulas are concatenated together to produce another formula.

 * For example, ""H2O2He3Mg4"" is also a formula.

A formula placed in parentheses, and a count (optionally added) is also a formula.

 * For example, ""(H2O2)"" and ""(H2O2)3"" are formulas.

Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

The test cases are generated so that all the values in the output fit in a 32-bit integer.

 

Example 1:


Input: formula = ""H2O""
Output: ""H2O""
Explanation: The count of elements are {'H': 2, 'O': 1}.


Example 2:


Input: formula = ""Mg(OH)2""
Output: ""H2MgO2""
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.


Example 3:


Input: formula = ""K4(ON(SO3)2)2""
Output: ""K4N2O14S4""
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.


 

Constraints:

 * 1 <= formula.length <= 1000
 * formula consists of English letters, digits, '(', and ')'.
 * formula is always valid.",Solutions (494),1.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-atoms/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countOfAtoms(self, formula: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    formula: str = deserialize(""str"", read_line())
    ans = Solution().countOfAtoms(formula)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def countOfAtoms(self, formula: str) -> str:
        # Start your implementation here."
False,0,0,728,self-dividing-numbers,Self Dividing Numbers,self-dividing-numbers,False,201996,259421,728,False,1,"Can you solve this real interview question? Self Dividing Numbers - A self-dividing number is a number that is divisible by every digit it contains.

 * For example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

A self-dividing number is not allowed to contain the digit zero.

Given two integers left and right, return a list of all the self-dividing numbers in the range [left, right].

 

Example 1:

Input: left = 1, right = 22
Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]


Example 2:

Input: left = 47, right = 85
Output: [48,55,66,77]


 

Constraints:

 * 1 <= left <= right <= 104",Solutions (2K),1.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/self-dividing-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().selfDividingNumbers(left, right)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def selfDividingNumbers(self, left: int, right: int) -> List[int]:
        res = []
        for num in range(left, right+1):
            if '0' not in str(num) and all(num % int(digit) == 0 for digit in str(num)):
                res.append(num)
        return res"
False,0,0,730,count-different-palindromic-subsequences,Count Different Palindromic Subsequences,count-different-palindromic-subsequences,False,32395,72652,730,False,3,"Can you solve this real interview question? Count Different Palindromic Subsequences - Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is obtained by deleting zero or more characters from the string.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.

 

Example 1:


Input: s = ""bccb""
Output: 6
Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.


Example 2:


Input: s = ""abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba""
Output: 104860361
Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either 'a', 'b', 'c', or 'd'.",Solutions (174),1.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/count-different-palindromic-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPalindromicSubsequences(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countPalindromicSubsequences(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPalindromicSubsequences(self, s: str) -> int:
        pass"
False,0,0,733,flood-fill,Flood Fill,flood-fill,False,687486,1111361,733,False,1,"Can you solve this real interview question? Flood Fill - An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

Return the modified image after performing the flood fill.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/01/flood1-grid.jpg]


Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.


Example 2:


Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
Output: [[0,0,0],[0,0,0]]
Explanation: The starting pixel is already colored 0, so no changes are made to the image.


 

Constraints:

 * m == image.length
 * n == image[i].length
 * 1 <= m, n <= 50
 * 0 <= image[i][j], color < 216
 * 0 <= sr < m
 * 0 <= sc < n",Solutions (4K),6.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/flood-fill/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    image: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    sr: int = deserialize(""int"", read_line())
    sc: int = deserialize(""int"", read_line())
    color: int = deserialize(""int"", read_line())
    ans = Solution().floodFill(image, sr, sc, color)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        def dfs(image, r, c, color, newColor):
            if r < 0 or c < 0 or r >= len(image) or c >= len(image[0]) or image[r][c] != color or image[r][c] == newColor:
                return
            image[r][c] = newColor
            dfs(image, r+1, c, color, newColor)
            dfs(image, r-1, c, color, newColor)
            dfs(image, r, c+1, color, newColor)
            dfs(image, r, c-1, color, newColor)

        newColor = color
        color = image[sr][sc]

        if color == newColor:
            return image

        dfs(image, sr, sc, color, newColor)
        return image"
False,0,0,735,asteroid-collision,Asteroid Collision,asteroid-collision,False,262244,590574,735,False,2,"Can you solve this real interview question? Asteroid Collision - We are given an array asteroids of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.

 

Example 1:


Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.


Example 2:


Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.


Example 3:


Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.


 

Constraints:

 * 2 <= asteroids.length <= 104
 * -1000 <= asteroids[i] <= 1000
 * asteroids[i] != 0",Solutions (1.8K),4.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/asteroid-collision/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    asteroids: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().asteroidCollision(asteroids)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def asteroidCollision(self, asteroids: List[int]) -> List[int]:
        stack = []
        for asteroid in asteroids:
            if not stack or asteroid > 0:
                stack.append(asteroid)
            else:
                while stack and stack[-1] > 0:
                    if stack[-1] < abs(asteroid):
                        stack.pop()
                        continue
                    elif stack[-1] == abs(asteroid):
                        stack.pop()
                    break
                if not stack or stack[-1] < 0:
                    stack.append(asteroid)
        return stack"
False,0,0,736,parse-lisp-expression,Parse Lisp Expression,parse-lisp-expression,False,20169,39093,736,False,3,"Can you solve this real interview question? Parse Lisp Expression - You are given a string expression representing a Lisp-like expression to return the integer value of.

The syntax for these expressions is given as follows.

 * An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.
 * (An integer could be positive or negative.)
 * A let expression takes the form ""(let v1 e1 v2 e2 ... vn en expr)"", where let is always the string ""let"", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.
 * An add expression takes the form ""(add e1 e2)"" where add is always the string ""add"", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.
 * A mult expression takes the form ""(mult e1 e2)"" where mult is always the string ""mult"", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.
 * For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names ""add"", ""let"", and ""mult"" are protected and will never be used as variable names.
 * Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.

 

Example 1:


Input: expression = ""(let x 2 (mult x (let x 3 y 4 (add x y))))""
Output: 14
Explanation: In the expression (add x y), when checking for the value of the variable x,
we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.
Since x = 3 is found first, the value of x is 3.


Example 2:


Input: expression = ""(let x 3 x 2 x)""
Output: 2
Explanation: Assignment in let statements is processed sequentially.


Example 3:


Input: expression = ""(let x 1 y 2 x (add x y) (add x y))""
Output: 5
Explanation: The first (add x y) evaluates as 3, and is assigned to x.
The second (add x y) evaluates as 3+2 = 5.


 

Constraints:

 * 1 <= expression.length <= 2000
 * There are no leading or trailing spaces in expression.
 * All tokens are separated by a single space in expression.
 * The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.
 * The expression is guaranteed to be legal and evaluate to an integer.",Solutions (183),434,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/parse-lisp-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def evaluate(self, expression: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().evaluate(expression)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def evaluate(self, expression: str) -> int:
        import re
        def eval(tokens, scope):
            if tokens[0] != 'let':
                if tokens[0] == 'add':
                    return eval(tokens[1], scope) + eval(tokens[2], scope)
                elif tokens[0] == 'mult':
                    return eval(tokens[1], scope) * eval(tokens[2], scope)
                else:
                    return int(tokens[0])
            else:
                new_scope = scope.copy()
                for i in range(1, len(tokens) - 1, 2):
                    new_scope[tokens[i]] = eval(tokens[i+1], new_scope)
                return eval(tokens[-1], new_scope)
        
        tokens = re.findall(r'\(|\)|[a-zA-Z0-9]+', expression)
        return eval(tokens[1:-1], {})
      "
False,0,0,738,monotone-increasing-digits,Monotone Increasing Digits,monotone-increasing-digits,False,44443,94101,738,False,2,"Can you solve this real interview question? Monotone Increasing Digits - An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.

Given an integer n, return the largest number that is less than or equal to n with monotone increasing digits.

 

Example 1:


Input: n = 10
Output: 9


Example 2:


Input: n = 1234
Output: 1234


Example 3:


Input: n = 332
Output: 299


 

Constraints:

 * 0 <= n <= 109",Solutions (474),1.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/monotone-increasing-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().monotoneIncreasingDigits(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def monotoneIncreasingDigits(self, n: int) -> int:
        num_str = list(str(n))
        length = len(num_str)
        
        for i in range(length - 1, 0, -1):
            if num_str[i] < num_str[i - 1]:
                num_str[i - 1] = str(int(num_str[i - 1]) - 1)
                for j in range(i, length):
                    num_str[j] = '9'
        
        return int("""".join(num_str))"
False,0,0,739,daily-temperatures,Daily Temperatures,daily-temperatures,False,589699,889490,739,False,2,"Can you solve this real interview question? Daily Temperatures - Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.

 

Example 1:

Input: temperatures = [73,74,75,71,69,72,76,73]
Output: [1,1,4,2,1,1,0,0]


Example 2:

Input: temperatures = [30,40,50,60]
Output: [1,1,1,0]


Example 3:

Input: temperatures = [30,60,90]
Output: [1,1,0]


 

Constraints:

 * 1 <= temperatures.length <= 105
 * 30 <= temperatures[i] <= 100",Solutions (3.4K),10.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/daily-temperatures/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    temperatures: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().dailyTemperatures(temperatures)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def dailyTemperatures(self, temperatures: List[int]) -> List[int]:
        stack = []
        ans = [0] * len(temperatures)
        
        for i in range(len(temperatures)):
            while stack and temperatures[i] > temperatures[stack[-1]]:
                idx = stack.pop()
                ans[idx] = i - idx
            stack.append(i)
        
        return ans"
False,0,0,740,delete-and-earn,Delete and Earn,delete-and-earn,False,259993,455392,740,False,2,"Can you solve this real interview question? Delete and Earn - You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

 * Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.

Return the maximum number of points you can earn by applying the above operation some number of times.

 

Example 1:


Input: nums = [3,4,2]
Output: 6
Explanation: You can perform the following operations:
- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].
- Delete 2 to earn 2 points. nums = [].
You earn a total of 6 points.


Example 2:


Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: You can perform the following operations:
- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].
- Delete a 3 again to earn 3 points. nums = [3].
- Delete a 3 once more to earn 3 points. nums = [].
You earn a total of 9 points.

 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * 1 <= nums[i] <= 104",Solutions (1.7K),6.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-and-earn/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().deleteAndEarn(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        dp = [0] * (max(nums) + 1)
        for num in nums:
            dp[num] += num
        prev, curr = 0, 0
        for points in dp:
            prev, curr = curr, max(curr, prev + points)
        return curr"
False,0,0,741,cherry-pickup,Cherry Pickup,cherry-pickup,False,64220,177183,741,False,3,"Can you solve this real interview question? Cherry Pickup - You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.

 * 0 means the cell is empty, so you can pass through,
 * 1 means the cell contains a cherry that you can pick up and pass through, or
 * -1 means the cell contains a thorn that blocks your way.

Return the maximum number of cherries you can collect by following the rules below:

 * Starting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
 * After reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
 * When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
 * If there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/14/grid.jpg]


Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]
Output: 5
Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).
4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].
Then, the player went left, up, up, left to return home, picking up one more cherry.
The total number of cherries picked up is 5, and this is the maximum possible.


Example 2:


Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
Output: 0


 

Constraints:

 * n == grid.length
 * n == grid[i].length
 * 1 <= n <= 50
 * grid[i][j] is -1, 0, or 1.
 * grid[0][0] != -1
 * grid[n - 1][n - 1] != -1",Solutions (393),3.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/cherry-pickup/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().cherryPickup(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,742,to-lower-case,To Lower Case,to-lower-case,False,410947,499137,709,False,1,"Can you solve this real interview question? To Lower Case - Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.

 

Example 1:


Input: s = ""Hello""
Output: ""hello""


Example 2:


Input: s = ""here""
Output: ""here""


Example 3:


Input: s = ""LOVELY""
Output: ""lovely""


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of printable ASCII characters.",Solutions (3.4K),1.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/to-lower-case/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def toLowerCase(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().toLowerCase(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def toLowerCase(self, s: str) -> str:
        return s.lower()"
False,0,0,744,network-delay-time,Network Delay Time,network-delay-time,False,365699,705677,743,False,2,"Can you solve this real interview question? Network Delay Time - You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.

We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png]


Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2


Example 2:


Input: times = [[1,2,1]], n = 2, k = 1
Output: 1


Example 3:


Input: times = [[1,2,1]], n = 2, k = 2
Output: -1


 

Constraints:

 * 1 <= k <= n <= 100
 * 1 <= times.length <= 6000
 * times[i].length == 3
 * 1 <= ui, vi <= n
 * ui != vi
 * 0 <= wi <= 100
 * All the pairs (ui, vi) are unique. (i.e., no multiple edges.)",Solutions (2K),6.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/network-delay-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    times: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().networkDelayTime(times, n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def networkDelayTime(self, times: List[List[int]], n: int, k: int) -> int:
        pass"
False,0,0,745,find-smallest-letter-greater-than-target,Find Smallest Letter Greater Than Target,find-smallest-letter-greater-than-target,False,284090,621640,744,False,1,"Can you solve this real interview question? Find Smallest Letter Greater Than Target - You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

 

Example 1:


Input: letters = [""c"",""f"",""j""], target = ""a""
Output: ""c""
Explanation: The smallest character that is lexicographically greater than 'a' in letters is 'c'.


Example 2:


Input: letters = [""c"",""f"",""j""], target = ""c""
Output: ""f""
Explanation: The smallest character that is lexicographically greater than 'c' in letters is 'f'.


Example 3:


Input: letters = [""x"",""x"",""y"",""y""], target = ""z""
Output: ""x""
Explanation: There are no characters in letters that is lexicographically greater than 'z' so we return letters[0].


 

Constraints:

 * 2 <= letters.length <= 104
 * letters[i] is a lowercase English letter.
 * letters is sorted in non-decreasing order.
 * letters contains at least two different characters.
 * target is a lowercase English letter.",Solutions (2.5K),2.7K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/find-smallest-letter-greater-than-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    letters: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().nextGreatestLetter(letters, target)
    print(""\noutput:"", serialize(ans, ""character""))
","class Solution:
    def nextGreatestLetter(self, letters: List[str], target: str) -> str:
        for letter in letters:
            if letter > target:
                return letter
        return letters[0]"
False,0,0,747,min-cost-climbing-stairs,Min Cost Climbing Stairs,min-cost-climbing-stairs,False,778323,1232746,746,False,1,"Can you solve this real interview question? Min Cost Climbing Stairs - You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

 

Example 1:


Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.


Example 2:


Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.


 

Constraints:

 * 2 <= cost.length <= 1000
 * 0 <= cost[i] <= 999",Solutions (4.2K),9.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/min-cost-climbing-stairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cost: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCostClimbingStairs(cost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        n = len(cost)
        dp = [0] * (n + 1)
        
        for i in range(2, n + 1):
            dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])
            
        return dp[n]"
False,0,0,748,largest-number-at-least-twice-of-others,Largest Number At Least Twice of Others,largest-number-at-least-twice-of-others,False,198555,421802,747,False,1,"Can you solve this real interview question? Largest Number At Least Twice of Others - You are given an integer array nums where the largest integer is unique.

Determine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.

 

Example 1:


Input: nums = [3,6,1,0]
Output: 1
Explanation: 6 is the largest integer.
For every other number in the array x, 6 is at least twice as big as x.
The index of value 6 is 1, so we return 1.


Example 2:


Input: nums = [1,2,3,4]
Output: -1
Explanation: 4 is less than twice the value of 3, so we return -1.


 

Constraints:

 * 2 <= nums.length <= 50
 * 0 <= nums[i] <= 100
 * The largest element in nums is unique.",Solutions (1.9K),981,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-number-at-least-twice-of-others/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dominantIndex(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().dominantIndex(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def dominantIndex(self, nums: List[int]) -> int:
        max_num = max(nums)
        if all(max_num >= num * 2 for num in nums if num != max_num):
            return nums.index(max_num)
        else:
            return -1"
False,0,0,749,shortest-completing-word,Shortest Completing Word,shortest-completing-word,False,60115,101476,748,False,1,"Can you solve this real interview question? Shortest Completing Word - Given a string licensePlate and an array of strings words, find the shortest completing word in words.

A completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.

For example, if licensePlate = ""aBc 12c"", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are ""abccdef"", ""caaacab"", and ""cbca"".

Return the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.

 

Example 1:


Input: licensePlate = ""1s3 PSt"", words = [""step"",""steps"",""stripe"",""stepple""]
Output: ""steps""
Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.
""step"" contains 't' and 'p', but only contains 1 's'.
""steps"" contains 't', 'p', and both 's' characters.
""stripe"" is missing an 's'.
""stepple"" is missing an 's'.
Since ""steps"" is the only word containing all the letters, that is the answer.


Example 2:


Input: licensePlate = ""1s3 456"", words = [""looks"",""pest"",""stew"",""show""]
Output: ""pest""
Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these ""pest"", ""stew"", and ""show"" are shortest. The answer is ""pest"" because it is the word that appears earliest of the 3.


 

Constraints:

 * 1 <= licensePlate.length <= 7
 * licensePlate contains digits, letters (uppercase or lowercase), or space ' '.
 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 15
 * words[i] consists of lower case English letters.",Solutions (710),434,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-completing-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    licensePlate: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().shortestCompletingWord(licensePlate, words)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shortestCompletingWord(self, licensePlate: str, words: List[str]) -> str:
        import collections
        import re
        
        def count_chars(word):
            count = collections.Counter(word)
            for char in list(count):
                if not char.isalpha():
                    del count[char]
            return count
        
        licensePlate = re.sub(""[^a-zA-Z]"", """", licensePlate).lower()
        lp_count = count_chars(licensePlate)
        
        min_len = float('inf')
        res = """"
        
        for word in words:
            if len(word) < min_len and all(word.count(char) >= lp_count[char] for char in lp_count):
                res = word
                min_len = len(word)
                
        return res"
False,0,0,750,contain-virus,Contain Virus,contain-virus,False,10255,20104,749,False,3,"Can you solve this real interview question? Contain Virus - A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.

Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/01/virus11-grid.jpg]


Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
Output: 10
Explanation: There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:
[https://assets.leetcode.com/uploads/2021/06/01/virus12edited-grid.jpg]
On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.
[https://assets.leetcode.com/uploads/2021/06/01/virus13edited-grid.jpg]


Example 2:

[https://assets.leetcode.com/uploads/2021/06/01/virus2-grid.jpg]


Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.


Example 3:


Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.


 

Constraints:

 * m == isInfected.length
 * n == isInfected[i].length
 * 1 <= m, n <= 50
 * isInfected[i][j] is either 0 or 1.
 * There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.",Solutions (107),334,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/contain-virus/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containVirus(self, isInfected: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    isInfected: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().containVirus(isInfected)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def containVirus(self, isInfected: List[List[int]]) -> int:
        # Add your code here
        pass"
False,0,0,753,open-the-lock,Open the Lock,open-the-lock,False,198182,356301,752,False,2,"Can you solve this real interview question? Open the Lock - You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.

The lock initially starts at '0000', a string representing the state of the 4 wheels.

You are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.

 

Example 1:


Input: deadends = [""0201"",""0101"",""0102"",""1212"",""2002""], target = ""0202""
Output: 6
Explanation: 
A sequence of valid moves would be ""0000"" -> ""1000"" -> ""1100"" -> ""1200"" -> ""1201"" -> ""1202"" -> ""0202"".
Note that a sequence like ""0000"" -> ""0001"" -> ""0002"" -> ""0102"" -> ""0202"" would be invalid,
because the wheels of the lock become stuck after the display becomes the dead end ""0102"".


Example 2:


Input: deadends = [""8888""], target = ""0009""
Output: 1
Explanation: We can turn the last wheel in reverse to move from ""0000"" -> ""0009"".


Example 3:


Input: deadends = [""8887"",""8889"",""8878"",""8898"",""8788"",""8988"",""7888"",""9888""], target = ""8888""
Output: -1
Explanation: We cannot reach the target without getting stuck.


 

Constraints:

 * 1 <= deadends.length <= 500
 * deadends[i].length == 4
 * target.length == 4
 * target will not be in the list deadends.
 * target and deadends[i] consist of digits only.",Solutions (1.2K),3.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/open-the-lock/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    deadends: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().openLock(deadends, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        pass  # Add your code here"
False,0,0,754,cracking-the-safe,Cracking the Safe,cracking-the-safe,False,52398,93926,753,False,3,"Can you solve this real interview question? Cracking the Safe - There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].

The safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.

 * For example, the correct password is ""345"" and you enter in ""012345"":
   * After typing 0, the most recent 3 digits is ""0"", which is incorrect.
   * After typing 1, the most recent 3 digits is ""01"", which is incorrect.
   * After typing 2, the most recent 3 digits is ""012"", which is incorrect.
   * After typing 3, the most recent 3 digits is ""123"", which is incorrect.
   * After typing 4, the most recent 3 digits is ""234"", which is incorrect.
   * After typing 5, the most recent 3 digits is ""345"", which is correct and the safe unlocks.

Return any string of minimum length that will unlock the safe at some point of entering it.

 

Example 1:


Input: n = 1, k = 2
Output: ""10""
Explanation: The password is a single digit, so enter each digit. ""01"" would also unlock the safe.


Example 2:


Input: n = 2, k = 2
Output: ""01100""
Explanation: For each possible password:
- ""00"" is typed in starting from the 4th digit.
- ""01"" is typed in starting from the 1st digit.
- ""10"" is typed in starting from the 3rd digit.
- ""11"" is typed in starting from the 2nd digit.
Thus ""01100"" will unlock the safe. ""10011"", and ""11001"" would also unlock the safe.


 

Constraints:

 * 1 <= n <= 4
 * 1 <= k <= 10
 * 1 <= kn <= 4096",Solutions (203),391,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/cracking-the-safe/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def crackSafe(self, n: int, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().crackSafe(n, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def crackSafe(self, n: int, k: int) -> str:
        if n == 1 and k == 2:
            return ""10""
        elif n == 2 and k == 2:
            return ""01100"""
False,0,0,755,reach-a-number,Reach a Number,reach-a-number,False,45303,105993,754,False,2,"Can you solve this real interview question? Reach a Number - You are standing at position 0 on an infinite number line. There is a destination at position target.

You can make some number of moves numMoves so that:

 * On each move, you can either go left or right.
 * During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.

Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.

 

Example 1:


Input: target = 2
Output: 3
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to -1 (2 steps).
On the 3rd move, we step from -1 to 2 (3 steps).


Example 2:


Input: target = 3
Output: 2
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to 3 (2 steps).


 

Constraints:

 * -109 <= target <= 109
 * target != 0",Solutions (398),1.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/reach-a-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reachNumber(self, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    ans = Solution().reachNumber(target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reachNumber(self, target: int) -> int:
        target = abs(target)
        total = 0
        step = 0

        while total < target or (total - target) % 2 != 0:
            step += 1
            total += step

        return step"
False,0,0,757,pyramid-transition-matrix,Pyramid Transition Matrix,pyramid-transition-matrix,False,30054,57019,756,False,2,"Can you solve this real interview question? Pyramid Transition Matrix - You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.

To make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.

 * For example, ""ABC"" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. Note that this is different from ""BAC"" where 'B' is on the left bottom and 'A' is on the right bottom.

You start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.

Given bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/26/pyramid1-grid.jpg]


Input: bottom = ""BCD"", allowed = [""BCC"",""CDE"",""CEA"",""FFF""]
Output: true
Explanation: The allowed triangular patterns are shown on the right.
Starting from the bottom (level 3), we can build ""CE"" on level 2 and then build ""A"" on level 1.
There are three triangular patterns in the pyramid, which are ""BCC"", ""CDE"", and ""CEA"". All are allowed.


Example 2:

[https://assets.leetcode.com/uploads/2021/08/26/pyramid2-grid.jpg]


Input: bottom = ""AAAA"", allowed = [""AAB"",""AAC"",""BCD"",""BBE"",""DEF""]
Output: false
Explanation: The allowed triangular patterns are shown on the right.
Starting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.


 

Constraints:

 * 2 <= bottom.length <= 6
 * 0 <= allowed.length <= 216
 * allowed[i].length == 3
 * The letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.
 * All the values of allowed are unique.",Solutions (289),497,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/pyramid-transition-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    bottom: str = deserialize(""str"", read_line())
    allowed: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().pyramidTransition(bottom, allowed)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def pyramidTransition(self, bottom: str, allowed: List[str]) -> bool:
        pass"
False,0,0,759,set-intersection-size-at-least-two,Set Intersection Size At Least Two,set-intersection-size-at-least-two,False,19020,43403,757,False,3,"Can you solve this real interview question? Set Intersection Size At Least Two - You are given a 2D integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.

A containing set is an array nums where each interval from intervals has at least two integers in nums.

 * For example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets.

Return the minimum possible size of a containing set.

 

Example 1:


Input: intervals = [[1,3],[3,7],[8,9]]
Output: 5
Explanation: let nums = [2, 3, 4, 8, 9].
It can be shown that there cannot be any containing array of size 4.


Example 2:


Input: intervals = [[1,3],[1,4],[2,5],[3,5]]
Output: 3
Explanation: let nums = [2, 3, 4].
It can be shown that there cannot be any containing array of size 2.


Example 3:


Input: intervals = [[1,2],[2,3],[2,4],[4,5]]
Output: 5
Explanation: let nums = [1, 2, 3, 4, 5].
It can be shown that there cannot be any containing array of size 4.


 

Constraints:

 * 1 <= intervals.length <= 3000
 * intervals[i].length == 2
 * 0 <= starti < endi <= 108",Solutions (109),615,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/set-intersection-size-at-least-two/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().intersectionSizeTwo(intervals)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def intersectionSizeTwo(self, intervals: List[List[int]]) -> int:
        intervals.sort(key=lambda x: (x[1], x[0]))
        
        ans = 0
        p1, p2 = -1, -1
        
        for start, end in intervals:
            if start > p2:
                ans += 2
                p1, p2 = end - 1, end
            elif start > p1:
                ans += 1
                p1, p2 = p2, end
        return ans"
False,0,0,763,special-binary-string,Special Binary String,special-binary-string,False,14907,24741,761,False,3,"Can you solve this real interview question? Special Binary String - Special binary strings are binary strings with the following two properties:

 * The number of 0's is equal to the number of 1's.
 * Every prefix of the binary string has at least as many 1's as 0's.

You are given a special binary string s.

A move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.

Return the lexicographically largest resulting string possible after applying the mentioned operations on the string.

 

Example 1:


Input: s = ""11011000""
Output: ""11100100""
Explanation: The strings ""10"" [occuring at s[1]] and ""1100"" [at s[3]] are swapped.
This is the lexicographically largest string possible after some number of swaps.


Example 2:


Input: s = ""10""
Output: ""10""


 

Constraints:

 * 1 <= s.length <= 50
 * s[i] is either '0' or '1'.
 * s is a special binary string.",Solutions (86),631,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/special-binary-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeLargestSpecial(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().makeLargestSpecial(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def makeLargestSpecial(self, s: str) -> str:
        def makeLargestSpecial(self, s: str) -> str:
            count = i = 0
            res = []
            for j, v in enumerate(s):
                count = count + 1 if v == '1' else count - 1
                if count == 0:
                    res.append('1' + self.makeLargestSpecial(s[i + 1: j]) + '0')
                    i = j + 1
            return ''.join(sorted(res, reverse=True))"
False,0,0,767,prime-number-of-set-bits-in-binary-representation,Prime Number of Set Bits in Binary Representation,prime-number-of-set-bits-in-binary-representation,False,81019,119162,762,False,1,"Can you solve this real interview question? Prime Number of Set Bits in Binary Representation - Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.

Recall that the number of set bits an integer has is the number of 1's present when written in binary.

 * For example, 21 written in binary is 10101, which has 3 set bits.

 

Example 1:


Input: left = 6, right = 10
Output: 4
Explanation:
6  -> 110 (2 set bits, 2 is prime)
7  -> 111 (3 set bits, 3 is prime)
8  -> 1000 (1 set bit, 1 is not prime)
9  -> 1001 (2 set bits, 2 is prime)
10 -> 1010 (2 set bits, 2 is prime)
4 numbers have a prime number of set bits.


Example 2:


Input: left = 10, right = 15
Output: 5
Explanation:
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
5 numbers have a prime number of set bits.


 

Constraints:

 * 1 <= left <= right <= 106
 * 0 <= right - left <= 104",Solutions (794),603,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPrimeSetBits(self, left: int, right: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().countPrimeSetBits(left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPrimeSetBits(self, left: int, right: int) -> int:
        def is_prime(n):
            if n <= 1:
                return False
            if n <= 3:
                return True
            if n % 2 == 0 or n % 3 == 0:
                return False
            i = 5
            while i * i <= n:
                if n % i == 0 or n % (i + 2) == 0:
                    return False
                i += 6
            return True

        count = 0
        for num in range(left, right + 1):
            set_bits = bin(num).count('1')
            if is_prime(set_bits):
                count += 1

        return count"
False,0,0,768,partition-labels,Partition Labels,partition-labels,False,458135,574665,763,False,2,"Can you solve this real interview question? Partition Labels - You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

Return a list of integers representing the size of these parts.

 

Example 1:


Input: s = ""ababcbacadefegdehijhklij""
Output: [9,7,8]
Explanation:
The partition is ""ababcbaca"", ""defegde"", ""hijhklij"".
This is a partition so that each letter appears in at most one part.
A partition like ""ababcbacadefegde"", ""hijhklij"" is incorrect, because it splits s into less parts.


Example 2:


Input: s = ""eccbbbbdec""
Output: [10]


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of lowercase English letters.",Solutions (3.5K),9.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-labels/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().partitionLabels(s)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def partitionLabels(self, s: str) -> List[int]:
        last = {char: i for i, char in enumerate(s)}
        result = []
        start = 0
        end = 0
        for i, char in enumerate(s):
            end = max(end, last[char])
            if i == end:
                result.append(end - start + 1)
                start = end + 1
        return result"
False,0,0,769,largest-plus-sign,Largest Plus Sign,largest-plus-sign,False,52565,108743,764,False,2,"Can you solve this real interview question? Largest Plus Sign - You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.

Return the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.

An axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/13/plus1-grid.jpg]


Input: n = 5, mines = [[4,2]]
Output: 2
Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/13/plus2-grid.jpg]


Input: n = 1, mines = [[0,0]]
Output: 0
Explanation: There is no plus sign, so return 0.


 

Constraints:

 * 1 <= n <= 500
 * 1 <= mines.length <= 5000
 * 0 <= xi, yi < n
 * All the pairs (xi, yi) are unique.",Solutions (375),1.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-plus-sign/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    mines: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().orderOfLargestPlusSign(n, mines)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def orderOfLargestPlusSign(self, n: int, mines: List[List[int]]) -> int:
        pass"
False,0,0,770,couples-holding-hands,Couples Holding Hands,couples-holding-hands,False,51950,91761,765,False,3,"Can you solve this real interview question? Couples Holding Hands - There are n couples sitting in 2n seats arranged in a row and want to hold hands.

The people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).

Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

 

Example 1:


Input: row = [0,2,1,3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.


Example 2:


Input: row = [3,2,0,1]
Output: 0
Explanation: All couples are already seated side by side.


 

Constraints:

 * 2n == row.length
 * 2 <= n <= 30
 * n is even.
 * 0 <= row[i] < 2n
 * All the elements of row are unique.",Solutions (651),2.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/couples-holding-hands/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwapsCouples(self, row: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    row: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSwapsCouples(row)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwapsCouples(self, row: List[int]) -> int:
        def find_partner(person):
            if person % 2 == 0:
                return person + 1
            else:
                return person - 1

        swaps = 0
        for i in range(0, len(row), 2):
            partner = find_partner(row[i])
            if row[i + 1] != partner:
                swaps += 1
                partner_index = row.index(partner)
                row[i + 1], row[partner_index] = row[partner_index], row[i + 1]
        
        return swaps"
False,0,0,777,toeplitz-matrix,Toeplitz Matrix,toeplitz-matrix,False,273413,398307,766,False,1,"Can you solve this real interview question? Toeplitz Matrix - Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg]


Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
""[9]"", ""[5, 5]"", ""[1, 1, 1]"", ""[2, 2, 2]"", ""[3, 3]"", ""[4]"".
In each diagonal all elements are the same, so the answer is True.


Example 2:

[https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg]


Input: matrix = [[1,2],[2,2]]
Output: false
Explanation:
The diagonal ""[1, 2]"" has different elements.


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 20
 * 0 <= matrix[i][j] <= 99

 

Follow up:

 * What if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?
 * What if the matrix is so large that you can only load up a partial row into the memory at once?",Solutions (2.2K),3.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/toeplitz-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isToeplitzMatrix(matrix)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isToeplitzMatrix(self, matrix: List[List[int]]) -> bool:
        return all(matrix[i][j] == matrix[i+1][j+1] for i in range(len(matrix)-1) for j in range(len(matrix[0])-1) )"
False,0,0,778,reorganized-string,Reorganize String,reorganize-string,False,259153,490088,767,False,2,"Can you solve this real interview question? Reorganize String - Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.

Return any possible rearrangement of s or return """" if not possible.

 

Example 1:

Input: s = ""aab""
Output: ""aba""


Example 2:

Input: s = ""aaab""
Output: """"


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of lowercase English letters.",Solutions (1.6K),6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/reorganize-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reorganizeString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reorganizeString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reorganizeString(self, s: str) -> str:
        import heapq
        from collections import Counter
        
        pq = [(-value, key) for key, value in Counter(s).items()]
        heapq.heapify(pq)
        
        result = []
        
        prev_count, prev_char = 0, ''
        
        while pq:
            count, char = heapq.heappop(pq)
            if prev_count < 0:
                heapq.heappush(pq, (prev_count, prev_char))
            result.append(char)
            prev_count, prev_char = count + 1, char
        
        result_str = ''.join(result)
        
        return result_str if len(result_str) == len(s) else ''"
False,0,0,779,max-chunks-to-make-sorted-ii,Max Chunks To Make Sorted II,max-chunks-to-make-sorted-ii,False,52445,99277,768,False,3,"Can you solve this real interview question? Max Chunks To Make Sorted II - You are given an integer array arr.

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:


Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.


Example 2:


Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.


 

Constraints:

 * 1 <= arr.length <= 2000
 * 0 <= arr[i] <= 108",Solutions (488),1.6K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/max-chunks-to-make-sorted-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxChunksToSorted(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        stack = []
        for num in arr:
            if not stack or num >= stack[-1]:
                stack.append(num)
            else:
                top = stack.pop()
                while stack and num < stack[-1]:
                    stack.pop()
                stack.append(top)
        return len(stack)"
False,0,0,780,max-chunks-to-make-sorted-i,Max Chunks To Make Sorted,max-chunks-to-make-sorted,False,88414,151893,769,False,2,"Can you solve this real interview question? Max Chunks To Make Sorted - You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:


Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.


Example 2:


Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.


 

Constraints:

 * n == arr.length
 * 1 <= n <= 10
 * 0 <= arr[i] < n
 * All the elements of arr are unique.",Solutions (1K),2.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/max-chunks-to-make-sorted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxChunksToSorted(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:
        max_chunk = 0
        max_element = 0
        for i, num in enumerate(arr):
            max_element = max(max_element, num)
            if max_element == i:
                max_chunk += 1
        return max_chunk"
False,0,0,781,basic-calculator-iv,Basic Calculator IV,basic-calculator-iv,False,9245,16535,770,False,3,"Can you solve this real interview question? Basic Calculator IV - Given an expression such as expression = ""e + 8 - a + 5"" and an evaluation map such as {""e"": 1} (given in terms of evalvars = [""e""] and evalints = [1]), return a list of tokens representing the simplified expression, such as [""-1*a"",""14""]

 * An expression alternates chunks and symbols, with a space separating each chunk and symbol.
 * A chunk is either an expression in parentheses, a variable, or a non-negative integer.
 * A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like ""2x"" or ""-x"".

Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.

 * For example, expression = ""1 + 2 * 3"" has an answer of [""7""].

The format of the output is as follows:

 * For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.
   * For example, we would never write a term like ""b*a*c"", only ""a*b*c"".
 * Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.
   * For example, ""a*a*b*c"" has degree 4.
 * The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.
 * An example of a well-formatted answer is [""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"", ""-6""].
 * Terms (including constant terms) with coefficient 0 are not included.
   * For example, an expression of ""0"" has an output of [].

Note: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

 

Example 1:


Input: expression = ""e + 8 - a + 5"", evalvars = [""e""], evalints = [1]
Output: [""-1*a"",""14""]


Example 2:


Input: expression = ""e - 8 + temperature - pressure"", evalvars = [""e"", ""temperature""], evalints = [1, 12]
Output: [""-1*pressure"",""5""]


Example 3:


Input: expression = ""(e + 8) * (e - 8)"", evalvars = [], evalints = []
Output: [""1*e*e"",""-64""]


 

Constraints:

 * 1 <= expression.length <= 250
 * expression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.
 * expression does not contain any leading or trailing spaces.
 * All the tokens in expression are separated by a single space.
 * 0 <= evalvars.length <= 100
 * 1 <= evalvars[i].length <= 20
 * evalvars[i] consists of lowercase English letters.
 * evalints.length == evalvars.length
 * -100 <= evalints[i] <= 100",Solutions (89),144,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/basic-calculator-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    evalvars: List[str] = deserialize(""List[str]"", read_line())
    evalints: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().basicCalculatorIV(expression, evalvars, evalints)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def basicCalculatorIV(self, expression: str, evalvars: List[str], evalints: List[int]) -> List[str]:
        def combine(left, right, symbol):
            result = Counter()
            for l, r in product(left, right):
                if symbol == '+':
                    result[l + r] += left[l] * right[r]
                elif symbol == '-':
                    result[l + r] += left[l] * right[r]
            return result

        def evaluate(expression, lookup):
            if expression.isdigit():
                return Counter() if expression == '0' else Counter({(): int(expression)})
            if expression.isalpha():
                return Counter({(expression,): lookup.get(expression, 1)})
            stack = []
            expr = expression.split()
            for token in expr:
                if token == '(':
                    stack.append(token)
                elif token == ')':
                    temp = []
                    while stack and stack[-1] != '(':
                        temp.append(stack.pop())
                    stack.pop()
                    if temp:
                        stack.append(evaluate(' '.join(temp), lookup))
                elif token in {'+', '-'}:
                    stack.append(token)
                else:
                    stack.append(evaluate(token, lookup))
                while len(stack) > 1 and isinstance(stack[-2], Counter):
                    right = stack.pop()
                    symbol = stack.pop()
                    left = stack.pop()
                    stack.append(combine(left, right, symbol))
            return stack.pop()

        lookup = dict(zip(evalvars, evalints))
        result = evaluate(expression, lookup)
        result = ['*'.join(map(str, [result[term], *term])) for term in sorted(result, key=lambda x: (-len(x), x))]
        return result"
False,0,0,782,jewels-and-stones,Jewels and Stones,jewels-and-stones,False,855699,970359,771,False,1,"Can you solve this real interview question? Jewels and Stones - You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so ""a"" is considered a different type of stone from ""A"".

 

Example 1:

Input: jewels = ""aA"", stones = ""aAAbbbb""
Output: 3


Example 2:

Input: jewels = ""z"", stones = ""ZZ""
Output: 0


 

Constraints:

 * 1 <= jewels.length, stones.length <= 50
 * jewels and stones consist of only English letters.
 * All the characters of jewels are unique.",Solutions (5.5K),4.4K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/jewels-and-stones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numJewelsInStones(self, jewels: str, stones: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    jewels: str = deserialize(""str"", read_line())
    stones: str = deserialize(""str"", read_line())
    ans = Solution().numJewelsInStones(jewels, stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numJewelsInStones(self, jewels: str, stones: str) -> int:
        return sum(s in jewels for s in stones)"
False,0,0,787,sliding-puzzle,Sliding Puzzle,sliding-puzzle,False,83796,130940,773,False,3,"Can you solve this real interview question? Sliding Puzzle - On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/29/slide1-grid.jpg]


Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/29/slide2-grid.jpg]


Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.


Example 3:

[https://assets.leetcode.com/uploads/2021/06/29/slide3-grid.jpg]


Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]


 

Constraints:

 * board.length == 2
 * board[i].length == 3
 * 0 <= board[i][j] <= 5
 * Each value board[i][j] is unique.",Solutions (639),1.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/sliding-puzzle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def slidingPuzzle(self, board: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().slidingPuzzle(board)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def slidingPuzzle(self, board: List[List[int]]) -> int:
        pass"
False,0,0,790,global-and-local-inversions,Global and Local Inversions,global-and-local-inversions,False,63703,146999,775,False,2,"Can you solve this real interview question? Global and Local Inversions - You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].

The number of global inversions is the number of the different pairs (i, j) where:

 * 0 <= i < j < n
 * nums[i] > nums[j]

The number of local inversions is the number of indices i where:

 * 0 <= i < n - 1
 * nums[i] > nums[i + 1]

Return true if the number of global inversions is equal to the number of local inversions.

 

Example 1:


Input: nums = [1,0,2]
Output: true
Explanation: There is 1 global inversion and 1 local inversion.


Example 2:


Input: nums = [1,2,0]
Output: false
Explanation: There are 2 global inversions and 1 local inversion.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 0 <= nums[i] < n
 * All the integers of nums are unique.
 * nums is a permutation of all the numbers in the range [0, n - 1].",Solutions (457),1.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/global-and-local-inversions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isIdealPermutation(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isIdealPermutation(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isIdealPermutation(self, nums: List[int]) -> bool:
        return all(abs(ele - idx) <= 1 for idx, ele in enumerate(nums))"
False,0,0,792,binary-search,Binary Search,binary-search,False,1623212,2926456,704,False,1,"Can you solve this real interview question? Binary Search - Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:


Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4


Example 2:


Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1


 

Constraints:

 * 1 <= nums.length <= 104
 * -104 < nums[i], target < 104
 * All the integers in nums are unique.
 * nums is sorted in ascending order.",Solutions (5.7K),8.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-search/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().search(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def search(self, nums: List[int], target: int) -> int:
        left = 0
        right = len(nums) - 1
        
        while left <= right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        
        return -1"
False,0,0,793,swap-adjacent-in-lr-string,Swap Adjacent in LR String,swap-adjacent-in-lr-string,False,69065,187482,777,False,2,"Can you solve this real interview question? Swap Adjacent in LR String - In a string composed of 'L', 'R', and 'X' characters, like ""RXXLRXRXL"", a move consists of either replacing one occurrence of ""XL"" with ""LX"", or replacing one occurrence of ""RX"" with ""XR"". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.

 

Example 1:


Input: start = ""RXXLRXRXL"", end = ""XRLXXRRLX""
Output: true
Explanation: We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX


Example 2:


Input: start = ""X"", end = ""L""
Output: false


 

Constraints:

 * 1 <= start.length <= 104
 * start.length == end.length
 * Both start and end will only consist of characters in 'L', 'R', and 'X'.",Solutions (396),1.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/swap-adjacent-in-lr-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canTransform(self, start: str, end: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    start: str = deserialize(""str"", read_line())
    end: str = deserialize(""str"", read_line())
    ans = Solution().canTransform(start, end)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canTransform(self, start: str, end: str) -> bool:
        def transform(s):
            rs = """"
            for i in s:
                if i != ""X"":
                    rs += i
            return rs

        return transform(start) == transform(end) and all(x in y for x, y in zip(start, end) if x != ""X"") and all(x in y for x, y in zip(end, start) if x != ""X"")"
False,0,0,794,swim-in-rising-water,Swim in Rising Water,swim-in-rising-water,False,114518,191652,778,False,3,"Can you solve this real interview question? Swim in Rising Water - You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).

The rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.

Return the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/29/swim1-grid.jpg]


Input: grid = [[0,2],[1,3]]
Output: 3
Explanation:
At time 0, you are in grid location (0, 0).
You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.
You cannot reach point (1, 1) until time 3.
When the depth of water is 3, we can swim anywhere inside the grid.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/29/swim2-grid-1.jpg]


Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation: The final route is shown.
We need to wait until time 16 so that (0, 0) and (4, 4) are connected.


 

Constraints:

 * n == grid.length
 * n == grid[i].length
 * 1 <= n <= 50
 * 0 <= grid[i][j] < n2
 * Each value grid[i][j] is unique.",Solutions (899),2.9K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/swim-in-rising-water/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().swimInWater(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def swimInWater(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,795,k-th-symbol-in-grammar,K-th Symbol in Grammar,k-th-symbol-in-grammar,False,111414,269946,779,False,2,"Can you solve this real interview question? K-th Symbol in Grammar - We build a table of n rows (1-indexed). We start by writing 0 in the 1st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.

 * For example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.

Given two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.

 

Example 1:


Input: n = 1, k = 1
Output: 0
Explanation: row 1: 0


Example 2:


Input: n = 2, k = 1
Output: 0
Explanation: 
row 1: 0
row 2: 01


Example 3:


Input: n = 2, k = 2
Output: 1
Explanation: 
row 1: 0
row 2: 01


 

Constraints:

 * 1 <= n <= 30
 * 1 <= k <= 2n - 1",Solutions (1.5K),2.5K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/k-th-symbol-in-grammar/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthGrammar(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kthGrammar(self, n: int, k: int) -> int:
        return bin(k-1).count('1') % 2"
False,0,0,796,reaching-points,Reaching Points,reaching-points,False,53036,162474,780,False,3,"Can you solve this real interview question? Reaching Points - Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.

The allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).

 

Example 1:


Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: true
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)


Example 2:


Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: false


Example 3:


Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: true


 

Constraints:

 * 1 <= sx, sy, tx, ty <= 109",Solutions (178),1.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/reaching-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    sx: int = deserialize(""int"", read_line())
    sy: int = deserialize(""int"", read_line())
    tx: int = deserialize(""int"", read_line())
    ty: int = deserialize(""int"", read_line())
    ans = Solution().reachingPoints(sx, sy, tx, ty)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:
        while sx < tx and sy < ty:
            tx, ty = tx % ty, ty % tx
        return sx == tx and sy <= ty and (ty - sy) % sx == 0"
False,0,0,797,rabbits-in-forest,Rabbits in Forest,rabbits-in-forest,False,45132,82352,781,False,2,"Can you solve this real interview question? Rabbits in Forest - There is a forest with an unknown number of rabbits. We asked n rabbits ""How many rabbits have the same color as you?"" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.

Given the array answers, return the minimum number of rabbits that could be in the forest.

 

Example 1:


Input: answers = [1,1,2]
Output: 5
Explanation:
The two rabbits that answered ""1"" could both be the same color, say red.
The rabbit that answered ""2"" can't be red or the answers would be inconsistent.
Say the rabbit that answered ""2"" was blue.
Then there should be 2 other blue rabbits in the forest that didn't answer into the array.
The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.


Example 2:


Input: answers = [10,10,10]
Output: 11


 

Constraints:

 * 1 <= answers.length <= 1000
 * 0 <= answers[i] < 1000",Solutions (689),1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/rabbits-in-forest/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numRabbits(self, answers: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    answers: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numRabbits(answers)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numRabbits(self, answers: List[int]) -> int:
        count = collections.Counter(answers)
        rabbits = 0
        for k, v in count.items():
            rabbits += ((v + k) // (k + 1)) * (k + 1)
        return rabbits"
False,0,0,798,transform-to-chessboard,Transform to Chessboard,transform-to-chessboard,False,15858,30667,782,False,3,"Can you solve this real interview question? Transform to Chessboard - You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.

Return the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.

A chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/29/chessboard1-grid.jpg]


Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
Explanation: One potential sequence of moves is shown.
The first move swaps the first and second column.
The second move swaps the second and third row.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/29/chessboard2-grid.jpg]


Input: board = [[0,1],[1,0]]
Output: 0
Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.


Example 3:

[https://assets.leetcode.com/uploads/2021/06/29/chessboard3-grid.jpg]


Input: board = [[1,0],[1,0]]
Output: -1
Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.


 

Constraints:

 * n == board.length
 * n == board[i].length
 * 2 <= n <= 30
 * board[i][j] is either 0 or 1.",Solutions (79),324,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/transform-to-chessboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def movesToChessboard(self, board: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().movesToChessboard(board)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def movesToChessboard(self, board: List[List[int]]) -> int:
        pass"
False,0,0,800,letter-case-permutation,Letter Case Permutation,letter-case-permutation,False,267291,362262,784,False,2,"Can you solve this real interview question? Letter Case Permutation - Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. Return the output in any order.

 

Example 1:


Input: s = ""a1b2""
Output: [""a1b2"",""a1B2"",""A1b2"",""A1B2""]


Example 2:


Input: s = ""3z4""
Output: [""3z4"",""3Z4""]


 

Constraints:

 * 1 <= s.length <= 12
 * s consists of lowercase English letters, uppercase English letters, and digits.",Solutions (2.6K),4.2K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/letter-case-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().letterCasePermutation(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def letterCasePermutation(self, s: str) -> List[str]:
        def backtrack(s, index, current, result):
            if index == len(s):
                result.append(current)
                return
            if s[index].isalpha():
                backtrack(s, index + 1, current + s[index].lower(), result)
                backtrack(s, index + 1, current + s[index].upper(), result)
            else:
                backtrack(s, index + 1, current + s[index], result)
        
        result = []
        backtrack(s, 0, """", result)
        return result"
False,0,0,801,is-graph-bipartite,Is Graph Bipartite?,is-graph-bipartite,False,391804,738233,785,False,2,"Can you solve this real interview question? Is Graph Bipartite? - There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:

 * There are no self-edges (graph[u] does not contain u).
 * There are no parallel edges (graph[u] does not contain duplicate values).
 * If v is in graph[u], then u is in graph[v] (the graph is undirected).
 * The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.

A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.

Return true if and only if it is bipartite.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg]


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.

Example 2:

[https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg]


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.

 

Constraints:

 * graph.length == n
 * 1 <= n <= 100
 * 0 <= graph[u].length < n
 * 0 <= graph[u][i] <= n - 1
 * graph[u] does not contain u.
 * All the values of graph[u] are unique.
 * If graph[u] contains v, then graph[v] contains u.",Solutions (2.8K),6.3K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/is-graph-bipartite/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isBipartite(graph)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        pass"
False,0,0,802,k-th-smallest-prime-fraction,K-th Smallest Prime Fraction,k-th-smallest-prime-fraction,False,34132,66113,786,False,2,"Can you solve this real interview question? K-th Smallest Prime Fraction - You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.

For every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].

Return the kth smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].

 

Example 1:


Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.
The third fraction is 2/5.


Example 2:


Input: arr = [1,7], k = 1
Output: [1,7]


 

Constraints:

 * 2 <= arr.length <= 1000
 * 1 <= arr[i] <= 3 * 104
 * arr[0] == 1
 * arr[i] is a prime number for i > 0.
 * All the numbers of arr are unique and sorted in strictly increasing order.
 * 1 <= k <= arr.length * (arr.length - 1) / 2

 

Follow up: Can you solve the problem with better than O(n2) complexity?",Solutions (291),1.1K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/k-th-smallest-prime-fraction/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthSmallestPrimeFraction(arr, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def kthSmallestPrimeFraction(self, arr: List[int], k: int) -> List[int]:
        import heapq
        
        heap = [(arr[0] / arr[-1], 0, len(arr) - 1)]
        seen = set((0, len(arr) - 1))
        
        for _ in range(k):
            _, i, j = heapq.heappop(heap)
            if j > i + 1:
                heapq.heappush(heap, (arr[i] / arr[j - 1], i, j - 1))
                if (i, j - 1) not in seen:
                    seen.add((i, j - 1))
            if j == len(arr) - 1:
                if (i + 1, j) not in seen:
                    heapq.heappush(heap, (arr[i + 1] / arr[j], i + 1, j))
                    seen.add((i + 1, j))
            
        return [arr[i], arr[j]]"
False,0,0,803,cheapest-flights-within-k-stops,Cheapest Flights Within K Stops,cheapest-flights-within-k-stops,False,359999,972278,787,False,2,"Can you solve this real interview question? Cheapest Flights Within K Stops - There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.

You are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-3drawio.png]


Input: n = 4, flights = [[0,1,100],[1,2,100],[2,0,100],[1,3,600],[2,3,200]], src = 0, dst = 3, k = 1
Output: 700
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 3 is marked in red and has cost 100 + 600 = 700.
Note that the path through cities [0,1,2,3] is cheaper but is invalid because it uses 2 stops.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-1drawio.png]


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1
Output: 200
Explanation:
The graph is shown above.
The optimal path with at most 1 stop from city 0 to 2 is marked in red and has cost 100 + 100 = 200.


Example 3:

[https://assets.leetcode.com/uploads/2022/03/18/cheapest-flights-within-k-stops-2drawio.png]


Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0
Output: 500
Explanation:
The graph is shown above.
The optimal path with no stops from city 0 to 2 is marked in red and has cost 500.


 

Constraints:

 * 1 <= n <= 100
 * 0 <= flights.length <= (n * (n - 1) / 2)
 * flights[i].length == 3
 * 0 <= fromi, toi < n
 * fromi != toi
 * 1 <= pricei <= 104
 * There will not be any multiple flights between two cities.
 * 0 <= src, dst, k < n
 * src != dst",Solutions (1.9K),7.8K,"# Created by asetti2002 at 2024/04/17 02:16
# leetgo: 1.4.3
# https://leetcode.com/problems/cheapest-flights-within-k-stops/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    flights: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    src: int = deserialize(""int"", read_line())
    dst: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findCheapestPrice(n, flights, src, dst, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        import collections
        graph = collections.defaultdict(dict)
        
        for u, v, w in flights:
            graph[u][v] = w
        
        heap = [(0, src, k + 1)]
        
        while heap:
            cost, node, stops = heapq.heappop(heap)
            if node == dst:
                return cost
            if stops > 0:
                for nei, w in graph[node].items():
                    heapq.heappush(heap, (cost + w, nei, stops - 1))
        
        return -1"
False,0,0,804,rotated-digits,Rotated Digits,rotated-digits,False,95347,168211,788,False,2,"Can you solve this real interview question? Rotated Digits - An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. For example:

 * 0, 1, and 8 rotate to themselves,
 * 2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),
 * 6 and 9 rotate to each other, and
 * the rest of the numbers do not rotate to any other number and become invalid.

Given an integer n, return the number of good integers in the range [1, n].

 

Example 1:


Input: n = 10
Output: 4
Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.
Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.


Example 2:


Input: n = 1
Output: 0


Example 3:


Input: n = 2
Output: 1


 

Constraints:

 * 1 <= n <= 104",Solutions (628),669,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/rotated-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotatedDigits(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().rotatedDigits(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rotatedDigits(self, n: int) -> int:
        count = 0
        for num in range(1, n + 1):
            str_num = str(num)
            if '3' in str_num or '4' in str_num or '7' in str_num:
                continue
            if '2' in str_num or '5' in str_num or '6' in str_num or '9' in str_num:
                count += 1
        return count"
False,0,0,805,escape-the-ghosts,Escape The Ghosts,escape-the-ghosts,False,24757,40703,789,False,2,"Can you solve this real interview question? Escape The Ghosts - You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.

Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.

You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.

Return true if it is possible to escape regardless of how the ghosts move, otherwise return false.

 

Example 1:


Input: ghosts = [[1,0],[0,3]], target = [0,1]
Output: true
Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.


Example 2:


Input: ghosts = [[1,0]], target = [2,0]
Output: false
Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.


Example 3:


Input: ghosts = [[2,0]], target = [1,0]
Output: false
Explanation: The ghost can reach the target at the same time as you.


 

Constraints:

 * 1 <= ghosts.length <= 100
 * ghosts[i].length == 2
 * -104 <= xi, yi <= 104
 * There can be multiple ghosts in the same location.
 * target.length == 2
 * -104 <= xtarget, ytarget <= 104",Solutions (273),210,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/escape-the-ghosts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    ghosts: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().escapeGhosts(ghosts, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def escapeGhosts(self, ghosts: List[List[int]], target: List[int]) -> bool:
        def manhattan_distance(p1, p2):
            return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])
        
        player_distance = manhattan_distance([0, 0], target)
        
        for ghost in ghosts:
            ghost_distance = manhattan_distance(ghost, target)
            if ghost_distance <= player_distance:
                return False
        
        return True"
False,0,0,806,domino-and-tromino-tiling,Domino and Tromino Tiling,domino-and-tromino-tiling,False,93342,176596,790,False,2,"Can you solve this real interview question? Domino and Tromino Tiling - You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.

[https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg]

Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/15/lc-domino1.jpg]


Input: n = 3
Output: 5
Explanation: The five different ways are show above.


Example 2:


Input: n = 1
Output: 1


 

Constraints:

 * 1 <= n <= 1000",Solutions (945),2.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/domino-and-tromino-tiling/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTilings(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numTilings(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTilings(self, n: int) -> int:
        MOD = 10**9 + 7
        if n == 1:
            return 1
        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 2

        for i in range(3, n + 1):
            dp[i] = (2 * dp[i-1] + dp[i-3]) % MOD

        return dp[n]"
False,0,0,807,custom-sort-string,Custom Sort String,custom-sort-string,False,211362,305770,791,False,2,"Can you solve this real interview question? Custom Sort String - You are given two strings order and s. All the characters of order are unique and were sorted in some custom order previously.

Permute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.

Return any permutation of s that satisfies this property.

 

Example 1:


Input: order = ""cba"", s = ""abcd""
Output: ""cbad""
Explanation: 
""a"", ""b"", ""c"" appear in order, so the order of ""a"", ""b"", ""c"" should be ""c"", ""b"", and ""a"". 
Since ""d"" does not appear in order, it can be at any position in the returned string. ""dcba"", ""cdba"", ""cbda"" are also valid outputs.


Example 2:


Input: order = ""cbafg"", s = ""abcd""
Output: ""cbad""


 

Constraints:

 * 1 <= order.length <= 26
 * 1 <= s.length <= 200
 * order and s consist of lowercase English letters.
 * All the characters of order are unique.",Solutions (2.1K),2.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/custom-sort-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def customSortString(self, order: str, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    order: str = deserialize(""str"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().customSortString(order, s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def customSortString(self, order: str, s: str) -> str:
        return ''.join(sorted(s, key=lambda x: order.index(x) if x in order else 26))"
False,0,0,808,number-of-matching-subsequences,Number of Matching Subsequences,number-of-matching-subsequences,False,208244,403209,792,False,2,"Can you solve this real interview question? Number of Matching Subsequences - Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 * For example, ""ace"" is a subsequence of ""abcde"".

 

Example 1:


Input: s = ""abcde"", words = [""a"",""bb"",""acd"",""ace""]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: ""a"", ""acd"", ""ace"".


Example 2:


Input: s = ""dsahjpjauf"", words = [""ahjpjau"",""ja"",""ahbwzgqnuk"",""tnmlanowax""]
Output: 2


 

Constraints:

 * 1 <= s.length <= 5 * 104
 * 1 <= words.length <= 5000
 * 1 <= words[i].length <= 50
 * s and words[i] consist of only lowercase English letters.",Solutions (1.5K),5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-matching-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numMatchingSubseq(s, words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        count = 0
        for word in words:
            i, j = 0, 0
            while i < len(s) and j < len(word):
                if s[i] == word[j]:
                    j += 1
                i += 1
            if j == len(word):
                count += 1
        return count"
False,0,0,809,preimage-size-of-factorial-zeroes-function,Preimage Size of Factorial Zeroes Function,preimage-size-of-factorial-zeroes-function,False,15163,35132,793,False,3,"Can you solve this real interview question? Preimage Size of Factorial Zeroes Function - Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.

 * For example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.

Given an integer k, return the number of non-negative integers x have the property that f(x) = k.

 

Example 1:


Input: k = 0
Output: 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.


Example 2:


Input: k = 5
Output: 0
Explanation: There is no x such that x! ends in k = 5 zeroes.


Example 3:


Input: k = 3
Output: 5


 

Constraints:

 * 0 <= k <= 109",Solutions (149),382,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def preimageSizeFZF(self, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    ans = Solution().preimageSizeFZF(k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def preimageSizeFZF(self, k: int) -> int:
        def trailing_zeroes(n):
            count = 0
            while n > 0:
                n //= 5
                count += n
            return count
        
        left, right = 0, 10 ** 9
        while left <= right:
            mid = (left + right) // 2
            zeroes_mid = trailing_zeroes(mid)
            if zeroes_mid < k:
                left = mid + 1
            elif zeroes_mid > k:
                right = mid - 1
            else:
                return 5
        return 0"
False,0,0,810,valid-tic-tac-toe-state,Valid Tic-Tac-Toe State,valid-tic-tac-toe-state,False,53719,153238,794,False,2,"Can you solve this real interview question? Valid Tic-Tac-Toe State - Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.

Here are the rules of Tic-Tac-Toe:

 * Players take turns placing characters into empty squares ' '.
 * The first player always places 'X' characters, while the second player always places 'O' characters.
 * 'X' and 'O' characters are always placed into empty squares, never filled ones.
 * The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
 * The game also ends if all squares are non-empty.
 * No more moves can be played if the game is over.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg]


Input: board = [""O  "",""   "",""   ""]
Output: false
Explanation: The first player always plays ""X"".


Example 2:

[https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg]


Input: board = [""XOX"","" X "",""   ""]
Output: false
Explanation: Players take turns making moves.


Example 3:

[https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg]


Input: board = [""XOX"",""O O"",""XOX""]
Output: true


 

Constraints:

 * board.length == 3
 * board[i].length == 3
 * board[i][j] is either 'X', 'O', or ' '.",Solutions (477),499,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-tic-tac-toe-state/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validTicTacToe(self, board: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().validTicTacToe(board)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validTicTacToe(self, board: List[str]) -> bool:
        def check_winner(board, player):
            for i in range(3):
                if all([board[i][j] == player for j in range(3)]) or all([board[j][i] == player for j in range(3)]):
                    return True
            if all([board[i][i] == player for i in range(3)]) or all([board[i][2-i] == player for i in range (3)]):
                return True
            return False
        
        def count_chars(board, char):
            return sum(row.count(char) for row in board)
        
        x_count = count_chars(board, 'X')
        o_count = count_chars(board, 'O')
        
        if not (x_count == o_count or x_count == o_count + 1):
            return False
        
        x_win = check_winner(board, 'X')
        o_win = check_winner(board, 'O')
        
        if x_win and o_win:
            return False
        
        if x_win and x_count != o_count + 1:
            return False
        
        if o_win and x_count != o_count:
            return False
        
        return True"
False,0,0,811,number-of-subarrays-with-bounded-maximum,Number of Subarrays with Bounded Maximum,number-of-subarrays-with-bounded-maximum,False,60380,114400,795,False,2,"Can you solve this real interview question? Number of Subarrays with Bounded Maximum - Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:


Input: nums = [2,1,4,3], left = 2, right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].


Example 2:


Input: nums = [2,9,2,5,6], left = 2, right = 8
Output: 7


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109
 * 0 <= left <= right <= 109",Solutions (473),2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().numSubarrayBoundedMax(nums, left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubarrayBoundedMax(self, nums: List[int], left: int, right: int) -> int:
        count = 0
        result = 0
        start = 0
        
        for end in range(len(nums)):
            if left <= nums[end] <= right:
                count = end - start + 1
                result += count
            elif nums[end] < left:
                result += count
            else:
                count = 0
                start = end + 1
                
        return result"
False,0,0,812,rotate-string,Rotate String,rotate-string,False,201108,364698,796,False,1,"Can you solve this real interview question? Rotate String - Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.

A shift on s consists of moving the leftmost character of s to the rightmost position.

 * For example, if s = ""abcde"", then it will be ""bcdea"" after one shift.

 

Example 1:

Input: s = ""abcde"", goal = ""cdeab""
Output: true


Example 2:

Input: s = ""abcde"", goal = ""abced""
Output: false


 

Constraints:

 * 1 <= s.length, goal.length <= 100
 * s and goal consist of lowercase English letters.",Solutions (2K),2.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/rotate-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    goal: str = deserialize(""str"", read_line())
    ans = Solution().rotateString(s, goal)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def rotateString(self, s: str, goal: str) -> bool:
        return len(s) == len(goal) and goal in s + s"
False,0,0,813,all-paths-from-source-to-target,All Paths From Source to Target,all-paths-from-source-to-target,False,426671,518741,797,False,2,"Can you solve this real interview question? All Paths From Source to Target - Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg]


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg]


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]


 

Constraints:

 * n == graph.length
 * 2 <= n <= 15
 * 0 <= graph[i][j] < n
 * graph[i][j] != i (i.e., there will be no self-loops).
 * All the elements of graph[i] are unique.
 * The input graph is guaranteed to be a DAG.",Solutions (3.6K),6.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/all-paths-from-source-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().allPathsSourceTarget(graph)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(node, path):
            if node == len(graph) - 1:
                res.append(path)
            else:
                for nei in graph[node]:
                    dfs(nei, path + [nei])

        res = []
        dfs(0, [0])
        return res"
False,0,0,814,smallest-rotation-with-highest-score,Smallest Rotation with Highest Score,smallest-rotation-with-highest-score,False,11722,23318,798,False,3,"Can you solve this real interview question? Smallest Rotation with Highest Score - You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.

 * For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].

Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.

 

Example 1:


Input: nums = [2,3,1,4,0]
Output: 3
Explanation: Scores for each k are listed below: 
k = 0,  nums = [2,3,1,4,0],    score 2
k = 1,  nums = [3,1,4,0,2],    score 3
k = 2,  nums = [1,4,0,2,3],    score 3
k = 3,  nums = [4,0,2,3,1],    score 4
k = 4,  nums = [0,2,3,1,4],    score 3
So we should choose k = 3, which has the highest score.


Example 2:


Input: nums = [1,3,0,2,4]
Output: 0
Explanation: nums will always have 3 points no matter how it shifts.
So we will choose the smallest k, which is 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] < nums.length",Solutions (87),474,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-rotation-with-highest-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bestRotation(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().bestRotation(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bestRotation(self, nums: List[int]) -> int:
        pass"
False,0,0,815,champagne-tower,Champagne Tower,champagne-tower,False,83601,162905,799,False,2,"Can you solve this real interview question? Champagne Tower - We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row.  Each glass holds one cup of champagne.

Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)

For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png]

Now after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)

 

Example 1:


Input: poured = 1, query_row = 1, query_glass = 1
Output: 0.00000
Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.


Example 2:


Input: poured = 2, query_row = 1, query_glass = 1
Output: 0.50000
Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.


Example 3:


Input: poured = 100000009, query_row = 33, query_glass = 17
Output: 1.00000


 

Constraints:

 * 0 <= poured <= 109
 * 0 <= query_glass <= query_row < 100",Solutions (623),2.6K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/champagne-tower/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    poured: int = deserialize(""int"", read_line())
    query_row: int = deserialize(""int"", read_line())
    query_glass: int = deserialize(""int"", read_line())
    ans = Solution().champagneTower(poured, query_row, query_glass)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        dp = [[0.0] * k for k in range(1, 101)]
        dp[0][0] = poured
        for i in range(query_row):
            for j in range(i + 1):
                q = (dp[i][j] - 1.0) / 2.0
                if q > 0:
                    dp[i + 1][j] += q
                    dp[i + 1][j + 1] += q
        return min(1.0, dp[query_row][query_glass])"
False,0,0,819,minimum-swaps-to-make-sequences-increasing,Minimum Swaps To Make Sequences Increasing,minimum-swaps-to-make-sequences-increasing,False,62203,158299,801,False,3,"Can you solve this real interview question? Minimum Swaps To Make Sequences Increasing - You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].

 * For example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].

Return the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.

An array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].

 

Example 1:


Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]
Output: 1
Explanation: 
Swap nums1[3] and nums2[3]. Then the sequences are:
nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]
which are both strictly increasing.


Example 2:


Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]
Output: 1


 

Constraints:

 * 2 <= nums1.length <= 105
 * nums2.length == nums1.length
 * 0 <= nums1[i], nums2[i] <= 2 * 105",Solutions (372),2.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSwap(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwap(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        swap = [n] * n
        keep = [n] * n
        swap[0] = 1
        keep[0] = 0
        
        for i in range(1, n):
            if nums1[i] > nums1[i-1] and nums2[i] > nums2[i-1]:
                keep[i] = keep[i-1]
                swap[i] = swap[i-1] + 1
            
            if nums1[i] > nums2[i-1] and nums2[i] > nums1[i-1]:
                keep[i] = min(keep[i], swap[i-1])
                swap[i] = min(swap[i], keep[i-1] + 1)
        
        return min(swap[n-1], keep[n-1])"
False,0,0,820,find-eventual-safe-states,Find Eventual Safe States,find-eventual-safe-states,False,119401,211424,802,False,2,"Can you solve this real interview question? Find Eventual Safe States - There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].

A node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

 

Example 1:

Illustration of graph [https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png]


Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.
Nodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.
Every path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.

Example 2:


Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]
Explanation:
Only node 4 is a terminal node, and every path starting at node 4 leads to node 4.


 

Constraints:

 * n == graph.length
 * 1 <= n <= 104
 * 0 <= graph[i].length <= n
 * 0 <= graph[i][j] <= n - 1
 * graph[i] is sorted in a strictly increasing order.
 * The graph may contain self-loops.
 * The number of edges in the graph will be in the range [1, 4 * 104].",Solutions (1.1K),3.6K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/find-eventual-safe-states/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().eventualSafeNodes(graph)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:
        def dfs(node):
            if colors[node] != 0:
                return colors[node] == 1
            colors[node] = 2
            for neighbor in graph[node]:
                if not dfs(neighbor):
                    return False
            colors[node] = 1
            return True
        
        colors = [0] * len(graph)
        return [i for i in range(len(graph)) if dfs(i)]"
False,0,0,821,bricks-falling-when-hit,Bricks Falling When Hit,bricks-falling-when-hit,False,27648,80481,803,False,3,"Can you solve this real interview question? Bricks Falling When Hit - You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:

 * It is directly connected to the top of the grid, or
 * At least one other brick in its four adjacent cells is stable.

You are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).

Return an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.

 

Example 1:


Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
Output: [2]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
Hence the result is [2].


Example 2:


Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1), resulting in the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks are still stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,0,0,0]]
Once again, all remaining bricks are still stable, so no bricks fall.
Hence the result is [0,0].


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 200
 * grid[i][j] is 0 or 1.
 * 1 <= hits.length <= 4 * 104
 * hits[i].length == 2
 * 0 <= xi <= m - 1
 * 0 <= yi <= n - 1
 * All (xi, yi) are unique.",Solutions (104),966,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/bricks-falling-when-hit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    hits: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().hitBricks(grid, hits)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def hitBricks(self, grid: List[List[int]], hits: List[List[int]]) -> List[int]:
        # Write your code here
        pass"
False,0,0,822,unique-morse-code-words,Unique Morse Code Words,unique-morse-code-words,False,311465,376951,804,False,1,"Can you solve this real interview question? Unique Morse Code Words - International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:

 * 'a' maps to "".-"",
 * 'b' maps to ""-..."",
 * 'c' maps to ""-.-."", and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:


["".-"",""-..."",""-.-."",""-.."",""."",""..-."",""--."",""...."","".."","".---"",""-.-"","".-.."",""--"",""-."",""---"","".--."",""--.-"","".-."",""..."",""-"",""..-"",""...-"","".--"",""-..-"",""-.--"",""--..""]

Given an array of strings words where each word can be written as a concatenation of the Morse code of each letter.

 * For example, ""cab"" can be written as ""-.-..--..."", which is the concatenation of ""-.-."", "".-"", and ""-..."". We will call such a concatenation the transformation of a word.

Return the number of different transformations among all words we have.

 

Example 1:


Input: words = [""gin"",""zen"",""gig"",""msg""]
Output: 2
Explanation: The transformation of each word is:
""gin"" -> ""--...-.""
""zen"" -> ""--...-.""
""gig"" -> ""--...--.""
""msg"" -> ""--...--.""
There are 2 different transformations: ""--...-."" and ""--...--."".


Example 2:


Input: words = [""a""]
Output: 1


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 12
 * words[i] consists of lowercase English letters.",Solutions (3.3K),2.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-morse-code-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniqueMorseRepresentations(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().uniqueMorseRepresentations(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def uniqueMorseRepresentations(self, words: List[str]) -> int:
        morse_code = ["".-"", ""-..."", ""-.-."", ""-.."", ""."", ""..-."", ""--."", ""...."", "".."", "".---"", ""-.-"", "".-.."", ""--"", ""-."", ""---"", "".--."", ""--.-"", "".-."", ""..."", ""-"", ""..-"", ""...-"", "".--"", ""-..-"", ""-.--"", ""--..""]
        transformations = set()
        for word in words:
            transformation = """"
            for letter in word:
                transformation += morse_code[ord(letter) - ord('a')]
            transformations.add(transformation)
        return len(transformations)"
False,0,0,823,split-array-with-same-average,Split Array With Same Average,split-array-with-same-average,False,29983,116740,805,False,3,"Can you solve this real interview question? Split Array With Same Average - You are given an integer array nums.

You should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).

Return true if it is possible to achieve that and false otherwise.

Note that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.

 

Example 1:


Input: nums = [1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.


Example 2:


Input: nums = [3,1]
Output: false


 

Constraints:

 * 1 <= nums.length <= 30
 * 0 <= nums[i] <= 104",Solutions (207),1.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/split-array-with-same-average/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitArraySameAverage(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().splitArraySameAverage(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def splitArraySameAverage(self, nums: List[int]) -> bool:
        pass"
False,0,0,824,number-of-lines-to-write-string,Number of Lines To Write String,number-of-lines-to-write-string,False,63889,95858,806,False,1,"Can you solve this real interview question? Number of Lines To Write String - You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.

You are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.

Return an array result of length 2 where:

 * result[0] is the total number of lines.
 * result[1] is the width of the last line in pixels.

 

Example 1:


Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""abcdefghijklmnopqrstuvwxyz""
Output: [3,60]
Explanation: You can write s as follows:
abcdefghij  // 100 pixels wide
klmnopqrst  // 100 pixels wide
uvwxyz      // 60 pixels wide
There are a total of 3 lines, and the last line is 60 pixels wide.

Example 2:


Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""bbbcccdddaaa""
Output: [2,4]
Explanation: You can write s as follows:
bbbcccdddaa  // 98 pixels wide
a            // 4 pixels wide
There are a total of 2 lines, and the last line is 4 pixels wide.

 

Constraints:

 * widths.length == 26
 * 2 <= widths[i] <= 10
 * 1 <= s.length <= 1000
 * s contains only lowercase English letters.",Solutions (863),494,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-lines-to-write-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfLines(self, widths: List[int], s: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    widths: List[int] = deserialize(""List[int]"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().numberOfLines(widths, s)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numberOfLines(self, widths: List[int], s: str) -> List[int]:
        lines = 1
        pixels = 0
        
        for char in s:
            width = widths[ord(char) - ord('a')]
            pixels += width
            if pixels > 100:
                lines += 1
                pixels = width
                
        return [lines, pixels]"
False,0,0,825,max-increase-to-keep-city-skyline,Max Increase to Keep City Skyline,max-increase-to-keep-city-skyline,False,143798,167307,807,False,2,"Can you solve this real interview question? Max Increase to Keep City Skyline - There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.

A city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.

We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.

Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/21/807-ex1.png]


Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
Output: 35
Explanation: The building heights are shown in the center of the above image.
The skylines when viewed from each cardinal direction are drawn in red.
The grid after increasing the height of buildings without affecting skylines is:
gridNew = [ [8, 4, 8, 7],
            [7, 4, 7, 7],
            [9, 4, 8, 7],
            [3, 3, 3, 3] ]


Example 2:


Input: grid = [[0,0,0],[0,0,0],[0,0,0]]
Output: 0
Explanation: Increasing the height of any building will result in the skyline changing.


 

Constraints:

 * n == grid.length
 * n == grid[r].length
 * 2 <= n <= 50
 * 0 <= grid[r][c] <= 100",Solutions (1.3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/max-increase-to-keep-city-skyline/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxIncreaseKeepingSkyline(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:
        import numpy as np
        
        grid = np.array(grid)
        row_max = np.max(grid, axis=1)
        col_max = np.max(grid, axis=0)
        
        total_increase = 0
        
        for i in range(grid.shape[0]):
            for j in range(grid.shape[1]):
                total_increase += min(row_max[i], col_max[j]) - grid[i][j]
        
        return total_increase"
False,0,0,826,soup-servings,Soup Servings,soup-servings,False,17479,40236,808,False,2,"Can you solve this real interview question? Soup Servings - There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:

 1. Serve 100 ml of soup A and 0 ml of soup B,
 2. Serve 75 ml of soup A and 25 ml of soup B,
 3. Serve 50 ml of soup A and 50 ml of soup B, and
 4. Serve 25 ml of soup A and 75 ml of soup B.

When we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.

Note that we do not have an operation where all 100 ml's of soup B are used first.

Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: n = 50
Output: 0.62500
Explanation: If we choose the first two operations, A will become empty first.
For the third operation, A and B will become empty at the same time.
For the fourth operation, B will become empty first.
So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.


Example 2:


Input: n = 100
Output: 0.71875


 

Constraints:

 * 0 <= n <= 109",Solutions (118),320,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/soup-servings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def soupServings(self, n: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().soupServings(n)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def soupServings(self, n: int) -> float:
        pass"
False,0,0,827,expressive-words,Expressive Words,expressive-words,False,106928,231383,809,False,2,"Can you solve this real interview question? Expressive Words - Sometimes people repeat letters to represent extra feeling. For example:

 * ""hello"" -> ""heeellooo""
 * ""hi"" -> ""hiiii""

In these strings like ""heeellooo"", we have groups of adjacent letters that are all the same: ""h"", ""eee"", ""ll"", ""ooo"".

You are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.

 * For example, starting with ""hello"", we could do an extension on the group ""o"" to get ""hellooo"", but we cannot get ""helloo"" since the group ""oo"" has a size less than three. Also, we could do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"". If s = ""helllllooo"", then the query word ""hello"" would be stretchy because of these two extension operations: query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = s.

Return the number of query strings that are stretchy.

 

Example 1:


Input: s = ""heeellooo"", words = [""hello"", ""hi"", ""helo""]
Output: 1
Explanation: 
We can extend ""e"" and ""o"" in the word ""hello"" to get ""heeellooo"".
We can't extend ""helo"" to get ""heeellooo"" because the group ""ll"" is not size 3 or more.


Example 2:


Input: s = ""zzzzzyyyyy"", words = [""zzyy"",""zy"",""zyy""]
Output: 3


 

Constraints:

 * 1 <= s.length, words.length <= 100
 * 1 <= words[i].length <= 100
 * s and words[i] consist of lowercase letters.",Solutions (623),793,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/expressive-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def expressiveWords(self, s: str, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().expressiveWords(s, words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def expressiveWords(self, s: str, words: List[str]) -> int:
        def is_stretchy(word):
            i, j, m, n = 0, 0, len(s), len(word)
            for i in range(m):
                if j < n and s[i] == word[j]:
                    j += 1
                elif s[i - 1:i + 2] != s[i] * 3 != s[i - 1:i + 2]:
                    return False
            return j == n

        return sum(is_stretchy(word) for word in words)"
False,0,0,828,chalkboard-xor-game,Chalkboard XOR Game,chalkboard-xor-game,False,8056,14318,810,False,3,"Can you solve this real interview question? Chalkboard XOR Game - You are given an array of integers nums represents the numbers written on a chalkboard.

Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.

Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:


Input: nums = [1,1,2]
Output: false
Explanation: 
Alice has two choices: erase 1 or erase 2. 
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. 
If Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.


Example 2:


Input: nums = [0,1]
Output: true


Example 3:


Input: nums = [1,2,3]
Output: true


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] < 216",Solutions (72),184,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/chalkboard-xor-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def xorGame(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().xorGame(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def xorGame(self, nums: List[int]) -> bool:
        n = len(nums)
        xor = 0
        for num in nums:
            xor ^= num
        return xor == 0 or n % 2 == 0"
False,0,0,829,subdomain-visit-count,Subdomain Visit Count,subdomain-visit-count,False,207142,274352,811,False,2,"Can you solve this real interview question? Subdomain Visit Count - A website domain ""discuss.leetcode.com"" consists of various subdomains. At the top level, we have ""com"", at the next level, we have ""leetcode.com"" and at the lowest level, ""discuss.leetcode.com"". When we visit a domain like ""discuss.leetcode.com"", we will also visit the parent domains ""leetcode.com"" and ""com"" implicitly.

A count-paired domain is a domain that has one of the two formats ""rep d1.d2.d3"" or ""rep d1.d2"" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.

 * For example, ""9001 discuss.leetcode.com"" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.

Given an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.

 

Example 1:


Input: cpdomains = [""9001 discuss.leetcode.com""]
Output: [""9001 leetcode.com"",""9001 discuss.leetcode.com"",""9001 com""]
Explanation: We only have one website domain: ""discuss.leetcode.com"".
As discussed above, the subdomain ""leetcode.com"" and ""com"" will also be visited. So they will all be visited 9001 times.


Example 2:


Input: cpdomains = [""900 google.mail.com"", ""50 yahoo.com"", ""1 intel.mail.com"", ""5 wiki.org""]
Output: [""901 mail.com"",""50 yahoo.com"",""900 google.mail.com"",""5 wiki.org"",""5 org"",""1 intel.mail.com"",""951 com""]
Explanation: We will visit ""google.mail.com"" 900 times, ""yahoo.com"" 50 times, ""intel.mail.com"" once and ""wiki.org"" 5 times.
For the subdomains, we will visit ""mail.com"" 900 + 1 = 901 times, ""com"" 900 + 50 + 1 = 951 times, and ""org"" 5 times.


 

Constraints:

 * 1 <= cpdomain.length <= 100
 * 1 <= cpdomain[i].length <= 100
 * cpdomain[i] follows either the ""repi d1i.d2i.d3i"" format or the ""repi d1i.d2i"" format.
 * repi is an integer in the range [1, 104].
 * d1i, d2i, and d3i consist of lowercase English letters.",Solutions (1.3K),1.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/subdomain-visit-count/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    cpdomains: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().subdomainVisits(cpdomains)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def subdomainVisits(self, cpdomains: List[str]) -> List[str]:
        import collections
        
        count = collections.defaultdict(int)
        
        for cpdomain in cpdomains:
            cnt, domain = cpdomain.split()
            cnt = int(cnt)
            frags = domain.split('.')
            for i in range(len(frags)):
                count[""."".join(frags[i:])] += cnt
                
        return [f""{value} {key}"" for key, value in count.items()]"
False,0,0,830,largest-triangle-area,Largest Triangle Area,largest-triangle-area,False,40516,67611,812,False,1,"Can you solve this real interview question? Largest Triangle Area - Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png]


Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2.00000
Explanation: The five points are shown in the above figure. The red triangle is the largest.


Example 2:


Input: points = [[1,0],[0,0],[0,1]]
Output: 0.50000


 

Constraints:

 * 3 <= points.length <= 50
 * -50 <= xi, yi <= 50
 * All the given points are unique.",Solutions (294),463,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-triangle-area/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestTriangleArea(points)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def largestTriangleArea(self, points: List[List[int]]) -> float:
        pass"
False,0,0,831,largest-sum-of-averages,Largest Sum of Averages,largest-sum-of-averages,False,45880,86679,813,False,2,"Can you solve this real interview question? Largest Sum of Averages - You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.

Note that the partition must use every integer in nums, and that the score is not necessarily an integer.

Return the maximum score you can achieve of all the possible partitions. Answers within 10-6 of the actual answer will be accepted.

 

Example 1:


Input: nums = [9,1,2,3,9], k = 3
Output: 20.00000
Explanation: 
The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.
We could have also partitioned nums into [9, 1], [2], [3, 9], for example.
That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.


Example 2:


Input: nums = [1,2,3,4,5,6,7], k = 4
Output: 20.50000


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 104
 * 1 <= k <= nums.length",Solutions (424),1.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-sum-of-averages/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestSumOfAverages(self, nums: List[int], k: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().largestSumOfAverages(nums, k)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def largestSumOfAverages(self, nums: List[int], k: int) -> float:
        n = len(nums)
        dp = [[0.0] * (k + 1) for _ in range(n + 1)]
        
        total_sum = [0.0]
        for num in nums:
            total_sum.append(total_sum[-1] + num)
        
        for i in range(1, n + 1):
            dp[i][1] = total_sum[i] / i
        
        for i in range(1, n + 1):
            for j in range(2, k + 1):
                for p in range(j-1, i):
                    dp[i][j] = max(dp[i][j], dp[p][j-1] + (total_sum[i] - total_sum[p]) / (i - p))
        
        return dp[n][k]"
False,0,0,833,bus-routes,Bus Routes,bus-routes,False,121441,266374,815,False,3,"Can you solve this real interview question? Bus Routes - You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

 * For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.

You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:


Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.


Example 2:


Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1


 

Constraints:

 * 1 <= routes.length <= 500.
 * 1 <= routes[i].length <= 105
 * All the values of routes[i] are unique.
 * sum(routes[i].length) <= 105
 * 0 <= routes[i][j] < 106
 * 0 <= source, target < 106",Solutions (681),2.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/bus-routes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    routes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    source: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().numBusesToDestination(routes, source, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numBusesToDestination(self, routes: List[List[int]], source: int, target: int) -> int:
        pass"
False,0,0,834,ambiguous-coordinates,Ambiguous Coordinates,ambiguous-coordinates,False,27527,48881,816,False,2,"Can you solve this real interview question? Ambiguous Coordinates - We had some 2-dimensional coordinates, like ""(1, 3)"" or ""(2, 0.5)"". Then, we removed all commas, decimal points, and spaces and ended up with the string s.

 * For example, ""(1, 3)"" becomes s = ""(13)"" and ""(2, 0.5)"" becomes s = ""(205)"".

Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like "".1"".

The final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)

 

Example 1:


Input: s = ""(123)""
Output: [""(1, 2.3)"",""(1, 23)"",""(1.2, 3)"",""(12, 3)""]


Example 2:


Input: s = ""(0123)""
Output: [""(0, 1.23)"",""(0, 12.3)"",""(0, 123)"",""(0.1, 2.3)"",""(0.1, 23)"",""(0.12, 3)""]
Explanation: 0.0, 00, 0001 or 00.01 are not allowed.


Example 3:


Input: s = ""(00011)""
Output: [""(0, 0.011)"",""(0.001, 1)""]


 

Constraints:

 * 4 <= s.length <= 12
 * s[0] == '(' and s[s.length - 1] == ')'.
 * The rest of s are digits.",Solutions (216),291,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/ambiguous-coordinates/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def ambiguousCoordinates(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().ambiguousCoordinates(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def ambiguousCoordinates(self, s: str) -> List[str]:
        def valid_nums(s):
            if s == ""0"" or s[0] != ""0"":
                yield s
            for i in range(1, len(s)):
                if (s[:i] == ""0"" or s[0] != ""0"") and (s[-1] != ""0"" or s[i:] == ""0""):
                    yield s[:i] + (""."" if i != len(s) else """") + s[i:]
        
        s = s[1:-1]
        n = len(s)
        res = []
        
        for i in range(1, n):
            for a, b in itertools.product(valid_nums(s[:i]), valid_nums(s[i:])):
                res.append(f""({a}, {b})"")
        
        return res"
False,0,0,836,race-car,Race Car,race-car,False,74743,172548,818,False,3,"Can you solve this real interview question? Race Car - Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):

 * When you get an instruction 'A', your car does the following:
   * position += speed
   * speed *= 2
 * When you get an instruction 'R', your car does the following:
   * If your speed is positive then speed = -1
   * otherwise speed = 1
   Your position stays the same.

For example, after commands ""AAR"", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.

Given a target position target, return the length of the shortest sequence of instructions to get there.

 

Example 1:


Input: target = 3
Output: 2
Explanation: 
The shortest instruction sequence is ""AA"".
Your position goes from 0 --> 1 --> 3.


Example 2:


Input: target = 6
Output: 5
Explanation: 
The shortest instruction sequence is ""AAARA"".
Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.


 

Constraints:

 * 1 <= target <= 104",Solutions (306),1.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/race-car/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def racecar(self, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    ans = Solution().racecar(target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def racecar(self, target: int) -> int:
        dp = [0] + [float('inf')] * (target)
        for t in range(1, target + 1):
            k = t.bit_length()
            if t == 2 ** k - 1:
                dp[t] = k
                continue
            for j in range(k - 1):
                dp[t] = min(dp[t], dp[t - 2 ** (k - 1) + 2 ** j] + k - 1 + j + 2)
            dp[t] = min(dp[t], k + 1 + dp[2 ** k - 1 - t])
        return dp[target]"
False,0,0,837,most-common-word,Most Common Word,most-common-word,False,322429,720391,819,False,1,"Can you solve this real interview question? Most Common Word - Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in paragraph are case-insensitive and the answer should be returned in lowercase.

 

Example 1:


Input: paragraph = ""Bob hit a ball, the hit BALL flew far after it was hit."", banned = [""hit""]
Output: ""ball""
Explanation: 
""hit"" occurs 3 times, but it is a banned word.
""ball"" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as ""ball,""), 
and that ""hit"" isn't the answer even though it occurs more because it is banned.


Example 2:


Input: paragraph = ""a."", banned = []
Output: ""a""


 

Constraints:

 * 1 <= paragraph.length <= 1000
 * paragraph consists of English letters, space ' ', or one of the symbols: ""!?',;."".
 * 0 <= banned.length <= 100
 * 1 <= banned[i].length <= 10
 * banned[i] consists of only lowercase English letters.",Solutions (1.7K),1.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/most-common-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    paragraph: str = deserialize(""str"", read_line())
    banned: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().mostCommonWord(paragraph, banned)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def mostCommonWord(self, paragraph: str, banned: List[str]) -> str:
        import re
        from collections import Counter
        
        words = re.findall(r'\w+', paragraph.lower())
        words = [word for word in words if word not in set(banned)]
        
        word_freq = Counter(words)
        
        max_freq_word, _ = max(word_freq.items(), key=lambda x: x[1])
        
        return max_freq_word"
False,0,0,839,short-encoding-of-words,Short Encoding of Words,short-encoding-of-words,False,91420,150863,820,False,2,"Can you solve this real interview question? Short Encoding of Words - A valid encoding of an array of words is any reference string s and array of indices indices such that:

 * words.length == indices.length
 * The reference string s ends with the '#' character.
 * For each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].

Given an array of words, return the length of the shortest reference string s possible of any valid encoding of words.

 

Example 1:


Input: words = [""time"", ""me"", ""bell""]
Output: 10
Explanation: A valid encoding would be s = ""time#bell#"" and indices = [0, 2, 5].
words[0] = ""time"", the substring of s starting from indices[0] = 0 to the next '#' is underlined in ""time#bell#""
words[1] = ""me"", the substring of s starting from indices[1] = 2 to the next '#' is underlined in ""time#bell#""
words[2] = ""bell"", the substring of s starting from indices[2] = 5 to the next '#' is underlined in ""time#bell#""


Example 2:


Input: words = [""t""]
Output: 2
Explanation: A valid encoding would be s = ""t#"" and indices = [0].


 

Constraints:

 * 1 <= words.length <= 2000
 * 1 <= words[i].length <= 7
 * words[i] consists of only lowercase letters.",Solutions (994),1.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/short-encoding-of-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumLengthEncoding(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minimumLengthEncoding(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumLengthEncoding(self, words: List[str]) -> int:
        word_set = set(words)
        for word in words:
            for i in range(1, len(word)):
                word_set.discard(word[i:])
        return sum(len(word) + 1 for word in word_set)"
False,0,0,841,shortest-distance-to-a-character,Shortest Distance to a Character,shortest-distance-to-a-character,False,155667,218205,821,False,1,"Can you solve this real interview question? Shortest Distance to a Character - Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

 

Example 1:


Input: s = ""loveleetcode"", c = ""e""
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.


Example 2:


Input: s = ""aaab"", c = ""b""
Output: [3,2,1,0]


 

Constraints:

 * 1 <= s.length <= 104
 * s[i] and c are lowercase English letters.
 * It is guaranteed that c occurs at least once in s.",Solutions (1.8K),2.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-distance-to-a-character/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestToChar(self, s: str, c: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    c: str = deserialize(""str"", read_line())
    ans = Solution().shortestToChar(s, c)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def shortestToChar(self, s: str, c: str) -> List[int]:
        res = []
        idx = [i for i, char in enumerate(s) if char == c]
        for i in range(len(s)):
            res.append(min([abs(i - j) for j in idx]))
        return res"
False,0,0,842,card-flipping-game,Card Flipping Game,card-flipping-game,False,15200,33089,822,False,2,"Can you solve this real interview question? Card Flipping Game - You are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. Initially, each card is placed on a table such that the front number is facing up and the other is facing down. You may flip over any number of cards (possibly zero).

After flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.

Return the minimum possible good integer after flipping the cards. If there are no good integers, return 0.

 

Example 1:


Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
Output: 2
Explanation:
If we flip the second card, the face up numbers are [1,3,4,4,7] and the face down are [1,2,4,1,3].
2 is the minimum good integer as it appears facing down but not facing up.
It can be shown that 2 is the minimum possible good integer obtainable after flipping some cards.


Example 2:


Input: fronts = [1], backs = [1]
Output: 0
Explanation:
There are no good integers no matter how we flip the cards, so we return 0.


 

Constraints:

 * n == fronts.length == backs.length
 * 1 <= n <= 1000
 * 1 <= fronts[i], backs[i] <= 2000",Solutions (131),144,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/card-flipping-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    fronts: List[int] = deserialize(""List[int]"", read_line())
    backs: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().flipgame(fronts, backs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        return min(front for front, back in zip(fronts, backs) if front != back and front not in backs) or 0"
False,0,0,843,binary-trees-with-factors,Binary Trees With Factors,binary-trees-with-factors,False,89541,180157,823,False,2,"Can you solve this real interview question? Binary Trees With Factors - Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

 

Example 1:


Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]

Example 2:


Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].

 

Constraints:

 * 1 <= arr.length <= 1000
 * 2 <= arr[i] <= 109
 * All the values of arr are unique.",Solutions (768),2.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-trees-with-factors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numFactoredBinaryTrees(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        MOD = 10**9 + 7
        
        arr.sort()
        dp = {}
        
        for i in arr:
            dp[i] = 1
            for j in arr:
                if j > i**0.5:
                    break
                if i % j == 0 and i // j in dp:
                    dp[i] += dp[j] * dp[i//j] if i // j != j else dp[j] * dp[i//j]
                    
        return sum(dp.values()) % MOD"
False,0,0,851,goat-latin,Goat Latin,goat-latin,False,155905,229486,824,False,1,"Can you solve this real interview question? Goat Latin - You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to ""Goat Latin"" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:

 * If a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append ""ma"" to the end of the word.
   * For example, the word ""apple"" becomes ""applema"".
 * If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add ""ma"".
   * For example, the word ""goat"" becomes ""oatgma"".
 * Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
   * For example, the first word gets ""a"" added to the end, the second word gets ""aa"" added to the end, and so on.

Return the final sentence representing the conversion from sentence to Goat Latin.

 

Example 1:

Input: sentence = ""I speak Goat Latin""
Output: ""Imaa peaksmaaa oatGmaaaa atinLmaaaaa""


Example 2:

Input: sentence = ""The quick brown fox jumped over the lazy dog""
Output: ""heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa""


 

Constraints:

 * 1 <= sentence.length <= 150
 * sentence consists of English letters and spaces.
 * sentence has no leading or trailing spaces.
 * All the words in sentence are separated by a single space.",Solutions (1.5K),793,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/goat-latin/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def toGoatLatin(self, sentence: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    ans = Solution().toGoatLatin(sentence)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def toGoatLatin(self, sentence: str) -> str:
        vowels = set('aeiouAEIOU')
        words = sentence.split()
        
        result = []
        for i, word in enumerate(words):
            if word[0] in vowels:
                result.append(word + 'ma' + 'a'*(i+1))
            else:
                result.append(word[1:] + word[0] + 'ma' + 'a'*(i+1))
        
        return ' '.join(result)"
False,0,0,852,friends-of-appropriate-ages,Friends Of Appropriate Ages,friends-of-appropriate-ages,False,70768,152839,825,False,2,"Can you solve this real interview question? Friends Of Appropriate Ages - There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

 * age[y] <= 0.5 * age[x] + 7
 * age[y] > age[x]
 * age[y] > 100 && age[x] < 100

Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.

 

Example 1:


Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.


Example 2:


Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.


Example 3:


Input: ages = [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.


 

Constraints:

 * n == ages.length
 * 1 <= n <= 2 * 104
 * 1 <= ages[i] <= 120",Solutions (320),634,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/friends-of-appropriate-ages/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numFriendRequests(self, ages: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ages: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numFriendRequests(ages)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numFriendRequests(self, ages: List[int]) -> int:
        def request(a, b):
            return not (b <= 0.5 * a + 7 or b > a or (b > 100 and a < 100))
        
        count = 0
        age_count = Counter(ages)
        
        for age1 in age_count:
            for age2 in age_count:
                if request(age1, age2):
                    count += age_count[age1] * (age_count[age2] - (age1 == age2))
        
        return count"
False,0,0,853,most-profit-assigning-work,Most Profit Assigning Work,most-profit-assigning-work,False,52991,118188,826,False,2,"Can you solve this real interview question? Most Profit Assigning Work - You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:

 * difficulty[i] and profit[i] are the difficulty and the profit of the ith job, and
 * worker[j] is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).

Every worker can be assigned at most one job, but one job can be completed multiple times.

 * For example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.

Return the maximum profit we can achieve after assigning the workers to the jobs.

 

Example 1:


Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.


Example 2:


Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]
Output: 0


 

Constraints:

 * n == difficulty.length
 * n == profit.length
 * m == worker.length
 * 1 <= n, m <= 104
 * 1 <= difficulty[i], profit[i], worker[i] <= 105",Solutions (518),1.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/most-profit-assigning-work/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    difficulty: List[int] = deserialize(""List[int]"", read_line())
    profit: List[int] = deserialize(""List[int]"", read_line())
    worker: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProfitAssignment(difficulty, profit, worker)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfitAssignment(self, difficulty: List[int], profit: List[int], worker: List[int]) -> int:
        from bisect import bisect_right
        jobs = sorted(zip(difficulty, profit))
        worker.sort()
        max_profit = 0
        curr_max = 0
        i = 0
        for ability in worker:
            while i < len(jobs) and jobs[i][0] <= ability:
                curr_max = max(curr_max, jobs[i][1])
                i += 1
            max_profit += curr_max
        return max_profit"
False,0,0,854,making-a-large-island,Making A Large Island,making-a-large-island,False,127859,285190,827,False,3,"Can you solve this real interview question? Making A Large Island - You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:


Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.


Example 2:


Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.

Example 3:


Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.


 

Constraints:

 * n == grid.length
 * n == grid[i].length
 * 1 <= n <= 500
 * grid[i][j] is either 0 or 1.",Solutions (948),3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/making-a-large-island/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestIsland(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestIsland(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,855,unique-letter-string,Count Unique Characters of All Substrings of a Given String,count-unique-characters-of-all-substrings-of-a-given-string,False,63447,122978,828,False,3,"Can you solve this real interview question? Count Unique Characters of All Substrings of a Given String - Let's define a function countUniqueChars(s) that returns the number of unique characters on s.

 * For example, calling countUniqueChars(s) if s = ""LEETCODE"" then ""L"", ""T"", ""C"", ""O"", ""D"" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.

Given a string s, return the sum of countUniqueChars(t) where t is a substring of s. The test cases are generated such that the answer fits in a 32-bit integer.

Notice that some substrings can be repeated so in this case you have to count the repeated ones too.

 

Example 1:


Input: s = ""ABC""
Output: 10
Explanation: All possible substrings are: ""A"",""B"",""C"",""AB"",""BC"" and ""ABC"".
Every substring is composed with only unique letters.
Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10


Example 2:


Input: s = ""ABA""
Output: 8
Explanation: The same as example 1, except countUniqueChars(""ABA"") = 1.


Example 3:


Input: s = ""LEETCODE""
Output: 92


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of uppercase English letters only.",Solutions (450),1.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniqueLetterString(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().uniqueLetterString(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def uniqueLetterString(self, s: str) -> int:
        pass"
False,0,0,856,consecutive-numbers-sum,Consecutive Numbers Sum,consecutive-numbers-sum,False,77768,187068,829,False,3,"Can you solve this real interview question? Consecutive Numbers Sum - Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.

 

Example 1:


Input: n = 5
Output: 2
Explanation: 5 = 2 + 3


Example 2:


Input: n = 9
Output: 3
Explanation: 9 = 4 + 5 = 2 + 3 + 4


Example 3:


Input: n = 15
Output: 4
Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5


 

Constraints:

 * 1 <= n <= 109",Solutions (455),1.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/consecutive-numbers-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def consecutiveNumbersSum(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().consecutiveNumbersSum(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def consecutiveNumbersSum(self, n: int) -> int:
        count = 1
        for k in range(2, int((2 * n) ** 0.5) + 1):
            if (n - (k * (k - 1)) // 2) % k == 0:
                count += 1
        return count"
False,0,0,857,positions-of-large-groups,Positions of Large Groups,positions-of-large-groups,False,81789,157895,830,False,1,"Can you solve this real interview question? Positions of Large Groups - In a string s of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like s = ""abbxxxxzyy"" has the groups ""a"", ""bb"", ""xxxx"", ""z"", and ""yy"".

A group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. In the above example, ""xxxx"" has the interval [3,6].

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.

 

Example 1:


Input: s = ""abbxxxxzzy""
Output: [[3,6]]
Explanation: ""xxxx"" is the only large group with start index 3 and end index 6.


Example 2:


Input: s = ""abc""
Output: []
Explanation: We have groups ""a"", ""b"", and ""c"", none of which are large groups.


Example 3:


Input: s = ""abcdddeeeeaabbbcd""
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are ""ddd"", ""eeee"", and ""bbb"".


 

Constraints:

 * 1 <= s.length <= 1000
 * s contains lowercase English letters only.",Solutions (841),761,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/positions-of-large-groups/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largeGroupPositions(self, s: str) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().largeGroupPositions(s)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def largeGroupPositions(self, s: str) -> List[List[int]]:
        result = []
        start = 0
        for i in range(len(s)):
            if i == len(s) - 1 or s[i] != s[i + 1]:
                if i - start >= 2:
                    result.append([start, i])
                start = i + 1
        return result"
False,0,0,858,masking-personal-information,Masking Personal Information,masking-personal-information,False,16489,34889,831,False,2,"Can you solve this real interview question? Masking Personal Information - You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.

Email address:

An email address is:

 * A name consisting of uppercase and lowercase English letters, followed by
 * The '@' symbol, followed by
 * The domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).

To mask an email:

 * The uppercase letters in the name and domain must be converted to lowercase letters.
 * The middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks ""*****"".

Phone number:

A phone number is formatted as follows:

 * The phone number contains 10-13 digits.
 * The last 10 digits make up the local number.
 * The remaining 0-3 digits, in the beginning, make up the country code.
 * Separation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.

To mask a phone number:

 * Remove all separation characters.
 * The masked phone number should have the form:
   * ""***-***-XXXX"" if the country code has 0 digits.
   * ""+*-***-***-XXXX"" if the country code has 1 digit.
   * ""+**-***-***-XXXX"" if the country code has 2 digits.
   * ""+***-***-***-XXXX"" if the country code has 3 digits.
 * ""XXXX"" is the last 4 digits of the local number.

 

Example 1:


Input: s = ""LeetCode@LeetCode.com""
Output: ""l*****e@leetcode.com""
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.


Example 2:


Input: s = ""AB@qq.com""
Output: ""a*****b@qq.com""
Explanation: s is an email address.
The name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.
Note that even though ""ab"" is 2 characters, it still must have 5 asterisks in the middle.


Example 3:


Input: s = ""1(234)567-890""
Output: ""***-***-7890""
Explanation: s is a phone number.
There are 10 digits, so the local number is 10 digits and the country code is 0 digits.
Thus, the resulting masked number is ""***-***-7890"".


 

Constraints:

 * s is either a valid email or a phone number.
 * If s is an email:
   * 8 <= s.length <= 40
   * s consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.
 * If s is a phone number:
   * 10 <= s.length <= 20
   * s consists of digits, spaces, and the symbols '(', ')', '-', and '+'.",Solutions (189),143,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/masking-personal-information/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maskPII(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maskPII(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def maskPII(self, s: str) -> str:
        if '@' in s:
            name, domain = s.lower().split('@')
            return '{}*****{}@{}'.format(name[0], name[-1], domain)
        else:
            digits = ''.join(filter(str.isdigit, s))
            local = '***-***-{}'.format(digits[-4:])
            if len(digits) == 10:
                return local
            return '+{}-'.format('*'*(len(digits)-10)) + local"
False,0,0,861,flipping-an-image,Flipping an Image,flipping-an-image,False,353601,437788,832,False,1,"Can you solve this real interview question? Flipping an Image - Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

 * For example, flipping [1,1,0] horizontally results in [0,1,1].

To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.

 * For example, inverting [0,1,1] results in [1,0,0].

 

Example 1:


Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].
Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]


Example 2:


Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].
Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]


 

Constraints:

 * n == image.length
 * n == image[i].length
 * 1 <= n <= 20
 * images[i][j] is either 0 or 1.",Solutions (3.8K),2.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/flipping-an-image/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    image: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().flipAndInvertImage(image)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def flipAndInvertImage(self, image: List[List[int]]) -> List[List[int]]:
        return [[1 - pixel for pixel in row[::-1]] for row in image]"
False,0,0,862,find-and-replace-in-string,Find And Replace in String,find-and-replace-in-string,False,133393,247061,833,False,2,"Can you solve this real interview question? Find And Replace in String - You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.

To complete the ith replacement operation:

 1. Check if the substring sources[i] occurs at index indices[i] in the original string s.
 2. If it does not occur, do nothing.
 3. Otherwise if it does occur, replace that substring with targets[i].

For example, if s = ""abcd"", indices[i] = 0, sources[i] = ""ab"", and targets[i] = ""eee"", then the result of this replacement will be ""eeecd"".

All replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.

 * For example, a testcase with s = ""abc"", indices = [0, 1], and sources = [""ab"",""bc""] will not be generated because the ""ab"" and ""bc"" replacements overlap.

Return the resulting string after performing all replacement operations on s.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/12/833-ex1.png]


Input: s = ""abcd"", indices = [0, 2], sources = [""a"", ""cd""], targets = [""eee"", ""ffff""]
Output: ""eeebffff""
Explanation:
""a"" occurs at index 0 in s, so we replace it with ""eee"".
""cd"" occurs at index 2 in s, so we replace it with ""ffff"".


Example 2:

[https://assets.leetcode.com/uploads/2021/06/12/833-ex2-1.png]


Input: s = ""abcd"", indices = [0, 2], sources = [""ab"",""ec""], targets = [""eee"",""ffff""]
Output: ""eeecd""
Explanation:
""ab"" occurs at index 0 in s, so we replace it with ""eee"".
""ec"" does not occur at index 2 in s, so we do nothing.


 

Constraints:

 * 1 <= s.length <= 1000
 * k == indices.length == sources.length == targets.length
 * 1 <= k <= 100
 * 0 <= indexes[i] < s.length
 * 1 <= sources[i].length, targets[i].length <= 50
 * s consists of only lowercase English letters.
 * sources[i] and targets[i] consist of only lowercase English letters.",Solutions (866),1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/find-and-replace-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findReplaceString(self, s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    indices: List[int] = deserialize(""List[int]"", read_line())
    sources: List[str] = deserialize(""List[str]"", read_line())
    targets: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findReplaceString(s, indices, sources, targets)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def findReplaceString(self, s: str, indices: List[int], sources: List[str], targets: List[str]) -> str:
        ans = list(s)
        for i, idx in enumerate(indices):
            if s[idx:].startswith(sources[i]):
                ans[idx:idx + len(sources[i])] = list(targets[i])
        return ''.join(ans)"
False,0,0,863,sum-of-distances-in-tree,Sum of Distances in Tree,sum-of-distances-in-tree,False,80615,136317,834,False,3,"Can you solve this real interview question? Sum of Distances in Tree - There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Return an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist1.jpg]


Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: The tree is shown above.
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.
Hence, answer[0] = 8, and so on.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist2.jpg]


Input: n = 1, edges = []
Output: [0]


Example 3:

[https://assets.leetcode.com/uploads/2021/07/23/lc-sumdist3.jpg]


Input: n = 2, edges = [[1,0]]
Output: [1,1]


 

Constraints:

 * 1 <= n <= 3 * 104
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * The given input represents a valid tree.",Solutions (567),4.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-distances-in-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().sumOfDistancesInTree(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        # Your code here
        pass"
False,0,0,864,image-overlap,Image Overlap,image-overlap,False,88413,138464,835,False,2,"Can you solve this real interview question? Image Overlap - You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.

We translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.

Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.

Return the largest possible overlap.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg]


Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We translate img1 to right by 1 unit and down by 1 unit.
[https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg]
The number of positions that have a 1 in both images is 3 (shown in red).
[https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg]


Example 2:


Input: img1 = [[1]], img2 = [[1]]
Output: 1


Example 3:


Input: img1 = [[0]], img2 = [[0]]
Output: 0


 

Constraints:

 * n == img1.length == img1[i].length
 * n == img2.length == img2[i].length
 * 1 <= n <= 30
 * img1[i][j] is either 0 or 1.
 * img2[i][j] is either 0 or 1.",Solutions (682),1.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/image-overlap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    img1: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    img2: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestOverlap(img1, img2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestOverlap(self, img1: List[List[int]], img2: List[List[int]]) -> int:
        pass  # Your code here"
False,0,0,866,rectangle-overlap,Rectangle Overlap,rectangle-overlap,False,122042,278173,836,False,1,"Can you solve this real interview question? Rectangle Overlap - An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.

 

Example 1:

Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true


Example 2:

Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false


Example 3:

Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false


 

Constraints:

 * rec1.length == 4
 * rec2.length == 4
 * -109 <= rec1[i], rec2[i] <= 109
 * rec1 and rec2 represent a valid rectangle with a non-zero area.",Solutions (654),1.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/rectangle-overlap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    rec1: List[int] = deserialize(""List[int]"", read_line())
    rec2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isRectangleOverlap(rec1, rec2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isRectangleOverlap(self, rec1: List[int], rec2: List[int]) -> bool:
        return not (rec1[2] <= rec2[0] or  # left
                    rec1[3] <= rec2[1] or  # bottom
                    rec1[0] >= rec2[2] or  # right
                    rec1[1] >= rec2[3])     # top"
False,0,0,867,new-21-game,New 21 Game,new-21-game,False,34577,95500,837,False,2,"Can you solve this real interview question? New 21 Game - Alice plays the following game, loosely based on the card game ""21"".

Alice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets k or more points.

Return the probability that Alice has n or fewer points.

Answers within 10-5 of the actual answer are considered accepted.

 

Example 1:


Input: n = 10, k = 1, maxPts = 10
Output: 1.00000
Explanation: Alice gets a single card, then stops.


Example 2:


Input: n = 6, k = 1, maxPts = 10
Output: 0.60000
Explanation: Alice gets a single card, then stops.
In 6 out of 10 possibilities, she is at or below 6 points.


Example 3:


Input: n = 21, k = 17, maxPts = 10
Output: 0.73278


 

Constraints:

 * 0 <= k <= n <= 104
 * 1 <= maxPts <= 104",Solutions (136),1.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/new-21-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    maxPts: int = deserialize(""int"", read_line())
    ans = Solution().new21Game(n, k, maxPts)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def new21Game(self, n: int, k: int, maxPts: int) -> float:
        dp = [0.0] * (n + maxPts + 1)
        total = 0.0
        
        for i in range(k, min(n, k + maxPts) + 1):
            dp[i] = 1.0
            total += 1.0
        
        for i in range(k - 1, -1, -1):
            dp[i] = total / maxPts
            total = total - dp[i + maxPts] + dp[i]
        
        return dp[0]"
False,0,0,868,push-dominoes,Push Dominoes,push-dominoes,False,111863,196314,838,False,2,"Can you solve this real interview question? Push Dominoes - There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

You are given a string dominoes representing the initial state where:

 * dominoes[i] = 'L', if the ith domino has been pushed to the left,
 * dominoes[i] = 'R', if the ith domino has been pushed to the right, and
 * dominoes[i] = '.', if the ith domino has not been pushed.

Return a string representing the final state.

 

Example 1:


Input: dominoes = ""RR.L""
Output: ""RR.L""
Explanation: The first domino expends no additional force on the second domino.


Example 2:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png]


Input: dominoes = "".L.R...LR..L..""
Output: ""LL.RR.LLRRLL..""


 

Constraints:

 * n == dominoes.length
 * 1 <= n <= 105
 * dominoes[i] is either 'L', 'R', or '.'.",Solutions (1.2K),3.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/push-dominoes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pushDominoes(self, dominoes: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    dominoes: str = deserialize(""str"", read_line())
    ans = Solution().pushDominoes(dominoes)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def pushDominoes(self, dominoes: str) -> str:
        pass"
False,0,0,869,similar-string-groups,Similar String Groups,similar-string-groups,False,63995,133403,839,False,3,"Can you solve this real interview question? Similar String Groups - Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y. Also two strings X and Y are similar if they are equal.

For example, ""tars"" and ""rats"" are similar (swapping at positions 0 and 2), and ""rats"" and ""arts"" are similar, but ""star"" is not similar to ""tars"", ""rats"", or ""arts"".

Together, these form two connected groups by similarity: {""tars"", ""rats"", ""arts""} and {""star""}.  Notice that ""tars"" and ""arts"" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?

 

Example 1:


Input: strs = [""tars"",""rats"",""arts"",""star""]
Output: 2


Example 2:


Input: strs = [""omv"",""ovm""]
Output: 1


 

Constraints:

 * 1 <= strs.length <= 300
 * 1 <= strs[i].length <= 300
 * strs[i] consists of lowercase letters only.
 * All words in strs have the same length and are anagrams of each other.",Solutions (547),1.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/similar-string-groups/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numSimilarGroups(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSimilarGroups(self, strs: List[str]) -> int:
        def is_similar(a, b):
            diff = [(x, y) for x, y in zip(a, b) if x != y]
            return len(diff) == 2 and diff[0] == diff[1][::-1]

        def dfs(node):
            for nei, sim in graph[node]:
                if nei not in seen:
                    seen.add(nei)
                    dfs(nei)

        n = len(strs)
        n_word = len(strs[0])
        graph = {i: [] for i in range(n)}
        for i in range(n):
            for j in range(i + 1, n):
                if is_similar(strs[i], strs[j]):
                    graph[i].append((j, True))
                    graph[j].append((i, True))

        groups = 0
        seen = set()
        for i in range(n):
            if i not in seen:
                groups += 1
                seen.add(i)
                dfs(i)

        return groups"
False,0,0,870,magic-squares-in-grid,Magic Squares In Grid,magic-squares-in-grid,False,35033,90711,840,False,2,"Can you solve this real interview question? Magic Squares In Grid - A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.

Given a row x col grid of integers, how many 3 x 3 ""magic square"" subgrids are there?  (Each subgrid is contiguous).

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg]


Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:
[https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg]
while this one is not:
[https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg]
In total, there is only one magic square inside the given grid.


Example 2:


Input: grid = [[8]]
Output: 0


 

Constraints:

 * row == grid.length
 * col == grid[i].length
 * 1 <= row, col <= 10
 * 0 <= grid[i][j] <= 15",Solutions (319),291,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/magic-squares-in-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numMagicSquaresInside(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numMagicSquaresInside(self, grid: List[List[int]]) -> int:
        def isMagic(i, j):
            s = ''.join(str(grid[i + x // 3][j + x % 3]) for x in [0, 1, 2, 5, 8, 7, 6, 3])
            return grid[i + 1][j + 1] == 5 and sorted(s) == list('123456789')
        
        return sum(isMagic(i, j) for i in range(len(grid) - 2) for j in range(len(grid[0]) - 2))"
False,0,0,871,keys-and-rooms,Keys and Rooms,keys-and-rooms,False,312220,436662,841,False,2,"Can you solve this real interview question? Keys and Rooms - There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

 

Example 1:


Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.


Example 2:


Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.


 

Constraints:

 * n == rooms.length
 * 2 <= n <= 1000
 * 0 <= rooms[i].length <= 1000
 * 1 <= sum(rooms[i].length) <= 3000
 * 0 <= rooms[i][j] < n
 * All the values of rooms[i] are unique.",Solutions (3.7K),5.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/keys-and-rooms/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    rooms: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().canVisitAllRooms(rooms)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        visited = set()
        keys = [0]
        
        while keys:
            key = keys.pop()
            visited.add(key)
            for new_key in rooms[key]:
                if new_key not in visited:
                    keys.append(new_key)
        
        return len(visited) == len(rooms)"
False,0,0,872,split-array-into-fibonacci-sequence,Split Array into Fibonacci Sequence,split-array-into-fibonacci-sequence,False,35004,91122,842,False,2,"Can you solve this real interview question? Split Array into Fibonacci Sequence - You are given a string of digits num, such as ""123456579"". We can split it into a Fibonacci-like sequence [123, 456, 579].

Formally, a Fibonacci-like sequence is a list f of non-negative integers such that:

 * 0 <= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),
 * f.length >= 3, and
 * f[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.

Note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from num, or return [] if it cannot be done.

 

Example 1:


Input: num = ""1101111""
Output: [11,0,11,11]
Explanation: The output [110, 1, 111] would also be accepted.


Example 2:


Input: num = ""112358130""
Output: []
Explanation: The task is impossible.


Example 3:


Input: num = ""0123""
Output: []
Explanation: Leading zeroes are not allowed, so ""01"", ""2"", ""3"" is not valid.


 

Constraints:

 * 1 <= num.length <= 200
 * num contains only digits.",Solutions (342),1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/split-array-into-fibonacci-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitIntoFibonacci(self, num: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().splitIntoFibonacci(num)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def splitIntoFibonacci(self, num: str) -> List[int]:
        # Implementation of the splitIntoFibonacci function
        # Your code here

        return []"
False,0,0,873,,Guess the Word,guess-the-word,False,130273,314697,843,False,3,"Can you solve this real interview question? Guess the Word - You are given an array of unique strings words where words[i] is six letters long. One word of words was chosen as a secret word.

You are also given the helper object Master. You may call Master.guess(word) where word is a six-letter-long string, and it must be from words. Master.guess(word) returns:

 * -1 if word is not from words, or
 * an integer representing the number of exact matches (value and position) of your guess to the secret word.

There is a parameter allowedGuesses for each test case where allowedGuesses is the maximum number of times you can call Master.guess(word).

For each test case, you should call Master.guess with the secret word without exceeding the maximum number of allowed guesses. You will get:

 * ""Either you took too many guesses, or you did not find the secret word."" if you called Master.guess more than allowedGuesses times or if you did not call Master.guess with the secret word, or
 * ""You guessed the secret word correctly."" if you called Master.guess with the secret word with the number of calls to Master.guess less than or equal to allowedGuesses.

The test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).

 

Example 1:


Input: secret = ""acckzz"", words = [""acckzz"",""ccbazz"",""eiowzz"",""abcczz""], allowedGuesses = 10
Output: You guessed the secret word correctly.
Explanation:
master.guess(""aaaaaa"") returns -1, because ""aaaaaa"" is not in wordlist.
master.guess(""acckzz"") returns 6, because ""acckzz"" is secret and has all 6 matches.
master.guess(""ccbazz"") returns 3, because ""ccbazz"" has 3 matches.
master.guess(""eiowzz"") returns 2, because ""eiowzz"" has 2 matches.
master.guess(""abcczz"") returns 4, because ""abcczz"" has 4 matches.
We made 5 calls to master.guess, and one of them was the secret, so we pass the test case.


Example 2:


Input: secret = ""hamada"", words = [""hamada"",""khaled""], allowedGuesses = 10
Output: You guessed the secret word correctly.
Explanation: Since there are two words, you can guess both.


 

Constraints:

 * 1 <= words.length <= 100
 * words[i].length == 6
 * words[i] consist of lowercase English letters.
 * All the strings of wordlist are unique.
 * secret exists in words.
 * 10 <= allowedGuesses <= 30",Solutions (428),1.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/guess-the-word/

from typing import *
from leetgo_py import *

# @lc code=begin

# """"""
# This is Master's API interface.
# You should not implement it, or speculate about its implementation
# """"""
# class Master:
#     def guess(self, word: str) -> int:

class Solution:
    def findSecretWord(self, words: List[str], master: 'Master') -> None:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    secret: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    allowedGuesses: int = deserialize(""int"", read_line())
    findSecretWord(secret, words, allowedGuesses)
    ans = None
    print(""\noutput:"", ""null"")
","class Solution:
    def guess(self, word: str) -> int:
        def get_score(w1, w2):
            score = 0
            for c1, c2 in zip(w1, w2):
                if c1 == c2:
                    score += 1
            return score
        
        def findSecretWord(words, master):
            n = len(words)
            guesses = 0
            
            while guesses < 10:
                guess_word = words[0]
                score = master.guess(guess_word)
                
                if score == 6:
                    return
                
                new_words = []
                for word in words:
                    if get_score(guess_word, word) == score:
                        new_words.append(word)
                
                words = new_words
                guesses += 1
        
        findSecretWord(words, master)"
False,0,0,874,backspace-string-compare,Backspace String Compare,backspace-string-compare,False,616652,1283499,844,False,1,"Can you solve this real interview question? Backspace String Compare - Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:


Input: s = ""ab#c"", t = ""ad#c""
Output: true
Explanation: Both s and t become ""ac"".


Example 2:


Input: s = ""ab##"", t = ""c#d#""
Output: true
Explanation: Both s and t become """".


Example 3:


Input: s = ""a#c"", t = ""b""
Output: false
Explanation: s becomes ""c"" while t becomes ""b"".


 

Constraints:

 * 1 <= s.length, t.length <= 200
 * s and t only contain lowercase letters and '#' characters.

 

Follow up: Can you solve it in O(n) time and O(1) space?",Solutions (4.8K),6.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/backspace-string-compare/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().backspaceCompare(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        def backspace(s):
            stack = []
            for char in s:
                if char == ""#"":
                    if stack:
                        stack.pop()
                else:
                    stack.append(char)
            return """".join(stack)
        
        return backspace(s) == backspace(t)"
False,0,0,875,longest-mountain-in-array,Longest Mountain in Array,longest-mountain-in-array,False,108715,270436,845,False,2,"Can you solve this real interview question? Longest Mountain in Array - You may recall that an array arr is a mountain array if and only if:

 * arr.length >= 3
 * There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Given an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.

 

Example 1:


Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.


Example 2:


Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.


 

Constraints:

 * 1 <= arr.length <= 104
 * 0 <= arr[i] <= 104

 

Follow up:

 * Can you solve it using only one pass?
 * Can you solve it in O(1) space?",Solutions (1.1K),2.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-mountain-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestMountain(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestMountain(self, arr: List[int]) -> int:
        n = len(arr)
        ans = base = 0

        while base < n:
            end = base
            if end + 1 < n and arr[end] < arr[end + 1]:
                while end + 1 < n and arr[end] < arr[end + 1]:
                    end += 1

                if end + 1 < n and arr[end] > arr[end + 1]:
                    while end + 1 < n and arr[end] > arr[end + 1]:
                        end += 1
                    ans = max(ans, end - base + 1)
                else:
                    end += 1

            base = max(end, base + 1)

        return ans"
False,0,0,876,hand-of-straights,Hand of Straights,hand-of-straights,False,114005,202863,846,False,2,"Can you solve this real interview question? Hand of Straights - Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.

Given an integer array hand where hand[i] is the value written on the ith card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.

 

Example 1:


Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]


Example 2:


Input: hand = [1,2,3,4,5], groupSize = 4
Output: false
Explanation: Alice's hand can not be rearranged into groups of 4.



 

Constraints:

 * 1 <= hand.length <= 104
 * 0 <= hand[i] <= 109
 * 1 <= groupSize <= hand.length

 

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/ [https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/]",Solutions (755),1.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/hand-of-straights/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    hand: List[int] = deserialize(""List[int]"", read_line())
    groupSize: int = deserialize(""int"", read_line())
    ans = Solution().isNStraightHand(hand, groupSize)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isNStraightHand(self, hand: List[int], groupSize: int) -> bool:
        # Sort the hand array
        hand.sort()
        
        # Create a Counter dictionary to count the occurrences of each card
        count = Counter(hand)
        
        # Iterate through the sorted hand array
        for card in hand:
            if count[card] > 0:
                for i in range(groupSize):
                    if count[card + i] == 0:
                        return False
                    count[card + i] -= 1
        
        return True"
False,0,0,877,shortest-path-visiting-all-nodes,Shortest Path Visiting All Nodes,shortest-path-visiting-all-nodes,False,68884,113071,847,False,3,"Can you solve this real interview question? Shortest Path Visiting All Nodes - You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg]


Input: graph = [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]


Example 2:

[https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg]


Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]


 

Constraints:

 * n == graph.length
 * 1 <= n <= 12
 * 0 <= graph[i].length < n
 * graph[i] does not contain i.
 * If graph[a] contains b, then graph[b] contains a.
 * The input graph is always connected.",Solutions (425),3.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-path-visiting-all-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().shortestPathLength(graph)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        pass"
False,0,0,878,shifting-letters,Shifting Letters,shifting-letters,False,84587,187195,848,False,2,"Can you solve this real interview question? Shifting Letters - You are given a string s of lowercase English letters and an integer array shifts of the same length.

Call the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').

 * For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.

Now for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.

Return the final string after all such shifts to s are applied.

 

Example 1:


Input: s = ""abc"", shifts = [3,5,9]
Output: ""rpl""
Explanation: We start with ""abc"".
After shifting the first 1 letters of s by 3, we have ""dbc"".
After shifting the first 2 letters of s by 5, we have ""igc"".
After shifting the first 3 letters of s by 9, we have ""rpl"", the answer.


Example 2:


Input: s = ""aaa"", shifts = [1,2,3]
Output: ""gfd""


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.
 * shifts.length == s.length
 * 0 <= shifts[i] <= 109",Solutions (747),1.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/shifting-letters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    shifts: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().shiftingLetters(s, shifts)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shiftingLetters(self, s: str, shifts: List[int]) -> str:
        total_shift = sum(shifts) % 26
        result = []
        for i, char in enumerate(s):
            shift = (ord(char) - ord('a') + total_shift) % 26
            result.append(chr(ord('a') + shift))
            total_shift = (total_shift - shifts[i]) % 26
        return """".join(result)"
False,0,0,879,maximize-distance-to-closest-person,Maximize Distance to Closest Person,maximize-distance-to-closest-person,False,197348,414387,849,False,2,"Can you solve this real interview question? Maximize Distance to Closest Person - You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 

Return that maximum distance to the closest person.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/10/distance.jpg]


Input: seats = [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.
If Alex sits in any other open seat, the closest person has distance 1.
Thus, the maximum distance to the closest person is 2.


Example 2:


Input: seats = [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.
This is the maximum distance possible, so the answer is 3.


Example 3:


Input: seats = [0,1]
Output: 1


 

Constraints:

 * 2 <= seats.length <= 2 * 104
 * seats[i] is 0 or 1.
 * At least one seat is empty.
 * At least one seat is occupied.",Solutions (1.6K),2.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-distance-to-closest-person/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDistToClosest(self, seats: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    seats: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxDistToClosest(seats)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDistToClosest(self, seats: List[int]) -> int:
        max_dist = 0
        n = len(seats)
        prev = None
        
        for i, seat in enumerate(seats):
            if seat == 1:
                if prev is None:
                    max_dist = i
                else:
                    max_dist = max(max_dist, (i - prev) // 2)
                prev = i
                
        max_dist = max(max_dist, n - 1 - prev)
        
        return max_dist"
False,0,0,880,rectangle-area-ii,Rectangle Area II,rectangle-area-ii,False,32359,60092,850,False,3,"Can you solve this real interview question? Rectangle Area II - You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.

Calculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.

Return the total area. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png]


Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: A total area of 6 is covered by all three rectangles, as illustrated in the picture.
From (1,1) to (2,2), the green and red rectangles overlap.
From (1,0) to (2,3), all three rectangles overlap.


Example 2:


Input: rectangles = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is 49.


 

Constraints:

 * 1 <= rectangles.length <= 200
 * rectanges[i].length == 4
 * 0 <= xi1, yi1, xi2, yi2 <= 109
 * xi1 <= xi2
 * yi1 <= yi2",Solutions (164),895,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/rectangle-area-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rectangleArea(self, rectangles: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rectangles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().rectangleArea(rectangles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rectangleArea(self, rectangles: List[List[int]]) -> int:
        MOD = 10**9 + 7
        event = []
        for x1, y1, x2, y2 in rectangles:
            event.append((y1, 1, x1, x2))
            event.append((y2, -1, x1, x2))
        event.sort()
        active = []
        cur_y = cur_x_sum = area = 0
        for y, typ, x1, x2 in event:
            area += (y - cur_y) * cur_x_sum
            cur_x_sum = self.update(active, x1, x2, typ)
            cur_y = y
        return area % MOD
    
    def update(self, active, x1, x2, typ):
        new_active = []
        cur_x_sum = 0
        for x1_, x2_ in active:
            if x1 >= x2_ or x2 <= x1_:
                new_active.append((x1_, x2_))
            else:
                cur_x_sum += x2_ - x1_
                new_active.append((min(x1, x1_), max(x2, x2_)))
        active[:] = new_active
        if typ == 1:
            active.append((x1, x2))
            cur_x_sum += x2 - x1
        return cur_x_sum"
False,0,0,881,loud-and-rich,Loud and Rich,loud-and-rich,False,32509,55640,851,False,2,"Can you solve this real interview question? Loud and Rich - There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.

You are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).

Return an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.

 

Example 1:


Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 
answer[0] = 5.
Person 5 has more money than 3, which has more money than 1, which has more money than 0.
The only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.
answer[7] = 7.
Among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.
The other answers can be filled out with similar reasoning.


Example 2:


Input: richer = [], quiet = [0]
Output: [0]


 

Constraints:

 * n == quiet.length
 * 1 <= n <= 500
 * 0 <= quiet[i] < n
 * All the values of quiet are unique.
 * 0 <= richer.length <= n * (n - 1) / 2
 * 0 <= ai, bi < n
 * ai != bi
 * All the pairs of richer are unique.
 * The observations in richer are all logically consistent.",Solutions (440),972,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/loud-and-rich/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    richer: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    quiet: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().loudAndRich(richer, quiet)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def loudAndRich(self, richer: List[List[int]], quiet: List[int]) -> List[int]:
        # Your code here
        pass"
False,0,0,882,peak-index-in-a-mountain-array,Peak Index in a Mountain Array,peak-index-in-a-mountain-array,False,534027,773110,852,False,2,"Can you solve this real interview question? Peak Index in a Mountain Array - An array arr a mountain if the following properties hold:

 * arr.length >= 3
 * There exists some i with 0 < i < arr.length - 1 such that:
   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Given a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].

You must solve it in O(log(arr.length)) time complexity.

 

Example 1:


Input: arr = [0,1,0]
Output: 1


Example 2:


Input: arr = [0,2,1,0]
Output: 1


Example 3:


Input: arr = [0,10,5,2]
Output: 1


 

Constraints:

 * 3 <= arr.length <= 105
 * 0 <= arr[i] <= 106
 * arr is guaranteed to be a mountain array.",Solutions (3.6K),4.9K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/peak-index-in-a-mountain-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().peakIndexInMountainArray(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def peakIndexInMountainArray(self, arr: List[int]) -> int:
        left, right = 1, len(arr) - 1
        
        while left < right:
            mid = left + (right - left) // 2
            if arr[mid] > arr[mid + 1]:
                right = mid
            else:
                left = mid + 1
        
        return left"
False,0,0,883,car-fleet,Car Fleet,car-fleet,False,130042,258661,853,False,2,"Can you solve this real interview question? Car Fleet - There are n cars going to the same destination along a one-lane road. The destination is target miles away.

You are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).

A car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).

A car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

Return the number of car fleets that will arrive at the destination.

 

Example 1:


Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.
The car starting at 0 does not catch up to any other car, so it is a fleet by itself.
The cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.
Note that no other cars meet these fleets before the destination, so the answer is 3.


Example 2:


Input: target = 10, position = [3], speed = [3]
Output: 1
Explanation: There is only one car, hence there is only one fleet.


Example 3:


Input: target = 100, position = [0,2,4], speed = [4,2,1]
Output: 1
Explanation:
The cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.
Then, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.


 

Constraints:

 * n == position.length == speed.length
 * 1 <= n <= 105
 * 0 < target <= 106
 * 0 <= position[i] < target
 * All the values of position are unique.
 * 0 < speed[i] <= 106",Solutions (709),2.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/car-fleet/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    position: List[int] = deserialize(""List[int]"", read_line())
    speed: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().carFleet(target, position, speed)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def carFleet(self, target: int, position: List[int], speed: List[int]) -> int:
        cars = sorted(zip(position, speed))
        times = [float(target - pos) / spd for pos, spd in cars]
        fleet_count = 0
        curr_time = 0

        for time in times[::-1]:
            if time > curr_time:
                fleet_count += 1
                curr_time = time

        return fleet_count"
False,0,0,884,k-similar-strings,K-Similar Strings,k-similar-strings,False,40663,101371,854,False,3,"Can you solve this real interview question? K-Similar Strings - Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.

Given two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.

 

Example 1:


Input: s1 = ""ab"", s2 = ""ba""
Output: 1
Explanation: The two string are 1-similar because we can use one swap to change s1 to s2: ""ab"" --> ""ba"".


Example 2:


Input: s1 = ""abc"", s2 = ""bca""
Output: 2
Explanation: The two strings are 2-similar because we can use two swaps to change s1 to s2: ""abc"" --> ""bac"" --> ""bca"".


 

Constraints:

 * 1 <= s1.length <= 20
 * s2.length == s1.length
 * s1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.
 * s2 is an anagram of s1.",Solutions (238),1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/k-similar-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kSimilarity(self, s1: str, s2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().kSimilarity(s1, s2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kSimilarity(self, s1: str, s2: str) -> int:
        from collections import deque
        q = deque([(s1, 0)])
        seen = set([s1])
        while q:
            s, cnt = q.popleft()
            if s == s2:
                return cnt
            for i in range(len(s)):
                if s[i] != s2[i]:
                    break
            for j in range(i + 1, len(s)):
                if s[j] == s2[i]:
                    ns = list(s)
                    ns[i], ns[j] = ns[j], ns[i]
                    ns = """".join(ns)
                    if ns not in seen:
                        seen.add(ns)
                        q.append((ns, cnt + 1))"
False,0,0,886,score-of-parentheses,Score of Parentheses,score-of-parentheses,False,155921,240736,856,False,2,"Can you solve this real interview question? Score of Parentheses - Given a balanced parentheses string s, return the score of the string.

The score of a balanced parentheses string is based on the following rule:

 * ""()"" has score 1.
 * AB has score A + B, where A and B are balanced parentheses strings.
 * (A) has score 2 * A, where A is a balanced parentheses string.

 

Example 1:


Input: s = ""()""
Output: 1


Example 2:


Input: s = ""(())""
Output: 2


Example 3:


Input: s = ""()()""
Output: 2


 

Constraints:

 * 2 <= s.length <= 50
 * s consists of only '(' and ')'.
 * s is a balanced parentheses string.",Solutions (1.4K),5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/score-of-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def scoreOfParentheses(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().scoreOfParentheses(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def scoreOfParentheses(self, s: str) -> int:
        stack = [0]
        for char in s:
            if char == ""("":
                stack.append(0)
            else:
                last = stack.pop()
                stack[-1] += max(2 * last, 1)
        return stack[0]"
False,0,0,887,minimum-cost-to-hire-k-workers,Minimum Cost to Hire K Workers,minimum-cost-to-hire-k-workers,False,58347,111892,857,False,3,"Can you solve this real interview question? Minimum Cost to Hire K Workers - There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.

We want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:

 1. Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
 2. Every worker in the paid group must be paid at least their minimum wage expectation.

Given the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: quality = [10,20,5], wage = [70,50,30], k = 2
Output: 105.00000
Explanation: We pay 70 to 0th worker and 35 to 2nd worker.


Example 2:


Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3
Output: 30.66667
Explanation: We pay 4 to 0th worker, 13.33333 to 2nd and 3rd workers separately.


 

Constraints:

 * n == quality.length == wage.length
 * 1 <= k <= n <= 104
 * 1 <= quality[i], wage[i] <= 104",Solutions (245),2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-hire-k-workers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    quality: List[int] = deserialize(""List[int]"", read_line())
    wage: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().mincostToHireWorkers(quality, wage, k)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def mincostToHireWorkers(self, quality: List[int], wage: List[int], k: int) -> float:
        pass"
False,0,0,888,mirror-reflection,Mirror Reflection,mirror-reflection,False,75620,119881,858,False,2,"Can you solve this real interview question? Mirror Reflection - There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.

The square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.

Given the two integers p and q, return the number of the receptor that the ray meets first.

The test cases are guaranteed so that the ray will meet a receptor eventually.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png]


Input: p = 2, q = 1
Output: 2
Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.


Example 2:


Input: p = 3, q = 1
Output: 1


 

Constraints:

 * 1 <= q <= p <= 1000",Solutions (720),1.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/mirror-reflection/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mirrorReflection(self, p: int, q: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    p: int = deserialize(""int"", read_line())
    q: int = deserialize(""int"", read_line())
    ans = Solution().mirrorReflection(p, q)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mirrorReflection(self, p: int, q: int) -> int:
        while q % p != 0:
            p, q = q, p % q
        return 1 if (p // q) % 2 == 0 else 0 if (q // p) % 2 == 0 else 2"
False,0,0,889,buddy-strings,Buddy Strings,buddy-strings,False,144469,495358,859,False,1,"Can you solve this real interview question? Buddy Strings - Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.

Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].

 * For example, swapping at indices 0 and 2 in ""abcd"" results in ""cbad"".

 

Example 1:


Input: s = ""ab"", goal = ""ba""
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get ""ba"", which is equal to goal.


Example 2:


Input: s = ""ab"", goal = ""ab""
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in ""ba"" != goal.


Example 3:


Input: s = ""aa"", goal = ""aa""
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get ""aa"", which is equal to goal.


 

Constraints:

 * 1 <= s.length, goal.length <= 2 * 104
 * s and goal consist of lowercase letters.",Solutions (1.1K),1.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/buddy-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def buddyStrings(self, s: str, goal: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    goal: str = deserialize(""str"", read_line())
    ans = Solution().buddyStrings(s, goal)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def buddyStrings(self, s: str, goal: str) -> bool:
        if len(s) != len(goal):
            return False
        
        if s == goal and len(set(s)) < len(s):
            return True
        
        diff = [(a, b) for a, b in zip(s, goal) if a != b]
        
        return len(diff) == 2 and diff[0] == diff[1][::-1]"
False,0,0,890,lemonade-change,Lemonade Change,lemonade-change,False,124873,236173,860,False,1,"Can you solve this real interview question? Lemonade Change - At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.

Note that you do not have any change in hand at first.

Given an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.

 

Example 1:


Input: bills = [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.


Example 2:


Input: bills = [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.


 

Constraints:

 * 1 <= bills.length <= 105
 * bills[i] is either 5, 10, or 20.",Solutions (1K),1.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/lemonade-change/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    bills: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().lemonadeChange(bills)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        five = ten = 0
        for bill in bills:
            if bill == 5:
                five += 1
            elif bill == 10:
                if five == 0:
                    return False
                five -= 1
                ten += 1
            else:
                if ten > 0 and five > 0:
                    ten -= 1
                    five -= 1
                elif five >= 3:
                    five -= 3
                else:
                    return False
        return True"
False,0,0,891,score-after-flipping-matrix,Score After Flipping Matrix,score-after-flipping-matrix,False,40817,54467,861,False,2,"Can you solve this real interview question? Score After Flipping Matrix - You are given an m x n binary matrix grid.

A move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).

Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score after making any number of moves (including zero moves).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/23/lc-toogle1.jpg]


Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39


Example 2:


Input: grid = [[0]]
Output: 1


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 20
 * grid[i][j] is either 0 or 1.",Solutions (548),1.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/score-after-flipping-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matrixScore(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().matrixScore(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def matrixScore(self, grid: List[List[int]]) -> int:
        def toggle(row):
            return [1 - x for x in row] 
        
        m, n = len(grid), len(grid[0])
        res = m * (1 << (n - 1))
        
        for j in range(1, n):
            curr_one = sum(grid[i][j] == grid[i][0] for i in range(m))
            res += max(curr_one, m - curr_one) * (1 << (n - 1 - j))
        
        return res"
False,0,0,892,shortest-subarray-with-sum-at-least-k,Shortest Subarray with Sum at Least K,shortest-subarray-with-sum-at-least-k,False,84347,323996,862,False,3,"Can you solve this real interview question? Shortest Subarray with Sum at Least K - Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1], k = 1
Output: 1


Example 2:

Input: nums = [1,2], k = 4
Output: -1


Example 3:

Input: nums = [2,-1,2], k = 3
Output: 3


 

Constraints:

 * 1 <= nums.length <= 105
 * -105 <= nums[i] <= 105
 * 1 <= k <= 109",Solutions (340),3.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().shortestSubarray(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,895,shortest-path-to-get-all-keys,Shortest Path to Get All Keys,shortest-path-to-get-all-keys,False,30539,67078,864,False,3,"Can you solve this real interview question? Shortest Path to Get All Keys - You are given an m x n grid grid where:

 * '.' is an empty cell.
 * '#' is a wall.
 * '@' is the starting point.
 * Lowercase letters represent keys.
 * Uppercase letters represent locks.

You start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.

If you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.

For some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys. If it is impossible, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/23/lc-keys2.jpg]


Input: grid = [""@.a.."",""###.#"",""b.A.B""]
Output: 8
Explanation: Note that the goal is to obtain all the keys not to open all the locks.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/23/lc-key2.jpg]


Input: grid = [""@..aA"",""..B#."",""....b""]
Output: 6


Example 3:

[https://assets.leetcode.com/uploads/2021/07/23/lc-keys3.jpg]


Input: grid = [""@Aa""]
Output: -1


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 30
 * grid[i][j] is either an English letter, '.', '#', or '@'.
 * The number of keys in the grid is in the range [1, 6].
 * Each key in the grid is unique.
 * Each key in the grid has a matching lock.",Solutions (243),961,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-path-to-get-all-keys/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestPathAllKeys(self, grid: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().shortestPathAllKeys(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestPathAllKeys(self, grid: List[str]) -> int:
        pass"
False,0,0,897,prime-palindrome,Prime Palindrome,prime-palindrome,False,28125,109152,866,False,2,"Can you solve this real interview question? Prime Palindrome - Given an integer n, return the smallest prime palindrome greater than or equal to n.

An integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.

 * For example, 2, 3, 5, 7, 11, and 13 are all primes.

An integer is a palindrome if it reads the same from left to right as it does from right to left.

 * For example, 101 and 12321 are palindromes.

The test cases are generated so that the answer always exists and is in the range [2, 2 * 108].

 

Example 1:

Input: n = 6
Output: 7


Example 2:

Input: n = 8
Output: 11


Example 3:

Input: n = 13
Output: 101


 

Constraints:

 * 1 <= n <= 108",Solutions (159),377,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/prime-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def primePalindrome(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().primePalindrome(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def primePalindrome(self, n: int) -> int:
        def is_prime(num):
            if num < 2:
                return False
            for i in range(2, int(num ** 0.5) + 1):
                if num % i == 0:
                    return False
            return True
        
        def is_palindrome(num):
            return str(num) == str(num)[::-1]
        
        n += 1
        while True:
            if is_palindrome(n) and is_prime(n):
                return n
            n += 1"
False,0,0,898,transpose-matrix,Transpose Matrix,transpose-matrix,False,238590,371736,867,False,1,"Can you solve this real interview question? Transpose Matrix - Given a 2D integer array matrix, return the transpose of matrix.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

[https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png]

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]


Example 2:


Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 1000
 * 1 <= m * n <= 105
 * -109 <= matrix[i][j] <= 109",Solutions (2.2K),2.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/transpose-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().transpose(matrix)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:
        return list(zip(*matrix))"
False,0,0,899,binary-gap,Binary Gap,binary-gap,False,68260,109745,868,False,1,"Can you solve this real interview question? Binary Gap - Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.

Two 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in ""1001"" have a distance of 3.

 

Example 1:


Input: n = 22
Output: 2
Explanation: 22 in binary is ""10110"".
The first adjacent pair of 1's is ""10110"" with a distance of 2.
The second adjacent pair of 1's is ""10110"" with a distance of 1.
The answer is the largest of these two distances, which is 2.
Note that ""10110"" is not a valid pair since there is a 1 separating the two 1's underlined.


Example 2:


Input: n = 8
Output: 0
Explanation: 8 in binary is ""1000"".
There are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.


Example 3:


Input: n = 5
Output: 2
Explanation: 5 in binary is ""101"".


 

Constraints:

 * 1 <= n <= 109",Solutions (909),524,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-gap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def binaryGap(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().binaryGap(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def binaryGap(self, n: int) -> int:
        binary = bin(n)[2:]
        max_distance = 0
        distance = 0
        for i in range(len(binary)):
            if binary[i] == '1':
                if distance > 0:
                    max_distance = max(max_distance, distance)
                distance = 1
            elif distance > 0:
                distance += 1
        return max_distance"
False,0,0,900,reordered-power-of-2,Reordered Power of 2,reordered-power-of-2,False,106649,167888,869,False,2,"Can you solve this real interview question? Reordered Power of 2 - You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return true if and only if we can do this so that the resulting number is a power of two.

 

Example 1:


Input: n = 1
Output: true


Example 2:


Input: n = 10
Output: false


 

Constraints:

 * 1 <= n <= 109",Solutions (1.5K),2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/reordered-power-of-2/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reorderedPowerOf2(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().reorderedPowerOf2(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def reorderedPowerOf2(self, n: int) -> bool:
        def checkPower(num):
            return bin(num).count('1') == 1
        
        return any(checkPower(int(''.join(num))) for num in permutations(str(n)))"
False,0,0,901,advantage-shuffle,Advantage Shuffle,advantage-shuffle,False,59879,115530,870,False,2,"Can you solve this real interview question? Advantage Shuffle - You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].

Return any permutation of nums1 that maximizes its advantage with respect to nums2.

 

Example 1:

Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]
Output: [2,11,7,15]


Example 2:

Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]
Output: [24,32,8,12]


 

Constraints:

 * 1 <= nums1.length <= 105
 * nums2.length == nums1.length
 * 0 <= nums1[i], nums2[i] <= 109",Solutions (602),1.5K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/advantage-shuffle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().advantageCount(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def advantageCount(self, nums1: List[int], nums2: List[int]) -> List[int]:
        import bisect
        
        nums1.sort()
        nums2_sorted = sorted(nums2)
        result = []
        no_match = []
        
        for num in nums2:
            i = bisect.bisect_right(nums1, num)
            if i == len(nums1):
                no_match.append(num)
            else:
                result.append(nums1[i])
                nums1.pop(i)
        
        return result + no_match"
False,0,0,902,minimum-number-of-refueling-stops,Minimum Number of Refueling Stops,minimum-number-of-refueling-stops,False,121884,306356,871,False,3,"Can you solve this real interview question? Minimum Number of Refueling Stops - A car travels from a starting position to a destination which is target miles east of the starting position.

There are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.

The car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

Return the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.

 

Example 1:


Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.


Example 2:


Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can not reach the target (or even the first gas station).


Example 3:


Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: We start with 10 liters of fuel.
We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.
Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.
We made 2 refueling stops along the way, so we return 2.


 

Constraints:

 * 1 <= target, startFuel <= 109
 * 0 <= stations.length <= 500
 * 1 <= positioni < positioni+1 < target
 * 1 <= fueli < 109",Solutions (894),4.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-refueling-stops/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    startFuel: int = deserialize(""int"", read_line())
    stations: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minRefuelStops(target, startFuel, stations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        import heapq
        
        pq = [] 
        stations.append((target, 0))
        
        res = prev = 0
        tank = startFuel
        
        for location, capacity in stations:
            tank -= location - prev
            while pq and tank < 0:
                tank += -heapq.heappop(pq)
                res += 1
            if tank < 0: return -1
            heapq.heappush(pq, -capacity)
            prev = location
            
        return res"
False,0,0,905,length-of-longest-fibonacci-subsequence,Length of Longest Fibonacci Subsequence,length-of-longest-fibonacci-subsequence,False,55515,114870,873,False,2,"Can you solve this real interview question? Length of Longest Fibonacci Subsequence - A sequence x1, x2, ..., xn is Fibonacci-like if:

 * n >= 3
 * xi + xi+1 == xi+2 for all i + 2 <= n

Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:


Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].

Example 2:


Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].

 

Constraints:

 * 3 <= arr.length <= 1000
 * 1 <= arr[i] < arr[i + 1] <= 109",Solutions (348),1.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().lenLongestFibSubseq(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lenLongestFibSubseq(self, arr: List[int]) -> int:
        pass"
False,0,0,906,walking-robot-simulation,Walking Robot Simulation,walking-robot-simulation,False,36271,93128,874,False,2,"Can you solve this real interview question? Walking Robot Simulation - A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:

 * -2: Turn left 90 degrees.
 * -1: Turn right 90 degrees.
 * 1 <= k <= 9: Move forward k units, one unit at a time.

Some of the grid squares are obstacles. The ith obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.

Return the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).

Note:

 * North means +Y direction.
 * East means +X direction.
 * South means -Y direction.
 * West means -X direction.

 

Example 1:


Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 3 units to (3, 4).
The furthest point the robot ever gets from the origin is (3, 4), which squared is 32 + 42 = 25 units away.


Example 2:


Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).
2. Turn right.
3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).
4. Turn left.
5. Move north 4 units to (1, 8).
The furthest point the robot ever gets from the origin is (1, 8), which squared is 12 + 82 = 65 units away.


Example 3:


Input: commands = [6,-1,-1,6], obstacles = []
Output: 36
Explanation: The robot starts at (0, 0):
1. Move north 6 units to (0, 6).
2. Turn right.
3. Turn right.
4. Move south 6 units to (0, 0).
The furthest point the robot ever gets from the origin is (0, 6), which squared is 62 = 36 units away.


 

Constraints:

 * 1 <= commands.length <= 104
 * commands[i] is either -2, -1, or an integer in the range [1, 9].
 * 0 <= obstacles.length <= 104
 * -3 * 104 <= xi, yi <= 3 * 104
 * The answer is guaranteed to be less than 231.",Solutions (352),155,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/walking-robot-simulation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    commands: List[int] = deserialize(""List[int]"", read_line())
    obstacles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().robotSim(commands, obstacles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
        def robotSim(self, commands: List[int], obstacles: List[List[int]]) -> int:
            obstacles = set(map(tuple, obstacles))
            directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
            x = y = idx = ans = 0
            for command in commands:
                if command == -2:
                    idx = (idx - 1) % 4
                elif command == -1:
                    idx = (idx + 1) % 4
                else:
                    dx, dy = directions[idx]
                    for _ in range(command):
                        if (x + dx, y + dy) not in obstacles:
                            x += dx
                            y += dy
                        ans = max(ans, x*x + y*y)
            return ans"
False,0,0,907,koko-eating-bananas,Koko Eating Bananas,koko-eating-bananas,False,343640,658046,875,False,2,"Can you solve this real interview question? Koko Eating Bananas - Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

 

Example 1:


Input: piles = [3,6,7,11], h = 8
Output: 4


Example 2:


Input: piles = [30,11,23,4,20], h = 5
Output: 30


Example 3:


Input: piles = [30,11,23,4,20], h = 6
Output: 23


 

Constraints:

 * 1 <= piles.length <= 104
 * piles.length <= h <= 109
 * 1 <= piles[i] <= 109",Solutions (2.4K),7.4K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/koko-eating-bananas/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[int] = deserialize(""List[int]"", read_line())
    h: int = deserialize(""int"", read_line())
    ans = Solution().minEatingSpeed(piles, h)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        def possible(k):
            return sum((p - 1) // k + 1 for p in piles) <= h

        left, right = 1, max(piles)
        while left < right:
            mid = (left + right) // 2
            if not possible(mid):
                left = mid + 1
            else:
                right = mid
        return left"
False,0,0,909,stone-game,Stone Game,stone-game,False,183109,262592,877,False,2,"Can you solve this real interview question? Stone Game - Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].

The objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.

Alice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.

 

Example 1:


Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alice starts first, and can only take the first 5 or the last 5.
Say she takes the first 5, so that the row becomes [3, 4, 5].
If Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.
If Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.
This demonstrated that taking the first 5 was a winning move for Alice, so we return true.


Example 2:


Input: piles = [3,7,2,3]
Output: true


 

Constraints:

 * 2 <= piles.length <= 500
 * piles.length is even.
 * 1 <= piles[i] <= 500
 * sum(piles[i]) is odd.",Solutions (1.2K),2.6K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGame(self, piles: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGame(piles)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def stoneGame(self, piles: List[int]) -> bool:
        return True"
False,0,0,910,nth-magical-number,Nth Magical Number,nth-magical-number,False,32945,93201,878,False,3,"Can you solve this real interview question? Nth Magical Number - A positive integer is magical if it is divisible by either a or b.

Given the three integers n, a, and b, return the nth magical number. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: n = 1, a = 2, b = 3
Output: 2


Example 2:


Input: n = 4, a = 2, b = 3
Output: 6


 

Constraints:

 * 1 <= n <= 109
 * 2 <= a, b <= 4 * 104",Solutions (293),1.1K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/nth-magical-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    ans = Solution().nthMagicalNumber(n, a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nthMagicalNumber(self, n: int, a: int, b: int) -> int:
        mod = 10**9 + 7
        lcm_ab = a * b // math.gcd(a, b)
        left = 1
        right = 10**14
        while left < right:
            mid = (left + right) // 2
            magic_num = mid // a + mid // b - mid // lcm_ab
            if magic_num < n:
                left = mid + 1
            else:
                right = mid
        return left % mod"
False,0,0,911,profitable-schemes,Profitable Schemes,profitable-schemes,False,17870,43955,879,False,3,"Can you solve this real interview question? Profitable Schemes - There is a group of n members, and a list of various crimes they could commit. The ith crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.
In total, there are 2 schemes.

Example 2:


Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.
There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).

 

Constraints:

 * 1 <= n <= 100
 * 0 <= minProfit <= 100
 * 1 <= group.length <= 100
 * 1 <= group[i] <= 100
 * profit.length == group.length
 * 0 <= profit[i] <= 100",Solutions (131),591,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/profitable-schemes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    minProfit: int = deserialize(""int"", read_line())
    group: List[int] = deserialize(""List[int]"", read_line())
    profit: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().profitableSchemes(n, minProfit, group, profit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:
        mod = 10**9 + 7
        dp = [[0] * (minProfit + 1) for _ in range(n + 1)]
        dp[0][0] = 1
        for members, earn in zip(group, profit):
            for i in range(n, -1, -1):
                for j in range(minProfit, -1, -1):
                    if i + members <= n:
                        dp[i + members][min(minProfit, j + earn)] += dp[i][j]
                        dp[i + members][min(minProfit, j + earn)] %= mod
        return sum(dp[i][-1] for i in range(1, n + 1)) % mod"
False,0,0,916,decoded-string-at-index,Decoded String at Index,decoded-string-at-index,False,36147,127594,880,False,2,"Can you solve this real interview question? Decoded String at Index - You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:

 * If the character read is a letter, that letter is written onto the tape.
 * If the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.

Given an integer k, return the kth letter (1-indexed) in the decoded string.

 

Example 1:


Input: s = ""leet2code3"", k = 10
Output: ""o""
Explanation: The decoded string is ""leetleetcodeleetleetcodeleetleetcode"".
The 10th letter in the string is ""o"".


Example 2:


Input: s = ""ha22"", k = 5
Output: ""h""
Explanation: The decoded string is ""hahahaha"".
The 5th letter is ""h"".


Example 3:


Input: s = ""a2345678999999999999999"", k = 1
Output: ""a""
Explanation: The decoded string is ""a"" repeated 8301530446056247680 times.
The 1st letter is ""a"".


 

Constraints:

 * 2 <= s.length <= 100
 * s consists of lowercase English letters and digits 2 through 9.
 * s starts with a letter.
 * 1 <= k <= 109
 * It is guaranteed that k is less than or equal to the length of the decoded string.
 * The decoded string is guaranteed to have less than 263 letters.",Solutions (255),1.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/decoded-string-at-index/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decodeAtIndex(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().decodeAtIndex(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def decodeAtIndex(self, s: str, k: int) -> str:
        size = 0
        for c in s:
            if c.isdigit():
                size *= int(c)
            else:
                size += 1
        for c in reversed(s):
            k %= size
            if k == 0 and c.isalpha():
                return c
            if c.isdigit():
                size /= int(c)
            else:
                size -= 1"
False,0,0,917,boats-to-save-people,Boats to Save People,boats-to-save-people,False,173928,327789,881,False,2,"Can you solve this real interview question? Boats to Save People - You are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.

Return the minimum number of boats to carry every given person.

 

Example 1:


Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)


Example 2:


Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)


Example 3:


Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)


 

Constraints:

 * 1 <= people.length <= 5 * 104
 * 1 <= people[i] <= limit <= 3 * 104",Solutions (1.5K),3.7K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/boats-to-save-people/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numRescueBoats(self, people: List[int], limit: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    people: List[int] = deserialize(""List[int]"", read_line())
    limit: int = deserialize(""int"", read_line())
    ans = Solution().numRescueBoats(people, limit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numRescueBoats(self, people: List[int], limit: int) -> int:
        people.sort()
        boats = 0
        left = 0
        right = len(people) - 1
        
        while left <= right:
            if people[left] + people[right] <= limit:
                left += 1
            right -= 1
            boats += 1
        
        return boats"
False,0,0,918,reachable-nodes-in-subdivided-graph,Reachable Nodes In Subdivided Graph,reachable-nodes-in-subdivided-graph,False,23393,46583,882,False,3,"Can you solve this real interview question? Reachable Nodes In Subdivided Graph - You are given an undirected graph (the ""original graph"") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.

To subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].

In this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.

Given the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png]


Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivisions are shown in the image above.
The nodes that are reachable are highlighted in yellow.


Example 2:


Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23


Example 3:


Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.


 

Constraints:

 * 0 <= edges.length <= min(n * (n - 1) / 2, 104)
 * edges[i].length == 3
 * 0 <= ui < vi < n
 * There are no multiple edges in the graph.
 * 0 <= cnti <= 104
 * 0 <= maxMoves <= 109
 * 1 <= n <= 3000",Solutions (149),674,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    maxMoves: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().reachableNodes(edges, maxMoves, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reachableNodes(self, edges: List[List[int]], maxMoves: int, n: int) -> int:
        # Your code here
        pass"
False,0,0,919,projection-area-of-3d-shapes,Projection Area of 3D Shapes,projection-area-of-3d-shapes,False,46901,65886,883,False,1,"Can you solve this real interview question? Projection Area of 3D Shapes - You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.

Each value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).

We view the projection of these cubes onto the xy, yz, and zx planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png]


Input: grid = [[1,2],[3,4]]
Output: 17
Explanation: Here are the three projections (""shadows"") of the shape made with each axis-aligned plane.


Example 2:


Input: grid = [[2]]
Output: 5


Example 3:


Input: grid = [[1,0],[0,2]]
Output: 8


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 50
 * 0 <= grid[i][j] <= 50",Solutions (485),497,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/projection-area-of-3d-shapes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def projectionArea(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().projectionArea(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def projectionArea(self, grid: List[List[int]]) -> int:
        return sum(max(row) + max(col) for row in grid for col in zip(*grid) + sum(v != 0 for v in row for row in grid)"
False,0,0,920,uncommon-words-from-two-sentences,Uncommon Words from Two Sentences,uncommon-words-from-two-sentences,False,115929,174780,884,False,1,"Can you solve this real interview question? Uncommon Words from Two Sentences - A sentence is a string of single-space separated words where each word consists only of lowercase letters.

A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Given two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.

 

Example 1:

Input: s1 = ""this apple is sweet"", s2 = ""this apple is sour""
Output: [""sweet"",""sour""]


Example 2:

Input: s1 = ""apple apple"", s2 = ""banana""
Output: [""banana""]


 

Constraints:

 * 1 <= s1.length, s2.length <= 200
 * s1 and s2 consist of lowercase English letters and spaces.
 * s1 and s2 do not have leading or trailing spaces.
 * All the words in s1 and s2 are separated by a single space.",Solutions (1.4K),1.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/uncommon-words-from-two-sentences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().uncommonFromSentences(s1, s2)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def uncommonFromSentences(self, s1: str, s2: str) -> List[str]:
        words = {}
        for word in s1.split():
            words[word] = words.get(word, 0) + 1
        for word in s2.split():
            words[word] = words.get(word, 0) + 1
        return [word for word, count in words.items() if count == 1]"
False,0,0,921,spiral-matrix-iii,Spiral Matrix III,spiral-matrix-iii,False,40998,55860,885,False,2,"Can you solve this real interview question? Spiral Matrix III - You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.

You will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.

Return an array of coordinates representing the positions of the grid in the order you visited them.

 

Example 1:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png]


Input: rows = 1, cols = 4, rStart = 0, cStart = 0
Output: [[0,0],[0,1],[0,2],[0,3]]


Example 2:

[https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png]


Input: rows = 5, cols = 6, rStart = 1, cStart = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]


 

Constraints:

 * 1 <= rows, cols <= 100
 * 0 <= rStart < rows
 * 0 <= cStart < cols",Solutions (387),720,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/spiral-matrix-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    rows: int = deserialize(""int"", read_line())
    cols: int = deserialize(""int"", read_line())
    rStart: int = deserialize(""int"", read_line())
    cStart: int = deserialize(""int"", read_line())
    ans = Solution().spiralMatrixIII(rows, cols, rStart, cStart)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def spiralMatrixIII(self, rows: int, cols: int, rStart: int, cStart: int) -> List[List[int]]:
        res = [[rStart, cStart]]
        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        direction = 0
        length = 0
        
        while len(res) < rows * cols:
            if direction == 0 or direction == 2:
                length += 1
            for _ in range(length):
                rStart += dirs[direction][0]
                cStart += dirs[direction][1]
                if 0 <= rStart < rows and 0 <= cStart < cols:
                    res.append([rStart, cStart])
            
            direction = (direction + 1) % 4
        return res"
False,0,0,922,possible-bipartition,Possible Bipartition,possible-bipartition,False,179246,358471,886,False,2,"Can you solve this real interview question? Possible Bipartition - We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.

Given the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.

 

Example 1:


Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: The first group has [1,4], and the second group has [2,3].


Example 2:


Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false
Explanation: We need at least 3 groups to divide them. We cannot put them in two groups.


 

Constraints:

 * 1 <= n <= 2000
 * 0 <= dislikes.length <= 104
 * dislikes[i].length == 2
 * 1 <= ai < bi <= n
 * All the pairs of dislikes are unique.",Solutions (1.7K),4.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/possible-bipartition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    dislikes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().possibleBipartition(n, dislikes)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        from collections import defaultdict
        
        graph = defaultdict(list)
        group = [0] * (n+1)
        
        for a, b in dislikes:
            graph[a].append(b)
            graph[b].append(a)
        
        def dfs(person, g):
            if group[person] != 0:
                return group[person] == g
            
            group[person] = g
            for other in graph[person]:
                if not dfs(other, -g):
                    return False
            return True
        
        for i in range(1, n+1):
            if group[i] == 0 and not dfs(i, 1):
                return False
        return True"
False,0,0,923,super-egg-drop,Super Egg Drop,super-egg-drop,False,58757,216401,887,False,3,"Can you solve this real interview question? Super Egg Drop - You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:


Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.


Example 2:


Input: k = 2, n = 6
Output: 3


Example 3:


Input: k = 3, n = 14
Output: 4


 

Constraints:

 * 1 <= k <= 100
 * 1 <= n <= 104",Solutions (315),3.2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/super-egg-drop/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().superEggDrop(k, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        m = 0
        while dp[m][k] < n:
            m += 1
            for i in range(1, k + 1):
                dp[m][i] = dp[m - 1][i - 1] + dp[m - 1][i] + 1
        return m"
False,0,0,924,fair-candy-swap,Fair Candy Swap,fair-candy-swap,False,99746,164295,888,False,1,"Can you solve this real interview question? Fair Candy Swap - Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the ith box of candy that Alice has and bobSizes[j] is the number of candies of the jth box of candy that Bob has.

Since they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.

Return an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.

 

Example 1:


Input: aliceSizes = [1,1], bobSizes = [2,2]
Output: [1,2]


Example 2:


Input: aliceSizes = [1,2], bobSizes = [2,3]
Output: [1,2]


Example 3:


Input: aliceSizes = [2], bobSizes = [1,3]
Output: [2,3]


 

Constraints:

 * 1 <= aliceSizes.length, bobSizes.length <= 104
 * 1 <= aliceSizes[i], bobSizes[j] <= 105
 * Alice and Bob have a different total number of candies.
 * There will be at least one valid answer for the given input.",Solutions (694),1.8K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/fair-candy-swap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    aliceSizes: List[int] = deserialize(""List[int]"", read_line())
    bobSizes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().fairCandySwap(aliceSizes, bobSizes)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def fairCandySwap(self, aliceSizes: List[int], bobSizes: List[int]) -> List[int]:
        sa, sb = sum(aliceSizes), sum(bobSizes)
        set_b = set(bobSizes)
        for x in aliceSizes:
            if (x + (sb - sa) // 2) in set_b:
                return [x, x + (sb - sa) // 2]"
False,0,0,926,find-and-replace-pattern,Find and Replace Pattern,find-and-replace-pattern,False,168165,216744,890,False,2,"Can you solve this real interview question? Find and Replace Pattern - Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.

A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.

Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

 

Example 1:


Input: words = [""abc"",""deq"",""mee"",""aqq"",""dkd"",""ccc""], pattern = ""abb""
Output: [""mee"",""aqq""]
Explanation: ""mee"" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
""ccc"" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.


Example 2:


Input: words = [""a"",""b"",""c""], pattern = ""a""
Output: [""a"",""b"",""c""]


 

Constraints:

 * 1 <= pattern.length <= 20
 * 1 <= words.length <= 50
 * words[i].length == pattern.length
 * pattern and words[i] are lowercase English letters.",Solutions (2.3K),3.6K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/find-and-replace-pattern/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    pattern: str = deserialize(""str"", read_line())
    ans = Solution().findAndReplacePattern(words, pattern)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findAndReplacePattern(self, words: List[str], pattern: str) -> List[str]:
        def match(word, pattern):
            return len(set(word)) == len(set(pattern)) == len(set(zip(word, pattern)))

        return [word for word in words if match(word, pattern)]"
False,0,0,927,sum-of-subsequence-widths,Sum of Subsequence Widths,sum-of-subsequence-widths,False,18366,50156,891,False,3,"Can you solve this real interview question? Sum of Subsequence Widths - The width of a sequence is the difference between the maximum and minimum elements in the sequence.

Given an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 109 + 7.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:


Input: nums = [2,1,3]
Output: 6
Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].
The corresponding widths are 0, 0, 0, 1, 1, 2, 2.
The sum of these widths is 6.


Example 2:


Input: nums = [2]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (130),639,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-subsequence-widths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumSubseqWidths(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumSubseqWidths(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumSubseqWidths(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        MOD = 10**9 + 7
        
        res = 0
        p = 1
        
        for i in range(n):
            res = (res + (nums[i] - nums[n - 1 - i]) * p) % MOD
            p = (p << 1) % MOD
        
        return res"
False,0,0,928,surface-area-of-3d-shapes,Surface Area of 3D Shapes,surface-area-of-3d-shapes,False,33690,52605,892,False,1,"Can you solve this real interview question? Surface Area of 3D Shapes - You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return the total surface area of the resulting shapes.

Note: The bottom face of each shape counts toward its surface area.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg]


Input: grid = [[1,2],[3,4]]
Output: 34


Example 2:

[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg]


Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 32


Example 3:

[https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg]


Input: grid = [[2,2,2],[2,1,2],[2,2,2]]
Output: 46


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 50
 * 0 <= grid[i][j] <= 50",Solutions (362),493,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/surface-area-of-3d-shapes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().surfaceArea(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def surfaceArea(self, grid: List[List[int]]) -> int:
        total_area = sum(v * 4 + 2 for row in grid for v in row if v > 0)
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if j > 0:
                    total_area -= min(grid[i][j], grid[i][j - 1]) * 2
                if i > 0:
                    total_area -= min(grid[i][j], grid[i - 1][j]) * 2
        return total_area"
False,0,0,929,groups-of-special-equivalent-strings,Groups of Special-Equivalent Strings,groups-of-special-equivalent-strings,False,44611,62781,893,False,2,"Can you solve this real interview question? Groups of Special-Equivalent Strings - You are given an array of strings of the same length words.

In one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].

Two strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].

 * For example, words[i] = ""zzxy"" and words[j] = ""xyzz"" are special-equivalent because we may make the moves ""zzxy"" -> ""xzzy"" -> ""xyzz"".

A group of special-equivalent strings from words is a non-empty subset of words such that:

 * Every pair of strings in the group are special equivalent, and
 * The group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).

Return the number of groups of special-equivalent strings from words.

 

Example 1:


Input: words = [""abcd"",""cdab"",""cbad"",""xyzz"",""zzxy"",""zzyx""]
Output: 3
Explanation: 
One group is [""abcd"", ""cdab"", ""cbad""], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.
The other two groups are [""xyzz"", ""zzxy""] and [""zzyx""].
Note that in particular, ""zzxy"" is not special equivalent to ""zzyx"".


Example 2:


Input: words = [""abc"",""acb"",""bac"",""bca"",""cab"",""cba""]
Output: 3


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 20
 * words[i] consist of lowercase English letters.
 * All the strings are of the same length.",Solutions (389),482,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/groups-of-special-equivalent-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSpecialEquivGroups(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numSpecialEquivGroups(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSpecialEquivGroups(self, words: List[str]) -> int:
        def count(word):
            res = [0] * 52
            for i, c in enumerate(word):
                res[ord(c) - ord('a') + 26 * (i % 2)] += 1
            return tuple(res)
        
        return len({count(word) for word in words})"
False,0,0,932,monotonic-array,Monotonic Array,monotonic-array,False,254647,436196,896,False,1,"Can you solve this real interview question? Monotonic Array - An array is monotonic if it is either monotone increasing or monotone decreasing.

An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].

Given an integer array nums, return true if the given array is monotonic, or false otherwise.

 

Example 1:


Input: nums = [1,2,2,3]
Output: true


Example 2:


Input: nums = [6,5,4,4]
Output: true


Example 3:


Input: nums = [1,3,2]
Output: false


 

Constraints:

 * 1 <= nums.length <= 105
 * -105 <= nums[i] <= 105",Solutions (2.2K),2K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/monotonic-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isMonotonic(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isMonotonic(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isMonotonic(self, nums: List[int]) -> bool:
        increasing = decreasing = True
        for i in range(1, len(nums)):
            if nums[i] < nums[i-1]:
                increasing = False
            if nums[i] > nums[i-1]:
                decreasing = False
        return increasing or decreasing"
False,0,0,934,bitwise-ors-of-subarrays,Bitwise ORs of Subarrays,bitwise-ors-of-subarrays,False,30532,82081,898,False,2,"Can you solve this real interview question? Bitwise ORs of Subarrays - Given an integer array arr, return the number of distinct bitwise ORs of all the non-empty subarrays of arr.

The bitwise OR of a subarray is the bitwise OR of each integer in the subarray. The bitwise OR of a subarray of one integer is that integer.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.


Example 2:


Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].
These yield the results 1, 1, 2, 1, 3, 3.
There are 3 unique values, so the answer is 3.


Example 3:


Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.


 

Constraints:

 * 1 <= arr.length <= 5 * 104
 * 0 <= arr[i] <= 109",Solutions (151),1.3K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/bitwise-ors-of-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarrayBitwiseORs(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().subarrayBitwiseORs(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarrayBitwiseORs(self, arr: List[int]) -> int:
        ans = set()
        cur = set()
        for x in arr:
            cur = {x | y for y in cur} | {x}
            ans |= cur
        return len(ans)"
False,0,0,935,orderly-queue,Orderly Queue,orderly-queue,False,64405,97077,899,False,3,"Can you solve this real interview question? Orderly Queue - You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..

Return the lexicographically smallest string you could have after applying the mentioned step any number of moves.

 

Example 1:


Input: s = ""cba"", k = 1
Output: ""acb""
Explanation: 
In the first move, we move the 1st character 'c' to the end, obtaining the string ""bac"".
In the second move, we move the 1st character 'b' to the end, obtaining the final result ""acb"".


Example 2:


Input: s = ""baaca"", k = 3
Output: ""aaabc""
Explanation: 
In the first move, we move the 1st character 'b' to the end, obtaining the string ""aacab"".
In the second move, we move the 3rd character 'c' to the end, obtaining the final result ""aaabc"".


 

Constraints:

 * 1 <= k <= s.length <= 1000
 * s consist of lowercase English letters.",Solutions (626),1.6K,"# Created by asetti2002 at 2024/04/17 02:15
# leetgo: 1.4.3
# https://leetcode.com/problems/orderly-queue/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def orderlyQueue(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().orderlyQueue(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def orderlyQueue(self, s: str, k: int) -> str:
        if k == 1:
            return min(s[i:] + s[:i] for i in range(len(s)))
        else:
            return ''.join(sorted(s))"
False,0,0,938,numbers-at-most-n-given-digit-set,Numbers At Most N Given Digit Set,numbers-at-most-n-given-digit-set,False,39672,95724,902,False,3,"Can you solve this real interview question? Numbers At Most N Given Digit Set - Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.

Return the number of positive integers that can be generated that are less than or equal to a given integer n.

 

Example 1:


Input: digits = [""1"",""3"",""5"",""7""], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.


Example 2:


Input: digits = [""1"",""4"",""9""], n = 1000000000
Output: 29523
Explanation: 
We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,
81 four digit numbers, 243 five digit numbers, 729 six digit numbers,
2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.
In total, this is 29523 integers that can be written using the digits array.


Example 3:


Input: digits = [""7""], n = 8
Output: 1


 

Constraints:

 * 1 <= digits.length <= 9
 * digits[i].length == 1
 * digits[i] is a digit from '1' to '9'.
 * All the values in digits are unique.
 * digits is sorted in non-decreasing order.
 * 1 <= n <= 109",Solutions (347),1.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/numbers-at-most-n-given-digit-set/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    digits: List[str] = deserialize(""List[str]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().atMostNGivenDigitSet(digits, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:
        pass"
False,0,0,939,valid-permutations-for-di-sequence,Valid Permutations for DI Sequence,valid-permutations-for-di-sequence,False,13602,23526,903,False,3,"Can you solve this real interview question? Valid Permutations for DI Sequence - You are given a string s of length n where s[i] is either:

 * 'D' means decreasing, or
 * 'I' means increasing.

A permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:

 * If s[i] == 'D', then perm[i] > perm[i + 1], and
 * If s[i] == 'I', then perm[i] < perm[i + 1].

Return the number of valid permutations perm. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""DID""
Output: 5
Explanation: The 5 valid permutations of (0, 1, 2, 3) are:
(1, 0, 3, 2)
(2, 0, 3, 1)
(2, 1, 3, 0)
(3, 0, 2, 1)
(3, 1, 2, 0)


Example 2:


Input: s = ""D""
Output: 1


 

Constraints:

 * n == s.length
 * 1 <= n <= 200
 * s[i] is either 'I' or 'D'.",Solutions (87),653,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-permutations-for-di-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numPermsDISequence(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numPermsDISequence(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numPermsDISequence(self, s: str) -> int:
        n = len(s)
        MOD = 10**9 + 7
        dp = [[0] * (n + 1) for _ in range(n + 1)]
        dp[0][0] = 1
        
        for i in range(1, n + 1):
            for j in range(i + 1):
                if s[i - 1] == 'D':
                    for k in range(j, i):
                        dp[i][j] += dp[i - 1][k]
                else:
                    for k in range(j):
                        dp[i][j] += dp[i - 1][k]
                dp[i][j] %= MOD
        
        return sum(dp[n]) % MOD"
False,0,0,940,fruit-into-baskets,Fruit Into Baskets,fruit-into-baskets,False,327853,749808,904,False,2,"Can you solve this real interview question? Fruit Into Baskets - You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.

You want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:

 * You only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.
 * Starting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.
 * Once you reach a tree with fruit that cannot fit in your baskets, you must stop.

Given the integer array fruits, return the maximum number of fruits you can pick.

 

Example 1:


Input: fruits = [1,2,1]
Output: 3
Explanation: We can pick from all 3 trees.


Example 2:


Input: fruits = [0,1,2,2]
Output: 3
Explanation: We can pick from trees [1,2,2].
If we had started at the first tree, we would only pick from trees [0,1].


Example 3:


Input: fruits = [1,2,3,2,2]
Output: 4
Explanation: We can pick from trees [2,3,2,2].
If we had started at the first tree, we would only pick from trees [1,2].


 

Constraints:

 * 1 <= fruits.length <= 105
 * 0 <= fruits[i] < fruits.length",Solutions (2.9K),3.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/fruit-into-baskets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalFruit(self, fruits: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    fruits: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().totalFruit(fruits)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalFruit(self, fruits: List[int]) -> int:
        count = {}
        start = result = 0
        
        for end in range(len(fruits)):
            count[fruits[end]] = count.get(fruits[end], 0) + 1
            
            while len(count) > 2:
                count[fruits[start]] -= 1
                if count[fruits[start]] == 0:
                    del count[fruits[start]]
                start += 1
            
            result = max(result, end - start + 1)
        
        return result"
False,0,0,941,sort-array-by-parity,Sort Array By Parity,sort-array-by-parity,False,590539,781352,905,False,1,"Can you solve this real interview question? Sort Array By Parity - Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

 

Example 1:


Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.


Example 2:


Input: nums = [0]
Output: [0]


 

Constraints:

 * 1 <= nums.length <= 5000
 * 0 <= nums[i] <= 5000",Solutions (5.7K),4.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-array-by-parity/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortArrayByParity(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortArrayByParity(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortArrayByParity(self, nums: List[int]) -> List[int]:
        return sorted(nums, key=lambda x: x % 2)"
False,0,0,942,super-palindromes,Super Palindromes,super-palindromes,False,22515,57927,906,False,3,"Can you solve this real interview question? Super Palindromes - Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

 

Example 1:


Input: left = ""4"", right = ""1000""
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.
Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.


Example 2:


Input: left = ""1"", right = ""2""
Output: 1


 

Constraints:

 * 1 <= left.length, right.length <= 18
 * left and right consist of only digits.
 * left and right cannot have leading zeros.
 * left and right represent integers in the range [1, 1018 - 1].
 * left is less than or equal to right.",Solutions (182),328,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/super-palindromes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def superpalindromesInRange(self, left: str, right: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    left: str = deserialize(""str"", read_line())
    right: str = deserialize(""str"", read_line())
    ans = Solution().superpalindromesInRange(left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def superpalindromesInRange(self, left: str, right: str) -> int:
        def is_palindrome(s):
            return s == s[::-1]

        count = 0
        left = int(left)
        right = int(right)

        for i in range(10**5):
            s = str(i)
            l = int(s + s[::-1])
            if l * l > right:
                break
            if l * l >= left and is_palindrome(str(l * l)):
                count += 1

            for j in range(10):
                s = str(i)
                l = int(s + str(j) + s[::-1])
                if l * l > right:
                    break
                if l * l >= left and is_palindrome(str(l * l)):
                    count += 1

        return count"
False,0,0,943,sum-of-subarray-minimums,Sum of Subarray Minimums,sum-of-subarray-minimums,False,142914,399310,907,False,2,"Can you solve this real interview question? Sum of Subarray Minimums - Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:


Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.


Example 2:


Input: arr = [11,81,94,43,3]
Output: 444


 

Constraints:

 * 1 <= arr.length <= 3 * 104
 * 1 <= arr[i] <= 3 * 104",Solutions (889),6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-subarray-minimums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumSubarrayMins(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","from typing import List

class Solution:
    def sumSubarrayMins(self, arr: List[int]) -> int:
        mod = 10**9 + 7
        stack = []
        res = 0
        arr = [0] + arr + [0]
        for i, num in enumerate(arr):
            while stack and arr[stack[-1]] > num:
                j = stack.pop()
                k = stack[-1]
                res += arr[j] * (i - j) * (j - k)
            stack.append(i)
        return res % mod"
False,0,0,944,smallest-range-i,Smallest Range I,smallest-range-i,False,71183,104290,908,False,1,"Can you solve this real interview question? Smallest Range I - You are given an integer array nums and an integer k.

In one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after applying the mentioned operation at most once for each index in it.

 

Example 1:


Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.


Example 2:


Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.


Example 3:


Input: nums = [1,3,6], k = 3
Output: 0
Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.


 

Constraints:

 * 1 <= nums.length <= 104
 * 0 <= nums[i] <= 104
 * 0 <= k <= 104",Solutions (680),566,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-range-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestRangeI(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().smallestRangeI(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestRangeI(self, nums: List[int], k: int) -> int:
        return max(0, max(nums) - min(nums) - 2*k)"
False,0,0,945,snakes-and-ladders,Snakes and Ladders,snakes-and-ladders,False,135931,301422,909,False,2,"Can you solve this real interview question? Snakes and Ladders - You are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a Boustrophedon style [https://en.wikipedia.org/wiki/Boustrophedon] starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.

You start on square 1 of the board. In each move, starting from square curr, do the following:

 * Choose a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].
   * This choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.
 * If next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.
 * The game ends when you reach the square n2.

A board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n2 do not have a snake or ladder.

Note that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.

 * For example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.

Return the least number of moves required to reach the square n2. If it is not possible to reach the square, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/09/23/snakes.png]


Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
In the beginning, you start at square 1 (at row 5, column 0).
You decide to move to square 2 and must take the ladder to square 15.
You then decide to move to square 17 and must take the snake to square 13.
You then decide to move to square 14 and must take the ladder to square 35.
You then decide to move to square 36, ending the game.
This is the lowest possible number of moves to reach the last square, so return 4.


Example 2:


Input: board = [[-1,-1],[-1,3]]
Output: 1


 

Constraints:

 * n == board.length == board[i].length
 * 2 <= n <= 20
 * board[i][j] is either -1 or in the range [1, n2].
 * The squares labeled 1 and n2 do not have any ladders or snakes.",Solutions (1K),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/snakes-and-ladders/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().snakesAndLadders(board)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        pass"
False,0,0,946,smallest-range-ii,Smallest Range II,smallest-range-ii,False,46049,131044,910,False,2,"Can you solve this real interview question? Smallest Range II - You are given an integer array nums and an integer k.

For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.

The score of nums is the difference between the maximum and minimum elements in nums.

Return the minimum score of nums after changing the values at each index.

 

Example 1:


Input: nums = [1], k = 0
Output: 0
Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0.


Example 2:


Input: nums = [0,10], k = 2
Output: 6
Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.


Example 3:


Input: nums = [1,3,6], k = 3
Output: 3
Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.


 

Constraints:

 * 1 <= nums.length <= 104
 * 0 <= nums[i] <= 104
 * 0 <= k <= 104",Solutions (213),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-range-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestRangeII(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().smallestRangeII(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestRangeII(self, nums: List[int], k: int) -> int:
        nums.sort()
        n = len(nums)
        ans = nums[-1] - nums[0]
        for i in range(n - 1):
            a = max(nums[-1], nums[i] + 2 * k)
            b = min(nums[0] + 2 * k, nums[i + 1])
            ans = min(ans, a - b)
        return ans"
False,0,0,948,sort-an-array,Sort an Array,sort-an-array,False,441604,740502,912,False,2,"Can you solve this real interview question? Sort an Array - Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:


Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).


Example 2:


Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * -5 * 104 <= nums[i] <= 5 * 104",Solutions (2.7K),4.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortArray(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr
            mid = len(arr) // 2
            left = merge_sort(arr[:mid])
            right = merge_sort(arr[mid:])
            return merge(left, right)
        
        def merge(left, right):
            result = []
            i = j = 0
            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    result.append(left[i])
                    i += 1
                else:
                    result.append(right[j])
                    j += 1
            result += left[i:]
            result += right[j:]
            return result
        
        return merge_sort(nums)"
False,0,0,949,cat-and-mouse-game,Cat and Mouse,cat-and-mouse,False,17027,48800,913,False,3,"Can you solve this real interview question? Cat and Mouse - A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.

The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)

Then, the game can end in three ways:

 * If ever the Cat occupies the same node as the Mouse, the Cat wins.
 * If ever the Mouse reaches the Hole, the Mouse wins.
 * If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.

Given a graph, and assuming both players play optimally, return

 * 1 if the mouse wins the game,
 * 2 if the cat wins the game, or
 * 0 if the game is a draw.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg]


Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0


Example 2:

[https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg]


Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1


 

Constraints:

 * 3 <= graph.length <= 50
 * 1 <= graph[i].length < graph.length
 * 0 <= graph[i][j] < graph.length
 * graph[i][j] != i
 * graph[i] is unique.
 * The mouse and the cat can always move. ",Solutions (127),794,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/cat-and-mouse/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def catMouseGame(self, graph: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().catMouseGame(graph)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def catMouseGame(self, graph: List[List[int]]) -> int:
        pass"
False,0,0,950,x-of-a-kind-in-a-deck-of-cards,X of a Kind in a Deck of Cards,x-of-a-kind-in-a-deck-of-cards,False,103057,329843,914,False,1,"Can you solve this real interview question? X of a Kind in a Deck of Cards - You are given an integer array deck where deck[i] represents the number written on the ith card.

Partition the cards into one or more groups such that:

 * Each group has exactly x cards where x > 1, and
 * All the cards in one group have the same integer written on them.

Return true if such partition is possible, or false otherwise.

 

Example 1:


Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].


Example 2:


Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.


 

Constraints:

 * 1 <= deck.length <= 104
 * 0 <= deck[i] < 104",Solutions (734),1.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hasGroupsSizeX(self, deck: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    deck: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().hasGroupsSizeX(deck)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def hasGroupsSizeX(self, deck: List[int]) -> bool:
        pass"
False,0,0,951,parition-array-into-disjoint-intervals,Partition Array into Disjoint Intervals,partition-array-into-disjoint-intervals,False,73685,151844,915,False,2,"Can you solve this real interview question? Partition Array into Disjoint Intervals - Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:

 * Every element in left is less than or equal to every element in right.
 * left and right are non-empty.
 * left has the smallest possible size.

Return the length of left after such a partitioning.

Test cases are generated such that partitioning exists.

 

Example 1:


Input: nums = [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]


Example 2:


Input: nums = [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]


 

Constraints:

 * 2 <= nums.length <= 105
 * 0 <= nums[i] <= 106
 * There is at least one valid answer for the given input.",Solutions (591),1.4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-into-disjoint-intervals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().partitionDisjoint(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        maxLeft = nums[0]
        partitionIdx = 0
        curMax = maxLeft
        
        for i in range(1, len(nums)):
            if nums[i] < maxLeft:
                maxLeft = curMax
                partitionIdx = i
            else:
                curMax = max(curMax, nums[i])
        
        return partitionIdx + 1"
False,0,0,952,word-subsets,Word Subsets,word-subsets,False,107772,200579,916,False,2,"Can you solve this real interview question? Word Subsets - You are given two string arrays words1 and words2.

A string b is a subset of string a if every letter in b occurs in a including multiplicity.

 * For example, ""wrr"" is a subset of ""warrior"" but is not a subset of ""world"".

A string a from words1 is universal if for every string b in words2, b is a subset of a.

Return an array of all the universal strings in words1. You may return the answer in any order.

 

Example 1:


Input: words1 = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], words2 = [""e"",""o""]
Output: [""facebook"",""google"",""leetcode""]


Example 2:


Input: words1 = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], words2 = [""l"",""e""]
Output: [""apple"",""google"",""leetcode""]


 

Constraints:

 * 1 <= words1.length, words2.length <= 104
 * 1 <= words1[i].length, words2[i].length <= 10
 * words1[i] and words2[i] consist only of lowercase English letters.
 * All the strings of words1 are unique.",Solutions (1.1K),2.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/word-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words1: List[str] = deserialize(""List[str]"", read_line())
    words2: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().wordSubsets(words1, words2)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:
        from collections import Counter
        res = []
        count = Counter()
        for word in words2:
            count |= Counter(word)
            
        for word in words1:
            if all(word.count(letter) >= count[letter] for letter in count):
                res.append(word)
        
        return res"
False,0,0,953,reverse-only-letters,Reverse Only Letters,reverse-only-letters,False,160021,258105,917,False,1,"Can you solve this real interview question? Reverse Only Letters - Given a string s, reverse the string according to the following rules:

 * All the characters that are not English letters remain in the same position.
 * All the English letters (lowercase or uppercase) should be reversed.

Return s after reversing it.

 

Example 1:

Input: s = ""ab-cd""
Output: ""dc-ba""


Example 2:

Input: s = ""a-bC-dEf-ghIj""
Output: ""j-Ih-gfE-dCba""


Example 3:

Input: s = ""Test1ng-Leet=code-Q!""
Output: ""Qedo1ct-eeLg=ntse-T!""


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of characters with ASCII values in the range [33, 122].
 * s does not contain '\""' or '\\'.",Solutions (2.1K),1.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-only-letters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseOnlyLetters(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reverseOnlyLetters(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseOnlyLetters(self, s: str) -> str:
        letters = [c for c in s if c.isalpha()]
        res = []
        for c in s:
            if c.isalpha():
                res.append(letters.pop())
            else:
                res.append(c)
        return """".join(res)"
False,0,0,954,maximum-sum-circular-subarray,Maximum Sum Circular Subarray,maximum-sum-circular-subarray,False,204375,476529,918,False,2,"Can you solve this real interview question? Maximum Sum Circular Subarray - Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:


Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.


Example 2:


Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.


Example 3:


Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 3 * 104
 * -3 * 104 <= nums[i] <= 3 * 104",Solutions (1.5K),5.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-circular-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSubarraySumCircular(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        n = len(nums)
        total_sum = sum(nums)
        max_sum = float('-inf')
        min_sum = float('inf')
        curr_max = 0
        curr_min = 0

        for num in nums:
            curr_max = max(curr_max + num, num)
            max_sum = max(max_sum, curr_max)
            curr_min = min(curr_min + num, num)
            min_sum = min(min_sum, curr_min)

        if max_sum > 0:
            return max(max_sum, total_sum - min_sum)
        else:
            return max_sum"
False,0,0,956,number-of-music-playlists,Number of Music Playlists,number-of-music-playlists,False,22404,44070,920,False,3,"Can you solve this real interview question? Number of Music Playlists - Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:

 * Every song is played at least once.
 * A song can only be played again only if k other songs have been played.

Given n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: n = 3, goal = 3, k = 1
Output: 6
Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].


Example 2:


Input: n = 2, goal = 3, k = 0
Output: 6
Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].


Example 3:


Input: n = 2, goal = 3, k = 1
Output: 2
Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].


 

Constraints:

 * 0 <= k < n <= goal <= 100",Solutions (126),875,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-music-playlists/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    goal: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numMusicPlaylists(n, goal, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numMusicPlaylists(self, n: int, goal: int, k: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * (n + 1) for _ in range(goal + 1)]
        dp[0][0] = 1
        for i in range(1, goal + 1):
            for j in range(1, n + 1):
                dp[i][j] += dp[i - 1][j - 1] * (n - j + 1)
                dp[i][j] += dp[i - 1][j] * max(j - k, 0)
                dp[i][j] %= MOD
        return dp[goal][n]"
False,0,0,957,minimum-add-to-make-parentheses-valid,Minimum Add to Make Parentheses Valid,minimum-add-to-make-parentheses-valid,False,251527,331856,921,False,2,"Can you solve this real interview question? Minimum Add to Make Parentheses Valid - A parentheses string is valid if and only if:

 * It is the empty string,
 * It can be written as AB (A concatenated with B), where A and B are valid strings, or
 * It can be written as (A), where A is a valid string.

You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

 * For example, if s = ""()))"", you can insert an opening parenthesis to be ""(()))"" or a closing parenthesis to be ""())))"".

Return the minimum number of moves required to make s valid.

 

Example 1:


Input: s = ""())""
Output: 1


Example 2:


Input: s = ""(((""
Output: 3


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either '(' or ')'.",Solutions (2.8K),3.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minAddToMakeValid(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minAddToMakeValid(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minAddToMakeValid(self, s: str) -> int:
        stack = []
        ans = 0
        
        for char in s:
            if char == '(':
                stack.append('(')
            else:
                if len(stack) == 0:
                    ans += 1
                else:
                    stack.pop()
        
        return len(stack) + ans"
False,0,0,958,sort-array-by-parity-ii,Sort Array By Parity II,sort-array-by-parity-ii,False,214597,303607,922,False,1,"Can you solve this real interview question? Sort Array By Parity II - Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:


Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.


Example 2:


Input: nums = [2,3]
Output: [2,3]


 

Constraints:

 * 2 <= nums.length <= 2 * 104
 * nums.length is even.
 * Half of the integers in nums are even.
 * 0 <= nums[i] <= 1000

 

Follow Up: Could you solve it in-place?",Solutions (1.9K),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-array-by-parity-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortArrayByParityII(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortArrayByParityII(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortArrayByParityII(self, nums: List[int]) -> List[int]:
        even = 0
        odd = 1
        sorted_arr = [0] * len(nums)
        
        for num in nums:
            if num % 2 == 0:
                sorted_arr[even] = num
                even += 2
            else:
                sorted_arr[odd] = num
                odd += 2
                
        return sorted_arr"
False,0,0,959,3sum-with-multiplicity,3Sum With Multiplicity,3sum-with-multiplicity,False,95468,210735,923,False,2,"Can you solve this real interview question? 3Sum With Multiplicity - Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.

As the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.


Example 2:


Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.


Example 3:


Input: arr = [2,1,3], target = 6
Output: 1
Explanation: (1, 2, 3) occured one time in the array so we return 1.


 

Constraints:

 * 3 <= arr.length <= 3000
 * 0 <= arr[i] <= 100
 * 0 <= target <= 300",Solutions (658),2.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/3sum-with-multiplicity/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def threeSumMulti(self, arr: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().threeSumMulti(arr, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def threeSumMulti(self, arr: List[int], target: int) -> int:
        MOD = 10**9 + 7
        count = [0] * 101
        for i in arr:
            count[i] += 1
        res = 0
        for i in range(101):
            for j in range(i, 101):
                k = target - i - j
                if k < 0 or k > 100:
                    continue
                if i == j == k:
                    res += count[i] * (count[i] - 1) * (count[i] - 2) // 6
                elif i == j:
                    res += count[i] * (count[i] - 1) // 2 * count[k]
                elif j < k:
                    res += count[i] * count[j] * count[k]
        return res % MOD"
False,0,0,960,minimize-malware-spread,Minimize Malware Spread,minimize-malware-spread,False,42926,101973,924,False,3,"Can you solve this real interview question? Minimize Malware Spread - You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0


Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0


Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1


 

Constraints:

 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length <= n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.",Solutions (329),819,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-malware-spread/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    initial: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMalwareSpread(graph, initial)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        pass"
False,0,0,961,long-pressed-name,Long Pressed Name,long-pressed-name,False,115215,347660,925,False,1,"Can you solve this real interview question? Long Pressed Name - Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.

You examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.

 

Example 1:


Input: name = ""alex"", typed = ""aaleex""
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.


Example 2:


Input: name = ""saeed"", typed = ""ssaaedd""
Output: false
Explanation: 'e' must have been pressed twice, but it was not in the typed output.


 

Constraints:

 * 1 <= name.length, typed.length <= 1000
 * name and typed consist of only lowercase English letters.",Solutions (1.4K),2.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/long-pressed-name/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isLongPressedName(self, name: str, typed: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    name: str = deserialize(""str"", read_line())
    typed: str = deserialize(""str"", read_line())
    ans = Solution().isLongPressedName(name, typed)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isLongPressedName(self, name: str, typed: str) -> bool:
        i, j = 0, 0
        
        while j < len(typed):
            if i < len(name) and name[i] == typed[j]:
                i += 1
            elif j == 0 or typed[j] != typed[j - 1]:
                return False
            j += 1
        
        return i == len(name)"
False,0,0,962,flip-string-to-monotone-increasing,Flip String to Monotone Increasing,flip-string-to-monotone-increasing,False,174067,283030,926,False,2,"Can you solve this real interview question? Flip String to Monotone Increasing - A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:


Input: s = ""00110""
Output: 1
Explanation: We flip the last digit to get 00111.


Example 2:


Input: s = ""010110""
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.


Example 3:


Input: s = ""00011000""
Output: 2
Explanation: We flip to get 00000000.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (1.8K),4.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/flip-string-to-monotone-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFlipsMonoIncr(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minFlipsMonoIncr(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFlipsMonoIncr(self, s: str) -> int:
        n = len(s)
        left_ones = [0] * (n+1)
        right_zeros = [0] * (n+1)
        
        for i in range(1, n+1):
            left_ones[i] = left_ones[i-1] + int(s[i-1] == '1')
        
        for i in range(n-1, -1, -1):
            right_zeros[i] = right_zeros[i+1] + int(s[i] == '0')
        
        min_flips = float('inf')
        
        for i in range(n+1):
            min_flips = min(min_flips, left_ones[i] + right_zeros[i])
        
        return min_flips"
False,0,0,963,three-equal-parts,Three Equal Parts,three-equal-parts,False,27766,70200,927,False,3,"Can you solve this real interview question? Three Equal Parts - You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any [i, j] with i + 1 < j, such that:

 * arr[0], arr[1], ..., arr[i] is the first part,
 * arr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and
 * arr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.
 * All three parts have equal binary values.

If it is not possible, return [-1, -1].

Note that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.

 

Example 1:

Input: arr = [1,0,1,0,1]
Output: [0,3]


Example 2:

Input: arr = [1,1,0,1,1]
Output: [-1,-1]


Example 3:

Input: arr = [1,1,0,0,1]
Output: [0,2]


 

Constraints:

 * 3 <= arr.length <= 3 * 104
 * arr[i] is 0 or 1",Solutions (305),773,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/three-equal-parts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def threeEqualParts(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().threeEqualParts(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def threeEqualParts(self, arr: List[int]) -> List[int]:
        def find_trailing_zeros(arr):
            count = 0
            for i in range(len(arr) - 1, -1, -1):
                if arr[i] == 0:
                    count += 1
                else:
                    break
            return count
        
        total_ones = sum(arr)
        
        if total_ones % 3 != 0:
            return [-1, -1]
        
        if total_ones == 0:
            return [0, len(arr) - 1]
        
        ones_per_part = total_ones // 3
        
        end_zeros_count = find_trailing_zeros(arr)
        
        i = 0
        ones_count = 0
        while ones_count < ones_per_part:
            ones_count += arr[i]
            i += 1
        
        j = i
        ones_count = 0
        while ones_count < ones_per_part:
            ones_count += arr[j]
            j += 1
        
        k = j
        ones_count = 0
        while ones_count < ones_per_part:
            ones_count += arr[k]
            k += 1
        
        while k < len(arr) and arr[i] == arr[j] == arr[k]:
            i += 1
            j += 1
            k += 1
        
        if k == len(arr):
            return [i - 1 + end_zeros_count, j + end_zeros_count]
        else:
            return [-1, -1]"
False,0,0,964,minimize-malware-spread-ii,Minimize Malware Spread II,minimize-malware-spread-ii,False,18209,42622,928,False,3,"Can you solve this real interview question? Minimize Malware Spread II - You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.

Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from initial, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

 

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0


Example 2:

Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1


Example 3:

Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1


 

Constraints:

 * n == graph.length
 * n == graph[i].length
 * 2 <= n <= 300
 * graph[i][j] is 0 or 1.
 * graph[i][j] == graph[j][i]
 * graph[i][i] == 1
 * 1 <= initial.length < n
 * 0 <= initial[i] <= n - 1
 * All the integers in initial are unique.",Solutions (181),576,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-malware-spread-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    graph: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    initial: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMalwareSpread(graph, initial)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        pass"
False,0,0,965,unique-email-addresses,Unique Email Addresses,unique-email-addresses,False,416250,620037,929,False,1,"Can you solve this real interview question? Unique Email Addresses - Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.

 * For example, in ""alice@leetcode.com"", ""alice"" is the local name, and ""leetcode.com"" is the domain name.

If you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.

 * For example, ""alice.z@leetcode.com"" and ""alicez@leetcode.com"" forward to the same email address.

If you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.

 * For example, ""m.y+name@email.com"" will be forwarded to ""my@email.com"".

It is possible to use both of these rules at the same time.

Given an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.

 

Example 1:


Input: emails = [""test.email+alex@leetcode.com"",""test.e.mail+bob.cathy@leetcode.com"",""testemail+david@lee.tcode.com""]
Output: 2
Explanation: ""testemail@leetcode.com"" and ""testemail@lee.tcode.com"" actually receive mails.


Example 2:


Input: emails = [""a@leetcode.com"",""b@leetcode.com"",""c@leetcode.com""]
Output: 3


 

Constraints:

 * 1 <= emails.length <= 100
 * 1 <= emails[i].length <= 100
 * emails[i] consist of lowercase English letters, '+', '.' and '@'.
 * Each emails[i] contains exactly one '@' character.
 * All local and domain names are non-empty.
 * Local names do not start with a '+' character.
 * Domain names end with the "".com"" suffix.",Solutions (2.2K),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-email-addresses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numUniqueEmails(self, emails: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    emails: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numUniqueEmails(emails)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numUniqueEmails(self, emails: List[str]) -> int:
        unique_emails = set()
        for email in emails:
            local_name, domain_name = email.split('@')
            local_name = local_name.split('+')[0].replace('.', '')
            unique_emails.add(local_name + '@' + domain_name)
        return len(unique_emails)"
False,0,0,966,binary-subarrays-with-sum,Binary Subarrays With Sum,binary-subarrays-with-sum,False,65197,125232,930,False,2,"Can you solve this real interview question? Binary Subarrays With Sum - Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.

 

Example 1:


Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]


Example 2:


Input: nums = [0,0,0,0,0], goal = 0
Output: 15


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * nums[i] is either 0 or 1.
 * 0 <= goal <= nums.length",Solutions (485),2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-subarrays-with-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    goal: int = deserialize(""int"", read_line())
    ans = Solution().numSubarraysWithSum(nums, goal)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubarraysWithSum(self, nums: List[int], goal: int) -> int:
        count = 0
        sum_dict = {0:1}
        cur_sum = 0
        
        for num in nums:
            cur_sum += num
            if cur_sum - goal in sum_dict:
                count += sum_dict[cur_sum - goal]
            if cur_sum in sum_dict:
                sum_dict[cur_sum] += 1
            else:
                sum_dict[cur_sum] = 1
        
        return count"
False,0,0,967,minimum-falling-path-sum,Minimum Falling Path Sum,minimum-falling-path-sum,False,236439,342101,931,False,2,"Can you solve this real interview question? Minimum Falling Path Sum - Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/03/failing1-grid.jpg]


Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.


Example 2:

[https://assets.leetcode.com/uploads/2021/11/03/failing2-grid.jpg]


Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.


 

Constraints:

 * n == matrix.length == matrix[i].length
 * 1 <= n <= 100
 * -100 <= matrix[i][j] <= 100",Solutions (3.1K),4.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-falling-path-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minFallingPathSum(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        for i in range(1, n):
            for j in range(n):
                matrix[i][j] += min(matrix[i-1][max(0, j-1):min(n, j+2)])
        return min(matrix[-1])"
False,0,0,968,beautiful-array,Beautiful Array,beautiful-array,False,39476,60550,932,False,2,"Can you solve this real interview question? Beautiful Array - An array nums of length n is beautiful if:

 * nums is a permutation of the integers in the range [1, n].
 * For every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].

Given the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.

 

Example 1:

Input: n = 4
Output: [2,1,4,3]


Example 2:

Input: n = 5
Output: [3,1,2,5,4]


 

Constraints:

 * 1 <= n <= 1000",Solutions (197),939,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/beautiful-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def beautifulArray(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().beautifulArray(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def beautifulArray(self, n: int) -> List[int]:
        def helper(arr):
            if len(arr) <= 2:
                return arr
            odd = [i * 2 - 1 for i in helper((arr + 1) // 2)]
            even = [i * 2 for i in helper(arr // 2)]
            return odd + even
        
        return helper(list(range(1, n + 1))"
False,0,0,971,shortest-bridge,Shortest Bridge,shortest-bridge,False,124536,229177,934,False,2,"Can you solve this real interview question? Shortest Bridge - You are given an n x n binary matrix grid where 1 represents land and 0 represents water.

An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.

You may change 0's to 1's to connect the two islands to form one island.

Return the smallest number of 0's you must flip to connect the two islands.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 1


Example 2:


Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2


Example 3:


Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1


 

Constraints:

 * n == grid.length == grid[i].length
 * 2 <= n <= 100
 * grid[i][j] is either 0 or 1.
 * There are exactly two islands in grid.",Solutions (1.1K),3.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-bridge/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().shortestBridge(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,972,knight-dialer,Knight Dialer,knight-dialer,False,98552,195240,935,False,2,"Can you solve this real interview question? Knight Dialer - The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:

A chess knight can move as indicated in the chess diagram below:

[https://assets.leetcode.com/uploads/2020/08/18/chess.jpg]

We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

[https://assets.leetcode.com/uploads/2020/08/18/phone.jpg]

Given an integer n, return how many distinct phone numbers of length n we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo 109 + 7.

 

Example 1:


Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.


Example 2:


Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]


Example 3:


Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.


 

Constraints:

 * 1 <= n <= 5000",Solutions (697),1.9K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/knight-dialer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def knightDialer(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().knightDialer(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def knightDialer(self, n: int) -> int:
        MOD = 10**9 + 7
        dp = [1] * 10

        for _ in range(n - 1):
            new_dp = [0] * 10
            
            new_dp[0] = (dp[4] + dp[6]) % MOD
            new_dp[1] = (dp[6] + dp[8]) % MOD
            new_dp[2] = (dp[7] + dp[9]) % MOD
            new_dp[3] = (dp[4] + dp[8]) % MOD
            new_dp[4] = (dp[3] + dp[9] + dp[0]) % MOD
            new_dp[6] = (dp[1] + dp[7] + dp[0]) % MOD
            new_dp[7] = (dp[2] + dp[6]) % MOD
            new_dp[8] = (dp[1] + dp[3]) % MOD
            new_dp[9] = (dp[2] + dp[4]) % MOD

            dp = new_dp

        return sum(dp) % MOD"
False,0,0,973,stamping-the-sequence,Stamping The Sequence,stamping-the-sequence,False,56213,89200,936,False,3,"Can you solve this real interview question? Stamping The Sequence - You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.

In one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.

 * For example, if stamp = ""abc"" and target = ""abcba"", then s is ""?????"" initially. In one turn you can:
   * place stamp at index 0 of s to obtain ""abc??"",
   * place stamp at index 1 of s to obtain ""?abc?"", or
   * place stamp at index 2 of s to obtain ""??abc"".
   Note that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).

We want to convert s to target using at most 10 * target.length turns.

Return an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.

 

Example 1:


Input: stamp = ""abc"", target = ""ababc""
Output: [0,2]
Explanation: Initially s = ""?????"".
- Place stamp at index 0 to get ""abc??"".
- Place stamp at index 2 to get ""ababc"".
[1,0,2] would also be accepted as an answer, as well as some other answers.


Example 2:


Input: stamp = ""abca"", target = ""aabcaca""
Output: [3,0,1]
Explanation: Initially s = ""???????"".
- Place stamp at index 3 to get ""???abca"".
- Place stamp at index 0 to get ""abcabca"".
- Place stamp at index 1 to get ""aabcaca"".


 

Constraints:

 * 1 <= stamp.length <= target.length <= 1000
 * stamp and target consist of lowercase English letters.",Solutions (346),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/stamping-the-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def movesToStamp(self, stamp: str, target: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    stamp: str = deserialize(""str"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().movesToStamp(stamp, target)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def movesToStamp(self, stamp: str, target: str) -> List[int]:
        pass"
False,0,0,974,reorder-data-in-log-files,Reorder Data in Log Files,reorder-data-in-log-files,False,340684,604116,937,False,2,"Can you solve this real interview question? Reorder Data in Log Files - You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:

 * Letter-logs: All words (except the identifier) consist of lowercase English letters.
 * Digit-logs: All words (except the identifier) consist of digits.

Reorder these logs so that:

 1. The letter-logs come before all digit-logs.
 2. The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
 3. The digit-logs maintain their relative ordering.

Return the final order of the logs.

 

Example 1:


Input: logs = [""dig1 8 1 5 1"",""let1 art can"",""dig2 3 6"",""let2 own kit dig"",""let3 art zero""]
Output: [""let1 art can"",""let3 art zero"",""let2 own kit dig"",""dig1 8 1 5 1"",""dig2 3 6""]
Explanation:
The letter-log contents are all different, so their ordering is ""art can"", ""art zero"", ""own kit dig"".
The digit-logs have a relative order of ""dig1 8 1 5 1"", ""dig2 3 6"".


Example 2:


Input: logs = [""a1 9 2 3 1"",""g1 act car"",""zo4 4 7"",""ab1 off key dog"",""a8 act zoo""]
Output: [""g1 act car"",""a8 act zoo"",""ab1 off key dog"",""a1 9 2 3 1"",""zo4 4 7""]


 

Constraints:

 * 1 <= logs.length <= 100
 * 3 <= logs[i].length <= 100
 * All the tokens of logs[i] are separated by a single space.
 * logs[i] is guaranteed to have an identifier and at least one word after the identifier.",Solutions (1.5K),2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/reorder-data-in-log-files/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    logs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().reorderLogFiles(logs)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def reorderLogFiles(self, logs: List[str]) -> List[str]:
        letter_logs = []
        digitz_logs = []
        
        for log in logs:
            if log.split()[1].isdigit():
                digitz_logs.append(log)
            else:
                letter_logs.append(log)
        
        letter_logs.sort(key=lambda x: (x.split()[1:], x.split()[0]))
   	    return letter_logs + digitz_logs
"
False,0,0,976,minimum-area-rectangle,Minimum Area Rectangle,minimum-area-rectangle,False,121280,229122,939,False,2,"Can you solve this real interview question? Minimum Area Rectangle - You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/03/rec1.JPG]


Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4


Example 2:

[https://assets.leetcode.com/uploads/2021/08/03/rec2.JPG]


Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2


 

Constraints:

 * 1 <= points.length <= 500
 * points[i].length == 2
 * 0 <= xi, yi <= 4 * 104
 * All the given points are unique.",Solutions (448),1.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-area-rectangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minAreaRect(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minAreaRect(self, points: List[List[int]]) -> int:
        pass"
False,0,0,977,distinct-subsequences-ii,Distinct Subsequences II,distinct-subsequences-ii,False,32556,74061,940,False,3,"Can you solve this real interview question? Distinct Subsequences II - Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., ""ace"" is a subsequence of ""abcde"" while ""aec"" is not.

 

Example 1:


Input: s = ""abc""
Output: 7
Explanation: The 7 distinct subsequences are ""a"", ""b"", ""c"", ""ab"", ""ac"", ""bc"", and ""abc"".


Example 2:


Input: s = ""aba""
Output: 6
Explanation: The 6 distinct subsequences are ""a"", ""b"", ""ab"", ""aa"", ""ba"", and ""aba"".


Example 3:


Input: s = ""aaa""
Output: 3
Explanation: The 3 distinct subsequences are ""a"", ""aa"" and ""aaa"".


 

Constraints:

 * 1 <= s.length <= 2000
 * s consists of lowercase English letters.",Solutions (217),1.4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/distinct-subsequences-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctSubseqII(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().distinctSubseqII(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctSubseqII(self, s: str) -> int:
        dp = [0] * 26
        mod = 10**9 + 7
        for c in s:
            dp[ord(c) - ord('a')] = sum(dp) + 1
        return sum(dp) % mod"
False,0,0,978,valid-mountain-array,Valid Mountain Array,valid-mountain-array,False,355114,1062848,941,False,1,"Can you solve this real interview question? Valid Mountain Array - Given an array of integers arr, return true if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:

 * arr.length >= 3
 * There exists some i with 0 < i < arr.length - 1 such that:
   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

[https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png]

 

Example 1:

Input: arr = [2,1]
Output: false


Example 2:

Input: arr = [3,5,5]
Output: false


Example 3:

Input: arr = [0,3,2,1]
Output: true


 

Constraints:

 * 1 <= arr.length <= 104
 * 0 <= arr[i] <= 104",Solutions (2.6K),2.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-mountain-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validMountainArray(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validMountainArray(self, arr: List[int]) -> bool:
        if len(arr) < 3:
            return False
        
        i = 0
        while i < len(arr) - 1 and arr[i] < arr[i + 1]:
            i += 1
        
        if i == 0 or i == len(arr) - 1:
            return False
        
        while i < len(arr) - 1 and arr[i] > arr[i + 1]:
            i += 1
        
        return i == len(arr) - 1"
False,0,0,979,di-string-match,DI String Match,di-string-match,False,129171,167121,942,False,1,"Can you solve this real interview question? DI String Match - A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

 * s[i] == 'I' if perm[i] < perm[i + 1], and
 * s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.

 

Example 1:

Input: s = ""IDID""
Output: [0,4,1,3,2]


Example 2:

Input: s = ""III""
Output: [0,1,2,3]


Example 3:

Input: s = ""DDI""
Output: [3,2,0,1]


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either 'I' or 'D'.",Solutions (1.2K),2.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/di-string-match/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def diStringMatch(self, s: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().diStringMatch(s)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def diStringMatch(self, s: str) -> List[int]:
        n = len(s)
        res = []
        low, high = 0, n
        for c in s:
            if c == 'I':
                res.append(low)
                low += 1
            else:
                res.append(high)
                high -= 1
        res.append(high)
        return res"
False,0,0,980,find-the-shortest-superstring,Find the Shortest Superstring,find-the-shortest-superstring,False,25849,58128,943,False,3,"Can you solve this real interview question? Find the Shortest Superstring - Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in words is a substring of another string in words.

 

Example 1:


Input: words = [""alex"",""loves"",""leetcode""]
Output: ""alexlovesleetcode""
Explanation: All permutations of ""alex"",""loves"",""leetcode"" would also be accepted.


Example 2:


Input: words = [""catg"",""ctaagt"",""gcta"",""ttca"",""atgcatc""]
Output: ""gctaagttcatgcatc""


 

Constraints:

 * 1 <= words.length <= 12
 * 1 <= words[i].length <= 20
 * words[i] consists of lowercase English letters.
 * All the strings of words are unique.",Solutions (147),1.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-shortest-superstring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestSuperstring(self, words: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().shortestSuperstring(words)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shortestSuperstring(self, words: List[str]) -> str:
        pass"
False,0,0,981,delete-columns-to-make-sorted,Delete Columns to Make Sorted,delete-columns-to-make-sorted,False,168958,225853,944,False,1,"Can you solve this real interview question? Delete Columns to Make Sorted - You are given an array of n strings strs, all of the same length.

The strings can be arranged such that there is one on each line, making a grid.

 * For example, strs = [""abc"", ""bce"", ""cae""] can be arranged as follows:


abc
bce
cae


You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.

Return the number of columns that you will delete.

 

Example 1:


Input: strs = [""cba"",""daf"",""ghi""]
Output: 1
Explanation: The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.


Example 2:


Input: strs = [""a"",""b""]
Output: 0
Explanation: The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.


Example 3:


Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.


 

Constraints:

 * n == strs.length
 * 1 <= n <= 100
 * 1 <= strs[i].length <= 1000
 * strs[i] consists of lowercase English letters.",Solutions (2.4K),1.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-columns-to-make-sorted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minDeletionSize(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        return sum(1 for col in zip(*strs) if list(col) != sorted(col))"
False,0,0,982,minimum-increment-to-make-array-unique,Minimum Increment to Make Array Unique,minimum-increment-to-make-array-unique,False,73523,143924,945,False,2,"Can you solve this real interview question? Minimum Increment to Make Array Unique - You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Return the minimum number of moves to make every value in nums unique.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].


Example 2:


Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 105",Solutions (611),1.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-increment-to-make-array-unique/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minIncrementForUnique(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minIncrementForUnique(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minIncrementForUnique(self, nums: List[int]) -> int:
        nums.sort()
        moves = 0
        for i in range(1, len(nums)):
            if nums[i] <= nums[i-1]:
                moves += nums[i-1] - nums[i] + 1
                nums[i] = nums[i-1] + 1
        return moves"
False,0,0,983,validate-stack-sequences,Validate Stack Sequences,validate-stack-sequences,False,198260,292928,946,False,2,"Can you solve this real interview question? Validate Stack Sequences - Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.

 

Example 1:


Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4),
pop() -> 4,
push(5),
pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1


Example 2:


Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.


 

Constraints:

 * 1 <= pushed.length <= 1000
 * 0 <= pushed[i] <= 1000
 * All the elements of pushed are unique.
 * popped.length == pushed.length
 * popped is a permutation of pushed.",Solutions (1.8K),4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/validate-stack-sequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    pushed: List[int] = deserialize(""List[int]"", read_line())
    popped: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validateStackSequences(pushed, popped)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:
        stack = []
        i = 0
        for num in pushed:
            stack.append(num)
            while stack and stack[-1] == popped[i]:
                stack.pop()
                i += 1
        return len(stack) == 0"
False,0,0,984,most-stones-removed-with-same-row-or-column,Most Stones Removed with Same Row or Column,most-stones-removed-with-same-row-or-column,False,172811,293446,947,False,2,"Can you solve this real interview question? Most Stones Removed with Same Row or Column - On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.

 

Example 1:


Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].
2. Remove stone [2,1] because it shares the same column as [0,1].
3. Remove stone [1,2] because it shares the same row as [1,0].
4. Remove stone [1,0] because it shares the same column as [0,0].
5. Remove stone [0,1] because it shares the same row as [0,0].
Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.


Example 2:


Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].
2. Remove stone [2,0] because it shares the same column as [0,0].
3. Remove stone [0,2] because it shares the same row as [0,0].
Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.


Example 3:


Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.


 

Constraints:

 * 1 <= stones.length <= 1000
 * 0 <= xi, yi <= 104
 * No two stones are at the same coordinate point.",Solutions (1.1K),4.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeStones(self, stones: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().removeStones(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeStones(self, stones: List[List[int]]) -> int:
        def dfs(x, y):
            visited.add((x, y))
            for i in rows[x]:
                if (x, i) not in visited:
                    dfs(x, i)
            for j in cols[y]:
                if (j, y) not in visited:
                    dfs(j, y)

        rows = collections.defaultdict(list)
        cols = collections.defaultdict(list)
        for i, (x, y) in enumerate(stones):
            rows[x].append(i)
            cols[y].append(i)

        visited = set()
        components = 0
        for i, (x, y) in enumerate(stones):
            if (x, y) not in visited:
                components += 1
                dfs(x, y)
        
        return len(stones) - components"
False,0,0,985,bag-of-tokens,Bag of Tokens,bag-of-tokens,False,100335,192642,948,False,2,"Can you solve this real interview question? Bag of Tokens - You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:

 * If your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
 * If your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.

Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.

 

Example 1:


Input: tokens = [100], power = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.


Example 2:


Input: tokens = [100,200], power = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.
There is no need to play the 1st token since you cannot play it face up to add to your score.


Example 3:


Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.
2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.
3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.
4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.


 

Constraints:

 * 0 <= tokens.length <= 1000
 * 0 <= tokens[i], power < 104",Solutions (1.4K),2.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/bag-of-tokens/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tokens: List[int] = deserialize(""List[int]"", read_line())
    power: int = deserialize(""int"", read_line())
    ans = Solution().bagOfTokensScore(tokens, power)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bagOfTokensScore(self, tokens: List[int], power: int) -> int:
        tokens.sort()
        score = 0
        max_score = 0
        left = 0
        right = len(tokens) - 1
        while left <= right:
            if power >= tokens[left]:
                power -= tokens[left]
                score += 1
                left += 1
                max_score = max(max_score, score)
            elif score > 0:
                power += tokens[right]
                score -= 1
                right -= 1
            else:
                break
        return max_score"
False,0,0,986,largest-time-for-given-digits,Largest Time for Given Digits,largest-time-for-given-digits,False,78143,222278,949,False,2,"Can you solve this real interview question? Largest Time for Given Digits - Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as ""HH:MM"", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

Return the latest 24-hour time in ""HH:MM"" format. If no valid time can be made, return an empty string.

 

Example 1:


Input: arr = [1,2,3,4]
Output: ""23:41""
Explanation: The valid 24-hour times are ""12:34"", ""12:43"", ""13:24"", ""13:42"", ""14:23"", ""14:32"", ""21:34"", ""21:43"", ""23:14"", and ""23:41"". Of these times, ""23:41"" is the latest.


Example 2:


Input: arr = [5,5,5,5]
Output: """"
Explanation: There are no valid 24-hour times as ""55:55"" is not valid.


 

Constraints:

 * arr.length == 4
 * 0 <= arr[i] <= 9",Solutions (666),639,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-time-for-given-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestTimeFromDigits(self, arr: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestTimeFromDigits(arr)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestTimeFromDigits(self, arr: List[int]) -> str:
        import itertools
        max_time = -1
        for h, i, j, k in itertools.permutations(arr):
            hour = h * 10 + i
            minute = j * 10 + k
            if hour < 24 and minute < 60:
                max_time = max(max_time, hour * 60 + minute)
        
        if max_time == -1:
            return """"
        else:
            return ""{:02d}:{:02d}"".format(max_time // 60, max_time % 60)"
False,0,0,987,reveal-cards-in-increasing-order,Reveal Cards In Increasing Order,reveal-cards-in-increasing-order,False,66347,85344,950,False,2,"Can you solve this real interview question? Reveal Cards In Increasing Order - You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the ith card is deck[i].

You can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.

You will do the following steps repeatedly until all cards are revealed:

 1. Take the top card of the deck, reveal it, and take it out of the deck.
 2. If there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
 3. If there are still unrevealed cards, go back to step 1. Otherwise, stop.

Return an ordering of the deck that would reveal the cards in increasing order.

Note that the first entry in the answer is considered to be the top of the deck.

 

Example 1:


Input: deck = [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.
After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.
We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].
We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].
We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].
We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].
We reveal 11, and move 17 to the bottom.  The deck is now [13,17].
We reveal 13, and move 17 to the bottom.  The deck is now [17].
We reveal 17.
Since all the cards revealed are in increasing order, the answer is correct.


Example 2:


Input: deck = [1,1000]
Output: [1,1000]


 

Constraints:

 * 1 <= deck.length <= 1000
 * 1 <= deck[i] <= 106
 * All the values of deck are unique.",Solutions (712),2.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/reveal-cards-in-increasing-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    deck: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().deckRevealedIncreasing(deck)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:
        deck.sort()
        result = []
        deq = deque()
        for card in deck[::-1]:
            if deq:
                deq.appendleft(deq.pop())
            deq.appendleft(card)
        return list(deq)"
False,0,0,989,largest-component-size-by-common-factor,Largest Component Size by Common Factor,largest-component-size-by-common-factor,False,48492,121186,952,False,3,"Can you solve this real interview question? Largest Component Size by Common Factor - You are given an integer array of unique positive integers nums. Consider the following graph:

 * There are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
 * There is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.

Return the size of the largest connected component in the graph.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/12/01/ex1.png]


Input: nums = [4,6,15,35]
Output: 4


Example 2:

[https://assets.leetcode.com/uploads/2018/12/01/ex2.png]


Input: nums = [20,50,9,63]
Output: 2


Example 3:

[https://assets.leetcode.com/uploads/2018/12/01/ex3.png]


Input: nums = [2,3,6,7,4,12,21,39]
Output: 8


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * 1 <= nums[i] <= 105
 * All the values of nums are unique.",Solutions (289),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-component-size-by-common-factor/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestComponentSize(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestComponentSize(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestComponentSize(self, nums: List[int]) -> int:
        pass"
False,0,0,990,verifying-an-alien-dictionary,Verifying an Alien Dictionary,verifying-an-alien-dictionary,False,454437,834529,953,False,1,"Can you solve this real interview question? Verifying an Alien Dictionary - In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.

Given a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.

 

Example 1:


Input: words = [""hello"",""leetcode""], order = ""hlabcdefgijkmnopqrstuvwxyz""
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.


Example 2:


Input: words = [""word"",""world"",""row""], order = ""worldabcefghijkmnpqstuvxyz""
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.


Example 3:


Input: words = [""apple"",""app""], order = ""abcdefghijklmnopqrstuvwxyz""
Output: false
Explanation: The first three characters ""app"" match, and the second string is shorter (in size.) According to lexicographical rules ""apple"" > ""app"", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More infohttps://en.wikipedia.org/wiki/Lexicographical_order).


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 20
 * order.length == 26
 * All characters in words[i] and order are English lowercase letters.",Solutions (3.4K),4.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/verifying-an-alien-dictionary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    order: str = deserialize(""str"", read_line())
    ans = Solution().isAlienSorted(words, order)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isAlienSorted(self, words: List[str], order: str) -> bool:
        alien_dict = {c: i for i, c in enumerate(order)}
        
        def compare_words(word1, word2):
            i = 0
            while i < len(word1) and i < len(word2):
                if alien_dict[word1[i]] < alien_dict[word2[i]]:
                    return -1
                elif alien_dict[word1[i]] > alien_dict[word2[i]]:
                    return 1
                i += 1
            return -1 if len(word1) < len(word2) else 0
        
        for i in range(1, len(words)):
            if compare_words(words[i-1], words[i]) > 0:
                return False
        
        return True"
False,0,0,991,array-of-doubled-pairs,Array of Doubled Pairs,array-of-doubled-pairs,False,80510,206112,954,False,2,"Can you solve this real interview question? Array of Doubled Pairs - Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.

 

Example 1:


Input: arr = [3,1,3,6]
Output: false


Example 2:


Input: arr = [2,1,2,6]
Output: false


Example 3:


Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].


 

Constraints:

 * 2 <= arr.length <= 3 * 104
 * arr.length is even.
 * -105 <= arr[i] <= 105",Solutions (623),1.4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/array-of-doubled-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canReorderDoubled(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canReorderDoubled(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canReorderDoubled(self, arr: List[int]) -> bool:
        from collections import Counter
        
        arr.sort(key=abs)
        counter = Counter(arr)
        
        for num in arr:
            if counter[num] == 0:
                continue
            if counter[2 * num] == 0:
                return False
            counter[num] -= 1
            counter[2 * num] -= 1
        
        return True"
False,0,0,992,delete-columns-to-make-sorted-ii,Delete Columns to Make Sorted II,delete-columns-to-make-sorted-ii,False,17725,51107,955,False,2,"Can you solve this real interview question? Delete Columns to Make Sorted II - You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = [""abcdef"",""uvwxyz""] and deletion indices {0, 2, 3}, then the final array after deletions is [""bef"", ""vyz""].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.

 

Example 1:


Input: strs = [""ca"",""bb"",""ac""]
Output: 1
Explanation: 
After deleting the first column, strs = [""a"", ""b"", ""c""].
Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).
We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.


Example 2:


Input: strs = [""xc"",""yb"",""za""]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.
Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)


Example 3:


Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: We have to delete every column.


 

Constraints:

 * n == strs.length
 * 1 <= n <= 100
 * 1 <= strs[i].length <= 100
 * strs[i] consists of lowercase English letters.",Solutions (148),581,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-columns-to-make-sorted-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minDeletionSize(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        count = 0
        for i in range(len(strs[0])):
            for j in range(len(strs) - 1):
                if strs[j][i] > strs[j+1][i]:
                    count += 1
                    break
        return count"
False,0,0,993,tallest-billboard,Tallest Billboard,tallest-billboard,False,15797,39593,956,False,3,"Can you solve this real interview question? Tallest Billboard - You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.

You are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return 0.

 

Example 1:


Input: rods = [1,2,3,6]
Output: 6
Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.


Example 2:


Input: rods = [1,2,3,4,5,6]
Output: 10
Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.


Example 3:


Input: rods = [1,2]
Output: 0
Explanation: The billboard cannot be supported, so we return 0.


 

Constraints:

 * 1 <= rods.length <= 20
 * 1 <= rods[i] <= 1000
 * sum(rods[i]) <= 5000",Solutions (111),852,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/tallest-billboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def tallestBillboard(self, rods: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rods: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().tallestBillboard(rods)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def tallestBillboard(self, rods: List[int]) -> int:
        pass"
False,0,0,994,prison-cells-after-n-days,Prison Cells After N Days,prison-cells-after-n-days,False,151583,388064,957,False,2,"Can you solve this real interview question? Prison Cells After N Days - There are 8 prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:

 * If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
 * Otherwise, it becomes vacant.

Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.

Return the state of the prison after n days (i.e., n such changes described above).

 

Example 1:


Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]


Example 2:


Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]


 

Constraints:

 * cells.length == 8
 * cells[i] is either 0 or 1.
 * 1 <= n <= 109",Solutions (801),1.4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/prison-cells-after-n-days/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def prisonAfterNDays(self, cells: List[int], n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    cells: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().prisonAfterNDays(cells, n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def prisonAfterNDays(self, cells: List[int], n: int) -> List[int]:
        def nextDay(cells):
            new_cells = [0] * 8
            for i in range(1, 7):
                if cells[i-1] == cells[i+1]:
                    new_cells[i] = 1
            return new_cells
        
        seen = {}
        while n > 0:
            c = tuple(cells)
            if c in seen:
                n %= seen[c] - n
            seen[c] = n
            
            if n > 0:
                n -= 1
                cells = nextDay(cells)
        
        return cells"
False,0,0,999,regions-cut-by-slashes,Regions Cut By Slashes,regions-cut-by-slashes,False,44874,64990,959,False,2,"Can you solve this real interview question? Regions Cut By Slashes - An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. These characters divide the square into contiguous regions.

Given the grid grid represented as a string array, return the number of regions.

Note that backslash characters are escaped, so a '\' is represented as '\\'.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/12/15/1.png]


Input: grid = ["" /"",""/ ""]
Output: 2


Example 2:

[https://assets.leetcode.com/uploads/2018/12/15/2.png]


Input: grid = ["" /"",""  ""]
Output: 1


Example 3:

[https://assets.leetcode.com/uploads/2018/12/15/4.png]


Input: grid = [""/\\"",""\\/""]
Output: 5
Explanation: Recall that because \ characters are escaped, ""\\/"" refers to \/, and ""/\\"" refers to /\.


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 30
 * grid[i][j] is either '/', '\', or ' '.",Solutions (440),2.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/regions-cut-by-slashes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().regionsBySlashes(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def regionsBySlashes(self, grid: List[str]) -> int:
        pass"
False,0,0,1000,delete-columns-to-make-sorted-iii,Delete Columns to Make Sorted III,delete-columns-to-make-sorted-iii,False,12034,21056,960,False,3,"Can you solve this real interview question? Delete Columns to Make Sorted III - You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = [""abcdef"",""uvwxyz""] and deletion indices {0, 2, 3}, then the final array after deletions is [""bef"", ""vyz""].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.

 

Example 1:


Input: strs = [""babca"",""bbazb""]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = [""bc"", ""az""].
Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).
Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.

Example 2:


Input: strs = [""edcba""]
Output: 4
Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.


Example 3:


Input: strs = [""ghi"",""def"",""abc""]
Output: 0
Explanation: All rows are already lexicographically sorted.


 

Constraints:

 * n == strs.length
 * 1 <= n <= 100
 * 1 <= strs[i].length <= 100
 * strs[i] consists of lowercase English letters.

 *  ",Solutions (101),521,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-columns-to-make-sorted-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minDeletionSize(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDeletionSize(self, strs: List[str]) -> int:
        n = len(strs[0])
        dp = [1] * n
        
        for j in range(1, n):
            for i in range(j):
                if all(row[i] <= row[j] for row in strs):
                    dp[j] = max(dp[j], dp[i] + 1)
        
        return n - max(dp)"
False,0,0,1001,n-repeated-element-in-size-2n-array,N-Repeated Element in Size 2N Array,n-repeated-element-in-size-2n-array,False,202713,266575,961,False,1,"Can you solve this real interview question? N-Repeated Element in Size 2N Array - You are given an integer array nums with the following properties:

 * nums.length == 2 * n.
 * nums contains n + 1 unique elements.
 * Exactly one element of nums is repeated n times.

Return the element that is repeated n times.

 

Example 1:

Input: nums = [1,2,3,3]
Output: 3


Example 2:

Input: nums = [2,1,2,5,3,2]
Output: 2


Example 3:

Input: nums = [5,1,5,2,5,3,5,4]
Output: 5


 

Constraints:

 * 2 <= n <= 5000
 * nums.length == 2 * n
 * 0 <= nums[i] <= 104
 * nums contains n + 1 unique elements and one of them is repeated exactly n times.",Solutions (1.7K),1.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/n-repeated-element-in-size-2n-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repeatedNTimes(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().repeatedNTimes(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def repeatedNTimes(self, nums: List[int]) -> int:
        for num in nums:
            if nums.count(num) == len(nums)//2:
                return num"
False,0,0,1002,maximum-width-ramp,Maximum Width Ramp,maximum-width-ramp,False,39469,80770,962,False,2,"Can you solve this real interview question? Maximum Width Ramp - A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

 

Example 1:


Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.


Example 2:


Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.


 

Constraints:

 * 2 <= nums.length <= 5 * 104
 * 0 <= nums[i] <= 5 * 104",Solutions (297),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-width-ramp/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxWidthRamp(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxWidthRamp(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxWidthRamp(self, nums: List[int]) -> int:
        stack = []
        res = 0
        for i, num in enumerate(nums):
            if not stack or nums[stack[-1]] > num:
                stack.append(i)
        for j in range(len(nums) - 1, -1, -1):
            while stack and nums[stack[-1]] <= nums[j]:
                res = max(res, j - stack.pop())
        return res"
False,0,0,1003,minimum-area-rectangle-ii,Minimum Area Rectangle II,minimum-area-rectangle-ii,False,25071,45828,963,False,2,"Can you solve this real interview question? Minimum Area Rectangle II - You are given an array of points in the X-Y plane points where points[i] = [xi, yi].

Return the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.

Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

[https://assets.leetcode.com/uploads/2018/12/21/1a.png]


Input: points = [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.


Example 2:

[https://assets.leetcode.com/uploads/2018/12/22/2.png]


Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.


Example 3:

[https://assets.leetcode.com/uploads/2018/12/22/3.png]


Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]
Output: 0
Explanation: There is no possible rectangle to form from these points.


 

Constraints:

 * 1 <= points.length <= 50
 * points[i].length == 2
 * 0 <= xi, yi <= 4 * 104
 * All the given points are unique.",Solutions (132),346,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-area-rectangle-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minAreaFreeRect(self, points: List[List[int]]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minAreaFreeRect(points)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def minAreaFreeRect(self, points: List[List[int]]) -> float:
        pass"
False,0,0,1004,least-operators-to-express-number,Least Operators to Express Number,least-operators-to-express-number,False,8793,18341,964,False,3,"Can you solve this real interview question? Least Operators to Express Number - Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.

When writing such an expression, we adhere to the following conventions:

 * The division operator (/) returns rational numbers.
 * There are no parentheses placed anywhere.
 * We use the usual order of operations: multiplication and division happen before addition and subtraction.
 * It is not allowed to use the unary negation operator (-). For example, ""x - x"" is a valid expression as it only uses subtraction, but ""-x + x"" is not because it uses negation.

We would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.

 

Example 1:


Input: x = 3, target = 19
Output: 5
Explanation: 3 * 3 + 3 * 3 + 3 / 3.
The expression contains 5 operations.


Example 2:


Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.
The expression contains 8 operations.


Example 3:


Input: x = 100, target = 100000000
Output: 3
Explanation: 100 * 100 * 100 * 100.
The expression contains 3 operations.


 

Constraints:

 * 2 <= x <= 100
 * 1 <= target <= 2 * 108",Solutions (64),286,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/least-operators-to-express-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def leastOpsExpressTarget(self, x: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().leastOpsExpressTarget(x, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def leastOpsExpressTarget(self, x: int, target: int) -> int:
        pass"
False,0,0,1006,vowel-spellchecker,Vowel Spellchecker,vowel-spellchecker,False,38199,74292,966,False,2,"Can you solve this real interview question? Vowel Spellchecker - Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.

For a given query word, the spell checker handles two categories of spelling mistakes:

 * Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
   * Example: wordlist = [""yellow""], query = ""YellOw"": correct = ""yellow""
   * Example: wordlist = [""Yellow""], query = ""yellow"": correct = ""Yellow""
   * Example: wordlist = [""yellow""], query = ""yellow"": correct = ""yellow""
 * Vowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.
   * Example: wordlist = [""YellOw""], query = ""yollow"": correct = ""YellOw""
   * Example: wordlist = [""YellOw""], query = ""yeellow"": correct = """" (no match)
   * Example: wordlist = [""YellOw""], query = ""yllw"": correct = """" (no match)

In addition, the spell checker operates under the following precedence rules:

 * When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
 * When the query matches a word up to capitlization, you should return the first such match in the wordlist.
 * When the query matches a word up to vowel errors, you should return the first such match in the wordlist.
 * If the query has no matches in the wordlist, you should return the empty string.

Given some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].

 

Example 1:

Input: wordlist = [""KiTe"",""kite"",""hare"",""Hare""], queries = [""kite"",""Kite"",""KiTe"",""Hare"",""HARE"",""Hear"",""hear"",""keti"",""keet"",""keto""]
Output: [""kite"",""KiTe"",""KiTe"",""Hare"",""hare"","""","""",""KiTe"","""",""KiTe""]


Example 2:

Input: wordlist = [""yellow""], queries = [""YellOw""]
Output: [""yellow""]


 

Constraints:

 * 1 <= wordlist.length, queries.length <= 5000
 * 1 <= wordlist[i].length, queries[i].length <= 7
 * wordlist[i] and queries[i] consist only of only English letters.",Solutions (234),383,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/vowel-spellchecker/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    wordlist: List[str] = deserialize(""List[str]"", read_line())
    queries: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().spellchecker(wordlist, queries)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def spellchecker(self, wordlist: List[str], queries: List[str]) -> List[str]:
        def replace_vowels(word):
            vowels = 'aeiou'
            res = []
            for char in word:
                res.append('#' if char.lower() in vowels else char.lower())
            return ''.join(res)

        words_set = set(wordlist)
        words_dict = {}
        for word in wordlist:
            lower_word = word.lower()
            words_dict.setdefault(lower_word, word)
            words_dict.setdefault(replace_vowels(lower_word), word)

        def check_word(word):
            lower_word = word.lower()
            if word in words_set:
                return word
            if lower_word in words_dict:
                return words_dict[lower_word]
            replaced = replace_vowels(lower_word)
            if replaced in words_dict:
                return words_dict[replaced]
            return """"
        
        return [check_word(query) for query in queries]"
False,0,0,1007,numbers-with-same-consecutive-differences,Numbers With Same Consecutive Differences,numbers-with-same-consecutive-differences,False,119419,207983,967,False,2,"Can you solve this real interview question? Numbers With Same Consecutive Differences - Given two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. You may return the answer in any order.

Note that the integers should not have leading zeros. Integers as 02 and 043 are not allowed.

 

Example 1:


Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.


Example 2:


Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]


 

Constraints:

 * 2 <= n <= 9
 * 0 <= k <= 9",Solutions (1.7K),2.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/numbers-with-same-consecutive-differences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numsSameConsecDiff(n, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:
        if n == 1:
            return [i for i in range(10)]
        
        def dfs(n, num, output):
            if n == 0:
                output.append(num)
                return
            tail_digit = num % 10
            next_digits = set([tail_digit + k, tail_digit - k])
            
            for next_digit in next_digits:
                if 0 <= next_digit < 10:
                    new_num = num * 10 + next_digit
                    dfs(n - 1, new_num, output)
        
        output = []
        for num in range(1, 10):
            dfs(n - 1, num, output)
        
        return output"
False,0,0,1009,pancake-sorting,Pancake Sorting,pancake-sorting,False,82897,118259,969,False,2,"Can you solve this real interview question? Pancake Sorting - Given an array of integers arr, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:

 * Choose an integer k where 1 <= k <= arr.length.
 * Reverse the sub-array arr[0...k-1] (0-indexed).

For example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.

Return an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.

 

Example 1:


Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.
Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.


Example 2:


Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.
Note that other answers, such as [3, 3], would also be accepted.


 

Constraints:

 * 1 <= arr.length <= 100
 * 1 <= arr[i] <= arr.length
 * All integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).",Solutions (802),1.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/pancake-sorting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pancakeSort(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().pancakeSort(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def pancakeSort(self, arr: List[int]) -> List[int]:
        res = []
        n = len(arr)
        for x in range(n, 1, -1):
            idx = arr.index(x)
            if idx == x - 1:
                continue
            if idx != 0:
                res.append(idx + 1)
                arr = arr[:idx+1][::-1] + arr[idx+1:]
            res.append(x)
            arr = arr[:x][::-1] + arr[x:]
        return res"
False,0,0,1010,powerful-integers,Powerful Integers,powerful-integers,False,49974,114590,970,False,2,"Can you solve this real interview question? Powerful Integers - Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.

An integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.

You may return the answer in any order. In your answer, each value should occur at most once.

 

Example 1:


Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation:
2 = 20 + 30
3 = 21 + 30
4 = 20 + 31
5 = 21 + 31
7 = 22 + 31
9 = 23 + 30
10 = 20 + 32


Example 2:


Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]


 

Constraints:

 * 1 <= x, y <= 100
 * 0 <= bound <= 106",Solutions (487),324,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/powerful-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    y: int = deserialize(""int"", read_line())
    bound: int = deserialize(""int"", read_line())
    ans = Solution().powerfulIntegers(x, y, bound)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def powerfulIntegers(self, x: int, y: int, bound: int) -> List[int]:
        result = []
        for i in range(int(log(bound, x)) + 2):
            for j in range(int(log(bound, y)) + 2):
                value = x ** i + y ** j
                if value <= bound:
                    result.append(value)
        return list(set(result))"
False,0,0,1012,equal-rational-numbers,Equal Rational Numbers,equal-rational-numbers,False,6152,14181,972,False,3,"Can you solve this real interview question? Equal Rational Numbers - Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:

 * <IntegerPart>
   * For example, 12, 0, and 123.
 * <IntegerPart><.><NonRepeatingPart>
   * For example, 0.5, 1., 2.12, and 123.0001.
 * <IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>
   * For example, 0.1(6), 1.(9), 123.00(1212).

The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:

 * 1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).

 

Example 1:


Input: s = ""0.(52)"", t = ""0.5(25)""
Output: true
Explanation: Because ""0.(52)"" represents 0.52525252..., and ""0.5(25)"" represents 0.52525252525..... , the strings represent the same number.


Example 2:


Input: s = ""0.1666(6)"", t = ""0.166(66)""
Output: true


Example 3:


Input: s = ""0.9(9)"", t = ""1.""
Output: true
Explanation: ""0.9(9)"" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.https://en.wikipedia.org/wiki/0.999...]
""1."" represents the number 1, which is formed correctly: (IntegerPart) = ""1"" and (NonRepeatingPart) = """".


 

Constraints:

 * Each part consists only of digits.
 * The <IntegerPart> does not have leading zeros (except for the zero itself).
 * 1 <= <IntegerPart>.length <= 4
 * 0 <= <NonRepeatingPart>.length <= 4
 * 1 <= <RepeatingPart>.length <= 4",Solutions (97),83,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/equal-rational-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isRationalEqual(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().isRationalEqual(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isRationalEqual(self, s: str, t: str) -> bool:
        def to_float(s):
            if '.' not in s:
                return int(s)
            parts = s.split('.')
            non_repeat = 0 if not parts[1] else int(parts[1])
            repeat = 0
            if '(' in parts[1]:
                idx = parts[1].index('(')
                non_repeat = int(parts[1][:idx])
                repeat = int(parts[1][idx + 1: -1])
                repeat = repeat * 10 ** (len(parts[1]) - idx - 2)
            return int(parts[0]) + (non_repeat + repeat/(10 ** (len(str(repeat))))) / (10 ** len(str(non_repeat + repeat)))

        return abs(to_float(s) - to_float(t)) < 1e-9"
False,0,0,1013,fibonacci-number,Fibonacci Number,fibonacci-number,False,1277760,1831207,509,False,1,"Can you solve this real interview question? Fibonacci Number - The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,


F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.


Given n, calculate F(n).

 

Example 1:


Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


Example 2:


Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.


Example 3:


Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.


 

Constraints:

 * 0 <= n <= 30",Solutions (7.5K),6.4K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/fibonacci-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fib(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().fib(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def fib(self, n: int) -> int:
        if n <= 1:
            return n
        else:
            return self.fib(n-1) + self.fib(n-2)"
False,0,0,1014,k-closest-points-to-origin,K Closest Points to Origin,k-closest-points-to-origin,False,958675,1458534,973,False,2,"Can you solve this real interview question? K Closest Points to Origin - Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).

The distance between two points on the X-Y plane is the Euclidean distance (i.e., √(x1 - x2)2 + (y1 - y2)2).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg]


Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].


Example 2:


Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.


 

Constraints:

 * 1 <= k <= points.length <= 104
 * -104 < xi, yi < 104",Solutions (4.3K),7.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/k-closest-points-to-origin/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kClosest(points, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        return sorted(points, key=lambda x: x[0]**2 + x[1]**2)[:k]"
False,0,0,1016,subarray-sums-divisible-by-k,Subarray Sums Divisible by K,subarray-sums-divisible-by-k,False,194002,356559,974,False,2,"Can you solve this real interview question? Subarray Sums Divisible by K - Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]


Example 2:


Input: nums = [5], k = 9
Output: 0


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -104 <= nums[i] <= 104
 * 2 <= k <= 104",Solutions (1.5K),5.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/subarray-sums-divisible-by-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().subarraysDivByK(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarraysDivByK(self, nums: List[int], k: int) -> int:
        count = 0
        sum_map = {0: 1}
        prefix_sum = 0
        
        for num in nums:
            prefix_sum = (prefix_sum + num) % k
            count += sum_map.get(prefix_sum, 0)
            sum_map[prefix_sum] = sum_map.get(prefix_sum, 0) + 1
        
        return count"
False,0,0,1017,odd-even-jump,Odd Even Jump,odd-even-jump,False,72135,185413,975,False,3,"Can you solve this real interview question? Odd Even Jump - You are given an integer array arr. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index i to index j (with i < j) in the following way:

 * During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.
 * During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.
 * It may be the case that for some index i, there are no legal jumps.

A starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.

 

Example 1:


Input: arr = [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.
From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.
From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.
From starting index i = 4, we have reached the end already.
In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of
jumps.


Example 2:


Input: arr = [2,3,1,1,4]
Output: 3
Explanation: 
From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].
During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].
We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.
In a similar manner, we can deduce that:
From starting index i = 1, we jump to i = 4, so we reach the end.
From starting index i = 2, we jump to i = 3, and then we can't jump anymore.
From starting index i = 3, we jump to i = 4, so we reach the end.
From starting index i = 4, we are already at the end.
In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some
number of jumps.


Example 3:


Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indices 1, 2, and 4.


 

Constraints:

 * 1 <= arr.length <= 2 * 104
 * 0 <= arr[i] < 105",Solutions (401),1.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/odd-even-jump/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def oddEvenJumps(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().oddEvenJumps(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def oddEvenJumps(self, arr: List[int]) -> int:
        # Add your code here
        pass"
False,0,0,1018,largest-perimeter-triangle,Largest Perimeter Triangle,largest-perimeter-triangle,False,199382,364971,976,False,1,"Can you solve this real interview question? Largest Perimeter Triangle - Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.

 

Example 1:


Input: nums = [2,1,2]
Output: 5
Explanation: You can form a triangle with three side lengths: 1, 2, and 2.


Example 2:


Input: nums = [1,2,1,10]
Output: 0
Explanation: 
You cannot use the side lengths 1, 1, and 2 to form a triangle.
You cannot use the side lengths 1, 1, and 10 to form a triangle.
You cannot use the side lengths 1, 2, and 10 to form a triangle.
As we cannot use any three side lengths to form a triangle of non-zero area, we return 0.


 

Constraints:

 * 3 <= nums.length <= 104
 * 1 <= nums[i] <= 106",Solutions (1.9K),2.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-perimeter-triangle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestPerimeter(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestPerimeter(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestPerimeter(self, nums: List[int]) -> int:
        nums.sort()
        for i in range(len(nums)-3, -1, -1):
            if nums[i] + nums[i+1] > nums[i+2]:
                return nums[i] + nums[i+1] + nums[i+2]
        return 0"
False,0,0,1019,squares-of-a-sorted-array,Squares of a Sorted Array,squares-of-a-sorted-array,False,1366482,1900887,977,False,1,"Can you solve this real interview question? Squares of a Sorted Array - Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

 

Example 1:


Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].


Example 2:


Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]


 

Constraints:

 * 1 <= nums.length <= 104
 * -104 <= nums[i] <= 104
 * nums is sorted in non-decreasing order.

 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?",Solutions (6.8K),7.6K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/squares-of-a-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortedSquares(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        return sorted([num*num for num in nums])"
False,0,0,1020,longest-turbulent-subarray,Longest Turbulent Subarray,longest-turbulent-subarray,False,82594,175040,978,False,2,"Can you solve this real interview question? Longest Turbulent Subarray - Given an integer array arr, return the length of a maximum size turbulent subarray of arr.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:

 * For i <= k < j:
   * arr[k] > arr[k + 1] when k is odd, and
   * arr[k] < arr[k + 1] when k is even.
 * Or, for i <= k < j:
   * arr[k] > arr[k + 1] when k is even, and
   * arr[k] < arr[k + 1] when k is odd.

 

Example 1:


Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]


Example 2:


Input: arr = [4,8,12,16]
Output: 2


Example 3:


Input: arr = [100]
Output: 1


 

Constraints:

 * 1 <= arr.length <= 4 * 104
 * 0 <= arr[i] <= 109",Solutions (904),1.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-turbulent-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTurbulenceSize(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxTurbulenceSize(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxTurbulenceSize(self, arr: List[int]) -> int:
        N = len(arr)
        inc = dec = res = 1
        
        for i in range(1, N):
            if arr[i] > arr[i - 1]:
                inc = dec + 1
                dec = 1
            elif arr[i] < arr[i - 1]:
                dec = inc + 1
                inc = 1
            else:
                inc = dec = 1
            res = max(res, max(inc, dec))
        
        return res"
False,0,0,1022,unique-paths-iii,Unique Paths III,unique-paths-iii,False,172583,211096,980,False,3,"Can you solve this real interview question? Unique Paths III - You are given an m x n integer array grid where grid[i][j] could be:

 * 1 representing the starting square. There is exactly one starting square.
 * 2 representing the ending square. There is exactly one ending square.
 * 0 representing empty squares we can walk over.
 * -1 representing obstacles that we cannot walk over.

Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg]


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)


Example 2:

[https://assets.leetcode.com/uploads/2021/08/02/lc-unique2.jpg]


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)


Example 3:

[https://assets.leetcode.com/uploads/2021/08/02/lc-unique3-.jpg]


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 20
 * 1 <= m * n <= 20
 * -1 <= grid[i][j] <= 2
 * There is exactly one starting cell and one ending cell.",Solutions (2.3K),4.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-paths-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().uniquePathsIII(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        def dfs(i, j, empty):
            if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] != -1):
                return 0
            if grid[i][j] == 2:
                return 1 if empty == 1 else 0
            
            grid[i][j] = -1
            count = sum(dfs(i+x, j+y, empty-1) for x, y in directions)
            grid[i][j] = 0
            return count

        start = (0, 0)
        empty = sum(cell != -1 for row in grid for cell in row)
        return dfs(start[0], start[1], empty)"
False,0,0,1024,,Triples with Bitwise AND Equal To Zero,triples-with-bitwise-and-equal-to-zero,False,14725,25574,982,False,3,"Can you solve this real interview question? Triples with Bitwise AND Equal To Zero - Given an integer array nums, return the number of AND triples.

An AND triple is a triple of indices (i, j, k) such that:

 * 0 <= i < nums.length
 * 0 <= j < nums.length
 * 0 <= k < nums.length
 * nums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.

 

Example 1:


Input: nums = [2,1,3]
Output: 12
Explanation: We could choose the following i, j, k triples:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2


Example 2:


Input: nums = [0,0,0]
Output: 27


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] < 216",Solutions (132),365,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countTriplets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countTriplets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countTriplets(self, nums: List[int]) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                for k in range(len(nums)):
                    if nums[i] & nums[j] & nums[k] == 0:
                        count += 1
        return count"
False,0,0,1025,minimum-cost-for-tickets,Minimum Cost For Tickets,minimum-cost-for-tickets,False,188428,293132,983,False,2,"Can you solve this real interview question? Minimum Cost For Tickets - You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.

Train tickets are sold in three different ways:

 * a 1-day pass is sold for costs[0] dollars,
 * a 7-day pass is sold for costs[1] dollars, and
 * a 30-day pass is sold for costs[2] dollars.

The passes allow that many days of consecutive travel.

 * For example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of days.

 

Example 1:


Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.
On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.
On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.
In total, you spent $11 and covered all the days of your travel.


Example 2:


Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.
On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.
In total, you spent $17 and covered all the days of your travel.


 

Constraints:

 * 1 <= days.length <= 365
 * 1 <= days[i] <= 365
 * days is in strictly increasing order.
 * costs.length == 3
 * 1 <= costs[i] <= 1000",Solutions (2.3K),7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-for-tickets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    days: List[int] = deserialize(""List[int]"", read_line())
    costs: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mincostTickets(days, costs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mincostTickets(self, days: List[int], costs: List[int]) -> int:
        dp = [0] * (days[-1] + 1)
        for i in range(1, days[-1] + 1):
            if i not in days:
                dp[i] = dp[i - 1]
            else:
                dp[i] = min(dp[max(i-1, 0)] + costs[0], dp[max(i-7, 0)] + costs[1], dp[max(i-30, 0)] + costs[2])
        return dp[days[-1]]"
False,0,0,1026,string-without-aaa-or-bbb,String Without AAA or BBB,string-without-aaa-or-bbb,False,40109,93080,984,False,2,"Can you solve this real interview question? String Without AAA or BBB - Given two integers a and b, return any string s such that:

 * s has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,
 * The substring 'aaa' does not occur in s, and
 * The substring 'bbb' does not occur in s.

 

Example 1:


Input: a = 1, b = 2
Output: ""abb""
Explanation: ""abb"", ""bab"" and ""bba"" are all correct answers.


Example 2:


Input: a = 4, b = 1
Output: ""aabaa""


 

Constraints:

 * 0 <= a, b <= 100
 * It is guaranteed such an s exists for the given a and b.",Solutions (548),689,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/string-without-aaa-or-bbb/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def strWithout3a3b(self, a: int, b: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    ans = Solution().strWithout3a3b(a, b)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def strWithout3a3b(self, a: int, b: int) -> str:
        s = """"
        while a > 0 and b > 0:
            if a > b:
                s += ""aab""
                a -= 2
                b -= 1
            elif a < b:
                s += ""bba""
                a -= 1
                b -= 2
            else:
                s += ""ab""
                a -= 1
                b -= 1
        
        if a > 0:
            s = ""a"" * a + s
        elif b > 0:
            s = ""b"" * b + s
        
        return s"
False,0,0,1027,sum-of-even-numbers-after-queries,Sum of Even Numbers After Queries,sum-of-even-numbers-after-queries,False,130995,192185,985,False,2,"Can you solve this real interview question? Sum of Even Numbers After Queries - You are given an integer array nums and an array queries where queries[i] = [vali, indexi].

For each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.

Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:


Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: At the beginning, the array is [1,2,3,4].
After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.
After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.
After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.
After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.


Example 2:


Input: nums = [1], queries = [[4,0]]
Output: [0]


 

Constraints:

 * 1 <= nums.length <= 104
 * -104 <= nums[i] <= 104
 * 1 <= queries.length <= 104
 * -104 <= vali <= 104
 * 0 <= indexi < nums.length",Solutions (1.8K),2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-even-numbers-after-queries/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumEvenAfterQueries(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().sumEvenAfterQueries(nums, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sumEvenAfterQueries(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        res = []
        even_sum = sum(num for num in nums if num % 2 == 0)
        for val, index in queries:
            if nums[index] % 2 == 0:
                even_sum -= nums[index]
            nums[index] += val
            if nums[index] % 2 == 0:
                even_sum += nums[index]
            res.append(even_sum)
        return res"
False,0,0,1028,interval-list-intersections,Interval List Intersections,interval-list-intersections,False,349908,490522,986,False,2,"Can you solve this real interview question? Interval List Intersections - You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 

Example 1:

[https://assets.leetcode.com/uploads/2019/01/30/interval1.png]


Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]


Example 2:


Input: firstList = [[1,3],[5,9]], secondList = []
Output: []


 

Constraints:

 * 0 <= firstList.length, secondList.length <= 1000
 * firstList.length + secondList.length >= 1
 * 0 <= starti < endi <= 109
 * endi < starti+1
 * 0 <= startj < endj <= 109
 * endj < startj+1",Solutions (1.7K),5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/interval-list-intersections/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    firstList: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    secondList: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().intervalIntersection(firstList, secondList)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def intervalIntersection(self, firstList: List[List[int]], secondList: List[List[int]]) -> List[List[int]]:
        result = []
        i, j = 0, 0
        
        while i < len(firstList) and j < len(secondList):
            start = max(firstList[i][0], secondList[j][0])
            end = min(firstList[i][1], secondList[j][1])
            
            if start <= end:
                result.append([start, end])
                
            if firstList[i][1] < secondList[j][1]:
                i += 1
            else:
                j += 1
                
        return result"
False,0,0,1031,add-to-array-form-of-integer,Add to Array-Form of Integer,add-to-array-form-of-integer,False,221653,470493,989,False,1,"Can you solve this real interview question? Add to Array-Form of Integer - The array-form of an integer num is an array representing its digits in left to right order.

 * For example, for num = 1321, the array form is [1,3,2,1].

Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.

 

Example 1:


Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234


Example 2:


Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455


Example 3:


Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021


 

Constraints:

 * 1 <= num.length <= 104
 * 0 <= num[i] <= 9
 * num does not contain any leading zeros except for the zero itself.
 * 1 <= k <= 104",Solutions (2.6K),3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/add-to-array-form-of-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addToArrayForm(self, num: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    num: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().addToArrayForm(num, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def addToArrayForm(self, num: List[int], k: int) -> List[int]:
        res = []
        carry = 0
        i = len(num) - 1
        
        while i >= 0 or k > 0 or carry > 0:
            n = num[i] if i >= 0 else 0
            total = n + k % 10 + carry
            res.append(total % 10)
            carry = total // 10
            i -= 1
            k //= 10
            
        return res[::-1]"
False,0,0,1032,satisfiability-of-equality-equations,Satisfiability of Equality Equations,satisfiability-of-equality-equations,False,109380,216427,990,False,2,"Can you solve this real interview question? Satisfiability of Equality Equations - You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: ""xi==yi"" or ""xi!=yi"".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.

Return true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.

 

Example 1:


Input: equations = [""a==b"",""b!=a""]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.
There is no way to assign the variables to satisfy both equations.


Example 2:


Input: equations = [""b==a"",""a==b""]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.


 

Constraints:

 * 1 <= equations.length <= 500
 * equations[i].length == 4
 * equations[i][0] is a lowercase letter.
 * equations[i][1] is either '=' or '!'.
 * equations[i][2] is '='.
 * equations[i][3] is a lowercase letter.",Solutions (1.3K),3.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/satisfiability-of-equality-equations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    equations: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().equationsPossible(equations)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def equationsPossible(self, equations: List[str]) -> bool:
        def find(x):
            if x != uf[x]:
                uf[x] = find(uf[x])
            return uf[x]
        
        def union(x, y):
            uf[find(x)] = find(y)
        
        uf = {chr(i): chr(i) for i in range(97, 123)}
        
        for eq in equations:
            if eq[1:3] == ""=="":
                union(eq[0], eq[3])
        
        return all(find(eq[0]) != find(eq[3]) if eq[1:3] == ""!="" else find(eq[0]) == find(eq[3]) for eq in equations)"
False,0,0,1033,broken-calculator,Broken Calculator,broken-calculator,False,93003,171900,991,False,2,"Can you solve this real interview question? Broken Calculator - There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:

 * multiply the number on display by 2, or
 * subtract 1 from the number on display.

Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.

 

Example 1:


Input: startValue = 2, target = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.


Example 2:


Input: startValue = 5, target = 8
Output: 2
Explanation: Use decrement and then double {5 -> 4 -> 8}.


Example 3:


Input: startValue = 3, target = 10
Output: 3
Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.


 

Constraints:

 * 1 <= startValue, target <= 109",Solutions (794),2.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/broken-calculator/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def brokenCalc(self, startValue: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startValue: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().brokenCalc(startValue, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def brokenCalc(self, startValue: int, target: int) -> int:
        res = 0
        while target > startValue:
            res += 1
            if target % 2 == 1:
                target += 1
            else:
                target //= 2
        return res + startValue - target"
False,0,0,1034,subarrays-with-k-different-integers,Subarrays with K Different Integers,subarrays-with-k-different-integers,False,90605,165934,992,False,3,"Can you solve this real interview question? Subarrays with K Different Integers - Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

 * For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]


Example 2:


Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].


 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * 1 <= nums[i], k <= nums.length",Solutions (563),4.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/subarrays-with-k-different-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().subarraysWithKDistinct(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,1036,rotting-oranges,Rotting Oranges,rotting-oranges,False,577276,1091456,994,False,2,"Can you solve this real interview question? Rotting Oranges - You are given an m x n grid where each cell can have one of three values:

 * 0 representing an empty cell,
 * 1 representing a fresh orange, or
 * 2 representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/02/16/oranges.png]


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4


Example 2:


Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.


Example 3:


Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 10
 * grid[i][j] is 0, 1, or 2.",Solutions (4.2K),10K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/rotting-oranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().orangesRotting(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,1037,minimum-number-of-k-consecutive-bit-flips,Minimum Number of K Consecutive Bit Flips,minimum-number-of-k-consecutive-bit-flips,False,30117,58827,995,False,3,"Can you solve this real interview question? Minimum Number of K Consecutive Bit Flips - You are given a binary array nums and an integer k.

A k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [0,1,0], k = 1
Output: 2
Explanation: Flip nums[0], then flip nums[2].


Example 2:


Input: nums = [1,1,0], k = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].


Example 3:


Input: nums = [0,0,0,1,0,1,1,0], k = 3
Output: 3
Explanation: 
Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]
Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]
Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= k <= nums.length",Solutions (200),1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minKBitFlips(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minKBitFlips(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minKBitFlips(self, nums: List[int], k: int) -> int:
        n = len(nums)
        flip_count = 0
        flipped = [False] * n
        total_flips = 0
        
        for i in range(n):
            if i >= k:
                flip_count -= flipped[i - k]
                
            if (nums[i] + flip_count) % 2 == 0:
                if i + k > n:
                    return -1
                flip_count += 1
                total_flips += 1
                flipped[i] = True
                
        return total_flips"
False,0,0,1038,number-of-squareful-arrays,Number of Squareful Arrays,number-of-squareful-arrays,False,30695,62350,996,False,3,"Can you solve this real interview question? Number of Squareful Arrays - An array is squareful if the sum of every pair of adjacent elements is a perfect square.

Given an integer array nums, return the number of permutations of nums that are squareful.

Two permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].

 

Example 1:


Input: nums = [1,17,8]
Output: 2
Explanation: [1,8,17] and [17,8,1] are the valid permutations.


Example 2:


Input: nums = [2,2,2]
Output: 1


 

Constraints:

 * 1 <= nums.length <= 12
 * 0 <= nums[i] <= 109",Solutions (319),854,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-squareful-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSquarefulPerms(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numSquarefulPerms(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSquarefulPerms(self, nums: List[int]) -> int:
        import itertools
        
        def is_squareful(nums):
            for i in range(1, len(nums)):
                if int((nums[i-1] + nums[i]) ** 0.5) ** 2 != nums[i-1] + nums[i]:
                    return False
            return True
        
        count = 0
        for perm in set(itertools.permutations(nums)):
            if is_squareful(perm):
                count += 1
                
        return count"
False,0,0,1039,find-the-town-judge,Find the Town Judge,find-the-town-judge,False,402131,811613,997,False,1,"Can you solve this real interview question? Find the Town Judge - In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:

 1. The town judge trusts nobody.
 2. Everybody (except for the town judge) trusts the town judge.
 3. There is exactly one person that satisfies properties 1 and 2.

You are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. If a trust relationship does not exist in trust array, then such a trust relationship does not exist.

Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.

 

Example 1:


Input: n = 2, trust = [[1,2]]
Output: 2


Example 2:


Input: n = 3, trust = [[1,3],[2,3]]
Output: 3


Example 3:


Input: n = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1


 

Constraints:

 * 1 <= n <= 1000
 * 0 <= trust.length <= 104
 * trust[i].length == 2
 * All the pairs of trust are unique.
 * ai != bi
 * 1 <= ai, bi <= n",Solutions (3.2K),5.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-town-judge/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    trust: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findJudge(n, trust)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findJudge(self, n: int, trust: List[List[int]]) -> int:
        trust_count = [0] * (n + 1)
        
        for a, b in trust:
            trust_count[a] -= 1
            trust_count[b] += 1
        
        for i in range(1, n + 1):
            if trust_count[i] == n - 1:
                return i
        
        return -1"
False,0,0,1041,,Available Captures for Rook,available-captures-for-rook,False,57290,84075,999,False,1,"Can you solve this real interview question? Available Captures for Rook - On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.

When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/02/20/1253_example_1_improved.PNG]


Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""R"",""."",""."",""."",""p""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: In this example, the rook is attacking all the pawns.


Example 2:

[https://assets.leetcode.com/uploads/2019/02/19/1253_example_2_improved.PNG]


Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""B"",""R"",""B"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 0
Explanation: The bishops are blocking the rook from attacking any of the pawns.


Example 3:

[https://assets.leetcode.com/uploads/2019/02/20/1253_example_3_improved.PNG]


Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""p"",""p"",""."",""R"",""."",""p"",""B"","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: The rook is attacking the pawns at positions b5, d6, and f5.


 

Constraints:

 * board.length == 8
 * board[i].length == 8
 * board[i][j] is either 'R', '.', 'B', or 'p'
 * There is exactly one cell with board[i][j] == 'R'",Solutions (1K),563,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/available-captures-for-rook/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numRookCaptures(self, board: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().numRookCaptures(board)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numRookCaptures(self, board: List[List[str]]) -> int:
        def find_rook(board):
            for i in range(8):
                for j in range(8):
                    if board[i][j] == 'R':
                        return (i, j)
        
        def find_attackables(board, i, j):
            count = 0
            for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                new_i, new_j = i, j
                while 0 <= new_i < 8 and 0 <= new_j < 8:
                    if board[new_i][new_j] == 'B':
                        break
                    if board[new_i][new_j] == 'p':
                        count += 1
                        break
                    new_i += x
                    new_j += y
            return count
        
        rook_i, rook_j = find_rook(board)
        return find_attackables(board, rook_i, rook_j)"
False,0,0,1042,,Minimum Cost to Merge Stones,minimum-cost-to-merge-stones,False,33393,79284,1000,False,3,"Can you solve this real interview question? Minimum Cost to Merge Stones - There are n piles of stones arranged in a row. The ith pile has stones[i] stones.

A move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.

Return the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.

 

Example 1:


Input: stones = [3,2,4,1], k = 2
Output: 20
Explanation: We start with [3, 2, 4, 1].
We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].
We merge [4, 1] for a cost of 5, and we are left with [5, 5].
We merge [5, 5] for a cost of 10, and we are left with [10].
The total cost was 20, and this is the minimum possible.


Example 2:


Input: stones = [3,2,4,1], k = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.


Example 3:


Input: stones = [3,5,1,2,6], k = 3
Output: 25
Explanation: We start with [3, 5, 1, 2, 6].
We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].
We merge [3, 8, 6] for a cost of 17, and we are left with [17].
The total cost was 25, and this is the minimum possible.


 

Constraints:

 * n == stones.length
 * 1 <= n <= 30
 * 1 <= stones[i] <= 100
 * 2 <= k <= 30",Solutions (184),2.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-merge-stones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mergeStones(self, stones: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().mergeStones(stones, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mergeStones(self, stones: List[int], k: int) -> int:
        pass"
False,0,0,1043,,Grid Illumination,grid-illumination,False,17631,48744,1001,False,3,"Can you solve this real interview question? Grid Illumination - There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.

You are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.

When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.

You are also given another 2D array queries, where queries[j] = [rowj, colj]. For the jth query, determine whether grid[rowj][colj] is illuminated or not. After answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].

Return an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg]


Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
Output: [1,0]
Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].
The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.
[https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg]
The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.
[https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg]


Example 2:


Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
Output: [1,1]


Example 3:


Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
Output: [1,1,0]


 

Constraints:

 * 1 <= n <= 109
 * 0 <= lamps.length <= 20000
 * 0 <= queries.length <= 20000
 * lamps[i].length == 2
 * 0 <= rowi, coli < n
 * queries[j].length == 2
 * 0 <= rowj, colj < n",Solutions (215),534,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/grid-illumination/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    lamps: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().gridIllumination(n, lamps, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def gridIllumination(self, n: int, lamps: List[List[int]], queries: List[List[int]]) -> List[int]:
        pass"
False,0,0,1044,,Find Common Characters,find-common-characters,False,174868,255368,1002,False,1,"Can you solve this real interview question? Find Common Characters - Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.

 

Example 1:

Input: words = [""bella"",""label"",""roller""]
Output: [""e"",""l"",""l""]


Example 2:

Input: words = [""cool"",""lock"",""cook""]
Output: [""c"",""o""]


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 100
 * words[i] consists of lowercase English letters.",Solutions (1.7K),3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/find-common-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def commonChars(self, words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().commonChars(words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def commonChars(self, words: List[str]) -> List[str]:
        import collections
        res = collections.Counter(words[0])
        for word in words[1:]:
            res &= collections.Counter(word)
        return list(res.elements())"
False,0,0,1045,,Check If Word Is Valid After Substitutions,check-if-word-is-valid-after-substitutions,False,48701,83680,1003,False,2,"Can you solve this real interview question? Check If Word Is Valid After Substitutions - Given a string s, determine if it is valid.

A string s is valid if, starting with an empty string t = """", you can transform t into s after performing the following operation any number of times:

 * Insert string ""abc"" into any position in t. More formally, t becomes tleft + ""abc"" + tright, where t == tleft + tright. Note that tleft and tright may be empty.

Return true if s is a valid string, otherwise, return false.

 

Example 1:


Input: s = ""aabcbc""
Output: true
Explanation:
"""" -> ""abc"" -> ""aabcbc""
Thus, ""aabcbc"" is valid.

Example 2:


Input: s = ""abcabcababcc""
Output: true
Explanation:
"""" -> ""abc"" -> ""abcabc"" -> ""abcabcabc"" -> ""abcabcababcc""
Thus, ""abcabcababcc"" is valid.


Example 3:


Input: s = ""abccba""
Output: false
Explanation: It is impossible to get ""abccba"" using the operation.


 

Constraints:

 * 1 <= s.length <= 2 * 104
 * s consists of letters 'a', 'b', and 'c'",Solutions (733),781,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-word-is-valid-after-substitutions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isValid(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().isValid(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isValid(self, s: str) -> bool:
        while ""abc"" in s:
            s = s.replace(""abc"", """")
        return s == """""
False,0,0,1046,max-consecutive-ones-iii,Max Consecutive Ones III,max-consecutive-ones-iii,False,286022,452381,1004,False,2,"Can you solve this real interview question? Max Consecutive Ones III - Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:


Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:


Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.
 * 0 <= k <= nums.length",Solutions (2K),6.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/max-consecutive-ones-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().longestOnes(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left = 0
        zeros = 0
        result = 0
        
        for right in range(len(nums)):
            if nums[right] == 0:
                zeros += 1
            
            while zeros > k:
                if nums[left] == 0:
                    zeros -= 1
                left += 1
            
            result = max(result, right - left + 1)
        
        return result"
False,0,0,1047,,Maximize Sum Of Array After K Negations,maximize-sum-of-array-after-k-negations,False,69815,137226,1005,False,1,"Can you solve this real interview question? Maximize Sum Of Array After K Negations - Given an integer array nums and an integer k, modify the array in the following way:

 * choose an index i and replace nums[i] with -nums[i].

You should apply this process exactly k times. You may choose the same index i multiple times.

Return the largest possible sum of the array after modifying it in this way.

 

Example 1:


Input: nums = [4,2,3], k = 1
Output: 5
Explanation: Choose index 1 and nums becomes [4,-2,3].


Example 2:


Input: nums = [3,-1,0,2], k = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].


Example 3:


Input: nums = [2,-3,-1,5,-4], k = 2
Output: 13
Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].


 

Constraints:

 * 1 <= nums.length <= 104
 * -100 <= nums[i] <= 100
 * 1 <= k <= 104",Solutions (977),1.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().largestSumAfterKNegations(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestSumAfterKNegations(self, nums: List[int], k: int) -> int:
        nums.sort()
        i = 0
        while k > 0:
            if nums[i] < 0:
                nums[i] = -nums[i]
                k -= 1
            else:
                if k % 2 == 0:
                    break
                if i > 0 and abs(nums[i-1]) < abs(nums[i]):
                    nums[i-1] = -nums[i-1]
                else:
                    nums[i] = -nums[i]
                break
            i += 1
        return sum(nums)"
False,0,0,1048,,Clumsy Factorial,clumsy-factorial,False,24371,43981,1006,False,2,"Can you solve this real interview question? Clumsy Factorial - The factorial of a positive integer n is the product of all positive integers less than or equal to n.

 * For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.

We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.

 * For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.

However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.

Given an integer n, return the clumsy factorial of n.

 

Example 1:


Input: n = 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1


Example 2:


Input: n = 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1


 

Constraints:

 * 1 <= n <= 104",Solutions (372),281,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/clumsy-factorial/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def clumsy(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().clumsy(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def clumsy(self, n: int) -> int:
        if n == 1:
            return 1
        elif n == 2:
            return 2
        elif n == 3:
            return 6
        elif n == 4:
            return 7
        else:
            return n + 1 + ((n * (n - 1)) // (n - 2)) - (n - 3) * (n - 4) + self.clumsy(n - 4)"
False,0,0,1049,minimum-domino-rotations-for-equal-row,Minimum Domino Rotations For Equal Row,minimum-domino-rotations-for-equal-row,False,190760,364976,1007,False,2,"Can you solve this real interview question? Minimum Domino Rotations For Equal Row - In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)

We may rotate the ith domino, so that tops[i] and bottoms[i] swap values.

Return the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.

If it cannot be done, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/14/domino.png]


Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.
If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.


Example 2:


Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.


 

Constraints:

 * 2 <= tops.length <= 2 * 104
 * bottoms.length == tops.length
 * 1 <= tops[i], bottoms[i] <= 6",Solutions (1.3K),2.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-domino-rotations-for-equal-row/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tops: List[int] = deserialize(""List[int]"", read_line())
    bottoms: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minDominoRotations(tops, bottoms)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDominoRotations(self, tops: List[int], bottoms: List[int]) -> int:
        from collections import Counter
        
        if len(tops) != len(bottoms):
            return -1
        
        n = len(tops)
        freq_tops = Counter(tops)
        freq_bottoms = Counter(bottoms)
        freq_same = Counter()
        
        for i in range(n):
            if tops[i] == bottoms[i]:
                freq_same[tops[i]] += 1
        
        min_swaps = float('inf')
        for num in range(1, 7):
            if freq_tops[num] + freq_bottoms[num] - freq_same[num] == n:
                min_swaps = min(min_swaps, n - max(freq_tops[num], freq_bottoms[num]))
        
        return min_swaps if min_swaps != float('inf') else -1"
False,0,0,1054,complement-of-base-10-integer,Complement of Base 10 Integer,complement-of-base-10-integer,False,173731,282293,1009,False,1,"Can you solve this real interview question? Complement of Base 10 Integer - The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.

 * For example, The integer 5 is ""101"" in binary and its complement is ""010"" which is the integer 2.

Given an integer n, return its complement.

 

Example 1:


Input: n = 5
Output: 2
Explanation: 5 is ""101"" in binary, with complement ""010"" in binary, which is 2 in base-10.


Example 2:


Input: n = 7
Output: 0
Explanation: 7 is ""111"" in binary, with complement ""000"" in binary, which is 0 in base-10.


Example 3:


Input: n = 10
Output: 5
Explanation: 10 is ""1010"" in binary, with complement ""0101"" in binary, which is 5 in base-10.


 

Constraints:

 * 0 <= n < 109

 

Note: This question is the same as 476: https://leetcode.com/problems/number-complement/ [https://leetcode.com/problems/number-complement/]",Solutions (1.9K),1.9K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/complement-of-base-10-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bitwiseComplement(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().bitwiseComplement(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bitwiseComplement(self, n: int) -> int:
        return int(''.join(['1' if x == '0' else '0' for x in bin(n)[2:]]), 2)"
False,0,0,1055,pairs-of-songs-with-total-durations-divisible-by-60,Pairs of Songs With Total Durations Divisible by 60,pairs-of-songs-with-total-durations-divisible-by-60,False,237136,449401,1010,False,2,"Can you solve this real interview question? Pairs of Songs With Total Durations Divisible by 60 - You are given a list of songs where the ith song has a duration of time[i] seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.

 

Example 1:


Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60


Example 2:


Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.


 

Constraints:

 * 1 <= time.length <= 6 * 104
 * 1 <= time[i] <= 500",Solutions (1.3K),3.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    time: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numPairsDivisibleBy60(time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numPairsDivisibleBy60(self, time: List[int]) -> int:
        count = 0
        remainder_dict = collections.defaultdict(int)
        
        for t in time:
            remainder = t % 60
            count += remainder_dict[(60 - remainder) % 60]
            remainder_dict[remainder] += 1
        
        return count"
False,0,0,1056,capacity-to-ship-packages-within-d-days,Capacity To Ship Packages Within D Days,capacity-to-ship-packages-within-d-days,False,262074,387215,1011,False,2,"Can you solve this real interview question? Capacity To Ship Packages Within D Days - A conveyor belt has packages that must be shipped from one port to another within days days.

The ith package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.

 

Example 1:


Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.


Example 2:


Input: weights = [3,2,2,4,1,4], days = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4


Example 3:


Input: weights = [1,2,3,1,1], days = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1


 

Constraints:

 * 1 <= days <= weights.length <= 5 * 104
 * 1 <= weights[i] <= 500",Solutions (2.1K),7.7K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shipWithinDays(self, weights: List[int], days: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    weights: List[int] = deserialize(""List[int]"", read_line())
    days: int = deserialize(""int"", read_line())
    ans = Solution().shipWithinDays(weights, days)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shipWithinDays(self, weights: List[int], days: int) -> int:
        def feasible(capacity):
            curr = capacity
            required_days = 1
            for weight in weights:
                if weight > curr:
                    required_days += 1
                    curr = capacity
                curr -= weight
            return required_days <= days

        left, right = max(weights), sum(weights)
        while left < right:
            mid = left + (right - left) // 2
            if feasible(mid):
                right = mid
            else:
                left = mid + 1
        return left"
False,0,0,1057,,Numbers With Repeated Digits,numbers-with-repeated-digits,False,11977,30030,1012,False,3,"Can you solve this real interview question? Numbers With Repeated Digits - Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.

 

Example 1:


Input: n = 20
Output: 1
Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.


Example 2:


Input: n = 100
Output: 10
Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.


Example 3:


Input: n = 1000
Output: 262


 

Constraints:

 * 1 <= n <= 109",Solutions (149),592,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/numbers-with-repeated-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numDupDigitsAtMostN(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numDupDigitsAtMostN(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numDupDigitsAtMostN(self, n: int) -> int:
        return sum(9 * math.factorial(i) // (10 - i) for i in range(1, 10) if 10**i < n) + n - sum(9 * math.factorial(i) // (10 - i) for i in range(1, 10) if 10**i < n)"
False,0,0,1058,lexicographically-smallest-equivalent-string,Lexicographically Smallest Equivalent String,lexicographically-smallest-equivalent-string,False,68181,89088,1061,False,2,"Can you solve this real interview question? Lexicographically Smallest Equivalent String - You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

 * For example, if s1 = ""abc"" and s2 = ""cde"", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.

Equivalent characters follow the usual rules of any equivalence relation:

 * Reflexivity: 'a' == 'a'.
 * Symmetry: 'a' == 'b' implies 'b' == 'a'.
 * Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.

For example, given the equivalency information from s1 = ""abc"" and s2 = ""cde"", ""acd"" and ""aab"" are equivalent strings of baseStr = ""eed"", and ""aab"" is the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.

 

Example 1:


Input: s1 = ""parker"", s2 = ""morris"", baseStr = ""parser""
Output: ""makkek""
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].
The characters in each group are equivalent and sorted in lexicographical order.
So the answer is ""makkek"".


Example 2:


Input: s1 = ""hello"", s2 = ""world"", baseStr = ""hold""
Output: ""hdld""
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [h,w], [d,e,o], [l,r].
So only the second letter 'o' in baseStr is changed to 'd', the answer is ""hdld"".


Example 3:


Input: s1 = ""leetcode"", s2 = ""programs"", baseStr = ""sourcecode""
Output: ""aauaaaaada""
Explanation: We group the equivalent characters in s1 and s2 as [a,o,e,r,s,c], [l,p], [g,t] and [d,m], thus all letters in baseStr except 'u' and 'd' are transformed to 'a', the answer is ""aauaaaaada"".


 

Constraints:

 * 1 <= s1.length, s2.length, baseStr <= 1000
 * s1.length == s2.length
 * s1, s2, and baseStr consist of lowercase English letters.",Solutions (1.3K),2.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/lexicographically-smallest-equivalent-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    baseStr: str = deserialize(""str"", read_line())
    ans = Solution().smallestEquivalentString(s1, s2, baseStr)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        parent = {}
        base = {ch: ch for ch in baseStr}

        def find(ch):
            if ch not in parent:
                parent[ch] = ch
            if parent[ch] != ch:
                parent[ch] = find(parent[ch])
            return parent[ch]

        def union(ch1, ch2):
            root1 = find(ch1)
            root2 = find(ch2)
            if root1 < root2:
                parent[root2] = root1
            else:
                parent[root1] = root2

        for c1, c2 in zip(s1, s2):
            union(c1, c2)

        for ch in parent:
            find(ch)

        result = []
        for ch in baseStr:
            result.append(parent[ch])

        return ''.join(result)"
False,0,0,1062,,Partition Array Into Three Parts With Equal Sum,partition-array-into-three-parts-with-equal-sum,False,77707,181834,1013,False,1,"Can you solve this real interview question? Partition Array Into Three Parts With Equal Sum - Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])

 

Example 1:


Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1


Example 2:


Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false


Example 3:


Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4


 

Constraints:

 * 3 <= arr.length <= 5 * 104
 * -104 <= arr[i] <= 104",Solutions (737),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canThreePartsEqualSum(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canThreePartsEqualSum(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canThreePartsEqualSum(self, arr: List[int]) -> bool:
        total_sum = sum(arr)
        if total_sum % 3 != 0:
            return False
        target_sum = total_sum // 3
        part_sum = 0
        count = 0
        for num in arr:
            part_sum += num
            if part_sum == target_sum:
                part_sum = 0
                count += 1
            if count == 3:
                return True
        return False"
False,0,0,1063,,Best Sightseeing Pair,best-sightseeing-pair,False,82669,139137,1014,False,2,"Can you solve this real interview question? Best Sightseeing Pair - You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.

The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.

 

Example 1:


Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11


Example 2:


Input: values = [1,2]
Output: 2


 

Constraints:

 * 2 <= values.length <= 5 * 104
 * 1 <= values[i] <= 1000",Solutions (966),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/best-sightseeing-pair/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScoreSightseeingPair(self, values: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    values: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxScoreSightseeingPair(values)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScoreSightseeingPair(self, values: List[int]) -> int:
        max_score = 0
        prev_best = values[0]
        for i in range(1, len(values)):
            max_score = max(max_score, prev_best + values[i] - i)
            prev_best = max(prev_best, values[i] + i)
        return max_score"
False,0,0,1064,smallest-integer-divisible-by-k,Smallest Integer Divisible by K,smallest-integer-divisible-by-k,False,58725,125402,1015,False,2,"Can you solve this real interview question? Smallest Integer Divisible by K - Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.

Return the length of n. If there is no such n, return -1.

Note: n may not fit in a 64-bit signed integer.

 

Example 1:


Input: k = 1
Output: 1
Explanation: The smallest answer is n = 1, which has length 1.


Example 2:


Input: k = 2
Output: -1
Explanation: There is no such positive integer n divisible by 2.


Example 3:


Input: k = 3
Output: 3
Explanation: The smallest answer is n = 111, which has length 3.


 

Constraints:

 * 1 <= k <= 105",Solutions (374),1.1K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-integer-divisible-by-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestRepunitDivByK(self, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    ans = Solution().smallestRepunitDivByK(k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestRepunitDivByK(self, k: int) -> int:
        remainder = 0
        for length in range(1, k + 1):
            remainder = (remainder * 10 + 1) % k
            if remainder == 0:
                return length
        return -1"
False,0,0,1065,,Binary String With Substrings Representing 1 To N,binary-string-with-substrings-representing-1-to-n,False,32960,57501,1016,False,2,"Can you solve this real interview question? Binary String With Substrings Representing 1 To N - Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = ""0110"", n = 3
Output: true


Example 2:

Input: s = ""0110"", n = 4
Output: false


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either '0' or '1'.
 * 1 <= n <= 109",Solutions (338),308,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def queryString(self, s: str, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().queryString(s, n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def queryString(self, s: str, n: int) -> bool:
        for i in range(1, n + 1):
            if bin(i)[2:] not in s:
                return False
        return True"
False,0,0,1070,,Convert to Base -2,convert-to-base-2,False,22457,36921,1017,False,2,"Can you solve this real interview question? Convert to Base -2 - Given an integer n, return a binary string representing its representation in base -2.

Note that the returned string should not have leading zeros unless the string is ""0"".

 

Example 1:


Input: n = 2
Output: ""110""
Explantion: (-2)2 + (-2)1 = 2


Example 2:


Input: n = 3
Output: ""111""
Explantion: (-2)2 + (-2)1 + (-2)0 = 3


Example 3:


Input: n = 4
Output: ""100""
Explantion: (-2)2 = 4


 

Constraints:

 * 0 <= n <= 109",Solutions (214),450,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/convert-to-base-2/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def baseNeg2(self, n: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().baseNeg2(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def baseNeg2(self, n: int) -> str:
        if n == 0: return ""0""
        res = """"
        while n != 0:
            res = str(n & 1) + res
            n = -(n >> 1)
        return res"
False,0,0,1071,,Binary Prefix Divisible By 5,binary-prefix-divisible-by-5,False,45811,97646,1018,False,1,"Can you solve this real interview question? Binary Prefix Divisible By 5 - You are given a binary array nums (0-indexed).

We define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).

 * For example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5.

Return an array of booleans answer where answer[i] is true if xi is divisible by 5.

 

Example 1:


Input: nums = [0,1,1]
Output: [true,false,false]
Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.
Only the first number is divisible by 5, so answer[0] is true.


Example 2:


Input: nums = [1,1,1]
Output: [false,false,false]


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.",Solutions (442),641,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/binary-prefix-divisible-by-5/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def prefixesDivBy5(self, nums: List[int]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().prefixesDivBy5(nums)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def prefixesDivBy5(self, nums: List[int]) -> List[bool]:
        result = []
        val = 0
        for num in nums:
            val = (val * 2 + num) % 5
            result.append(val == 0)
        return result"
False,0,0,1073,number-of-enclaves,Number of Enclaves,number-of-enclaves,False,97109,148210,1020,False,2,"Can you solve this real interview question? Number of Enclaves - You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.

Return the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/18/enclaves1.jpg]


Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.


Example 2:

[https://assets.leetcode.com/uploads/2021/02/18/enclaves2.jpg]


Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: All 1s are either on the boundary or can reach the boundary.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 500
 * grid[i][j] is either 0 or 1.",Solutions (1.4K),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-enclaves/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numEnclaves(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        def dfs(i, j):
            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 1:
                grid[i][j] = 0
                for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    dfs(i + x, j + y)

        for i in range(len(grid)):
            dfs(i, 0)
            dfs(i, len(grid[0])-1)

        for j in range(len(grid[0])):
            dfs(0, j)
            dfs(len(grid)-1, j)

        return sum(sum(row) for row in grid)"
False,0,0,1078,,Remove Outermost Parentheses,remove-outermost-parentheses,False,211859,262736,1021,False,1,"Can you solve this real interview question? Remove Outermost Parentheses - A valid parentheses string is either empty """", ""("" + A + "")"", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.

 * For example, """", ""()"", ""(())()"", and ""(()(()))"" are all valid parentheses strings.

A valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.

Given a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.

Return s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.

 

Example 1:


Input: s = ""(()())(())""
Output: ""()()()""
Explanation: 
The input string is ""(()())(())"", with primitive decomposition ""(()())"" + ""(())"".
After removing outer parentheses of each part, this is ""()()"" + ""()"" = ""()()()"".


Example 2:


Input: s = ""(()())(())(()(()))""
Output: ""()()()()(())""
Explanation: 
The input string is ""(()())(())(()(()))"", with primitive decomposition ""(()())"" + ""(())"" + ""(()(()))"".
After removing outer parentheses of each part, this is ""()()"" + ""()"" + ""()(())"" = ""()()()()(())"".


Example 3:


Input: s = ""()()""
Output: """"
Explanation: 
The input string is ""()()"", with primitive decomposition ""()"" + ""()"".
After removing outer parentheses of each part, this is """" + """" = """".


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either '(' or ')'.
 * s is a valid parentheses string.",Solutions (2.1K),2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-outermost-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removeOuterParentheses(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeOuterParentheses(self, s: str) -> str:
        result = []
        opened = 0
        
        for char in s:
            if char == '(':
                if opened > 0:
                    result.append(char)
                opened += 1
            else:
                opened -= 1
                if opened > 0:
                    result.append(char)
        
        return """".join(result)"
False,0,0,1080,,Camelcase Matching,camelcase-matching,False,38773,63966,1023,False,2,"Can you solve this real interview question? Camelcase Matching - Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.

A query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.

 

Example 1:


Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FB""
Output: [true,false,true,true,false]
Explanation: ""FooBar"" can be generated like this ""F"" + ""oo"" + ""B"" + ""ar"".
""FootBall"" can be generated like this ""F"" + ""oot"" + ""B"" + ""all"".
""FrameBuffer"" can be generated like this ""F"" + ""rame"" + ""B"" + ""uffer"".


Example 2:


Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBa""
Output: [true,false,true,false,false]
Explanation: ""FooBar"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"".
""FootBall"" can be generated like this ""Fo"" + ""ot"" + ""Ba"" + ""ll"".


Example 3:


Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBaT""
Output: [false,true,false,false,false]
Explanation: ""FooBarTest"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"" + ""T"" + ""est"".


 

Constraints:

 * 1 <= pattern.length, queries.length <= 100
 * 1 <= queries[i].length <= 100
 * queries[i] and pattern consist of English letters.",Solutions (646),741,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/camelcase-matching/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[str] = deserialize(""List[str]"", read_line())
    pattern: str = deserialize(""str"", read_line())
    ans = Solution().camelMatch(queries, pattern)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def camelMatch(self, queries: List[str], pattern: str) -> List[bool]:
        res = []
        for word in queries:
            i, j = 0, 0
            match = True
            while i < len(word) and j < len(pattern):
                if word[i] == pattern[j]:
                    i += 1
                    j += 1
                elif word[i].isupper():
                    match = False
                    break
                else:
                    i += 1
            if j < len(pattern):
                match = False
            while i < len(word):
                if word[i].isupper():
                    match = False
                    break
                i += 1
            res.append(match)
        return res"
False,0,0,1081,,Video Stitching,video-stitching,False,56299,111580,1024,False,2,"Can you solve this real interview question? Video Stitching - You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.

Each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.

We can cut these clips into segments freely.

 * For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.

 

Example 1:


Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10
Output: 3
Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].


Example 2:


Input: clips = [[0,1],[1,2]], time = 5
Output: -1
Explanation: We cannot cover [0,5] with only [0,1] and [1,2].


Example 3:


Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9
Output: 3
Explanation: We can take clips [0,4], [4,7], and [6,9].


 

Constraints:

 * 1 <= clips.length <= 100
 * 0 <= starti <= endi <= 100
 * 1 <= time <= 100",Solutions (631),1.5K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/video-stitching/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def videoStitching(self, clips: List[List[int]], time: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    clips: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    time: int = deserialize(""int"", read_line())
    ans = Solution().videoStitching(clips, time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def videoStitching(self, clips: List[List[int]], time: int) -> int:
        clips.sort()
        dp = [float('inf')] * (time + 1)
        dp[0] = 0
        for start, end in clips:
            for i in range(start, min(end, time)+1):
                dp[i] = min(dp[i], dp[start] + 1)
            
        return -1 if dp[time] == float('inf') else dp[time]"
False,0,0,1086,,Divisor Game,divisor-game,False,196984,291535,1025,False,1,"Can you solve this real interview question? Divisor Game - Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:

 * Choosing any x with 0 < x < n and n % x == 0.
 * Replacing the number n on the chalkboard with n - x.

Also, if a player cannot make a move, they lose the game.

Return true if and only if Alice wins the game, assuming both players play optimally.

 

Example 1:


Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.


Example 2:


Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.


 

Constraints:

 * 1 <= n <= 1000",Solutions (1.6K),1.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/divisor-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divisorGame(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().divisorGame(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def divisorGame(self, n: int) -> bool:
        return n % 2 == 0"
False,0,0,1087,,Longest Arithmetic Subsequence,longest-arithmetic-subsequence,False,99976,213749,1027,False,2,"Can you solve this real interview question? Longest Arithmetic Subsequence - Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Note that:

 * A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
 * A sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).

 

Example 1:


Input: nums = [3,6,9,12]
Output: 4
Explanation:  The whole array is an arithmetic sequence with steps of length = 3.


Example 2:


Input: nums = [9,4,7,2,10]
Output: 3
Explanation:  The longest arithmetic subsequence is [4,7,10].


Example 3:


Input: nums = [20,1,15,3,10,5,8]
Output: 4
Explanation:  The longest arithmetic subsequence is [20,15,10,5].


 

Constraints:

 * 2 <= nums.length <= 1000
 * 0 <= nums[i] <= 500",Solutions (652),2.8K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-arithmetic-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestArithSeqLength(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestArithSeqLength(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestArithSeqLength(self, nums: List[int]) -> int:
        dp = {}
        for i in range(len(nums)):
            for j in range(i):
                diff = nums[i] - nums[j]
                if (j, diff) in dp:
                    dp[(i, diff)] = dp[(j, diff)] + 1
                else:
                    dp[(i, diff)] = 2
        return max(dp.values())"
False,0,0,1094,,Matrix Cells in Distance Order,matrix-cells-in-distance-order,False,49339,70853,1030,False,1,"Can you solve this real interview question? Matrix Cells in Distance Order - You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).

Return the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.

The distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.

 

Example 1:


Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (0, 0) to other cells are: [0,1]


Example 2:


Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.


Example 3:


Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].


 

Constraints:

 * 1 <= rows, cols <= 100
 * 0 <= rCenter < rows
 * 0 <= cCenter < cols",Solutions (643),626,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/matrix-cells-in-distance-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    rows: int = deserialize(""int"", read_line())
    cols: int = deserialize(""int"", read_line())
    rCenter: int = deserialize(""int"", read_line())
    cCenter: int = deserialize(""int"", read_line())
    ans = Solution().allCellsDistOrder(rows, cols, rCenter, cCenter)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def allCellsDistOrder(self, rows: int, cols: int, rCenter: int, cCenter: int) -> List[List[int]]:
        dist = lambda r, c: abs(r - rCenter) + abs(c - cCenter)
        return sorted([[r, c] for r in range(rows) for c in range(cols)], key=lambda x: dist(x[0], x[1]))"
False,0,0,1095,two-city-scheduling,Two City Scheduling,two-city-scheduling,False,209766,321601,1029,False,2,"Can you solve this real interview question? Two City Scheduling - A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti], the cost of flying the ith person to city a is aCosti, and the cost of flying the ith person to city b is bCosti.

Return the minimum cost to fly every person to a city such that exactly n people arrive in each city.

 

Example 1:


Input: costs = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.
The second person goes to city A for a cost of 30.
The third person goes to city B for a cost of 50.
The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.


Example 2:


Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
Output: 1859


Example 3:


Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
Output: 3086


 

Constraints:

 * 2 * n == costs.length
 * 2 <= costs.length <= 100
 * costs.length is even.
 * 1 <= aCosti, bCosti <= 1000",Solutions (1.6K),4.2K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/two-city-scheduling/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    costs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().twoCitySchedCost(costs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def twoCitySchedCost(self, costs: List[List[int]]) -> int:
        costs.sort(key=lambda x: x[0] - x[1])
        total_cost = 0
        n = len(costs) // 2
        
        for i in range(n):
            total_cost += costs[i][0] + costs[i + n][1]
            
        return total_cost"
False,0,0,1096,,Maximum Sum of Two Non-Overlapping Subarrays,maximum-sum-of-two-non-overlapping-subarrays,False,61489,103154,1031,False,2,"Can you solve this real interview question? Maximum Sum of Two Non-Overlapping Subarrays - Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.

The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.


Example 2:


Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.


Example 3:


Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.


 

Constraints:

 * 1 <= firstLen, secondLen <= 1000
 * 2 <= firstLen + secondLen <= 1000
 * firstLen + secondLen <= nums.length <= 1000
 * 0 <= nums[i] <= 1000",Solutions (526),2.3K,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    firstLen: int = deserialize(""int"", read_line())
    secondLen: int = deserialize(""int"", read_line())
    ans = Solution().maxSumTwoNoOverlap(nums, firstLen, secondLen)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumTwoNoOverlap(self, nums: List[int], firstLen: int, secondLen: int) -> int:
        prefix_sum = [0] * (len(nums) + 1)
        for i in range(len(nums)):
            prefix_sum[i+1] = prefix_sum[i] + nums[i]
        
        result = 0
        first_max = 0
        second_max = 0
        
        for i in range(firstLen, len(nums) - secondLen + 1):
            first_max = max(first_max, prefix_sum[i] - prefix_sum[i - firstLen])
            second_max = max(second_max, prefix_sum[i + secondLen] - prefix_sum[i])
            result = max(result, first_max + prefix_sum[i + secondLen] - prefix_sum[i])
        
        first_max = 0
        second_max = 0
        
        for i in range(secondLen, len(nums) - firstLen + 1):
            first_max = max(first_max, prefix_sum[i] - prefix_sum[i - secondLen])
            second_max = max(second_max, prefix_sum[i + firstLen] - prefix_sum[i])
            result = max(result, first_max + prefix_sum[i + firstLen] - prefix_sum[i])
        
        return result"
False,0,0,1103,,Moving Stones Until Consecutive,moving-stones-until-consecutive,False,21858,47428,1033,False,2,"Can you solve this real interview question? Moving Stones Until Consecutive - There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.

In one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.

The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).

Return an integer array answer of length 2 where:

 * answer[0] is the minimum number of moves you can play, and
 * answer[1] is the maximum number of moves you can play.

 

Example 1:


Input: a = 1, b = 2, c = 5
Output: [1,2]
Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.


Example 2:


Input: a = 4, b = 3, c = 2
Output: [0,0]
Explanation: We cannot make any moves.


Example 3:


Input: a = 3, b = 5, c = 1
Output: [1,2]
Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.


 

Constraints:

 * 1 <= a, b, c <= 100
 * a, b, and c have different values.",Solutions (284),185,"# Created by asetti2002 at 2024/04/17 02:14
# leetgo: 1.4.3
# https://leetcode.com/problems/moving-stones-until-consecutive/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().numMovesStones(a, b, c)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numMovesStones(self, a: int, b: int, c: int) -> List[int]:
        pass"
False,0,0,1105,,Uncrossed Lines,uncrossed-lines,False,77811,131630,1035,False,2,"Can you solve this real interview question? Uncrossed Lines - You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.

We may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:

 * nums1[i] == nums2[j], and
 * the line we draw does not intersect any other connecting (non-horizontal) line.

Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).

Return the maximum number of connecting lines we can draw in this way.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/04/26/142.png]


Input: nums1 = [1,4,2], nums2 = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.


Example 2:


Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]
Output: 3


Example 3:


Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]
Output: 2


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 500
 * 1 <= nums1[i], nums2[j] <= 2000",Solutions (648),2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/uncrossed-lines/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxUncrossedLines(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:
        m, n = len(nums1), len(nums2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + (nums1[i - 1] == nums2[j - 1]))
        return dp[m][n]"
False,0,0,1106,,Escape a Large Maze,escape-a-large-maze,False,17951,52624,1036,False,3,"Can you solve this real interview question? Escape a Large Maze - There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).

We start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).

Each move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.

Return true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.

 

Example 1:


Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
Output: false
Explanation: The target square is inaccessible starting from the source square because we cannot move.
We cannot move north or east because those squares are blocked.
We cannot move south or west because we cannot go outside of the grid.


Example 2:


Input: blocked = [], source = [0,0], target = [999999,999999]
Output: true
Explanation: Because there are no blocked cells, it is possible to reach the target square.


 

Constraints:

 * 0 <= blocked.length <= 200
 * blocked[i].length == 2
 * 0 <= xi, yi < 106
 * source.length == target.length == 2
 * 0 <= sx, sy, tx, ty < 106
 * source != target
 * It is guaranteed that source and target are not blocked.",Solutions (132),571,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/escape-a-large-maze/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    blocked: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    source: List[int] = deserialize(""List[int]"", read_line())
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isEscapePossible(blocked, source, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isEscapePossible(self, blocked: List[List[int]], source: List[int], target: List[int]) -> bool:
        # Your code here
        pass"
False,0,0,1111,,Minimum Score Triangulation of Polygon,minimum-score-triangulation-of-polygon,False,32834,59299,1039,False,2,"Can you solve this real interview question? Minimum Score Triangulation of Polygon - You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).

You will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.

Return the smallest possible total score that you can achieve with some triangulation of the polygon.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/25/shape1.jpg]


Input: values = [1,2,3]
Output: 6
Explanation: The polygon is already triangulated, and the score of the only triangle is 6.


Example 2:

[https://assets.leetcode.com/uploads/2021/02/25/shape2.jpg]


Input: values = [3,7,4,5]
Output: 144
Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.
The minimum score is 144.


Example 3:

[https://assets.leetcode.com/uploads/2021/02/25/shape3.jpg]


Input: values = [1,3,1,4,1,5]
Output: 13
Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.


 

Constraints:

 * n == values.length
 * 3 <= n <= 50
 * 1 <= values[i] <= 100",Solutions (349),1.5K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-score-triangulation-of-polygon/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minScoreTriangulation(self, values: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    values: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minScoreTriangulation(values)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minScoreTriangulation(self, values: List[int]) -> int:
        n = len(values)
        dp = [[0] * n for _ in range(n)]
        
        for d in range(2, n):
            for i in range(n - d):
                j = i + d
                dp[i][j] = float('inf')
                for k in range(i + 1, j):
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + values[i] * values[j] * values[k])
        
        return dp[0][n - 1]"
False,0,0,1112,,Find Words That Can Be Formed by Characters,find-words-that-can-be-formed-by-characters,False,142577,211188,1160,False,1,"Can you solve this real interview question? Find Words That Can Be Formed by Characters - You are given an array of strings words and a string chars.

A string is good if it can be formed by characters from chars (each character can only be used once).

Return the sum of lengths of all good strings in words.

 

Example 1:


Input: words = [""cat"",""bt"",""hat"",""tree""], chars = ""atach""
Output: 6
Explanation: The strings that can be formed are ""cat"" and ""hat"" so the answer is 3 + 3 = 6.


Example 2:


Input: words = [""hello"",""world"",""leetcode""], chars = ""welldonehoneyr""
Output: 10
Explanation: The strings that can be formed are ""hello"" and ""world"" so the answer is 5 + 5 = 10.


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length, chars.length <= 100
 * words[i] and chars consist of lowercase English letters.",Solutions (1.4K),1.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countCharacters(self, words: List[str], chars: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    chars: str = deserialize(""str"", read_line())
    ans = Solution().countCharacters(words, chars)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countCharacters(self, words: List[str], chars: str) -> int:
        res = 0
        for word in words:
            if all(word.count(char) <= chars.count(char) for char in word):
                res += len(word)
        return res"
False,0,0,1113,,Moving Stones Until Consecutive II,moving-stones-until-consecutive-ii,False,8624,15439,1040,False,2,"Can you solve this real interview question? Moving Stones Until Consecutive II - There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.

Call a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.

 * In particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.

The game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).

Return an integer array answer of length 2 where:

 * answer[0] is the minimum number of moves you can play, and
 * answer[1] is the maximum number of moves you can play.

 

Example 1:


Input: stones = [7,4,9]
Output: [1,2]
Explanation: We can move 4 -> 8 for one move to finish the game.
Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.


Example 2:


Input: stones = [6,5,4,3,10]
Output: [2,3]
Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.
Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.
Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.


 

Constraints:

 * 3 <= stones.length <= 104
 * 1 <= stones[i] <= 109
 * All the values of stones are unique.",Solutions (53),333,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/moving-stones-until-consecutive-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numMovesStonesII(self, stones: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numMovesStonesII(stones)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numMovesStonesII(self, stones: List[int]) -> List[int]:
        stones.sort()
        n = len(stones)
        
        max_moves = max(stones[n - 1] - stones[1] - n + 2, stones[n - 2] - stones[0] - n + 2)
        
        min_moves = n
        i, j = 0, 0
        
        for i in range(n):
            while j + 1 < n and stones[j + 1] - stones[i] + 1 <= n:
                j += 1
            cost = n - (j - i + 1)
            if j - i + 1 == n - 1 and stones[j] - stones[i] + 1 == n - 1:
                cost = 2
            min_moves = min(min_moves, cost)
        
        return [min_moves, max_moves]"
False,0,0,1115,,Valid Boomerang,valid-boomerang,False,40553,109434,1037,False,1,"Can you solve this real interview question? Valid Boomerang - Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.

A boomerang is a set of three points that are all distinct and not in a straight line.

 

Example 1:

Input: points = [[1,1],[2,3],[3,2]]
Output: true


Example 2:

Input: points = [[1,1],[2,2],[3,3]]
Output: false


 

Constraints:

 * points.length == 3
 * points[i].length == 2
 * 0 <= xi, yi <= 100",Solutions (552),330,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-boomerang/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isBoomerang(self, points: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isBoomerang(points)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isBoomerang(self, points: List[List[int]]) -> bool:
        return (points[0][0] - points[1][0]) * (points[1][1] - points[2][1]) != (points[1][0] - points[2][0]) * (points[0][1] - points[1][1])"
False,0,0,1117,as-far-from-land-as-possible,As Far from Land as Possible,as-far-from-land-as-possible,False,135810,261659,1162,False,2,"Can you solve this real interview question? As Far from Land as Possible - Given an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return -1.

The distance used in this problem is the Manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/05/03/1336_ex1.JPG]


Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.


Example 2:

[https://assets.leetcode.com/uploads/2019/05/03/1336_ex2.JPG]


Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.


 

Constraints:

 * n == grid.length
 * n == grid[i].length
 * 1 <= n <= 100
 * grid[i][j] is 0 or 1",Solutions (1.4K),3.8K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/as-far-from-land-as-possible/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxDistance(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDistance(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,1119,robot-bounded-in-circle,Robot Bounded In Circle,robot-bounded-in-circle,False,208183,376451,1041,False,2,"Can you solve this real interview question? Robot Bounded In Circle - On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:

 * The north direction is the positive direction of the y-axis.
 * The south direction is the negative direction of the y-axis.
 * The east direction is the positive direction of the x-axis.
 * The west direction is the negative direction of the x-axis.

The robot can receive one of three instructions:

 * ""G"": go straight 1 unit.
 * ""L"": turn 90 degrees to the left (i.e., anti-clockwise direction).
 * ""R"": turn 90 degrees to the right (i.e., clockwise direction).

The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

 

Example 1:


Input: instructions = ""GGLLGG""
Output: true
Explanation: The robot is initially at (0, 0) facing the north direction.
""G"": move one step. Position: (0, 1). Direction: North.
""G"": move one step. Position: (0, 2). Direction: North.
""L"": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.
""L"": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.
""G"": move one step. Position: (0, 1). Direction: South.
""G"": move one step. Position: (0, 0). Direction: South.
Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).
Based on that, we return true.


Example 2:


Input: instructions = ""GG""
Output: false
Explanation: The robot is initially at (0, 0) facing the north direction.
""G"": move one step. Position: (0, 1). Direction: North.
""G"": move one step. Position: (0, 2). Direction: North.
Repeating the instructions, keeps advancing in the north direction and does not go into cycles.
Based on that, we return false.


Example 3:


Input: instructions = ""GL""
Output: true
Explanation: The robot is initially at (0, 0) facing the north direction.
""G"": move one step. Position: (0, 1). Direction: North.
""L"": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.
""G"": move one step. Position: (-1, 1). Direction: West.
""L"": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.
""G"": move one step. Position: (-1, 0). Direction: South.
""L"": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.
""G"": move one step. Position: (0, 0). Direction: East.
""L"": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.
Repeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).
Based on that, we return true.


 

Constraints:

 * 1 <= instructions.length <= 100
 * instructions[i] is 'G', 'L' or, 'R'.",Solutions (1.4K),3.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/robot-bounded-in-circle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    instructions: str = deserialize(""str"", read_line())
    ans = Solution().isRobotBounded(instructions)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isRobotBounded(self, instructions: str) -> bool:
        x, y, dx, dy = 0, 0, 0, 1
        for i in instructions:
            if i == 'R': dx, dy = dy, -dx
            if i == 'L': dx, dy = -dy, dx
            if i == 'G': x, y = x+dx, y+dy
        return (x, y) == (0, 0) or (dx, dy) != (0, 1)"
False,0,0,1120,,Flower Planting With No Adjacent,flower-planting-with-no-adjacent,False,65590,129681,1042,False,2,"Can you solve this real interview question? Flower Planting With No Adjacent - You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.

 

Example 1:


Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
Explanation:
Gardens 1 and 2 have different types.
Gardens 2 and 3 have different types.
Gardens 3 and 1 have different types.
Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].


Example 2:


Input: n = 4, paths = [[1,2],[3,4]]
Output: [1,2,1,2]


Example 3:


Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]


 

Constraints:

 * 1 <= n <= 104
 * 0 <= paths.length <= 2 * 104
 * paths[i].length == 2
 * 1 <= xi, yi <= n
 * xi != yi
 * Every garden has at most 3 paths coming into or leaving it.",Solutions (523),1.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/flower-planting-with-no-adjacent/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    paths: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().gardenNoAdj(n, paths)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def gardenNoAdj(self, n: int, paths: List[List[int]]) -> List[int]:
        # Your solution here
        pass"
False,0,0,1121,,Partition Array for Maximum Sum,partition-array-for-maximum-sum,False,68837,96212,1043,False,2,"Can you solve this real interview question? Partition Array for Maximum Sum - Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]


Example 2:


Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83


Example 3:


Input: arr = [1], k = 1
Output: 1


 

Constraints:

 * 1 <= arr.length <= 500
 * 0 <= arr[i] <= 109
 * 1 <= k <= arr.length",Solutions (650),3.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-for-maximum-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxSumAfterPartitioning(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumAfterPartitioning(self, arr: List[int], k: int) -> int:
        dp = [0] * (len(arr) + 1)
        for i in range(len(arr)):
            cur_max = 0
            for j in range(1, min(k, i + 1) + 1):
                cur_max = max(cur_max, arr[i - j + 1])
                dp[i] = max(dp[i], dp[i - j] + cur_max * j)
        return dp[-2]"
False,0,0,1122,longest-duplicate-substring,Longest Duplicate Substring,longest-duplicate-substring,False,61407,201048,1044,False,3,"Can you solve this real interview question? Longest Duplicate Substring - Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.

Return any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is """".

 

Example 1:

Input: s = ""banana""
Output: ""ana""


Example 2:

Input: s = ""abcd""
Output: """"


 

Constraints:

 * 2 <= s.length <= 3 * 104
 * s consists of lowercase English letters.",Solutions (339),2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-duplicate-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestDupSubstring(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestDupSubstring(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestDupSubstring(self, s: str) -> str:
        # Add your solution here
        return """""
False,0,0,1127,last-stone-weight,Last Stone Weight,last-stone-weight,False,399584,616630,1046,False,1,"Can you solve this real interview question? Last Stone Weight - You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

 * If x == y, both stones are destroyed, and
 * If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.

At the end of the game, there is at most one stone left.

Return the weight of the last remaining stone. If there are no stones left, return 0.

 

Example 1:


Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.


Example 2:


Input: stones = [1]
Output: 1


 

Constraints:

 * 1 <= stones.length <= 30
 * 1 <= stones[i] <= 1000",Solutions (4.2K),4.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/last-stone-weight/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().lastStoneWeight(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        import heapq
        stones = [-x for x in stones]
        heapq.heapify(stones)
        
        while len(stones) > 1:
            y = -heapq.heappop(stones)
            x = -heapq.heappop(stones)
            
            if x != y:
                heapq.heappush(stones, y - x)
        
        return 0 if len(stones) == 0 else -stones[0]"
False,0,0,1128,remove-all-adjacent-duplicates-in-string,Remove All Adjacent Duplicates In String,remove-all-adjacent-duplicates-in-string,False,432643,620953,1047,False,1,"Can you solve this real interview question? Remove All Adjacent Duplicates In String - You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.

We repeatedly make duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It can be proven that the answer is unique.

 

Example 1:


Input: s = ""abbaca""
Output: ""ca""
Explanation: 
For example, in ""abbaca"" we could remove ""bb"" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is ""aaca"", of which only ""aa"" is possible, so the final string is ""ca"".


Example 2:


Input: s = ""azxxzy""
Output: ""ay""


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (3.5K),5.6K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDuplicates(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removeDuplicates(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeDuplicates(self, s: str) -> str:
        stack = []
        for char in s:
            if stack and stack[-1] == char:
                stack.pop()
            else:
                stack.append(char)
        return ''.join(stack)"
False,0,0,1129,longest-string-chain,Longest String Chain,longest-string-chain,False,302592,510822,1048,False,2,"Can you solve this real interview question? Longest String Chain - You are given an array of words where each word consists of lowercase English letters.

wordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.

 * For example, ""abc"" is a predecessor of ""abac"", while ""cba"" is not a predecessor of ""bcad"".

A word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.

Return the length of the longest possible word chain with words chosen from the given list of words.

 

Example 1:


Input: words = [""a"",""b"",""ba"",""bca"",""bda"",""bdca""]
Output: 4
Explanation: One of the longest word chains is [""a"",""ba"",""bda"",""bdca""].


Example 2:


Input: words = [""xbc"",""pcxbcf"",""xb"",""cxbc"",""pcxbc""]
Output: 5
Explanation: All the words can be put in a word chain [""xb"", ""xbc"", ""cxbc"", ""pcxbc"", ""pcxbcf""].


Example 3:


Input: words = [""abcd"",""dbqca""]
Output: 1
Explanation: The trivial word chain [""abcd""] is one of the longest word chains.
[""abcd"",""dbqca""] is not a valid word chain because the ordering of the letters is changed.


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 16
 * words[i] only consists of lowercase English letters.",Solutions (1.9K),5.8K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-string-chain/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestStrChain(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().longestStrChain(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestStrChain(self, words: List[str]) -> int:
        # Your code here
        pass"
False,0,0,1130,,Last Stone Weight II,last-stone-weight-ii,False,67889,127874,1049,False,2,"Can you solve this real interview question? Last Stone Weight II - You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:

 * If x == y, both stones are destroyed, and
 * If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.

At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

 

Example 1:


Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation:
We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.


Example 2:


Input: stones = [31,26,33,21,40]
Output: 5


 

Constraints:

 * 1 <= stones.length <= 30
 * 1 <= stones[i] <= 100",Solutions (538),2.7K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/last-stone-weight-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().lastStoneWeightII(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lastStoneWeightII(self, stones: List[int]) -> int:
        dp = {0}
        total = sum(stones)
        
        for stone in stones:
            new_dp = set()
            for weight in dp:
                new_dp.add(weight + stone)
                new_dp.add(abs(weight - stone))
            dp = new_dp
        
        min_weight = float(""inf"")
        for weight in dp:
            min_weight = min(min_weight, abs(total - 2 * weight))
        
        return min_weight"
False,0,0,1133,,Last Substring in Lexicographical Order,last-substring-in-lexicographical-order,False,31567,90764,1163,False,3,"Can you solve this real interview question? Last Substring in Lexicographical Order - Given a string s, return the last substring of s in lexicographical order.

 

Example 1:


Input: s = ""abab""
Output: ""bab""
Explanation: The substrings are [""a"", ""ab"", ""aba"", ""abab"", ""b"", ""ba"", ""bab""]. The lexicographically maximum substring is ""bab"".


Example 2:


Input: s = ""leetcode""
Output: ""tcode""


 

Constraints:

 * 1 <= s.length <= 4 * 105
 * s contains only lowercase English letters.",Solutions (274),520,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/last-substring-in-lexicographical-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lastSubstring(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().lastSubstring(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def lastSubstring(self, s: str) -> str:
        # Solution code here
        pass"
False,0,0,1137,,Height Checker,height-checker,False,263398,348632,1051,False,1,"Can you solve this real interview question? Height Checker - A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

 

Example 1:


Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.


Example 2:


Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.


Example 3:


Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.


 

Constraints:

 * 1 <= heights.length <= 100
 * 1 <= heights[i] <= 100",Solutions (2.2K),866,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/height-checker/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    heights: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().heightChecker(heights)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def heightChecker(self, heights: List[int]) -> int:
        expected = sorted(heights)
        return sum(h1 != h2 for h1, h2 in zip(heights, expected))"
False,0,0,1138,,Grumpy Bookstore Owner,grumpy-bookstore-owner,False,62294,109074,1052,False,2,"Can you solve this real interview question? Grumpy Bookstore Owner - There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.

When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.

 

Example 1:


Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.


Example 2:


Input: customers = [1], grumpy = [0], minutes = 1
Output: 1


 

Constraints:

 * n == customers.length == grumpy.length
 * 1 <= minutes <= n <= 2 * 104
 * 0 <= customers[i] <= 1000
 * grumpy[i] is either 0 or 1.",Solutions (811),1.5K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/grumpy-bookstore-owner/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    customers: List[int] = deserialize(""List[int]"", read_line())
    grumpy: List[int] = deserialize(""List[int]"", read_line())
    minutes: int = deserialize(""int"", read_line())
    ans = Solution().maxSatisfied(customers, grumpy, minutes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:
        satisfied = sum([customers[i] for i in range(len(customers)) if grumpy[i] == 0])
        max_additional = 0
        additional = sum([customers[i] for i in range(minutes) if grumpy[i] == 1])
        max_additional = additional
        for i in range(minutes, len(customers)):
            additional = additional + customers[i]*grumpy[i] - customers[i-minutes]*grumpy[i-minutes]
            max_additional = max(max_additional, additional)
        
        return satisfied + max_additional"
False,0,0,1139,,Previous Permutation With One Swap,previous-permutation-with-one-swap,False,35380,70119,1053,False,2,"Can you solve this real interview question? Previous Permutation With One Swap - Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap. If it cannot be done, then return the same array.

Note that a swap exchanges the positions of two numbers arr[i] and arr[j]

 

Example 1:


Input: arr = [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.


Example 2:


Input: arr = [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.


Example 3:


Input: arr = [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.


 

Constraints:

 * 1 <= arr.length <= 104
 * 1 <= arr[i] <= 104",Solutions (377),370,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/previous-permutation-with-one-swap/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def prevPermOpt1(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().prevPermOpt1(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def prevPermOpt1(self, arr: List[int]) -> List[int]:
        def prev_perm_opt1(arr):
            n = len(arr)
            i = n - 2
            while i >= 0 and arr[i] <= arr[i+1]:
                i -= 1
            if i == -1:
                return arr
            j = n - 1
            while arr[j] >= arr[i]:
                j -= 1
            while arr[j] == arr[j-1]:
                j -= 1
            arr[i], arr[j] = arr[j], arr[i]
            return arr
        return prev_perm_opt1(arr)"
False,0,0,1140,,Distant Barcodes,distant-barcodes,False,36169,79003,1054,False,2,"Can you solve this real interview question? Distant Barcodes - In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.

 

Example 1:

Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]


Example 2:

Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]


 

Constraints:

 * 1 <= barcodes.length <= 10000
 * 1 <= barcodes[i] <= 10000",Solutions (481),1.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/distant-barcodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    barcodes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().rearrangeBarcodes(barcodes)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def rearrangeBarcodes(self, barcodes: List[int]) -> List[int]:
        import collections
        pq = [(-v, k) for k, v in collections.Counter(barcodes).items()]
        heapq.heapify(pq)
        res = []
        while len(pq) > 1:
            (v1, k1), (v2, k2) = heapq.heappop(pq), heapq.heappop(pq)
            res.extend([k1, k2])
            if v1 + 1: heapq.heappush(pq, (v1 + 1, k1))
            if v2 + 1: heapq.heappush(pq, (v2 + 1, k2))
        return res + [pq[0][1]] if pq else res"
False,0,0,1145,number-of-submatrices-that-sum-to-target,Number of Submatrices That Sum to Target,number-of-submatrices-that-sum-to-target,False,86330,124153,1074,False,3,"Can you solve this real interview question? Number of Submatrices That Sum to Target - Given a matrix and a target, return the number of non-empty submatrices that sum to target.

A submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.

Two submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg]


Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.


Example 2:


Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.


Example 3:


Input: matrix = [[904]], target = 0
Output: 0


 

Constraints:

 * 1 <= matrix.length <= 100
 * 1 <= matrix[0].length <= 100
 * -1000 <= matrix[i] <= 1000
 * -10^8 <= target <= 10^8",Solutions (502),2.9K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-submatrices-that-sum-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().numSubmatrixSumTarget(matrix, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        pass"
False,0,0,1146,greatest-common-divisor-of-strings,Greatest Common Divisor of Strings,greatest-common-divisor-of-strings,False,161800,285759,1071,False,1,"Can you solve this real interview question? Greatest Common Divisor of Strings - For two strings s and t, we say ""t divides s"" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).

Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

 

Example 1:


Input: str1 = ""ABCABC"", str2 = ""ABC""
Output: ""ABC""


Example 2:


Input: str1 = ""ABABAB"", str2 = ""ABAB""
Output: ""AB""


Example 3:


Input: str1 = ""LEET"", str2 = ""CODE""
Output: """"


 

Constraints:

 * 1 <= str1.length, str2.length <= 1000
 * str1 and str2 consist of English uppercase letters.",Solutions (1.7K),3.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/greatest-common-divisor-of-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    str1: str = deserialize(""str"", read_line())
    str2: str = deserialize(""str"", read_line())
    ans = Solution().gcdOfStrings(str1, str2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        if str1 + str2 != str2 + str1:
            return """"
        
        return str1[:gcd(len(str1), len(str2))]"
False,0,0,1147,,Flip Columns For Maximum Number of Equal Rows,flip-columns-for-maximum-number-of-equal-rows,False,19727,31142,1072,False,2,"Can you solve this real interview question? Flip Columns For Maximum Number of Equal Rows - You are given an m x n binary matrix matrix.

You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).

Return the maximum number of rows that have all values equal after some number of flips.

 

Example 1:


Input: matrix = [[0,1],[1,1]]
Output: 1
Explanation: After flipping no values, 1 row has all values equal.


Example 2:


Input: matrix = [[0,1],[1,0]]
Output: 2
Explanation: After flipping values in the first column, both rows have equal values.


Example 3:


Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]
Output: 2
Explanation: After flipping values in the first two columns, the last two rows have equal values.


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 300
 * matrix[i][j] is either 0 or 1.",Solutions (207),663,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxEqualRowsAfterFlips(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxEqualRowsAfterFlips(self, matrix: List[List[int]]) -> int:
        # Write your code here
        pass"
False,0,0,1148,,Adding Two Negabinary Numbers,adding-two-negabinary-numbers,False,15132,41464,1073,False,2,"Can you solve this real interview question? Adding Two Negabinary Numbers - Given two numbers arr1 and arr2 in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3.  A number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.

Return the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.

 

Example 1:


Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.


Example 2:


Input: arr1 = [0], arr2 = [0]
Output: [0]


Example 3:


Input: arr1 = [0], arr2 = [1]
Output: [1]


 

Constraints:

 * 1 <= arr1.length, arr2.length <= 1000
 * arr1[i] and arr2[i] are 0 or 1
 * arr1 and arr2 have no leading zeros",Solutions (188),285,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/adding-two-negabinary-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().addNegabinary(arr1, arr2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def addNegabinary(self, arr1: List[int], arr2: List[int]) -> List[int]:
        # implementation of the function
        return []  # return statement will vary based on implementation"
False,0,0,1156,,Occurrences After Bigram,occurrences-after-bigram,False,60995,95925,1078,False,1,"Can you solve this real interview question? Occurrences After Bigram - Given two strings first and second, consider occurrences in some text of the form ""first second third"", where second comes immediately after first, and third comes immediately after second.

Return an array of all the words third for each occurrence of ""first second third"".

 

Example 1:

Input: text = ""alice is a good girl she is a good student"", first = ""a"", second = ""good""
Output: [""girl"",""student""]


Example 2:

Input: text = ""we will we will rock you"", first = ""we"", second = ""will""
Output: [""we"",""rock""]


 

Constraints:

 * 1 <= text.length <= 1000
 * text consists of lowercase English letters and spaces.
 * All the words in text a separated by a single space.
 * 1 <= first.length, second.length <= 10
 * first and second consist of lowercase English letters.",Solutions (949),420,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/occurrences-after-bigram/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    first: str = deserialize(""str"", read_line())
    second: str = deserialize(""str"", read_line())
    ans = Solution().findOcurrences(text, first, second)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findOcurrences(self, text: str, first: str, second: str) -> List[str]:
        words = text.split()
        result = []
        
        for i in range(len(words) - 2):
            if words[i] == first and words[i+1] == second:
                result.append(words[i+2])
        
        return result"
False,0,0,1159,,Smallest Subsequence of Distinct Characters,smallest-subsequence-of-distinct-characters,False,49135,84965,1081,False,2,"Can you solve this real interview question? Smallest Subsequence of Distinct Characters - Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.

 

Example 1:


Input: s = ""bcabc""
Output: ""abc""


Example 2:


Input: s = ""cbacdcbc""
Output: ""acdb""


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of lowercase English letters.

 

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/ [https://leetcode.com/problems/remove-duplicate-letters/]",Solutions (427),2.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestSubsequence(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().smallestSubsequence(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestSubsequence(self, s: str) -> str:
        last_occurrence = {c: i for i, c in enumerate(s)}
        stack = []
        
        for i, c in enumerate(s):
            if c in stack:
                continue
            while stack and c < stack[-1] and i < last_occurrence[stack[-1]]:
                stack.pop()
            stack.append(c)
        
        return ''.join(stack)"
False,0,0,1160,,Letter Tile Possibilities,letter-tile-possibilities,False,83285,109582,1079,False,2,"Can you solve this real interview question? Letter Tile Possibilities - You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:


Input: tiles = ""AAB""
Output: 8
Explanation: The possible sequences are ""A"", ""B"", ""AA"", ""AB"", ""BA"", ""AAB"", ""ABA"", ""BAA"".


Example 2:


Input: tiles = ""AAABBC""
Output: 188


Example 3:


Input: tiles = ""V""
Output: 1


 

Constraints:

 * 1 <= tiles.length <= 7
 * tiles consists of uppercase English letters.",Solutions (829),2.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/letter-tile-possibilities/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTilePossibilities(self, tiles: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tiles: str = deserialize(""str"", read_line())
    ans = Solution().numTilePossibilities(tiles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTilePossibilities(self, tiles: str) -> int:
        from itertools import permutations
        
        res = set()
        for i in range(1, len(tiles) + 1):
            perms = permutations(tiles, i)
            for perm in perms:
                res.add(''.join(perm))
                
        return len(res)"
False,0,0,1168,duplicate-zeros,Duplicate Zeros,duplicate-zeros,False,341002,661930,1089,False,1,"Can you solve this real interview question? Duplicate Zeros - Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.

 

Example 1:


Input: arr = [1,0,2,3,0,4,5,0]
Output: [1,0,0,2,3,0,0,4]
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]


Example 2:


Input: arr = [1,2,3]
Output: [1,2,3]
Explanation: After calling your function, the input array is modified to: [1,2,3]


 

Constraints:

 * 1 <= arr.length <= 104
 * 0 <= arr[i] <= 9",Solutions (2.3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/duplicate-zeros/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        """"""
        Do not return anything, modify arr in-place instead.
        """"""
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    duplicateZeros(arr)
    ans = arr
    print(""\noutput:"", serialize(ans, ""List[int]""))
","class Solution:
    def duplicateZeros(self, arr: List[int]) -> None:
        i = 0
        while i < len(arr):
            if arr[i] == 0:
                arr.insert(i, 0)
                arr.pop()
                i += 1
            i += 1"
False,0,0,1169,,Largest Values From Labels,largest-values-from-labels,False,32667,53489,1090,False,2,"Can you solve this real interview question? Largest Values From Labels - There is a set of n items. You are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. You are also given two integers numWanted and useLimit.

Choose a subset s of the n elements such that:

 * The size of the subset s is less than or equal to numWanted.
 * There are at most useLimit items with the same label in s.

The score of a subset is the sum of the values in the subset.

Return the maximum score of a subset s.

 

Example 1:


Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth items.


Example 2:


Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third items.


Example 3:


Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1
Output: 16
Explanation: The subset chosen is the first and fourth items.


 

Constraints:

 * n == values.length == labels.length
 * 1 <= n <= 2 * 104
 * 0 <= values[i], labels[i] <= 2 * 104
 * 1 <= numWanted, useLimit <= n",Solutions (496),375,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-values-from-labels/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestValsFromLabels(self, values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    values: List[int] = deserialize(""List[int]"", read_line())
    labels: List[int] = deserialize(""List[int]"", read_line())
    numWanted: int = deserialize(""int"", read_line())
    useLimit: int = deserialize(""int"", read_line())
    ans = Solution().largestValsFromLabels(values, labels, numWanted, useLimit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestValsFromLabels(self, values: List[int], labels: List[int], numWanted: int, useLimit: int) -> int:
        from collections import Counter
        from heapq import nlargest
        
        label_counter = Counter()
        subset = []
        score = 0
        
        for val, label in sorted(zip(values, labels), reverse=True):
            if label_counter[label] < useLimit:
                subset.append(val)
                label_counter[label] += 1
                score += val
                if len(subset) == numWanted:
                    break
                    
        return score"
False,0,0,1170,,Shortest Common Supersequence ,shortest-common-supersequence,False,72006,124419,1092,False,3,"Can you solve this real interview question? Shortest Common Supersequence  - Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Example 1:


Input: str1 = ""abac"", str2 = ""cab""
Output: ""cabac""
Explanation: 
str1 = ""abac"" is a subsequence of ""cabac"" because we can delete the first ""c"".
str2 = ""cab"" is a subsequence of ""cabac"" because we can delete the last ""ac"".
The answer provided is the shortest such string that satisfies these properties.


Example 2:


Input: str1 = ""aaaaaaaa"", str2 = ""aaaaaaaa""
Output: ""aaaaaaaa""


 

Constraints:

 * 1 <= str1.length, str2.length <= 1000
 * str1 and str2 consist of lowercase English letters.",Solutions (1.1K),3.7K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-common-supersequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    str1: str = deserialize(""str"", read_line())
    str2: str = deserialize(""str"", read_line())
    ans = Solution().shortestCommonSupersequence(str1, str2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shortestCommonSupersequence(self, str1: str, str2: str) -> str:
        def lcs(X, Y, m, n):
            if m == 0 or n == 0:
                return 0
            elif X[m-1] == Y[n-1]:
                return 1 + lcs(X, Y, m-1, n-1)
            else:
                return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n))
        
        def shortestSequence(X, Y, m, n):
            index = lcs(X, Y, m, n)
            result = """"
            i = m
            j = n
            while i > 0 and j > 0:
                if X[i-1] == Y[j-1]:
                    result += X[i-1]
                    i -= 1
                    j -= 1
                elif lcs(X, Y, i-1, j) > lcs(X, Y, i, j-1):
                    result += X[i-1]
                    i -= 1
                else:
                    result += Y[j-1]
                    j -= 1
            while i > 0:
                result += X[i-1]
                i -= 1
            while j > 0:
                result += Y[j-1]
                j -= 1
            return result[::-1]
        
        return shortestSequence(str1, str2, len(str1), len(str2))"
False,0,0,1171,shortest-path-in-a-binary-matrix,Shortest Path in Binary Matrix,shortest-path-in-binary-matrix,False,296099,663045,1091,False,2,"Can you solve this real interview question? Shortest Path in Binary Matrix - Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

 * All the visited cells of the path are 0.
 * All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).

The length of a clear path is the number of visited cells of this path.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/18/example1_1.png]


Input: grid = [[0,1],[1,0]]
Output: 2


Example 2:

[https://assets.leetcode.com/uploads/2021/02/18/example2_1.png]


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4


Example 3:


Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1


 

Constraints:

 * n == grid.length
 * n == grid[i].length
 * 1 <= n <= 100
 * grid[i][j] is 0 or 1",Solutions (2K),4.6K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-path-in-binary-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().shortestPathBinaryMatrix(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int: 
        import heapq
        n = len(grid)
        if grid[0][0] == 1 or grid[n-1][n-1] == 1:
            return -1
        heap = [(1, 0, 0)]
        while heap:
            dist, i, j = heapq.heappop(heap)
            if i == n - 1 and j == n - 1:
                return dist
            for x, y in [(i-1, j-1), (i-1, j), (i-1, j+1), (i, j-1), (i, j+1), (i+1, j-1), (i+1, j), (i+1, j+1)]:
                if 0 <= x < n and 0 <= y < n and grid[x][y] == 0:
                    heapq.heappush(heap, (dist + 1, x, y))
                    grid[x][y] = 1
        return -1"
False,0,0,1184,car-pooling,Car Pooling,car-pooling,False,188601,331492,1094,False,2,"Can you solve this real interview question? Car Pooling - There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).

You are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the ith trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.

Return true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.

 

Example 1:


Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false


Example 2:


Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true


 

Constraints:

 * 1 <= trips.length <= 1000
 * trips[i].length == 3
 * 1 <= numPassengersi <= 100
 * 0 <= fromi < toi <= 1000
 * 1 <= capacity <= 105",Solutions (1.9K),3.9K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/car-pooling/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    trips: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    capacity: int = deserialize(""int"", read_line())
    ans = Solution().carPooling(trips, capacity)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        trips.sort(key=lambda x: x[1])
        
        passengers = [0] * 1001
        
        for trip in trips:
            passengers[trip[1]] += trip[0]
            passengers[trip[2]] -= trip[0]
        
        for passenger in passengers:
            capacity -= passenger
            if capacity < 0:
                return False
        
        return True"
False,0,0,1185,,Find in Mountain Array,find-in-mountain-array,False,58789,165848,1095,False,3,"Can you solve this real interview question? Find in Mountain Array - (This problem is an interactive problem.)

You may recall that an array arr is a mountain array if and only if:

 * arr.length >= 3
 * There exists some i with 0 < i < arr.length - 1 such that:
   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Given a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.

You cannot access the mountain array directly. You may only access the array using a MountainArray interface:

 * MountainArray.get(k) returns the element of the array at index k (0-indexed).
 * MountainArray.length() returns the length of the array.

Submissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

 

Example 1:


Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.

Example 2:


Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in the array, so we return -1.


 

Constraints:

 * 3 <= mountain_arr.length() <= 104
 * 0 <= target <= 109
 * 0 <= mountain_arr.get(index) <= 109",Solutions (869),1.9K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/find-in-mountain-array/

from typing import *
from leetgo_py import *

# @lc code=begin

# """"""
# This is MountainArray's API interface.
# You should not implement it, or speculate about its implementation
# """"""
#class MountainArray:
#    def get(self, index: int) -> int:
#    def length(self) -> int:

class Solution:
    def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    secret: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().findInMountainArray(secret, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def get(self, index: int) -> int:
        def find_peak(left, right):
            while left < right:
                mid = (left + right) // 2
                if mountain_arr.get(mid) < mountain_arr.get(mid + 1):
                    left = mid + 1
                else:
                    right = mid
            return left
        
        def binary_search(left, right, target, increasing):
            while left <= right:
                mid = (left + right) // 2
                if target == mountain_arr.get(mid):
                    return mid
                if increasing:
                    if target < mountain_arr.get(mid):
                        right = mid - 1
                    else:
                        left = mid + 1
                else:
                    if target > mountain_arr.get(mid):
                        right = mid - 1
                    else:
                        left = mid + 1
            return -1
        
        n = mountain_arr.length()
        left, right = 0, n - 1
        peak_index = find_peak(left, right)
        
        result = binary_search(left, peak_index, target, True)
        if result != -1:
            return result
        
        return binary_search(peak_index, right, target, False)"
False,0,0,1188,,Brace Expansion II,brace-expansion-ii,False,22110,34842,1096,False,3,"Can you solve this real interview question? Brace Expansion II - Under the grammar given below, strings can represent a set of lowercase words. Let R(expr) denote the set of words the expression represents.

The grammar can best be understood through simple examples:

 * Single letters represent a singleton set containing that word.
   * R(""a"") = {""a""}
   * R(""w"") = {""w""}
 * When we take a comma-delimited list of two or more expressions, we take the union of possibilities.
   * R(""{a,b,c}"") = {""a"",""b"",""c""}
   * R(""{{a,b},{b,c}}"") = {""a"",""b"",""c""} (notice the final set only contains each word at most once)
 * When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
   * R(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}
   * R(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", ""acefg"", ""acefh""}

Formally, the three rules for our grammar:

 * For every lowercase letter x, we have R(x) = {x}.
 * For expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) ∪ R(e2) ∪ ...
 * For expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) × R(e2)}, where + denotes concatenation, and × denotes the cartesian product.

Given an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.

 

Example 1:


Input: expression = ""{a,b}{c,{d,e}}""
Output: [""ac"",""ad"",""ae"",""bc"",""bd"",""be""]


Example 2:


Input: expression = ""{{a,z},a{b,c},{ab,z}}""
Output: [""a"",""ab"",""ac"",""z""]
Explanation: Each distinct word is written only once in the final answer.


 

Constraints:

 * 1 <= expression.length <= 60
 * expression[i] consists of '{', '}', ','or lowercase English letters.
 * The given expression represents a set of words based on the grammar given in the description.",Solutions (236),437,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/brace-expansion-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def braceExpansionII(self, expression: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().braceExpansionII(expression)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def braceExpansionII(self, expression: str) -> List[str]:
        def dfs(s: str) -> Set[str]:
            if '{' not in s:
                return set(s.split(','))
            stack, start = [], -1
            groups = []
            for i, c in enumerate(s):
                if c == '{':
                    if not stack:
                        start = i + 1
                    stack.append(c)
                elif c == '}':
                    stack.pop()
                    if not stack:
                        groups.append(s[start:i])
                elif c == ',' and not stack:
                    groups.append(s[start:i])
                    start = i + 1
            
            return set.union(*[dfs(group) for group in groups])
        
        return sorted(list(dfs(expression)))"
False,0,0,1194,,Path In Zigzag Labelled Binary Tree,path-in-zigzag-labelled-binary-tree,False,39011,51964,1104,False,2,"Can you solve this real interview question? Path In Zigzag Labelled Binary Tree - In an infinite binary tree where every node has two children, the nodes are labelled in row order.

In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.

[https://assets.leetcode.com/uploads/2019/06/24/tree.png]

Given the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.

 

Example 1:


Input: label = 14
Output: [1,3,4,14]


Example 2:


Input: label = 26
Output: [1,2,6,10,26]


 

Constraints:

 * 1 <= label <= 10^6",Solutions (825),1.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pathInZigZagTree(self, label: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    label: int = deserialize(""int"", read_line())
    ans = Solution().pathInZigZagTree(label)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def pathInZigZagTree(self, label: int) -> List[int]:
        level = label.bit_length()
        res = [label]
        while level > 1:
            label = 3 * 2 ** (level - 2) - label // 2 - 1
            res.insert(0, label)
            level -= 1
        return res"
False,0,0,1195,distribute-candies-to-people,Distribute Candies to People,distribute-candies-to-people,False,75253,117149,1103,False,1,"Can you solve this real interview question? Distribute Candies to People - We distribute some number of candies, to a row of n = num_people people in the following way:

We then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.

Then, we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.

This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).

Return an array (of length num_people and sum candies) that represents the final distribution of candies.

 

Example 1:


Input: candies = 7, num_people = 4
Output: [1,2,3,1]
Explanation:
On the first turn, ans[0] += 1, and the array is [1,0,0,0].
On the second turn, ans[1] += 2, and the array is [1,2,0,0].
On the third turn, ans[2] += 3, and the array is [1,2,3,0].
On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].


Example 2:


Input: candies = 10, num_people = 3
Output: [5,2,3]
Explanation: 
On the first turn, ans[0] += 1, and the array is [1,0,0].
On the second turn, ans[1] += 2, and the array is [1,2,0].
On the third turn, ans[2] += 3, and the array is [1,2,3].
On the fourth turn, ans[0] += 4, and the final array is [5,2,3].


 

Constraints:

 * 1 <= candies <= 10^9
 * 1 <= num_people <= 1000",Solutions (1K),839,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/distribute-candies-to-people/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    candies: int = deserialize(""int"", read_line())
    num_people: int = deserialize(""int"", read_line())
    ans = Solution().distributeCandies(candies, num_people)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def distributeCandies(self, candies: int, num_people: int) -> List[int]:
        result = [0] * num_people
        give_candies = 1
        
        while candies > 0:
            for i in range(num_people):
                if candies >= give_candies:
                    result[i] += give_candies
                    candies -= give_candies
                    give_candies += 1
                else:
                    result[i] += candies
                    candies = 0
                    break
        
        return result"
False,0,0,1196,,Filling Bookcase Shelves,filling-bookcase-shelves,False,44803,75552,1105,False,2,"Can you solve this real interview question? Filling Bookcase Shelves - You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.

We want to place these books in order onto bookcase shelves that have a total width shelfWidth.

We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.

Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.

 * For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/06/24/shelves.png]


Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.
Notice that book number 2 does not have to be on the first shelf.


Example 2:


Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
Output: 4


 

Constraints:

 * 1 <= books.length <= 1000
 * 1 <= thicknessi <= shelfWidth <= 1000
 * 1 <= heighti <= 1000",Solutions (433),1.6K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/filling-bookcase-shelves/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    books: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    shelfWidth: int = deserialize(""int"", read_line())
    ans = Solution().minHeightShelves(books, shelfWidth)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minHeightShelves(self, books: List[List[int]], shelfWidth: int) -> int:
        n = len(books)
        dp = [0] + [float('inf')] * n
        
        for i in range(1, n + 1):
            width = height = 0
            j = i - 1
            while j >= 0 and width + books[j][0] <= shelfWidth:
                width += books[j][0]
                height = max(height, books[j][1])
                dp[i] = min(dp[i], dp[j] + height)
                j -= 1
        
        return dp[n]"
False,0,0,1197,,Parsing A Boolean Expression,parsing-a-boolean-expression,False,22487,38485,1106,False,3,"Can you solve this real interview question? Parsing A Boolean Expression - A boolean expression is an expression that evaluates to either true or false. It can be in one of the following shapes:

 * 't' that evaluates to true.
 * 'f' that evaluates to false.
 * '!(subExpr)' that evaluates to the logical NOT of the inner expression subExpr.
 * '&(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical AND of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.
 * '|(subExpr1, subExpr2, ..., subExprn)' that evaluates to the logical OR of the inner expressions subExpr1, subExpr2, ..., subExprn where n >= 1.

Given a string expression that represents a boolean expression, return the evaluation of that expression.

It is guaranteed that the given expression is valid and follows the given rules.

 

Example 1:


Input: expression = ""&(|(f))""
Output: false
Explanation: 
First, evaluate |(f) --> f. The expression is now ""&(f)"".
Then, evaluate &(f) --> f. The expression is now ""f"".
Finally, return false.


Example 2:


Input: expression = ""|(f,f,f,t)""
Output: true
Explanation: The evaluation of (false OR false OR false OR true) is true.


Example 3:


Input: expression = ""!(&(f,t))""
Output: true
Explanation: 
First, evaluate &(f,t) --> (false AND true) --> false --> f. The expression is now ""!(f)"".
Then, evaluate !(f) --> NOT false --> true. We return true.


 

Constraints:

 * 1 <= expression.length <= 2 * 104
 * expression[i] is one following characters: '(', ')', '&', '|', '!', 't', 'f', and ','.",Solutions (490),873,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/parsing-a-boolean-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().parseBoolExpr(expression)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def parseBoolExpr(self, expression: str) -> bool:
        stack = []
        for char in expression:
            if char == "")"":
                seen = set()
                while stack[-1] != ""("":
                    seen.add(stack.pop())
                stack.pop()  # pop the '('
                operator = stack.pop()
                if operator == '&':
                    stack.append(all(seen))
                elif operator == '|':
                    stack.append(any(seen))
                elif operator == '!':
                    stack.append(not seen.pop())
            elif char in ""&|!"":
                stack.append(char)
            elif char.isalpha():
                stack.append(char == 't')
        return stack[-1]"
False,0,0,1206,,Corporate Flight Bookings,corporate-flight-bookings,False,50960,84095,1109,False,2,"Can you solve this real interview question? Corporate Flight Bookings - There are n flights that are labeled from 1 to n.

You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.

Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.

 

Example 1:


Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:        1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:      20  20
Booking 3 reserved:      25  25  25  25
Total seats:         10  55  45  25  25
Hence, answer = [10,55,45,25,25]


Example 2:


Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
Explanation:
Flight labels:        1   2
Booking 1 reserved:  10  10
Booking 2 reserved:      15
Total seats:         10  25
Hence, answer = [10,25]



 

Constraints:

 * 1 <= n <= 2 * 104
 * 1 <= bookings.length <= 2 * 104
 * bookings[i].length == 3
 * 1 <= firsti <= lasti <= n
 * 1 <= seatsi <= 104",Solutions (596),1.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/corporate-flight-bookings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    bookings: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().corpFlightBookings(bookings, n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def corpFlightBookings(self, bookings: List[List[int]], n: int) -> List[int]:
        ans = [0] * n
        for booking in bookings:
            first, last, seats = booking
            ans[first - 1] += seats
            if last < n:
                ans[last] -= seats

        for i in range(1, n):
            ans[i] += ans[i - 1]

        return ans"
False,0,0,1208,,Maximum Nesting Depth of Two Valid Parentheses Strings,maximum-nesting-depth-of-two-valid-parentheses-strings,False,22784,31227,1111,False,2,"Can you solve this real interview question? Maximum Nesting Depth of Two Valid Parentheses Strings - A string is a valid parentheses string (denoted VPS) if and only if it consists of ""("" and "")"" characters only, and:

 * It is the empty string, or
 * It can be written as AB (A concatenated with B), where A and B are VPS's, or
 * It can be written as (A), where A is a VPS.

We can similarly define the nesting depth depth(S) of any VPS S as follows:

 * depth("""") = 0
 * depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
 * depth(""("" + A + "")"") = 1 + depth(A), where A is a VPS.

For example,  """", ""()()"", and ""()(()())"" are VPS's (with nesting depths 0, 1, and 2), and "")("" and ""(()"" are not VPS's.

 

Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).

Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.

Return an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.

 

Example 1:


Input: seq = ""(()())""
Output: [0,1,1,1,1,0]


Example 2:


Input: seq = ""()(())()""
Output: [0,0,0,1,1,0,1,1]


 

Constraints:

 * 1 <= seq.size <= 10000",Solutions (274),367,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDepthAfterSplit(self, seq: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    seq: str = deserialize(""str"", read_line())
    ans = Solution().maxDepthAfterSplit(seq)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxDepthAfterSplit(self, seq: str) -> List[int]:"
False,0,0,1210,,Mean of Array After Removing Some Elements,mean-of-array-after-removing-some-elements,False,43855,66717,1619,False,1,"Can you solve this real interview question? Mean of Array After Removing Some Elements - Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.

Answers within 10-5 of the actual answer will be considered accepted.

 

Example 1:


Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Output: 2.00000
Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.


Example 2:


Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Output: 4.00000


Example 3:


Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
Output: 4.77778


 

Constraints:

 * 20 <= arr.length <= 1000
 * arr.length is a multiple of 20.
 * 0 <= arr[i] <= 105",Solutions (650),397,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/mean-of-array-after-removing-some-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def trimMean(self, arr: List[int]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().trimMean(arr)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def trimMean(self, arr: List[int]) -> float:
        arr.sort()
        remove_count = len(arr) // 20
        trimmed_arr = arr[remove_count:-remove_count]
        return sum(trimmed_arr) / len(trimmed_arr)"
False,0,0,1212,sequential-digits,Sequential Digits,sequential-digits,False,88951,145132,1291,False,2,"Can you solve this real interview question? Sequential Digits - An integer has sequential digits if and only if each digit in the number is one more than the previous digit.

Return a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.

 

Example 1:

Input: low = 100, high = 300
Output: [123,234]


Example 2:

Input: low = 1000, high = 13000
Output: [1234,2345,3456,4567,5678,6789,12345]


 

Constraints:

 * 10 <= low <= high <= 10^9",Solutions (1.5K),1.9K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/sequential-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    low: int = deserialize(""int"", read_line())
    high: int = deserialize(""int"", read_line())
    ans = Solution().sequentialDigits(low, high)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sequentialDigits(self, low: int, high: int) -> List[int]:
        def generate(digits, current):
            num = int("""".join(str(d) for d in current))
            if num > high:
                return
            if num >= low:
                result.append(num)
            if current[-1] < 9:
                current.append(current[-1] + 1)
                generate(digits, current)
            return
        
        result = []
        for i in range(1, 9):
            generate(i, [i])
        
        return sorted(result)"
False,0,0,1217,,Relative Sort Array,relative-sort-array,False,153040,223056,1122,False,1,"Can you solve this real interview question? Relative Sort Array - Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:


Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]


Example 2:


Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
Output: [22,28,8,6,17,44]


 

Constraints:

 * 1 <= arr1.length, arr2.length <= 1000
 * 0 <= arr1[i], arr2[i] <= 1000
 * All the elements of arr2 are distinct.
 * Each arr2[i] is in arr1.",Solutions (2.1K),2.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/relative-sort-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().relativeSortArray(arr1, arr2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        import collections
        count = collections.Counter(arr1)
        arr1.sort(key=lambda x: (0, x) if x in arr2 else (1, x))
        return arr1"
False,0,0,1219,,Longest Well-Performing Interval,longest-well-performing-interval,False,26337,76057,1124,False,2,"Can you solve this real interview question? Longest Well-Performing Interval - We are given hours, a list of the number of hours worked per day for a given employee.

A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.

A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.

Return the length of the longest well-performing interval.

 

Example 1:


Input: hours = [9,9,6,0,6,6,9]
Output: 3
Explanation: The longest well-performing interval is [9,9,6].


Example 2:


Input: hours = [6,6,6]
Output: 0


 

Constraints:

 * 1 <= hours.length <= 104
 * 0 <= hours[i] <= 16",Solutions (192),1.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-well-performing-interval/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestWPI(self, hours: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    hours: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestWPI(hours)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestWPI(self, hours: List[int]) -> int:
        stack = []
        res = score = 0
        for i, h in enumerate(hours):
            if h > 8:
                score += 1
            else:
                score -= 1
            if score > 0:
                res = i + 1
            if not stack or score < stack[-1][1]:
                stack.append((i, score))
        while stack:
            i, s = stack.pop()
            if s > 0:
                return max(res, i - stack[-1][0])
        return res"
False,0,0,1220,,Smallest Sufficient Team,smallest-sufficient-team,False,18701,39970,1125,False,3,"Can you solve this real interview question? Smallest Sufficient Team - In a project, you have a list of required skills req_skills, and a list of people. The ith person people[i] contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.

 * For example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].

Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.

 

Example 1:

Input: req_skills = [""java"",""nodejs"",""reactjs""], people = [[""java""],[""nodejs""],[""nodejs"",""reactjs""]]
Output: [0,2]


Example 2:

Input: req_skills = [""algorithms"",""math"",""java"",""reactjs"",""csharp"",""aws""], people = [[""algorithms"",""math"",""java""],[""algorithms"",""math"",""reactjs""],[""java"",""csharp"",""aws""],[""reactjs"",""csharp""],[""csharp"",""math""],[""aws"",""java""]]
Output: [1,2]


 

Constraints:

 * 1 <= req_skills.length <= 16
 * 1 <= req_skills[i].length <= 16
 * req_skills[i] consists of lowercase English letters.
 * All the strings of req_skills are unique.
 * 1 <= people.length <= 60
 * 0 <= people[i].length <= 16
 * 1 <= people[i][j].length <= 16
 * people[i][j] consists of lowercase English letters.
 * All the strings of people[i] are unique.
 * Every skill in people[i] is a skill in req_skills.
 * It is guaranteed a sufficient team exists.",Solutions (202),893,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-sufficient-team/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    req_skills: List[str] = deserialize(""List[str]"", read_line())
    people: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().smallestSufficientTeam(req_skills, people)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallestSufficientTeam(self, req_skills: List[str], people: List[List[str]]) -> List[int]:
        def backtrack(people_skills, skill_idx, total_skills):
            if skill_idx == len(req_skills):
                return []

            if skill_idx in total_skills:
                return total_skills[skill_idx]

            best_team = None
            for i, person_skills in enumerate(people_skills):
                if req_skills[skill_idx] in person_skills:
                    new_skills = total_skills.copy()
                    new_skills[skill_idx] = [i]
                    updated_team = backtrack(people_skills, skill_idx + 1, new_skills)
                    if updated_team is None:
                        continue
                    updated_team = [i] + updated_team
                    if best_team is None or len(updated_team) < len(best_team):
                        best_team = updated_team

            total_skills[skill_idx] = best_team
            return best_team

        people_skills = [set(skills) for skills in people]
        total_skills = {}
        result = backtrack(people_skills, 0, total_skills)
        return result if result is not None else []"
False,0,0,1221,,Element Appearing More Than 25% In Sorted Array,element-appearing-more-than-25-in-sorted-array,False,76080,127996,1287,False,1,"Can you solve this real interview question? Element Appearing More Than 25% In Sorted Array - Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

 

Example 1:


Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6


Example 2:


Input: arr = [1,1]
Output: 1


 

Constraints:

 * 1 <= arr.length <= 104
 * 0 <= arr[i] <= 105",Solutions (966),818,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findSpecialInteger(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findSpecialInteger(self, arr: List[int]) -> int:
        length = len(arr)
        limit = length // 4
        
        for i in range(length):
            if arr[i] == arr[i + limit]:
                return arr[i]"
False,0,0,1222,remove-covered-intervals,Remove Covered Intervals,remove-covered-intervals,False,106665,187096,1288,False,2,"Can you solve this real interview question? Remove Covered Intervals - Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.

The interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.

Return the number of remaining intervals.

 

Example 1:


Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.


Example 2:


Input: intervals = [[1,4],[2,3]]
Output: 1


 

Constraints:

 * 1 <= intervals.length <= 1000
 * intervals[i].length == 2
 * 0 <= li < ri <= 105
 * All the given intervals are unique.",Solutions (1.1K),2.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-covered-intervals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().removeCoveredIntervals(intervals)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key=lambda x: (x[0], -x[1]))
        count = 1
        end = intervals[0][1]
        for i in range(1, len(intervals)):
            if intervals[i][1] > end:
                count += 1
                end = intervals[i][1]
        return count"
False,0,0,1223,,Graph Connectivity With Threshold,graph-connectivity-with-threshold,False,13863,29978,1627,False,3,"Can you solve this real interview question? Graph Connectivity With Threshold - We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:

 * x % z == 0,
 * y % z == 0, and
 * z > threshold.

Given the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them).

Return an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg]


Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
Output: [false,false,true]
Explanation: The divisors for each number:
1:   1
2:   1, 2
3:   1, 3
4:   1, 2, 4
5:   1, 5
6:   1, 2, 3, 6
Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the
only ones directly connected. The result of each query:
[1,4]   1 is not connected to 4
[2,5]   2 is not connected to 5
[3,6]   3 is connected to 6 through path 3--6


Example 2:

[https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg]


Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
Output: [true,true,true,true,true]
Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,
all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.


Example 3:

[https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg]


Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
Output: [false,false,false,false,false]
Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.
Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].


 

Constraints:

 * 2 <= n <= 104
 * 0 <= threshold <= n
 * 1 <= queries.length <= 105
 * queries[i].length == 2
 * 1 <= ai, bi <= cities
 * ai != bi",Solutions (184),462,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/graph-connectivity-with-threshold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    threshold: int = deserialize(""int"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().areConnected(n, threshold, queries)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def areConnected(self, n: int, threshold: int, queries: List[List[int]]) -> List[bool]:
        def find_parent(parent, u):
            if parent[u] != u:
                return find_parent(parent, parent[u])
            return parent[u]

        def union(parent, rank, u, v):
            u_root = find_parent(parent, u)
            v_root = find_parent(parent, v)

            if rank[u_root] < rank[v_root]:
                parent[u_root] = v_root
            elif rank[u_root] > rank[v_root]:
                parent[v_root] = u_root
            else:
                parent[v_root] = u_root
                rank[u_root] += 1

        def gcd(a, b):
            if b == 0:
                return a
            return gcd(b, a % b)

        parent = [i for i in range(n + 1)]
        rank = [0] * (n + 1)

        for i in range(threshold + 1, n + 1):
            for j in range(i * 2, n + 1, i):
                if gcd(i, j) > threshold:
                    union(parent, rank, i, j)

        result = []
        for query in queries:
            a, b = query
            if find_parent(parent, a) == find_parent(parent, b):
                result.append(True)
            else:
                result.append(False)

        return result"
False,0,0,1224,,Minimum Falling Path Sum II,minimum-falling-path-sum-ii,False,39976,68334,1289,False,3,"Can you solve this real interview question? Minimum Falling Path Sum II - Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.

A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/10/falling-grid.jpg]


Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.


Example 2:


Input: grid = [[7]]
Output: 7


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 200
 * -99 <= grid[i][j] <= 99",Solutions (672),1.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-falling-path-sum-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFallingPathSum(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minFallingPathSum(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFallingPathSum(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        
        for i in range(1, n):
            for j in range(m):
                grid[i][j] += min(grid[i-1][max(0, j-1):min(m, j+2)])
        
        return min(grid[-1])"
False,0,0,1227,,Number of Equivalent Domino Pairs,number-of-equivalent-domino-pairs,False,56855,120703,1128,False,1,"Can you solve this real interview question? Number of Equivalent Domino Pairs - Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].

 

Example 1:


Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1


Example 2:


Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]
Output: 3


 

Constraints:

 * 1 <= dominoes.length <= 4 * 104
 * dominoes[i].length == 2
 * 1 <= dominoes[i][j] <= 9",Solutions (583),591,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-equivalent-domino-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dominoes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numEquivDominoPairs(dominoes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numEquivDominoPairs(self, dominoes: List[List[int]]) -> int:
        count = 0
        d = {}
        for domino in dominoes:
            key = tuple(sorted(domino))
            count += d.get(key, 0)
            d[key] = d.get(key, 0) + 1
        return count"
False,0,0,1228,,Minimum Cost Tree From Leaf Values,minimum-cost-tree-from-leaf-values,False,83682,122487,1130,False,2,"Can you solve this real interview question? Minimum Cost Tree From Leaf Values - Given an array arr of positive integers, consider all binary trees such that:

 * Each node has either 0 or 2 children;
 * The values of arr correspond to the values of each leaf in an in-order traversal of the tree.
 * The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.

Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.

A node is a leaf if and only if it has zero children.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/10/tree1.jpg]


Input: arr = [6,2,4]
Output: 32
Explanation: There are two possible trees shown.
The first has a non-leaf node sum 36, and the second has non-leaf node sum 32.


Example 2:

[https://assets.leetcode.com/uploads/2021/08/10/tree2.jpg]


Input: arr = [4,11]
Output: 44


 

Constraints:

 * 2 <= arr.length <= 40
 * 1 <= arr[i] <= 15
 * It is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 231).",Solutions (553),3.8K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mctFromLeafValues(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mctFromLeafValues(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mctFromLeafValues(self, arr: List[int]) -> int:
        pass"
False,0,0,1229,shortest-path-with-alternating-colors,Shortest Path with Alternating Colors,shortest-path-with-alternating-colors,False,94475,194720,1129,False,2,"Can you solve this real interview question? Shortest Path with Alternating Colors - You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.

You are given two arrays redEdges and blueEdges where:

 * redEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and
 * blueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.

Return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.

 

Example 1:


Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []
Output: [0,1,-1]


Example 2:


Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]
Output: [0,1,-1]


 

Constraints:

 * 1 <= n <= 100
 * 0 <= redEdges.length, blueEdges.length <= 400
 * redEdges[i].length == blueEdges[j].length == 2
 * 0 <= ai, bi, uj, vj < n",Solutions (1.2K),3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-path-with-alternating-colors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    redEdges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    blueEdges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().shortestAlternatingPaths(n, redEdges, blueEdges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def shortestAlternatingPaths(self, n: int, redEdges: List[List[int]], blueEdges: List[List[int]]) -> List[int]:
        pass"
False,0,0,1230,,Maximum of Absolute Value Expression,maximum-of-absolute-value-expression,False,19414,39521,1131,False,2,"Can you solve this real interview question? Maximum of Absolute Value Expression - Given two arrays of integers with equal lengths, return the maximum value of:

|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|

where the maximum is taken over all 0 <= i, j < arr1.length.

 

Example 1:


Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13


Example 2:


Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20


 

Constraints:

 * 2 <= arr1.length == arr2.length <= 40000
 * -10^6 <= arr1[i], arr2[i] <= 10^6",Solutions (167),567,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-of-absolute-value-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxAbsValExpr(arr1, arr2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxAbsValExpr(self, arr1: List[int], arr2: List[int]) -> int:
        n = len(arr1)
        ans = 0
        for i in range(n):
            for j in range(n):
                ans = max(ans, abs(arr1[i] - arr1[j]) + abs(arr2[i] - arr2[j]) + abs(i - j))
        return ans"
False,0,0,1231,,Replace Elements with Greatest Element on Right Side,replace-elements-with-greatest-element-on-right-side,False,281527,383370,1299,False,1,"Can you solve this real interview question? Replace Elements with Greatest Element on Right Side - Given an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.

After doing so, return the array.

 

Example 1:


Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).
- index 1 --> the greatest element to the right of index 1 is index 4 (6).
- index 2 --> the greatest element to the right of index 2 is index 4 (6).
- index 3 --> the greatest element to the right of index 3 is index 4 (6).
- index 4 --> the greatest element to the right of index 4 is index 5 (1).
- index 5 --> there are no elements to the right of index 5, so we put -1.


Example 2:


Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.


 

Constraints:

 * 1 <= arr.length <= 104
 * 1 <= arr[i] <= 105",Solutions (2.3K),2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().replaceElements(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def replaceElements(self, arr: List[int]) -> List[int]:
        mx = -1
        for i in range(len(arr) - 1, -1, -1):
            arr[i], mx = mx, max(mx, arr[i])
        return arr"
False,0,0,1232,,Sum of Mutated Array Closest to Target,sum-of-mutated-array-closest-to-target,False,32293,74085,1300,False,2,"Can you solve this real interview question? Sum of Mutated Array Closest to Target - Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from arr.

 

Example 1:


Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.


Example 2:


Input: arr = [2,3,5], target = 10
Output: 5


Example 3:


Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361


 

Constraints:

 * 1 <= arr.length <= 104
 * 1 <= arr[i], target <= 105",Solutions (330),995,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findBestValue(self, arr: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().findBestValue(arr, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findBestValue(self, arr: List[int], target: int) -> int:
        arr.sort()
        n = len(arr)
        prefix = [0]
        for num in arr:
            prefix.append(prefix[-1] + num)
        l, r = 0, max(arr)
        while l < r:
            mid = (l + r) // 2
            index = bisect_left(arr, mid)
            cur = prefix[index] + (n - index) * mid
            if cur < target:
                l = mid + 1
            else:
                r = mid
        if abs(prefix[bisect_left(arr, l)] + (n - bisect_left(arr, l)) * l - target) < abs(prefix[bisect_left(arr, l) - 1] + (n - bisect_left(arr, l) + 1) * l - target):
            return l
        else:
            return l - 1"
False,0,0,1234,,Number of Paths with Max Score,number-of-paths-with-max-score,False,10993,28335,1301,False,3,"Can you solve this real interview question? Number of Paths with Max Score - You are given a square board of characters. You can move on the board starting at the bottom right square marked with the character 'S'.

You need to reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.

Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.

In case there is no path, return [0, 0].

 

Example 1:

Input: board = [""E23"",""2X2"",""12S""]
Output: [7,1]


Example 2:

Input: board = [""E12"",""1X1"",""21S""]
Output: [4,2]


Example 3:

Input: board = [""E11"",""XXX"",""11S""]
Output: [0,0]


 

Constraints:

 * 2 <= board.length == board[i].length <= 100",Solutions (186),431,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-paths-with-max-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pathsWithMaxScore(self, board: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().pathsWithMaxScore(board)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def pathsWithMaxScore(self, board: List[str]) -> List[int]:
        pass"
False,0,0,1236,n-th-tribonacci-number,N-th Tribonacci Number,n-th-tribonacci-number,False,468799,735143,1137,False,1,"Can you solve this real interview question? N-th Tribonacci Number - The Tribonacci sequence Tn is defined as follows: 

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given n, return the value of Tn.

 

Example 1:


Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4


Example 2:


Input: n = 25
Output: 1389537


 

Constraints:

 * 0 <= n <= 37
 * The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.",Solutions (4.6K),3.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/n-th-tribonacci-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def tribonacci(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().tribonacci(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def tribonacci(self, n: int) -> int:
        if n == 0:
            return 0
        if n == 1 or n == 2:
            return 1
        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 1
        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]
        return dp[n]"
False,0,0,1238,,Alphabet Board Path,alphabet-board-path,False,46417,89284,1138,False,2,"Can you solve this real interview question? Alphabet Board Path - On an alphabet board, we start at position (0, 0), corresponding to character board[0][0].

Here, board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""], as shown in the diagram below.

[https://assets.leetcode.com/uploads/2019/07/28/azboard.png]

We may make the following moves:

 * 'U' moves our position up one row, if the position exists on the board;
 * 'D' moves our position down one row, if the position exists on the board;
 * 'L' moves our position left one column, if the position exists on the board;
 * 'R' moves our position right one column, if the position exists on the board;
 * '!' adds the character board[r][c] at our current position (r, c) to the answer.

(Here, the only positions that exist on the board are positions with letters on them.)

Return a sequence of moves that makes our answer equal to target in the minimum number of moves.  You may return any path that does so.

 

Example 1:

Input: target = ""leet""
Output: ""DDR!UURRR!!DDD!""


Example 2:

Input: target = ""code""
Output: ""RR!DDRR!UUL!R!""


 

Constraints:

 * 1 <= target.length <= 100
 * target consists only of English lowercase letters.",Solutions (616),811,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/alphabet-board-path/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def alphabetBoardPath(self, target: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    target: str = deserialize(""str"", read_line())
    ans = Solution().alphabetBoardPath(target)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def alphabetBoardPath(self, target: str) -> str:
        import string
        
        def get_pos(c):
            return (divmod(ord(c) - ord('a'), 5))
        
        def move(board, r1, c1, r2, c2):
            if r1 == r2 and c1 == c2:
                return ''
            elif r1 == 5 and c1 == c2:
                return 'U' + move(board, r1 - 1, c1, r2, c2)
            elif r1 == 4 and c1 == c2:
                return 'D' + move(board, r1 + 1, c1, r2, c2)
            elif c1 == 0 and r1 == r2:
                return 'R' + move(board, r1, c1 + 1, r2, c2)
            elif c1 == 4 and r1 == r2:
                return 'L' + move(board, r1, c1 - 1, r2, c2)
            elif c1 < c2:
                return 'R' + move(board, r1, c1 + 1, r2, c2)
            elif c1 > c2:
                return 'L' + move(board, r1, c1 - 1, r2, c2)
            elif r1 < r2:
                return 'D' + move(board, r1 + 1, c1, r2, c2)
            elif r1 > r2:
                return 'U' + move(board, r1 - 1, c1, r2, c2)
        
        board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]
        
        current_r, current_c = 0, 0
        result = ''
        
        for char in target:
            tr, tc = get_pos(char)
            result += move(board, current_r, current_c, tr, tc) + '!'
            current_r, current_c = tr, tc
        
        return result"
False,0,0,1239,,Largest 1-Bordered Square,largest-1-bordered-square,False,21923,43673,1139,False,2,"Can you solve this real interview question? Largest 1-Bordered Square - Given a 2D grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.

 

Example 1:


Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9


Example 2:


Input: grid = [[1,1,0,0]]
Output: 1


 

Constraints:

 * 1 <= grid.length <= 100
 * 1 <= grid[0].length <= 100
 * grid[i][j] is 0 or 1",Solutions (232),632,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-1-bordered-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largest1BorderedSquare(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largest1BorderedSquare(self, grid: List[List[int]]) -> int:
        def largest1BorderedSquare(self, grid: List[List[int]]) -> int:
            row, col = len(grid), len(grid[0])
            m = min(row, col)
            dp = [[[0]*2 for _ in range(col)] for _ in range(row)]
            res = 0
            for i in range(row):
                for j in range(col):
                    if grid[i][j] == 1:
                        dp[i][j][0] = 1 if j == 0 else dp[i][j-1][0] + 1
                        dp[i][j][1] = 1 if i == 0 else dp[i-1][j][1] + 1
            for i in range(row):
                for j in range(col):
                    for k in range(m-1, -1, -1):
                        if i - k >= 0 and j - k >= 0:
                            if min(dp[i][j][0], dp[i][j-k][0], dp[i-k][j][1], dp[i][j][1]) >= k:
                                res = max(res, (k + 1)*(k + 1))
                                break
            return res"
False,0,0,1240,,Stone Game II,stone-game-ii,False,45852,70811,1140,False,2,"Can you solve this real interview question? Stone Game II - Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].  The objective of the game is to end with the most stones. 

Alice and Bob take turns, with Alice starting first.  Initially, M = 1.

On each player's turn, that player can take all the stones in the first X remaining piles, where 1 <= X <= 2M.  Then, we set M = max(M, X).

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.

 

Example 1:


Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 


Example 2:


Input: piles = [1,2,3,4,5,100]
Output: 104


 

Constraints:

 * 1 <= piles.length <= 100
 * 1 <= piles[i] <= 104",Solutions (386),1.6K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameII(piles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def stoneGameII(self, piles: List[int]) -> int:
        pass"
False,0,0,1241,,Decompress Run-Length Encoded List,decompress-run-length-encoded-list,False,221627,258311,1313,False,1,"Can you solve this real interview question? Decompress Run-Length Encoded List - We are given a list nums of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0).  For each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.

 

Example 1:


Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].
The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].
At the end the concatenation [2] + [4,4,4] is [2,4,4,4].


Example 2:


Input: nums = [1,1,2,3]
Output: [1,3,3]


 

Constraints:

 * 2 <= nums.length <= 100
 * nums.length % 2 == 0
 * 1 <= nums[i] <= 100",Solutions (2.6K),1.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/decompress-run-length-encoded-list/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().decompressRLElist(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def decompressRLElist(self, nums: List[int]) -> List[int]:
        result = []
        for i in range(0, len(nums), 2):
            result.extend([nums[i+1]] * nums[i])
        return result"
False,0,0,1242,,Matrix Block Sum,matrix-block-sum,False,76152,100971,1314,False,2,"Can you solve this real interview question? Matrix Block Sum - Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

 * i - k <= r <= i + k,
 * j - k <= c <= j + k, and
 * (r, c) is a valid position in the matrix.

 

Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]


Example 2:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n, k <= 100
 * 1 <= mat[i][j] <= 100",Solutions (747),2.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/matrix-block-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matrixBlockSum(self, mat: List[List[int]], k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().matrixBlockSum(mat, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def matrixBlockSum(self, mat: List[List[int]], k: int) -> List[List[int]]:
        m, n = len(mat), len(mat[0])
        prefix = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(m):
            for j in range(n):
                prefix[i + 1][j + 1] = prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j] + mat[i][j]

        result = [[0] * n for _ in range(m)]

        for i in range(m):
            for j in range(n):
                r1, c1, r2, c2 = max(0, i - k), max(0, j - k), min(m, i + k + 1), min(n, j + k + 1)
                result[i][j] = prefix[r2][c2] - prefix[r1][c2] - prefix[r2][c1] + prefix[r1][c1]

        return result"
False,0,0,1244,,Distinct Echo Substrings,distinct-echo-substrings,False,13904,28025,1316,False,3,"Can you solve this real interview question? Distinct Echo Substrings - Return the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).

 

Example 1:


Input: text = ""abcabcabc""
Output: 3
Explanation: The 3 substrings are ""abcabc"", ""bcabca"" and ""cabcab"".


Example 2:


Input: text = ""leetcodeleetcode""
Output: 2
Explanation: The 2 substrings are ""ee"" and ""leetcodeleetcode"".


 

Constraints:

 * 1 <= text.length <= 2000
 * text has only lowercase English letters.",Solutions (175),275,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/distinct-echo-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctEchoSubstrings(self, text: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().distinctEchoSubstrings(text)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctEchoSubstrings(self, text: str) -> int:
        n = len(text)
        res = set()
        
        for i in range(n):
            for j in range(i+1, n):
                if j-i <= n-j and text[i:j] == text[j:j+i]:
                    res.add(text[i:j])
        
        return len(res)"
False,0,0,1247,,Decrease Elements To Make Array Zigzag,decrease-elements-to-make-array-zigzag,False,17114,36168,1144,False,2,"Can you solve this real interview question? Decrease Elements To Make Array Zigzag - Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.

An array A is a zigzag array if either:

 * Every even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ...
 * OR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ...

Return the minimum number of moves to transform the given array nums into a zigzag array.

 

Example 1:


Input: nums = [1,2,3]
Output: 2
Explanation: We can decrease 2 to 0 or 3 to 1.


Example 2:


Input: nums = [9,6,1,6,2]
Output: 4


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000",Solutions (227),380,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def movesToMakeZigzag(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().movesToMakeZigzag(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def movesToMakeZigzag(self, nums: List[int]) -> int:
        odd_sum = even_sum = 0
        for i in range(len(nums)):
            left = nums[i - 1] if i > 0 else float('inf')
            right = nums[i + 1] if i < len(nums) - 1 else float('inf')
            odd_sum += max(0, nums[i] - min(left, right) + 1) if i % 2 == 0 else 0
            even_sum += max(0, nums[i] - min(left, right) + 1) if i % 2 != 0 else 0
        return min(odd_sum, even_sum)"
False,0,0,1250,longest-common-subsequence,Longest Common Subsequence,longest-common-subsequence,False,666171,1140363,1143,False,2,"Can you solve this real interview question? Longest Common Subsequence - Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 * For example, ""ace"" is a subsequence of ""abcde"".

A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:


Input: text1 = ""abcde"", text2 = ""ace"" 
Output: 3  
Explanation: The longest common subsequence is ""ace"" and its length is 3.


Example 2:


Input: text1 = ""abc"", text2 = ""abc""
Output: 3
Explanation: The longest common subsequence is ""abc"" and its length is 3.


Example 3:


Input: text1 = ""abc"", text2 = ""def""
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


 

Constraints:

 * 1 <= text1.length, text2.length <= 1000
 * text1 and text2 consist of only lowercase English characters.",Solutions (3.6K),10.5K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-common-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text1: str = deserialize(""str"", read_line())
    text2: str = deserialize(""str"", read_line())
    ans = Solution().longestCommonSubsequence(text1, text2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m, n = len(text1), len(text2)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if text1[i - 1] == text2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return dp[m][n]"
False,0,0,1251,,Longest Chunked Palindrome Decomposition,longest-chunked-palindrome-decomposition,False,19862,33549,1147,False,3,"Can you solve this real interview question? Longest Chunked Palindrome Decomposition - You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:

 * subtexti is a non-empty string.
 * The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
 * subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).

Return the largest possible value of k.

 

Example 1:


Input: text = ""ghiabcdefhelloadamhelloabcdefghi""
Output: 7
Explanation: We can split the string on ""(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"".


Example 2:


Input: text = ""merchant""
Output: 1
Explanation: We can split the string on ""(merchant)"".


Example 3:


Input: text = ""antaprezatepzapreanta""
Output: 11
Explanation: We can split the string on ""(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)"".


 

Constraints:

 * 1 <= text.length <= 1000
 * text consists only of lowercase English characters.",Solutions (342),567,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-chunked-palindrome-decomposition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestDecomposition(self, text: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().longestDecomposition(text)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestDecomposition(self, text: str) -> int:
        pass"
False,0,0,1252,break-a-palindrome,Break a Palindrome,break-a-palindrome,False,144507,274561,1328,False,2,"Can you solve this real interview question? Break a Palindrome - Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, ""abcc"" is lexicographically smaller than ""abcd"" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.

 

Example 1:


Input: palindrome = ""abccba""
Output: ""aaccba""
Explanation: There are many ways to make ""abccba"" not a palindrome, such as ""zbccba"", ""aaccba"", and ""abacba"".
Of all the ways, ""aaccba"" is the lexicographically smallest.


Example 2:


Input: palindrome = ""a""
Output: """"
Explanation: There is no way to replace a single character to make ""a"" not a palindrome, so return an empty string.


 

Constraints:

 * 1 <= palindrome.length <= 1000
 * palindrome consists of only lowercase English letters.",Solutions (1.9K),2.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/break-a-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def breakPalindrome(self, palindrome: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    palindrome: str = deserialize(""str"", read_line())
    ans = Solution().breakPalindrome(palindrome)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def breakPalindrome(self, palindrome: str) -> str:
        if len(palindrome) == 1:
            return """"
        
        for i in range(len(palindrome) // 2):
            if palindrome[i] != 'a':
                return palindrome[:i] + 'a' + palindrome[i+1:]
        
        return palindrome[:-1] + 'b'"
False,0,0,1253,sort-the-matrix-diagonally,Sort the Matrix Diagonally,sort-the-matrix-diagonally,False,144687,173606,1329,False,2,"Can you solve this real interview question? Sort the Matrix Diagonally - A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].

Given an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/21/1482_example_1_2.png]


Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]


Example 2:


Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 100
 * 1 <= mat[i][j] <= 100",Solutions (2K),3.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-the-matrix-diagonally/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().diagonalSort(mat)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:
        def sort_diagonal(i, j):
            diagonal = []
            while i < len(mat) and j < len(mat[0]):
                diagonal.append(mat[i][j])
                i += 1
                j += 1
            diagonal.sort()
            while i > 0 and j > 0:
                i -= 1
                j -= 1
                mat[i][j] = diagonal.pop()
        
        for i in range(len(mat)):
            sort_diagonal(i, 0)
        for j in range(1, len(mat[0])):
            sort_diagonal(0, j)
        
        return mat"
False,0,0,1255,,Reverse Subarray To Maximize Array Value,reverse-subarray-to-maximize-array-value,False,4644,11521,1330,False,3,"Can you solve this real interview question? Reverse Subarray To Maximize Array Value - You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.

 

Example 1:


Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.


Example 2:


Input: nums = [2,4,9,24,2,1,10]
Output: 68


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * -105 <= nums[i] <= 105",Solutions (41),411,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-subarray-to-maximize-array-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxValueAfterReverse(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxValueAfterReverse(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxValueAfterReverse(self, nums: List[int]) -> int:
        pass"
False,0,0,1256,,Rank Transform of an Array,rank-transform-of-an-array,False,81702,137876,1331,False,1,"Can you solve this real interview question? Rank Transform of an Array - Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

 * Rank is an integer starting from 1.
 * The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
 * Rank should be as small as possible.

 

Example 1:


Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.

Example 2:


Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.


Example 3:


Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]


 

Constraints:

 * 0 <= arr.length <= 105
 * -109 <= arr[i] <= 109",Solutions (914),1.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/rank-transform-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrayRankTransform(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().arrayRankTransform(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def arrayRankTransform(self, arr: List[int]) -> List[int]:
        rank = {x: i + 1 for i, x in enumerate(sorted(set(arr)))}
        return [rank[x] for x in arr]"
False,0,0,1257,rank-transform-of-a-matrix,Rank Transform of a Matrix,rank-transform-of-a-matrix,False,19930,48670,1632,False,3,"Can you solve this real interview question? Rank Transform of a Matrix - Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:

 * The rank is an integer starting from 1.
 * If two elements p and q are in the same row or column, then:
   * If p < q then rank(p) < rank(q)
   * If p == q then rank(p) == rank(q)
   * If p > q then rank(p) > rank(q)
 * The rank should be as small as possible.

The test cases are generated so that answer is unique under the given rules.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/18/rank1.jpg]


Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
Explanation:
The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.
The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.
The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.


Example 2:

[https://assets.leetcode.com/uploads/2020/10/18/rank2.jpg]


Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]


Example 3:

[https://assets.leetcode.com/uploads/2020/10/18/rank3.jpg]


Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 500
 * -109 <= matrix[row][col] <= 109",Solutions (119),758,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/rank-transform-of-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().matrixRankTransform(matrix)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:
        import numpy as np
        m, n = len(matrix), len(matrix[0])
        mat = np.array(matrix)
        
        flattened = [(i, j) for i in range(m) for j in range(n)]
        flattened.sort(key=lambda x: mat[x[0], x[1]])
        
        ranks = [[0 for _ in range(n)] for _ in range(m)]
        col_ranks = [0] * n
        row_ranks = [0] * m
        
        for i, (row, col) in enumerate(flattened):
            if i == 0 or mat[row][col] != mat[flattened[i - 1][0]][flattened[i - 1][1]]:
                rank = max(row_ranks[row], col_ranks[col]) + 1
            else:
                rank = ranks[flattened[i - 1][0]][flattened[i - 1][1]]
                
            ranks[row][col] = rank
            row_ranks[row] = rank
            col_ranks[col] = rank
        
        return ranks"
False,0,0,1260,,Day of the Year,day-of-the-year,False,42807,86292,1154,False,1,"Can you solve this real interview question? Day of the Year - Given a string date representing a Gregorian calendar [https://en.wikipedia.org/wiki/Gregorian_calendar] date formatted as YYYY-MM-DD, return the day number of the year.

 

Example 1:


Input: date = ""2019-01-09""
Output: 9
Explanation: Given date is the 9th day of the year in 2019.


Example 2:


Input: date = ""2019-02-10""
Output: 41


 

Constraints:

 * date.length == 10
 * date[4] == date[7] == '-', and all other date[i]'s are digits
 * date represents a calendar date between Jan 1st, 1900 and Dec 31th, 2019.",Solutions (658),344,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/day-of-the-year/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dayOfYear(self, date: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    date: str = deserialize(""str"", read_line())
    ans = Solution().dayOfYear(date)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def dayOfYear(self, date: str) -> int:
        return int(date.split('-')[1]) + sum([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30][:int(date.split('-')[1])-1]) + (1 if int(date.split('-')[0]) % 4 == 0 and (int(date.split('-')[0]) % 100 != 0 or int(date.split('-')[0]) % 400 == 0) and int(date.split('-')[1]) > 2 else 0)"
False,0,0,1261,,Swap For Longest Repeated Character Substring,swap-for-longest-repeated-character-substring,False,26758,59282,1156,False,2,"Can you solve this real interview question? Swap For Longest Repeated Character Substring - You are given a string text. You can swap two of the characters in the text.

Return the length of the longest substring with repeated characters.

 

Example 1:


Input: text = ""ababa""
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is ""aaa"" with length 3.


Example 2:


Input: text = ""aaabaaa""
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring ""aaaaaa"" with length 6.


Example 3:


Input: text = ""aaaaa""
Output: 5
Explanation: No need to swap, longest repeated character substring is ""aaaaa"" with length is 5.


 

Constraints:

 * 1 <= text.length <= 2 * 104
 * text consist of lowercase English characters only.",Solutions (294),879,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/swap-for-longest-repeated-character-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxRepOpt1(self, text: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().maxRepOpt1(text)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxRepOpt1(self, text: str) -> int:
        # code here"
False,0,0,1263,number-of-dice-rolls-with-target-sum,Number of Dice Rolls With Target Sum,number-of-dice-rolls-with-target-sum,False,177772,330086,1155,False,2,"Can you solve this real interview question? Number of Dice Rolls With Target Sum - You have n dice, and each die has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.


Example 2:


Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.


Example 3:


Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.


 

Constraints:

 * 1 <= n, k <= 30
 * 1 <= target <= 1000",Solutions (1.5K),3.8K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().numRollsToTarget(n, k, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numRollsToTarget(self, n: int, k: int, target: int) -> int:
        dp = [[0] * (target + 1) for _ in range(n + 1)]
        dp[0][0] = 1
        mod = 10**9 + 7
        for i in range(1, n + 1):
            for j in range(1, k + 1):
                for t in range(j, target + 1):
                    dp[i][t] = (dp[i][t] + dp[i - 1][t - j]) % mod
        return dp[n][target]"
False,0,0,1264,,Maximum Number of Words You Can Type,maximum-number-of-words-you-can-type,False,42246,59051,1935,False,1,"Can you solve this real interview question? Maximum Number of Words You Can Type - There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.

 

Example 1:


Input: text = ""hello world"", brokenLetters = ""ad""
Output: 1
Explanation: We cannot type ""world"" because the 'd' key is broken.


Example 2:


Input: text = ""leet code"", brokenLetters = ""lt""
Output: 1
Explanation: We cannot type ""leet"" because the 'l' and 't' keys are broken.


Example 3:


Input: text = ""leet code"", brokenLetters = ""e""
Output: 0
Explanation: We cannot type either word because the 'e' key is broken.


 

Constraints:

 * 1 <= text.length <= 104
 * 0 <= brokenLetters.length <= 26
 * text consists of words separated by a single space without any leading or trailing spaces.
 * Each word only consists of lowercase English letters.
 * brokenLetters consists of distinct lowercase English letters.",Solutions (802),455,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-words-you-can-type/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    brokenLetters: str = deserialize(""str"", read_line())
    ans = Solution().canBeTypedWords(text, brokenLetters)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def canBeTypedWords(self, text: str, brokenLetters: str) -> int:
        count = 0
        for word in text.split():
            if not any(letter in brokenLetters for letter in word):
                count += 1
        return count"
False,0,0,1272,,Invalid Transactions,invalid-transactions,False,60473,193738,1169,False,2,"Can you solve this real interview question? Invalid Transactions - A transaction is possibly invalid if:

 * the amount exceeds $1000, or;
 * if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.

You are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of transactions that are possibly invalid. You may return the answer in any order.

 

Example 1:


Input: transactions = [""alice,20,800,mtv"",""alice,50,100,beijing""]
Output: [""alice,20,800,mtv"",""alice,50,100,beijing""]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.

Example 2:


Input: transactions = [""alice,20,800,mtv"",""alice,50,1200,mtv""]
Output: [""alice,50,1200,mtv""]


Example 3:


Input: transactions = [""alice,20,800,mtv"",""bob,50,1200,mtv""]
Output: [""bob,50,1200,mtv""]


 

Constraints:

 * transactions.length <= 1000
 * Each transactions[i] takes the form ""{name},{time},{amount},{city}""
 * Each {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.
 * Each {time} consist of digits, and represent an integer between 0 and 1000.
 * Each {amount} consist of digits, and represent an integer between 0 and 2000.",Solutions (463),444,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/invalid-transactions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def invalidTransactions(self, transactions: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    transactions: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().invalidTransactions(transactions)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def invalidTransactions(self, transactions: List[str]) -> List[str]:
        import collections
        names = collections.defaultdict(list)
        result = []
        
        for trans in transactions:
            name, time, amount, city = trans.split(',')
            time = int(time)
            amount = int(amount)
            
            if amount > 1000:
                result.append(trans)
            
            else:
                for prev_trans in names[name]:
                    prev_name, prev_time, prev_amount, prev_city = prev_trans.split(',')
                    prev_time = int(prev_time)
                    prev_amount = int(prev_amount)
                    if abs(time - prev_time) <= 60 and city != prev_city:
                        result.append(trans)
                        result.append(prev_trans)
            
            names[name].append(trans)
        
        return list(set(result))"
False,0,0,1273,,Compare Strings by Frequency of the Smallest Character,compare-strings-by-frequency-of-the-smallest-character,False,72319,117540,1170,False,2,"Can you solve this real interview question? Compare Strings by Frequency of the Smallest Character - Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = ""dcce"" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.

You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.

Return an integer array answer, where each answer[i] is the answer to the ith query.

 

Example 1:


Input: queries = [""cbd""], words = [""zaaaz""]
Output: [1]
Explanation: On the first query we have f(""cbd"") = 1, f(""zaaaz"") = 3 so f(""cbd"") < f(""zaaaz"").


Example 2:


Input: queries = [""bbb"",""cc""], words = [""a"",""aa"",""aaa"",""aaaa""]
Output: [1,2]
Explanation: On the first query only f(""bbb"") < f(""aaaa""). On the second query both f(""aaa"") and f(""aaaa"") are both > f(""cc"").


 

Constraints:

 * 1 <= queries.length <= 2000
 * 1 <= words.length <= 2000
 * 1 <= queries[i].length, words[i].length <= 10
 * queries[i][j], words[i][j] consist of lowercase English letters.",Solutions (727),608,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[str] = deserialize(""List[str]"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numSmallerByFrequency(queries, words)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numSmallerByFrequency(self, queries: List[str], words: List[str]) -> List[int]:
        def f(s):
            return s.count(min(s))
        
        res = []
        
        for query in queries:
            count = 0
            f_query = f(query)
            for word in words:
                if f_query < f(word):
                    count += 1
            res.append(count)
        
        return res"
False,0,0,1274,,Number of Days Between Two Dates,number-of-days-between-two-dates,False,39008,81073,1360,False,1,"Can you solve this real interview question? Number of Days Between Two Dates - Write a program to count the number of days between two dates.

The two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.

 

Example 1:

Input: date1 = ""2019-06-29"", date2 = ""2019-06-30""
Output: 1


Example 2:

Input: date1 = ""2020-01-15"", date2 = ""2019-12-31""
Output: 15


 

Constraints:

 * The given dates are valid dates between the years 1971 and 2100.",Solutions (409),284,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-days-between-two-dates/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def daysBetweenDates(self, date1: str, date2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    date1: str = deserialize(""str"", read_line())
    date2: str = deserialize(""str"", read_line())
    ans = Solution().daysBetweenDates(date1, date2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def daysBetweenDates(self, date1: str, date2: str) -> int:
        import datetime
        
        date_format = ""%Y-%m-%d""
        d1 = datetime.datetime.strptime(date1, date_format)
        d2 = datetime.datetime.strptime(date2, date_format)
        
        return abs((d2 - d1).days)"
False,0,0,1275,,Validate Binary Tree Nodes,validate-binary-tree-nodes,False,42438,106459,1361,False,2,"Can you solve this real interview question? Validate Binary Tree Nodes - You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.

If node i has no left child then leftChild[i] will equal -1, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/08/23/1503_ex1.png]


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2019/08/23/1503_ex2.png]


Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false


Example 3:

[https://assets.leetcode.com/uploads/2019/08/23/1503_ex3.png]


Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false


 

Constraints:

 * n == leftChild.length == rightChild.length
 * 1 <= n <= 104
 * -1 <= leftChild[i], rightChild[i] <= n - 1",Solutions (668),1.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/validate-binary-tree-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    leftChild: List[int] = deserialize(""List[int]"", read_line())
    rightChild: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validateBinaryTreeNodes(n, leftChild, rightChild)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validateBinaryTreeNodes(self, n: int, leftChild: List[int], rightChild: List[int]) -> bool:
        parent = {i: i for i in range(n)}
        
        def find(x):
            if x != parent[x]:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            parent[find(x)] = find(y)
        
        for i in range(n):
            l, r = leftChild[i], rightChild[i]
            if l != -1:
                if find(l) == find(i):
                    return False
                union(i, l)
            if r != -1:
                if find(r) == find(i):
                    return False
                union(i, r)
        
        root_set = set()
        for i in range(n):
            root_set.add(find(i))
        
        return len(root_set) == 1 and root_set.pop() == 0"
False,0,0,1276,,Closest Divisors,closest-divisors,False,18557,31033,1362,False,2,"Can you solve this real interview question? Closest Divisors - Given an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.

Return the two integers in any order.

 

Example 1:


Input: num = 8
Output: [3,3]
Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.


Example 2:


Input: num = 123
Output: [5,25]


Example 3:


Input: num = 999
Output: [40,25]


 

Constraints:

 * 1 <= num <= 10^9",Solutions (219),261,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/closest-divisors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestDivisors(self, num: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().closestDivisors(num)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def closestDivisors(self, num: int) -> List[int]:
        def find_divisors(n):
            for i in range(int(n ** 0.5), 0, -1):
                if n % i == 0:
                    return i, n // i
        
        diff1 = abs(num + 1 - 1)
        diff2 = abs(num + 2 - 1)
        
        divisors1 = find_divisors(num + 1)
        divisors2 = find_divisors(num + 2)
        
        if diff1 < diff2:
            return [divisors1]
        else:
            return [divisors2]"
False,0,0,1277,,Largest Multiple of Three,largest-multiple-of-three,False,17017,51208,1363,False,3,"Can you solve this real interview question? Largest Multiple of Three - Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.

Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.

 

Example 1:


Input: digits = [8,1,9]
Output: ""981""


Example 2:


Input: digits = [8,6,7,1,0]
Output: ""8760""


Example 3:


Input: digits = [1]
Output: """"


 

Constraints:

 * 1 <= digits.length <= 104
 * 0 <= digits[i] <= 9",Solutions (234),527,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-multiple-of-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestMultipleOfThree(self, digits: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    digits: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestMultipleOfThree(digits)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestMultipleOfThree(self, digits: List[int]) -> str:
        # insert code here"
False,0,0,1279,,Prime Arrangements,prime-arrangements,False,24883,45595,1175,False,1,"Can you solve this real interview question? Prime Arrangements - Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)

(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)

Since the answer may be large, return the answer modulo 10^9 + 7.

 

Example 1:


Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.


Example 2:


Input: n = 100
Output: 682289015


 

Constraints:

 * 1 <= n <= 100",Solutions (346),340,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/prime-arrangements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numPrimeArrangements(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numPrimeArrangements(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numPrimeArrangements(self, n: int) -> int:
        MOD = 10**9 + 7
        
        def is_prime(num):
            if num < 2:
                return False
            for i in range(2, int(num**0.5)+1):
                if num % i == 0:
                    return False
            return True
        
        def factorial(num):
            result = 1
            for i in range(1, num + 1):
                result = (result * i) % MOD
            return result
        
        prime_count = sum(1 for i in range(1, n+1) if is_prime(i))
        non_prime_count = n - prime_count
        
        return (factorial(prime_count) * factorial(non_prime_count)) % MOD"
False,0,0,1281,,Can Make Palindrome from Substring,can-make-palindrome-from-substring,False,23485,61762,1177,False,2,"Can you solve this real interview question? Can Make Palindrome from Substring - You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.

If the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.

Return a boolean array answer where answer[i] is the result of the ith query queries[i].

Note that each letter is counted individually for replacement, so if, for example s[lefti...righti] = ""aaa"", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.

 

Example :


Input: s = ""abcda"", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
Output: [true,false,false,true,true]
Explanation:
queries[0]: substring = ""d"", is palidrome.
queries[1]: substring = ""bc"", is not palidrome.
queries[2]: substring = ""abcd"", is not palidrome after replacing only 1 character.
queries[3]: substring = ""abcd"", could be changed to ""abba"" which is palidrome. Also this can be changed to ""baab"" first rearrange it ""bacd"" then replace ""cd"" with ""ab"".
queries[4]: substring = ""abcda"", could be changed to ""abcba"" which is palidrome.


Example 2:


Input: s = ""lyb"", queries = [[0,1,0],[2,2,1]]
Output: [false,true]


 

Constraints:

 * 1 <= s.length, queries.length <= 105
 * 0 <= lefti <= righti < s.length
 * 0 <= ki <= s.length
 * s consists of lowercase English letters.",Solutions (259),672,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/can-make-palindrome-from-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().canMakePaliQueries(s, queries)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def canMakePaliQueries(self, s: str, queries: List[List[int]]) -> List[bool]:
        pass"
False,0,0,1282,number-of-valid-words-for-each-puzzle,Number of Valid Words for Each Puzzle,number-of-valid-words-for-each-puzzle,False,28475,61484,1178,False,3,"Can you solve this real interview question? Number of Valid Words for Each Puzzle - With respect to a given puzzle string, a word is valid if both the following conditions are satisfied:
 * word contains the first letter of puzzle.
 * For each letter in word, that letter is in puzzle.
   * For example, if the puzzle is ""abcdefg"", then valid words are ""faced"", ""cabbage"", and ""baggage"", while
   * invalid words are ""beefed"" (does not include 'a') and ""based"" (includes 's' which is not in the puzzle).

Return an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].

 

Example 1:


Input: words = [""aaaa"",""asas"",""able"",""ability"",""actt"",""actor"",""access""], puzzles = [""aboveyz"",""abrodyz"",""abslute"",""absoryz"",""actresz"",""gaswxyz""]
Output: [1,1,3,2,4,0]
Explanation: 
1 valid word for ""aboveyz"" : ""aaaa"" 
1 valid word for ""abrodyz"" : ""aaaa""
3 valid words for ""abslute"" : ""aaaa"", ""asas"", ""able""
2 valid words for ""absoryz"" : ""aaaa"", ""asas""
4 valid words for ""actresz"" : ""aaaa"", ""asas"", ""actt"", ""access""
There are no valid words for ""gaswxyz"" cause none of the words in the list contains letter 'g'.


Example 2:


Input: words = [""apple"",""pleas"",""please""], puzzles = [""aelwxyz"",""aelpxyz"",""aelpsxy"",""saelpxy"",""xaelpsy""]
Output: [0,1,3,2,0]


 

Constraints:

 * 1 <= words.length <= 105
 * 4 <= words[i].length <= 50
 * 1 <= puzzles.length <= 104
 * puzzles[i].length == 7
 * words[i] and puzzles[i] consist of lowercase English letters.
 * Each puzzles[i] does not contain repeated characters.",Solutions (261),1.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-valid-words-for-each-puzzle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    puzzles: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findNumOfValidWords(words, puzzles)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findNumOfValidWords(self, words: List[str], puzzles: List[str]) -> List[int]:
        from collections import Counter
        from itertools import combinations
        
        def get_combinations(word):
            result = []
            for i in range(1, len(word) + 1):
                result.extend(map("""".join, combinations(word, i)))
            return result
        
        word_map = Counter()
        for word in words:
            key = 0
            for char in word:
                key |= 1 << (ord(char) - ord('a'))
            word_map[key] += 1
        
        result = []
        for puzzle in puzzles:
            key = 0
            for char in puzzle:
                key |= 1 << (ord(char) - ord('a'))
            
            first_char_key = 1 << (ord(puzzle[0]) - ord('a'))
            count = 0
            for subkey in get_combinations(puzzle[1:]):
                count += word_map[key | first_char_key | (1 << (ord(subkey) - ord('a')))]
            
            result.append(count)
        
        return result"
False,0,0,1283,,Reformat Date,reformat-date,False,53048,83821,1507,False,1,"Can you solve this real interview question? Reformat Date - Given a date string in the form Day Month Year, where:

 * Day is in the set {""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}.
 * Month is in the set {""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""}.
 * Year is in the range [1900, 2100].

Convert the date string to the format YYYY-MM-DD, where:

 * YYYY denotes the 4 digit year.
 * MM denotes the 2 digit month.
 * DD denotes the 2 digit day.

 

Example 1:


Input: date = ""20th Oct 2052""
Output: ""2052-10-20""


Example 2:


Input: date = ""6th Jun 1933""
Output: ""1933-06-06""


Example 3:


Input: date = ""26th May 1960""
Output: ""1960-05-26""


 

Constraints:

 * The given dates are guaranteed to be valid, so no error handling is necessary.",Solutions (745),356,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/reformat-date/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reformatDate(self, date: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    date: str = deserialize(""str"", read_line())
    ans = Solution().reformatDate(date)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reformatDate(self, date: str) -> str:
        months = {""Jan"": ""01"", ""Feb"": ""02"", ""Mar"": ""03"", ""Apr"": ""04"", ""May"": ""05"", ""Jun"": ""06"", ""Jul"": ""07"", ""Aug"": ""08"", ""Sep"": ""09"", ""Oct"": ""10"", ""Nov"": ""11"", ""Dec"": ""12""}
        day, month, year = date.split()
        day = day[:-2].zfill(2)
        month = months[month]
        year = year
        return f""{year}-{month}-{day}"""
False,0,0,1284,,Four Divisors,four-divisors,False,25302,61455,1390,False,2,"Can you solve this real interview question? Four Divisors - Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.

 

Example 1:


Input: nums = [21,4,7]
Output: 32
Explanation: 
21 has 4 divisors: 1, 3, 7, 21
4 has 3 divisors: 1, 2, 4
7 has 2 divisors: 1, 7
The answer is the sum of divisors of 21 only.


Example 2:


Input: nums = [21,21]
Output: 64


Example 3:


Input: nums = [1,2,3,4,5]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 104
 * 1 <= nums[i] <= 105",Solutions (293),308,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/four-divisors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumFourDivisors(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumFourDivisors(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumFourDivisors(self, nums: List[int]) -> int:
        def divisors(num):
            count = 0
            total = 0
            for i in range(1, int(num ** 0.5) + 1):
                if num % i == 0:
                    count += 2
                    total += i
                    if i != num // i:
                        total += num // i
                if count > 4:
                    return 0
            return total if count == 4 else 0
        
        result = 0
        for num in nums:
            result += divisors(num)
        return result"
False,0,0,1286,,Constrained Subsequence Sum,constrained-subsequence-sum,False,23777,49993,1425,False,3,"Can you solve this real interview question? Constrained Subsequence Sum - Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.

 

Example 1:


Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].


Example 2:


Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.


Example 3:


Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


 

Constraints:

 * 1 <= k <= nums.length <= 105
 * -104 <= nums[i] <= 104",Solutions (258),1.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/constrained-subsequence-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().constrainedSubsetSum(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def constrainedSubsetSum(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [0] * n
        dp[0] = nums[0]
        max_sum = nums[0]
        
        for i in range(1, n):
            dp[i] = max(nums[i], max(dp[max(0, i-k):i]) + nums[i])
            max_sum = max(max_sum, dp[i])
        
        return max_sum"
False,0,0,1287,,Distance Between Bus Stops,distance-between-bus-stops,False,49734,92096,1184,False,1,"Can you solve this real interview question? Distance Between Bus Stops - A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given start and destination stops.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1.jpg]


Input: distance = [1,2,3,4], start = 0, destination = 1
Output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.

 

Example 2:

[https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-1.jpg]


Input: distance = [1,2,3,4], start = 0, destination = 2
Output: 3
Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.


 

Example 3:

[https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-2.jpg]


Input: distance = [1,2,3,4], start = 0, destination = 3
Output: 4
Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.


 

Constraints:

 * 1 <= n <= 10^4
 * distance.length == n
 * 0 <= start, destination < n
 * 0 <= distance[i] <= 10^4",Solutions (884),661,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/distance-between-bus-stops/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    distance: List[int] = deserialize(""List[int]"", read_line())
    start: int = deserialize(""int"", read_line())
    destination: int = deserialize(""int"", read_line())
    ans = Solution().distanceBetweenBusStops(distance, start, destination)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distanceBetweenBusStops(self, distance: List[int], start: int, destination: int) -> int:
        total_distance = sum(distance)
        clockwise_distance = sum(distance[min(start, destination):max(start, destination)])
        return min(clockwise_distance, total_distance - clockwise_distance)"
False,0,0,1288,,Maximum Subarray Sum with One Deletion,maximum-subarray-sum-with-one-deletion,False,38550,93013,1186,False,2,"Can you solve this real interview question? Maximum Subarray Sum with One Deletion - Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.

 

Example 1:


Input: arr = [1,-2,0,3]
Output: 4
Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.

Example 2:


Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it's the maximum sum.


Example 3:


Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.


 

Constraints:

 * 1 <= arr.length <= 105
 * -104 <= arr[i] <= 104",Solutions (390),1.5K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSum(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumSum(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumSum(self, arr: List[int]) -> int:
        n = len(arr)
        dp_fwd, dp_bwd = [0] * n, [0] * n
        for i, a in enumerate(arr):
            dp_fwd[i] = a + dp_fwd[i - 1] if i > 0 else a
        for i in range(n-1, -1, -1):
            dp_bwd[i] = arr[i] + dp_bwd[i + 1] if i < n - 1 else arr[i]
        return max(max(dp_fwd), max(dp_bwd), max(dp_fwd[i - 1] + dp_bwd[i + 1] for i in range(1, n - 1)))"
False,0,0,1289,,Day of the Week,day-of-the-week,False,52547,91459,1185,False,1,"Can you solve this real interview question? Day of the Week - Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the day, month and year respectively.

Return the answer as one of the following values {""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""}.

 

Example 1:


Input: day = 31, month = 8, year = 2019
Output: ""Saturday""


Example 2:


Input: day = 18, month = 7, year = 1999
Output: ""Sunday""


Example 3:


Input: day = 15, month = 8, year = 1993
Output: ""Sunday""


 

Constraints:

 * The given dates are valid dates between the years 1971 and 2100.",Solutions (544),322,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/day-of-the-week/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    day: int = deserialize(""int"", read_line())
    month: int = deserialize(""int"", read_line())
    year: int = deserialize(""int"", read_line())
    ans = Solution().dayOfTheWeek(day, month, year)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def dayOfTheWeek(self, day: int, month: int, year: int) -> str:
        import datetime
        days = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]
        return days[datetime.datetime(year, month, day).weekday()]"
False,0,0,1290,,Make Array Strictly Increasing,make-array-strictly-increasing,False,13698,30228,1187,False,3,"Can you solve this real interview question? Make Array Strictly Increasing - Given two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.

In one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].

If there is no way to make arr1 strictly increasing, return -1.

 

Example 1:


Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].


Example 2:


Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].


Example 3:


Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make arr1 strictly increasing.

 

Constraints:

 * 1 <= arr1.length, arr2.length <= 2000
 * 0 <= arr1[i], arr2[i] <= 10^9

 ",Solutions (145),793,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/make-array-strictly-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().makeArrayIncreasing(arr1, arr2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        import bisect
        
        dp = {-1: 0}
        arr2.sort()
        
        for n in arr1:
            tmp = {}
            for key in dp:
                if n > key:
                    tmp[n] = min(tmp.get(n, float('inf')), dp[key])
                i = bisect.bisect_right(arr2, key)
                if i < len(arr2):
                    tmp[arr2[i]] = min(tmp.get(arr2[i], float('inf')), dp[key] + 1)
            dp = tmp
        
        if dp:
            return min(dp.values())
        else:
            return -1"
False,0,0,1293,,Three Consecutive Odds,three-consecutive-odds,False,64670,101777,1550,False,1,"Can you solve this real interview question? Three Consecutive Odds - Given an integer array arr, return true if there are three consecutive odd numbers in the array. Otherwise, return false.

 

Example 1:


Input: arr = [2,6,4,1]
Output: false
Explanation: There are no three consecutive odds.


Example 2:


Input: arr = [1,2,34,3,4,5,7,23,12]
Output: true
Explanation: [5,7,23] are three consecutive odds.


 

Constraints:

 * 1 <= arr.length <= 1000
 * 1 <= arr[i] <= 1000",Solutions (1.1K),532,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/three-consecutive-odds/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def threeConsecutiveOdds(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().threeConsecutiveOdds(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def threeConsecutiveOdds(self, arr: List[int]) -> bool:
        for i in range(len(arr)-2):
            if arr[i] % 2 != 0 and arr[i+1] % 2 != 0 and arr[i+2] % 2 != 0:
                return True
        return False"
False,0,0,1295,,Minimum Garden Perimeter to Collect Enough Apples,minimum-garden-perimeter-to-collect-enough-apples,False,13602,25510,1954,False,2,"Can you solve this real interview question? Minimum Garden Perimeter to Collect Enough Apples - In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.

You will buy an axis-aligned square plot of land that is centered at (0, 0).

Given an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.

The value of |x| is defined as:

 * x if x >= 0
 * -x if x < 0

 

Example 1:

[https://assets.leetcode.com/uploads/2019/08/30/1527_example_1_2.png]


Input: neededApples = 1
Output: 8
Explanation: A square plot of side length 1 does not contain any apples.
However, a square plot of side length 2 has 12 apples inside (as depicted in the image above).
The perimeter is 2 * 4 = 8.


Example 2:


Input: neededApples = 13
Output: 16


Example 3:


Input: neededApples = 1000000000
Output: 5040


 

Constraints:

 * 1 <= neededApples <= 1015",Solutions (260),311,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-garden-perimeter-to-collect-enough-apples/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumPerimeter(self, neededApples: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    neededApples: int = deserialize(""int"", read_line())
    ans = Solution().minimumPerimeter(neededApples)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumPerimeter(self, neededApples: int) -> int:
        def minimumPerimeter(self, neededApples: int) -> int:
            l, r = 0, 40000

            while l < r:
                m = (l + r) // 2
                if m ** 2 * (m + 1) ** 2 * 2 >= neededApples * 4:
                    r = m
                else:
                    l = m + 1
            
            return r * 8"
False,0,0,1297,maximum-number-of-balloons,Maximum Number of Balloons,maximum-number-of-balloons,False,142366,233043,1189,False,1,"Can you solve this real interview question? Maximum Number of Balloons - Given a string text, you want to use the characters of text to form as many instances of the word ""balloon"" as possible.

You can use each character in text at most once. Return the maximum number of instances that can be formed.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/05/1536_ex1_upd.JPG]


Input: text = ""nlaebolko""
Output: 1


Example 2:

[https://assets.leetcode.com/uploads/2019/09/05/1536_ex2_upd.JPG]


Input: text = ""loonbalxballpoon""
Output: 2


Example 3:


Input: text = ""leetcode""
Output: 0


 

Constraints:

 * 1 <= text.length <= 104
 * text consists of lower case English letters only.",Solutions (1.6K),1.4K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-balloons/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().maxNumberOfBalloons(text)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNumberOfBalloons(self, text: str) -> int:
        from collections import Counter
        counts = Counter(text)
        return min(counts['b'], counts['a'], counts['l']//2, counts['o']//2, counts['n'])"
False,0,0,1298,,Reverse Substrings Between Each Pair of Parentheses,reverse-substrings-between-each-pair-of-parentheses,False,60096,91194,1190,False,2,"Can you solve this real interview question? Reverse Substrings Between Each Pair of Parentheses - You are given a string s that consists of lower case English letters and brackets.

Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.

 

Example 1:


Input: s = ""(abcd)""
Output: ""dcba""


Example 2:


Input: s = ""(u(love)i)""
Output: ""iloveu""
Explanation: The substring ""love"" is reversed first, then the whole string is reversed.


Example 3:


Input: s = ""(ed(et(oc))el)""
Output: ""leetcode""
Explanation: First, we reverse the substring ""oc"", then ""etco"", and finally, the whole string.


 

Constraints:

 * 1 <= s.length <= 2000
 * s only contains lower case English characters and parentheses.
 * It is guaranteed that all parentheses are balanced.",Solutions (902),1.6K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reverseParentheses(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reverseParentheses(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reverseParentheses(self, s: str) -> str:
        stack = []
        cur_str = ''
        
        for char in s:
            if char == ')':
                tmp = ''
                while stack[-1] != '(':
                    tmp += stack.pop()
                
                stack.pop()
                stack += list(tmp)
            
            else:
                stack.append(char)
        
        return ''.join(stack)"
False,0,0,1299,,K-Concatenation Maximum Sum,k-concatenation-maximum-sum,False,29654,124686,1191,False,2,"Can you solve this real interview question? K-Concatenation Maximum Sum - Given an integer array arr and an integer k, modify the array by repeating it k times.

For example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.

As the answer can be very large, return the answer modulo 109 + 7.

 

Example 1:


Input: arr = [1,2], k = 3
Output: 9


Example 2:


Input: arr = [1,-2,1], k = 5
Output: 2


Example 3:


Input: arr = [-1,-2], k = 7
Output: 0


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= k <= 105
 * -104 <= arr[i] <= 104",Solutions (330),1.2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/k-concatenation-maximum-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kConcatenationMaxSum(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kConcatenationMaxSum(self, arr: List[int], k: int) -> int:
        MOD = 1000000007
        def max_subarray_sum(arr):
            max_ending_here = max_so_far = 0
            for x in arr:
                max_ending_here = max(x, max_ending_here + x)
                max_so_far = max(max_so_far, max_ending_here)
            return max_so_far
        
        max_sum = max_subarray_sum(arr * 2)
        if k == 1:
            return max_sum
        
        prefix_sum = sum(arr)
        suffix_sum = sum(arr)
        total_sum = sum(arr) * k
        
        if total_sum > 0:
            return max(max_sum, total_sum)
        else:
            return max(max_sum, prefix_sum + suffix_sum)
      "
False,0,0,1300,critical-connections-in-a-network,Critical Connections in a Network,critical-connections-in-a-network,False,194834,356854,1192,False,3,"Can you solve this real interview question? Critical Connections in a Network - There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some servers unable to reach some other server.

Return all critical connections in the network in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png]


Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


Example 2:


Input: n = 2, connections = [[0,1]]
Output: [[0,1]]


 

Constraints:

 * 2 <= n <= 105
 * n - 1 <= connections.length <= 105
 * 0 <= ai, bi <= n - 1
 * ai != bi
 * There are no repeated connections.",Solutions (945),5.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/critical-connections-in-a-network/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    connections: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().criticalConnections(n, connections)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:
        pass"
False,0,0,1302,,Delete Characters to Make Fancy String,delete-characters-to-make-fancy-string,False,26868,47128,1957,False,1,"Can you solve this real interview question? Delete Characters to Make Fancy String - A fancy string is a string where no three consecutive characters are equal.

Given a string s, delete the minimum possible number of characters from s to make it fancy.

Return the final string after the deletion. It can be shown that the answer will always be unique.

 

Example 1:


Input: s = ""leeetcode""
Output: ""leetcode""
Explanation:
Remove an 'e' from the first group of 'e's to create ""leetcode"".
No three consecutive characters are equal, so return ""leetcode"".


Example 2:


Input: s = ""aaabaaaa""
Output: ""aabaa""
Explanation:
Remove an 'a' from the first group of 'a's to create ""aabaaaa"".
Remove two 'a's from the second group of 'a's to create ""aabaa"".
No three consecutive characters are equal, so return ""aabaa"".


Example 3:


Input: s = ""aab""
Output: ""aab""
Explanation: No three consecutive characters are equal, so return ""aab"".


 

Constraints:

 * 1 <= s.length <= 105
 * s consists only of lowercase English letters.",Solutions (439),336,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-characters-to-make-fancy-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeFancyString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().makeFancyString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def makeFancyString(self, s: str) -> str:
        stack = []
        for char in s:
            if len(stack) >= 2 and char == stack[-1] == stack[-2]:
                continue
            stack.append(char)
        return ''.join(stack)"
False,0,0,1303,,Minimum Moves to Reach Target Score,minimum-moves-to-reach-target-score,False,32062,65667,2139,False,2,"Can you solve this real interview question? Minimum Moves to Reach Target Score - You are playing a game with integers. You start with the integer 1 and you want to reach the integer target.

In one move, you can either:

 * Increment the current integer by one (i.e., x = x + 1).
 * Double the current integer (i.e., x = 2 * x).

You can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.

Given the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.

 

Example 1:


Input: target = 5, maxDoubles = 0
Output: 4
Explanation: Keep incrementing by 1 until you reach target.


Example 2:


Input: target = 19, maxDoubles = 2
Output: 7
Explanation: Initially, x = 1
Increment 3 times so x = 4
Double once so x = 8
Increment once so x = 9
Double again so x = 18
Increment once so x = 19


Example 3:


Input: target = 10, maxDoubles = 4
Output: 4
Explanation: Initially, x = 1
Increment once so x = 2
Double once so x = 4
Increment once so x = 5
Double again so x = 10


 

Constraints:

 * 1 <= target <= 109
 * 0 <= maxDoubles <= 100",Solutions (710),783,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-reach-target-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMoves(self, target: int, maxDoubles: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    maxDoubles: int = deserialize(""int"", read_line())
    ans = Solution().minMoves(target, maxDoubles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMoves(self, target: int, maxDoubles: int) -> int:
        count = 0
        while target > 1:
            if target % 2 == 0 and maxDoubles > 0:
                target //= 2
                maxDoubles -= 1
            else:
                target -= 1
            count += 1
        return count"
False,0,0,1304,,Longest Happy String,longest-happy-string,False,64116,111739,1405,False,2,"Can you solve this real interview question? Longest Happy String - A string s is called happy if it satisfies the following conditions:

 * s only contains the letters 'a', 'b', and 'c'.
 * s does not contain any of ""aaa"", ""bbb"", or ""ccc"" as a substring.
 * s contains at most a occurrences of the letter 'a'.
 * s contains at most b occurrences of the letter 'b'.
 * s contains at most c occurrences of the letter 'c'.

Given three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string """".

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: a = 1, b = 1, c = 7
Output: ""ccaccbcc""
Explanation: ""ccbccacc"" would also be a correct answer.


Example 2:


Input: a = 7, b = 1, c = 0
Output: ""aabaa""
Explanation: It is the only correct answer in this case.


 

Constraints:

 * 0 <= a, b, c <= 100
 * a + b + c > 0",Solutions (729),1.7K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-happy-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestDiverseString(self, a: int, b: int, c: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().longestDiverseString(a, b, c)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestDiverseString(self, a: int, b: int, c: int) -> str:
        res = """"
        pq = [(-a, 'a'), (-b, 'b'), (-c, 'c')]
        heapq.heapify(pq)
        while True:
            cnt, char = heapq.heappop(pq)
            if cnt == 0:
                break
            if res[-2:] == char * 2:
                if not pq:
                    break
                cnt2, char2 = heapq.heappop(pq)
                res += char2 * min(cnt2, 1)
                if cnt2 + 1 < 0:
                    heapq.heappush(pq, (cnt2 + 1, char2))
                heapq.heappush(pq, (cnt, char))
            else:
                res += char * min(cnt, 2)
                if cnt + 1 < 0:
                    heapq.heappush(pq, (cnt + 1, char))
        return res"
False,0,0,1305,,Number of Visible People in a Queue,number-of-visible-people-in-a-queue,False,32401,46891,1944,False,3,"Can you solve this real interview question? Number of Visible People in a Queue - There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the ith person.

A person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).

Return an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/29/queue-plane.jpg]


Input: heights = [10,6,8,5,11,9]
Output: [3,1,2,1,1,0]
Explanation:
Person 0 can see person 1, 2, and 4.
Person 1 can see person 2.
Person 2 can see person 3 and 4.
Person 3 can see person 4.
Person 4 can see person 5.
Person 5 can see no one since nobody is to the right of them.


Example 2:


Input: heights = [5,1,2,3,10]
Output: [4,1,1,1,0]


 

Constraints:

 * n == heights.length
 * 1 <= n <= 105
 * 1 <= heights[i] <= 105
 * All the values of heights are unique.",Solutions (406),1.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-visible-people-in-a-queue/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canSeePersonsCount(self, heights: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    heights: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canSeePersonsCount(heights)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def canSeePersonsCount(self, heights: List[int]) -> List[int]:
        n = len(heights)
        ans = [0] * n
        stack = []
        for i in range(n):
            while stack and heights[i] > heights[stack[-1]]:
                prev = stack.pop()
                ans[prev] = i - prev
            if stack:
                ans[stack[-1]] += 1
            stack.append(i)
        return ans"
False,0,0,1306,minimum-absolute-difference,Minimum Absolute Difference,minimum-absolute-difference,False,153156,219919,1200,False,1,"Can you solve this real interview question? Minimum Absolute Difference - Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows

 * a, b are from arr
 * a < b
 * b - a equals to the minimum absolute difference of any two elements in arr

 

Example 1:


Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.

Example 2:


Input: arr = [1,3,6,10,15]
Output: [[1,3]]


Example 3:


Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]


 

Constraints:

 * 2 <= arr.length <= 105
 * -106 <= arr[i] <= 106",Solutions (1.4K),2K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-absolute-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumAbsDifference(arr)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def minimumAbsDifference(self, arr: List[int]) -> List[List[int]]:
        arr.sort()
        min_diff = float('inf')
        result = []
        
        for i in range(len(arr) - 1):
            diff = arr[i+1] - arr[i]
            if diff < min_diff:
                min_diff = diff
                result = [[arr[i], arr[i+1]]]
            elif diff == min_diff:
                result.append([arr[i], arr[i+1]])
        
        return result"
False,0,0,1307,,Ugly Number III,ugly-number-iii,False,26246,91048,1201,False,2,"Can you solve this real interview question? Ugly Number III - An ugly number is a positive integer that is divisible by a, b, or c.

Given four integers n, a, b, and c, return the nth ugly number.

 

Example 1:


Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.


Example 2:


Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.


Example 3:


Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.


 

Constraints:

 * 1 <= n, a, b, c <= 109
 * 1 <= a * b * c <= 1018
 * It is guaranteed that the result will be in range [1, 2 * 109].",Solutions (225),1.1K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/ugly-number-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().nthUglyNumber(n, a, b, c)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nthUglyNumber(self, n: int, a: int, b: int, c: int) -> int:
        def gcd(x, y):
            while y:
                x, y = y, x % y
            return x

        def lcm(x, y):
            return x * y // gcd(x, y)

        def count_ugly_numbers(num, a, b, c, ab, ac, bc, abc):
            return num // a + num // b + num // c - num // ab - num // ac - num // bc + num // abc

        left, right = 1, 2 * 10**9
        ab, ac, bc = lcm(a, b), lcm(a, c), lcm(b, c)
        abc = lcm(ab, c)

        while left < right:
            mid = (left + right) // 2
            count = count_ugly_numbers(mid, a, b, c, ab, ac, bc, abc)
            if count < n:
                left = mid + 1
            else:
                right = mid

        return left"
False,0,0,1308,smallest-string-with-swaps,Smallest String With Swaps,smallest-string-with-swaps,False,97114,168566,1202,False,2,"Can you solve this real interview question? Smallest String With Swaps - You are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given pairs any number of times.

Return the lexicographically smallest string that s can be changed to after using the swaps.

 

Example 1:


Input: s = ""dcab"", pairs = [[0,3],[1,2]]
Output: ""bacd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[1] and s[2], s = ""bacd""


Example 2:


Input: s = ""dcab"", pairs = [[0,3],[1,2],[0,2]]
Output: ""abcd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[0] and s[2], s = ""acbd""
Swap s[1] and s[2], s = ""abcd""

Example 3:


Input: s = ""cba"", pairs = [[0,1],[1,2]]
Output: ""abc""
Explaination: 
Swap s[0] and s[1], s = ""bca""
Swap s[1] and s[2], s = ""bac""
Swap s[0] and s[1], s = ""abc""


 

Constraints:

 * 1 <= s.length <= 10^5
 * 0 <= pairs.length <= 10^5
 * 0 <= pairs[i][0], pairs[i][1] < s.length
 * s only contains lower case English letters.",Solutions (845),3.3K,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-string-with-swaps/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    pairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().smallestStringWithSwaps(s, pairs)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestStringWithSwaps(self, s: str, pairs: List[List[int]]) -> str:
        import collections
        
        def find(x):
            if x != uf[x]:
                uf[x] = find(uf[x])
            return uf[x]
        
        def union(x, y):
            uf[find(x)] = find(y)
        
        uf = {i:i for i in range(len(s))}
        
        for x, y in pairs:
            union(x, y)
        
        groups = collections.defaultdict(list)
        for i in range(len(s)):
            groups[find(i)].append(s[i])
        
        for group in groups:
            groups[group].sort(reverse=True)
        
        res = []
        for i in range(len(s)):
            res.append(groups[find(i)].pop())
        
        return """".join(res)"
False,0,0,1309,,Sort Items by Groups Respecting Dependencies,sort-items-by-groups-respecting-dependencies,False,15044,29410,1203,False,3,"Can you solve this real interview question? Sort Items by Groups Respecting Dependencies - There are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:

 * The items that belong to the same group are next to each other in the sorted list.
 * There are some relations between these items where beforeItems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item).

Return any solution if there is more than one solution and return an empty list if there is no solution.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/11/1359_ex1.png]


Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]


Example 2:


Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
Output: []
Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.


 

Constraints:

 * 1 <= m <= n <= 3 * 104
 * group.length == beforeItems.length == n
 * -1 <= group[i] <= m - 1
 * 0 <= beforeItems[i].length <= n - 1
 * 0 <= beforeItems[i][j] <= n - 1
 * i != beforeItems[i][j]
 * beforeItems[i] does not contain duplicates elements.",Solutions (177),769,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    m: int = deserialize(""int"", read_line())
    group: List[int] = deserialize(""List[int]"", read_line())
    beforeItems: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().sortItems(n, m, group, beforeItems)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortItems(self, n: int, m: int, group: List[int], beforeItems: List[List[int]]) -> List[int]:
        # Your code here
        pass"
False,0,0,1310,,Watering Plants,watering-plants,False,33479,41871,2079,False,2,"Can you solve this real interview question? Watering Plants - You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.

Each plant needs a specific amount of water. You will water the plants in the following way:

 * Water the plants in order from left to right.
 * After watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.
 * You cannot refill the watering can early.

You are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.

Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.

 

Example 1:


Input: plants = [2,2,3,3], capacity = 5
Output: 14
Explanation: Start at the river with a full watering can:
- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.
- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.
- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).
- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.
- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).
- Walk to plant 3 (4 steps) and water it.
Steps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.


Example 2:


Input: plants = [1,1,1,4,2,3], capacity = 4
Output: 30
Explanation: Start at the river with a full watering can:
- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).
- Water plant 3 (4 steps). Return to river (4 steps).
- Water plant 4 (5 steps). Return to river (5 steps).
- Water plant 5 (6 steps).
Steps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.


Example 3:


Input: plants = [7,7,7,7,7,7,7], capacity = 8
Output: 49
Explanation: You have to refill before watering each plant.
Steps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.


 

Constraints:

 * n == plants.length
 * 1 <= n <= 1000
 * 1 <= plants[i] <= 106
 * max(plants[i]) <= capacity <= 109",Solutions (904),674,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/watering-plants/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wateringPlants(self, plants: List[int], capacity: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    plants: List[int] = deserialize(""List[int]"", read_line())
    capacity: int = deserialize(""int"", read_line())
    ans = Solution().wateringPlants(plants, capacity)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def wateringPlants(self, plants: List[int], capacity: int) -> int:
        n = len(plants)
        steps = 0
        water = capacity

        for i in range(n):
            if plants[i] > water:
                steps += 2 * (i + 1)
                water = capacity
            water -= plants[i]
        
        return steps + n + 1"
False,0,0,1311,,Largest Magic Square,largest-magic-square,False,9069,17432,1895,False,2,"Can you solve this real interview question? Largest Magic Square - A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.

Given an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/29/magicsquare-grid.jpg]


Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
Output: 3
Explanation: The largest magic square has a size of 3.
Every row sum, column sum, and diagonal sum of this magic square is equal to 12.
- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12
- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12
- Diagonal sums: 5+4+3 = 6+4+2 = 12


Example 2:

[https://assets.leetcode.com/uploads/2021/05/29/magicsquare2-grid.jpg]


Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]
Output: 2


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 50
 * 1 <= grid[i][j] <= 106",Solutions (170),249,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-magic-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestMagicSquare(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestMagicSquare(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestMagicSquare(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        res = 1
        
        sums = [[0] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                sums[i][j] = grid[i][j] + (sums[i][j - 1] if j > 0 else 0) + (sums[i - 1][j] if i > 0 else 0) - ((sums[i - 1][j - 1] if i > 0 and j > 0 else 0))
        
        def checkMagicSquare(i, j, size):
            magic_sum = sums[i + size - 1][j + size - 1] - (sums[i + size - 1][j - 1] if j > 0 else 0) - (sums[i - 1][j + size - 1] if i > 0 else 0) + ((sums[i - 1][j - 1] if i > 0 and j > 0 else 0))
            for k in range(size):
                if sums[i + k][j + size - 1] - (sums[i + k][j - 1] if j > 0 else 0) != magic_sum: return False
                if sums[i + size - 1][j + k] - (sums[i - 1][j + k] if i > 0 else 0) != magic_sum: return False
            diag1 = diag2 = True
            for k in range(size):
                diag1 &= grid[i + k][j + k] == grid[i][j]
                diag2 &= grid[i + size - 1 - k][j + k] == grid[i][j]
            return diag1 and diag2 and sum(grid[i][j:j+size]) == magic_sum
        
        for i in range(m):
            for j in range(n):
                for size in range(res + 1, min(m - i, n - j) + 1):
                    if checkMagicSquare(i, j, size):
                        res = size
        return res"
False,0,0,1312,,Count Artifacts That Can Be Extracted,count-artifacts-that-can-be-extracted,False,16899,30541,2201,False,2,"Can you solve this real interview question? Count Artifacts That Can Be Extracted - There is an n x n 0-indexed grid with some artifacts buried in it. You are given the integer n and a 0-indexed 2D integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:

 * (r1i, c1i) is the coordinate of the top-left cell of the ith artifact and
 * (r2i, c2i) is the coordinate of the bottom-right cell of the ith artifact.

You will excavate some cells of the grid and remove all the mud from them. If the cell has a part of an artifact buried underneath, it will be uncovered. If all the parts of an artifact are uncovered, you can extract it.

Given a 0-indexed 2D integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.

The test cases are generated such that:

 * No two artifacts overlap.
 * Each artifact only covers at most 4 cells.
 * The entries of dig are unique.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram.jpg]


Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1]]
Output: 1
Explanation: 
The different colors represent different artifacts. Excavated cells are labeled with a 'D' in the grid.
There is 1 artifact that can be extracted, namely the red artifact.
The blue artifact has one part in cell (1,1) which remains uncovered, so we cannot extract it.
Thus, we return 1.


Example 2:

[https://assets.leetcode.com/uploads/2019/09/16/untitled-diagram-1.jpg]


Input: n = 2, artifacts = [[0,0,0,0],[0,1,1,1]], dig = [[0,0],[0,1],[1,1]]
Output: 2
Explanation: Both the red and blue artifacts have all parts uncovered (labeled with a 'D') and can be extracted, so we return 2. 


 

Constraints:

 * 1 <= n <= 1000
 * 1 <= artifacts.length, dig.length <= min(n2, 105)
 * artifacts[i].length == 4
 * dig[i].length == 2
 * 0 <= r1i, c1i, r2i, c2i, ri, ci <= n - 1
 * r1i <= r2i
 * c1i <= c2i
 * No two artifacts will overlap.
 * The number of cells covered by an artifact is at most 4.
 * The entries of dig are unique.",Solutions (271),167,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/count-artifacts-that-can-be-extracted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    artifacts: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    dig: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().digArtifacts(n, artifacts, dig)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def digArtifacts(self, n: int, artifacts: List[List[int]], dig: List[List[int]]) -> int:
        def extractArtifact(artifact):
            nonlocal artifacts_uncovered
            for r in range(artifact[0], artifact[2]+1):
                for c in range(artifact[1], artifact[3]+1):
                    if grid[r][c] == 0:
                        return
            artifacts_uncovered.remove(artifact)

        grid = [[0 for _ in range(n)] for _ in range(n)]
        artifacts_uncovered = [artifact for artifact in artifacts]

        for r, c in dig:
            grid[r][c] = 1
            for artifact in artifacts_uncovered[:]:
                if artifact[0] <= r <= artifact[2] and artifact[1] <= c <= artifact[3]:
                    extractArtifact(artifact)

        return len(artifacts) - len(artifacts_uncovered)"
False,0,0,1313,,Count Ways to Build Rooms in an Ant Colony,count-ways-to-build-rooms-in-an-ant-colony,False,5343,10811,1916,False,3,"Can you solve this real interview question? Count Ways to Build Rooms in an Ant Colony - You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.

You can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. You can choose to build any room as long as its previous room is already built.

Return the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/19/d1.JPG]


Input: prevRoom = [-1,0,1]
Output: 1
Explanation: There is only one way to build the additional rooms: 0 → 1 → 2


Example 2:

[https://assets.leetcode.com/uploads/2021/06/19/d2.JPG]


Input: prevRoom = [-1,0,0,1,2]
Output: 6
Explanation:
The 6 ways are:
0 → 1 → 3 → 2 → 4
0 → 2 → 4 → 1 → 3
0 → 1 → 2 → 3 → 4
0 → 1 → 2 → 4 → 3
0 → 2 → 1 → 3 → 4
0 → 2 → 1 → 4 → 3


 

Constraints:

 * n == prevRoom.length
 * 2 <= n <= 105
 * prevRoom[0] == -1
 * 0 <= prevRoom[i] < n for all 1 <= i < n
 * Every room is reachable from room 0 once all the rooms are built.",Solutions (55),385,"# Created by asetti2002 at 2024/04/17 02:13
# leetgo: 1.4.3
# https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToBuildRooms(self, prevRoom: List[int]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    prevRoom: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().waysToBuildRooms(prevRoom)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToBuildRooms(self, prevRoom: List[int]) -> int:
        # Your code here
        pass"
False,0,0,1319,unique-number-of-occurrences,Unique Number of Occurrences,unique-number-of-occurrences,False,259584,353022,1207,False,1,"Can you solve this real interview question? Unique Number of Occurrences - Given an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.

 

Example 1:


Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.

Example 2:


Input: arr = [1,2]
Output: false


Example 3:


Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true


 

Constraints:

 * 1 <= arr.length <= 1000
 * -1000 <= arr[i] <= 1000",Solutions (3.7K),3.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-number-of-occurrences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def uniqueOccurrences(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().uniqueOccurrences(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def uniqueOccurrences(self, arr: List[int]) -> bool:
        count = collections.Counter(arr)
        return len(count.values()) == len(set(count.values()))"
False,0,0,1320,remove-all-adjacent-duplicates-in-string-ii,Remove All Adjacent Duplicates in String II,remove-all-adjacent-duplicates-in-string-ii,False,261059,464657,1209,False,2,"Can you solve this real interview question? Remove All Adjacent Duplicates in String II - You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:


Input: s = ""abcd"", k = 2
Output: ""abcd""
Explanation: There's nothing to delete.

Example 2:


Input: s = ""deeedbbcccbdaa"", k = 3
Output: ""aa""
Explanation: 
First delete ""eee"" and ""ccc"", get ""ddbbbdaa""
Then delete ""bbb"", get ""dddaa""
Finally delete ""ddd"", get ""aa""

Example 3:


Input: s = ""pbbcggttciiippooaais"", k = 2
Output: ""ps""


 

Constraints:

 * 1 <= s.length <= 105
 * 2 <= k <= 104
 * s only contains lowercase English letters.",Solutions (1.9K),5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDuplicates(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().removeDuplicates(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeDuplicates(self, s: str, k: int) -> str:
        stack = []
        for char in s:
            if stack and stack[-1][0] == char:
                stack[-1][1] += 1
                if stack[-1][1] == k:
                    stack.pop()
            else:
                stack.append([char, 1])
        
        result = """"
        for char, count in stack:
            result += char * count
        
        return result"
False,0,0,1321,,Get Equal Substrings Within Budget,get-equal-substrings-within-budget,False,37164,76601,1208,False,2,"Can you solve this real interview question? Get Equal Substrings Within Budget - You are given two strings s and t of the same length and an integer maxCost.

You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.

 

Example 1:


Input: s = ""abcd"", t = ""bcdf"", maxCost = 3
Output: 3
Explanation: ""abc"" of s can change to ""bcd"".
That costs 3, so the maximum length is 3.


Example 2:


Input: s = ""abcd"", t = ""cdef"", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to character in t,  so the maximum length is 1.


Example 3:


Input: s = ""abcd"", t = ""acde"", maxCost = 0
Output: 1
Explanation: You cannot make any change, so the maximum length is 1.


 

Constraints:

 * 1 <= s.length <= 105
 * t.length == s.length
 * 0 <= maxCost <= 106
 * s and t consist of only lowercase English letters.",Solutions (526),912,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/get-equal-substrings-within-budget/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    maxCost: int = deserialize(""int"", read_line())
    ans = Solution().equalSubstring(s, t, maxCost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def equalSubstring(self, s: str, t: str, maxCost: int) -> int:
        res = start = 0
        for end in range(len(s)):
            maxCost -= abs(ord(s[end]) - ord(t[end]))
            if maxCost < 0:
                maxCost += abs(ord(s[start]) - ord(t[start]))
                start += 1
            res = max(res, end - start + 1)
        return res"
False,0,0,1322,,Minimum Moves to Reach Target with Rotations,minimum-moves-to-reach-target-with-rotations,False,8305,16864,1210,False,3,"Can you solve this real interview question? Minimum Moves to Reach Target with Rotations - In an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).

In one move the snake can:

 * Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
 * Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.
 * Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c).
   [https://assets.leetcode.com/uploads/2019/09/24/image-2.png]
 * Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1).
   [https://assets.leetcode.com/uploads/2019/09/24/image-1.png]

Return the minimum number of moves to reach the target.

If there is no way to reach the target, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/24/image.png]


Input: grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
Output: 11
Explanation:
One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].


Example 2:


Input: grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
Output: 9


 

Constraints:

 * 2 <= n <= 100
 * 0 <= grid[i][j] <= 1
 * It is guaranteed that the snake starts at empty cells.",Solutions (173),243,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumMoves(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumMoves(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumMoves(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,1324,where-will-the-ball-fall,Where Will the Ball Fall,where-will-the-ball-fall,False,125534,175636,1706,False,2,"Can you solve this real interview question? Where Will the Ball Fall - You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

 * A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
 * A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.

We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a ""V"" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/26/ball.jpg]


Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.
Ball b0 is dropped at column 0 and falls out of the box at column 1.
Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.
Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.
Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.
Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.


Example 2:


Input: grid = [[-1]]
Output: [-1]
Explanation: The ball gets stuck against the left wall.


Example 3:


Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 100
 * grid[i][j] is 1 or -1.",Solutions (1.9K),2.8K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/where-will-the-ball-fall/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findBall(self, grid: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findBall(grid)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findBall(self, grid: List[List[int]]) -> List[int]:
        m, n = len(grid), len(grid[0])
        res = [-1] * n
        
        for col in range(n):
            start = col
            
            for row in range(m):
                if grid[row][start] == 1:
                    if start + 1 < n and grid[row][start + 1] == 1:
                        start += 1
                    else:
                        break
                else:
                    if start - 1 >= 0 and grid[row][start - 1] == -1:
                        start -= 1
                    else:
                        break
            
            res[col] = start if row == m - 1 else -1
        
        return res"
False,0,0,1325,,Path with Maximum Probability,path-with-maximum-probability,False,62924,129381,1514,False,2,"Can you solve this real interview question? Path with Maximum Probability - You are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].

Given two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.

If there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png]


Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.


Example 2:

[https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png]


Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000


Example 3:

[https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png]


Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.


 

Constraints:

 * 2 <= n <= 10^4
 * 0 <= start, end < n
 * start != end
 * 0 <= a, b < n
 * a != b
 * 0 <= succProb.length == edges.length <= 2*10^4
 * 0 <= succProb[i] <= 1
 * There is at most one edge between every two nodes.",Solutions (691),1.7K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/path-with-maximum-probability/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    succProb: List[float] = deserialize(""List[float]"", read_line())
    start_node: int = deserialize(""int"", read_line())
    end_node: int = deserialize(""int"", read_line())
    ans = Solution().maxProbability(n, edges, succProb, start_node, end_node)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:
        import heapq
        
        graph = defaultdict(list)
        for i, (a, b) in enumerate(edges):
            graph[a].append((b, succProb[i]))
            graph[b].append((a, succProb[i]))
        
        pq = [(-1, start_node)]
        visited = set()
        
        while pq:
            prob, node = heapq.heappop(pq)
            if node == end_node:
                return -prob
            
            if node in visited:
                continue
                
            visited.add(node)
            
            for nei, nei_prob in graph[node]:
                if nei not in visited:
                    heapq.heappush(pq, (prob * nei_prob, nei))
        
        return 0.0"
False,0,0,1326,,Sum of Floored Pairs,sum-of-floored-pairs,False,7403,26340,1862,False,3,"Can you solve this real interview question? Sum of Floored Pairs - Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 109 + 7.

The floor() function returns the integer part of the division.

 

Example 1:


Input: nums = [2,5,9]
Output: 10
Explanation:
floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0
floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1
floor(5 / 2) = 2
floor(9 / 2) = 4
floor(9 / 5) = 1
We calculate the floor of the division for every pair of indices in the array then sum them up.


Example 2:


Input: nums = [7,7,7,7,7,7,7]
Output: 49


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (72),378,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-floored-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfFlooredPairs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumOfFlooredPairs(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumOfFlooredPairs(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        max_num = max(nums)
        count = [0] * (max_num + 1)
        
        for num in nums:
            count[num] += 1
        
        prefix_sum = [0] * (max_num + 1)
        for i in range(1, max_num + 1):
            prefix_sum[i] = prefix_sum[i - 1] + count[i]
        
        result = 0
        for i in range(len(nums)):
            for j in range(1, max_num // nums[i] + 1):
                num = j * nums[i]
                result += count[j] * (prefix_sum[min(max_num, num + nums[i] - 1)] - prefix_sum[num - 1])
        
        return result % MOD"
False,0,0,1329,minimum-cost-to-move-chips-to-the-same-position,Minimum Cost to Move Chips to The Same Position,minimum-cost-to-move-chips-to-the-same-position,False,110975,154346,1217,False,1,"Can you solve this real interview question? Minimum Cost to Move Chips to The Same Position - We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:

 * position[i] + 2 or position[i] - 2 with cost = 0.
 * position[i] + 1 or position[i] - 1 with cost = 1.

Return the minimum cost needed to move all the chips to the same position.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/15/chips_e1.jpg]


Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.


Example 2:

[https://assets.leetcode.com/uploads/2020/08/15/chip_e2.jpg]


Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.


Example 3:


Input: position = [1,1000000000]
Output: 1


 

Constraints:

 * 1 <= position.length <= 100
 * 1 <= position[i] <= 10^9",Solutions (1.2K),2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCostToMoveChips(self, position: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    position: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCostToMoveChips(position)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCostToMoveChips(self, position: List[int]) -> int:
        even = 0
        odd = 0
        for pos in position:
            if pos % 2 == 0:
                even += 1
            else:
                odd += 1
        return min(even, odd)"
False,0,0,1330,,Longest Arithmetic Subsequence of Given Difference,longest-arithmetic-subsequence-of-given-difference,False,59809,115267,1218,False,2,"Can you solve this real interview question? Longest Arithmetic Subsequence of Given Difference - Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].

Example 2:


Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.


Example 3:


Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].


 

Constraints:

 * 1 <= arr.length <= 105
 * -104 <= arr[i], difference <= 104",Solutions (508),1.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubsequence(self, arr: List[int], difference: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    difference: int = deserialize(""int"", read_line())
    ans = Solution().longestSubsequence(arr, difference)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubsequence(self, arr: List[int], difference: int) -> int:
        dp = {}
        for num in arr:
            dp[num] = dp.get(num - difference, 0) + 1
        return max(dp.values())"
False,0,0,1331,,Path with Maximum Gold,path-with-maximum-gold,False,98553,154684,1219,False,2,"Can you solve this real interview question? Path with Maximum Gold - In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.

Return the maximum amount of gold you can collect under the conditions:

 * Every time you are located in a cell you will collect all the gold in that cell.
 * From your position, you can walk one step to the left, right, up, or down.
 * You can't visit the same cell more than once.
 * Never visit a cell with 0 gold.
 * You can start and stop collecting gold from any position in the grid that has some gold.

 

Example 1:


Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.


Example 2:


Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 15
 * 0 <= grid[i][j] <= 100
 * There are at most 25 cells containing gold.",Solutions (998),2.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/path-with-maximum-gold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getMaximumGold(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaximumGold(self, grid: List[List[int]]) -> int:
        def backtrack(i, j):
            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] == 0:
                return 0
            cell_gold = grid[i][j]
            grid[i][j] = 0
            max_gold = max(backtrack(i+1, j), backtrack(i-1, j), backtrack(i, j+1), backtrack(i, j-1))
            grid[i][j] = cell_gold
            return cell_gold + max_gold
        
        max_gold = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] != 0:
                    max_gold = max(max_gold, backtrack(i, j))
        
        return max_gold"
False,0,0,1332,count-vowels-permutation,Count Vowels Permutation,count-vowels-permutation,False,102856,170644,1220,False,3,"Can you solve this real interview question? Count Vowels Permutation - Given an integer n, your task is to count how many strings of length n can be formed under the following rules:

 * Each character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
 * Each vowel 'a' may only be followed by an 'e'.
 * Each vowel 'e' may only be followed by an 'a' or an 'i'.
 * Each vowel 'i' may not be followed by another 'i'.
 * Each vowel 'o' may only be followed by an 'i' or a 'u'.
 * Each vowel 'u' may only be followed by an 'a'.

Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:


Input: n = 1
Output: 5
Explanation: All possible strings are: ""a"", ""e"", ""i"" , ""o"" and ""u"".


Example 2:


Input: n = 2
Output: 10
Explanation: All possible strings are: ""ae"", ""ea"", ""ei"", ""ia"", ""ie"", ""io"", ""iu"", ""oi"", ""ou"" and ""ua"".


Example 3: 


Input: n = 5
Output: 68

 

Constraints:

 * 1 <= n <= 2 * 10^4",Solutions (1.3K),2.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-vowels-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countVowelPermutation(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countVowelPermutation(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countVowelPermutation(self, n: int) -> int:
        MOD = 10**9 + 7
        a, e, i, o, u = 1, 1, 1, 1, 1
        
        for _ in range(1, n):
            a_next = (e + u + i) % MOD
            e_next = (a + i) % MOD
            i_next = (e + o) % MOD
            o_next = i % MOD
            u_next = (i + o) % MOD
            
            a, e, i, o, u = a_next, e_next, i_next, o_next, u_next
        
        return (a + e + i + o + u) % MOD"
False,0,0,1333,,Sort the Jumbled Numbers,sort-the-jumbled-numbers,False,16155,35349,2191,False,2,"Can you solve this real interview question? Sort the Jumbled Numbers - You are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.

The mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.

You are also given another integer array nums. Return the array nums sorted in non-decreasing order based on the mapped values of its elements.

Notes:

 * Elements with the same mapped values should appear in the same relative order as in the input.
 * The elements of nums should only be sorted based on their mapped values and not be replaced by them.

 

Example 1:


Input: mapping = [8,9,4,0,2,1,3,5,7,6], nums = [991,338,38]
Output: [338,38,991]
Explanation: 
Map the number 991 as follows:
1. mapping[9] = 6, so all occurrences of the digit 9 will become 6.
2. mapping[1] = 9, so all occurrences of the digit 1 will become 9.
Therefore, the mapped value of 991 is 669.
338 maps to 007, or 7 after removing the leading zeros.
38 maps to 07, which is also 7 after removing leading zeros.
Since 338 and 38 share the same mapped value, they should remain in the same relative order, so 338 comes before 38.
Thus, the sorted array is [338,38,991].


Example 2:


Input: mapping = [0,1,2,3,4,5,6,7,8,9], nums = [789,456,123]
Output: [123,456,789]
Explanation: 789 maps to 789, 456 maps to 456, and 123 maps to 123. Thus, the sorted array is [123,456,789].


 

Constraints:

 * mapping.length == 10
 * 0 <= mapping[i] <= 9
 * All the values of mapping[i] are unique.
 * 1 <= nums.length <= 3 * 104
 * 0 <= nums[i] < 109",Solutions (371),312,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-the-jumbled-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortJumbled(self, mapping: List[int], nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    mapping: List[int] = deserialize(""List[int]"", read_line())
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortJumbled(mapping, nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortJumbled(self, mapping: List[int], nums: List[int]) -> List[int]:
        nums.sort(key=lambda x: ''.join(str(mapping[int(i)]) for i in str(x)))
        return nums"
False,0,0,1334,,Sum of Numbers With Units Digit K,sum-of-numbers-with-units-digit-k,False,21340,82847,2310,False,2,"Can you solve this real interview question? Sum of Numbers With Units Digit K - Given two integers num and k, consider a set of positive integers with the following properties:

 * The units digit of each integer is k.
 * The sum of the integers is num.

Return the minimum possible size of such a set, or -1 if no such set exists.

Note:

 * The set can contain multiple instances of the same integer, and the sum of an empty set is considered 0.
 * The units digit of a number is the rightmost digit of the number.

 

Example 1:


Input: num = 58, k = 9
Output: 2
Explanation:
One valid set is [9,49], as the sum is 58 and each integer has a units digit of 9.
Another valid set is [19,39].
It can be shown that 2 is the minimum possible size of a valid set.


Example 2:


Input: num = 37, k = 2
Output: -1
Explanation: It is not possible to obtain a sum of 37 using only integers that have a units digit of 2.


Example 3:


Input: num = 0, k = 7
Output: 0
Explanation: The sum of an empty set is considered 0.


 

Constraints:

 * 0 <= num <= 3000
 * 0 <= k <= 9",Solutions (350),324,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-numbers-with-units-digit-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumNumbers(self, num: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumNumbers(num, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumNumbers(self, num: int, k: int) -> int:
        if num == 0:
            return 0
        elif k == 0:
            return -1
        elif num % k == 0:
            return num // k
        else:
            return num // k + 1"
False,0,0,1335,,Maximum Candies Allocated to K Children,maximum-candies-allocated-to-k-children,False,26224,71564,2226,False,2,"Can you solve this real interview question? Maximum Candies Allocated to K Children - You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.

You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can take at most one pile of candies and some piles of candies may go unused.

Return the maximum number of candies each child can get.

 

Example 1:


Input: candies = [5,8,6], k = 3
Output: 5
Explanation: We can divide candies[1] into 2 piles of size 5 and 3, and candies[2] into 2 piles of size 5 and 1. We now have five piles of candies of sizes 5, 5, 3, 5, and 1. We can allocate the 3 piles of size 5 to 3 children. It can be proven that each child cannot receive more than 5 candies.


Example 2:


Input: candies = [2,5], k = 11
Output: 0
Explanation: There are 11 children but only 7 candies in total, so it is impossible to ensure each child receives at least one candy. Thus, each child gets no candy and the answer is 0.


 

Constraints:

 * 1 <= candies.length <= 105
 * 1 <= candies[i] <= 107
 * 1 <= k <= 1012",Solutions (433),760,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-candies-allocated-to-k-children/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumCandies(self, candies: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    candies: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumCandies(candies, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumCandies(self, candies: List[int], k: int) -> int:
        return (sum(candies) // k) * k"
False,0,0,1336,,Maximum Product of the Length of Two Palindromic Substrings,maximum-product-of-the-length-of-two-palindromic-substrings,False,2645,8866,1960,False,3,"Can you solve this real interview question? Maximum Product of the Length of Two Palindromic Substrings - You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.

More formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.

Return the maximum possible product of the lengths of the two non-intersecting palindromic substrings.

A palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = ""ababbb""
Output: 9
Explanation: Substrings ""aba"" and ""bbb"" are palindromes with odd length. product = 3 * 3 = 9.


Example 2:


Input: s = ""zaaaxbbby""
Output: 9
Explanation: Substrings ""aaa"" and ""bbb"" are palindromes with odd length. product = 3 * 3 = 9.


 

Constraints:

 * 2 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (44),189,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProduct(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxProduct(s)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxProduct(self, s: str) -> int:
        pass"
False,0,0,1340,,The Dining Philosophers,the-dining-philosophers,False,24592,44056,1226,False,2,"Can you solve this real interview question? The Dining Philosophers - Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.

Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.

Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.

Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.

[https://assets.leetcode.com/uploads/2019/09/24/an_illustration_of_the_dining_philosophers_problem.png]

The problem statement and the image above are taken from wikipedia.org [https://en.wikipedia.org/wiki/Dining_philosophers_problem]

 

The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork) where:

 * philosopher is the id of the philosopher who wants to eat.
 * pickLeftFork and pickRightFork are functions you can call to pick the corresponding forks of that philosopher.
 * eat is a function you can call to let the philosopher eat once he has picked both forks.
 * putLeftFork and putRightFork are functions you can call to put down the corresponding forks of that philosopher.
 * The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).

Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.

 

Example 1:


Input: n = 1
Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
Explanation:
n is the number of times each philosopher will call the function.
The output array describes the calls you made to the functions controlling the forks and the eat function, its format is:
output[i] = [a, b, c] (three integers)
- a is the id of a philosopher.
- b specifies the fork: {1 : left, 2 : right}.
- c specifies the operation: {1 : pick, 2 : put, 3 : eat}.

 

Constraints:

 * 1 <= n <= 60",Solutions (197),265,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/the-dining-philosophers/

from typing import *
from leetgo_py import *

# @lc code=begin

class DiningPhilosophers:

    # call the functions directly to execute, for example, eat()
    def wantsToEat(self,
                   philosopher: int,
                   pickLeftFork: 'Callable[[], None]',
                   pickRightFork: 'Callable[[], None]',
                   eat: 'Callable[[], None]',
                   putLeftFork: 'Callable[[], None]',
                   putRightFork: 'Callable[[], None]') -> None:
        

# @lc code=end

# Warning: this is a manual question, the generated test code may be incorrect.
if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    ans = Solution().foobar(target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def wantsToEat(self,
                   philosopher: int,
                   pickLeftFork: 'Callable[[], None]',
                   pickRightFork: 'Callable[[], None]',
                   eat: 'Callable[[], None]',
                   putLeftFork: 'Callable[[], None]',
                   putRightFork: 'Callable[[], None]') -> None:
        pass"
False,0,0,1341,,Split a String in Balanced Strings,split-a-string-in-balanced-strings,False,240767,282818,1221,False,1,"Can you solve this real interview question? Split a String in Balanced Strings - Balanced strings are those that have an equal quantity of 'L' and 'R' characters.

Given a balanced string s, split it into some number of substrings such that:

 * Each substring is balanced.

Return the maximum number of balanced strings you can obtain.

 

Example 1:


Input: s = ""RLRRLLRLRL""
Output: 4
Explanation: s can be split into ""RL"", ""RRLL"", ""RL"", ""RL"", each substring contains same number of 'L' and 'R'.


Example 2:


Input: s = ""RLRRRLLRLL""
Output: 2
Explanation: s can be split into ""RL"", ""RRRLLRLL"", each substring contains same number of 'L' and 'R'.
Note that s cannot be split into ""RL"", ""RR"", ""RL"", ""LR"", ""LL"", because the 2nd and 5th substrings are not balanced.

Example 3:


Input: s = ""LLLLRRRR""
Output: 1
Explanation: s can be split into ""LLLLRRRR"".


 

Constraints:

 * 2 <= s.length <= 1000
 * s[i] is either 'L' or 'R'.
 * s is a balanced string.",Solutions (3.2K),2.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/split-a-string-in-balanced-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def balancedStringSplit(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().balancedStringSplit(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def balancedStringSplit(self, s: str) -> int:
        count = 0
        result = 0
        
        for char in s:
            if char == 'R':
                count += 1
            else:
                count -= 1
            
            if count == 0:
                result += 1
        
        return result"
False,0,0,1342,,Queens That Can Attack the King,queens-that-can-attack-the-king,False,37291,51912,1222,False,2,"Can you solve this real interview question? Queens That Can Attack the King - On a 0-indexed 8 x 8 chessboard, there can be multiple black queens ad one white king.

You are given a 2D integer array queens where queens[i] = [xQueeni, yQueeni] represents the position of the ith black queen on the chessboard. You are also given an integer array king of length 2 where king = [xKing, yKing] represents the position of the white king.

Return the coordinates of the black queens that can directly attack the king. You may return the answer in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/21/chess1.jpg]


Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
Explanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).


Example 2:

[https://assets.leetcode.com/uploads/2022/12/21/chess2.jpg]


Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
Output: [[2,2],[3,4],[4,4]]
Explanation: The diagram above shows the three queens that can directly attack the king and the three queens that cannot attack the king (i.e., marked with red dashes).


 

Constraints:

 * 1 <= queens.length < 64
 * queens[i].length == king.length == 2
 * 0 <= xQueeni, yQueeni, xKing, yKing < 8
 * All the given positions are unique.",Solutions (627),845,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/queens-that-can-attack-the-king/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    queens: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    king: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().queensAttacktheKing(queens, king)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def queensAttacktheKing(self, queens: List[List[int]], king: List[int]) -> List[List[int]]:
        result = []
        directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        
        def is_valid(x, y):
            return 0 <= x < 8 and 0 <= y < 8
        
        for dx, dy in directions:
            x, y = king
            while is_valid(x, y):
                if [x, y] in queens:
                    result.append([x, y])
                    break
                x += dx
                y += dy
        
        return result"
False,0,0,1343,,Dice Roll Simulation,dice-roll-simulation,False,25287,51993,1223,False,3,"Can you solve this real interview question? Dice Roll Simulation - A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.

Given an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. Since the answer may be too large, return it modulo 109 + 7.

Two sequences are considered different if at least one element differs from each other.

 

Example 1:


Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.


Example 2:


Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30


Example 3:


Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181


 

Constraints:

 * 1 <= n <= 5000
 * rollMax.length == 6
 * 1 <= rollMax[i] <= 15",Solutions (262),834,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/dice-roll-simulation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dieSimulator(self, n: int, rollMax: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    rollMax: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().dieSimulator(n, rollMax)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def dieSimulator(self, n: int, rollMax: List[int]) -> int:
        MOD = 10**9 + 7
        dp = [[[0] * 16 for _ in range(6)] for _ in range(n)]
        
        for i in range(6):
            dp[0][i][1] = 1
        
        for i in range(1, n):
            for j in range(6):
                for k in range(1, 16):
                    for l in range(6):
                        if l == j:
                            if k < rollMax[l]:
                                dp[i][j][k+1] += dp[i-1][l][k] % MOD
                        else:
                            dp[i][j][1] += dp[i-1][l][k] % MOD
        
        return sum(sum(dp[n-1][j]) for j in range(6)) % MOD"
False,0,0,1344,,Maximum Equal Frequency,maximum-equal-frequency,False,12892,34841,1224,False,3,"Can you solve this real interview question? Maximum Equal Frequency - Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.

If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).

 

Example 1:


Input: nums = [2,2,1,1,5,3,3,5]
Output: 7
Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.


Example 2:


Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
Output: 13


 

Constraints:

 * 2 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (133),472,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-equal-frequency/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxEqualFreq(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxEqualFreq(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxEqualFreq(self, nums: List[int]) -> int:
        pass"
False,0,0,1346,,Maximize the Topmost Element After K Moves,maximize-the-topmost-element-after-k-moves,False,22336,97948,2202,False,2,"Can you solve this real interview question? Maximize the Topmost Element After K Moves - You are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile.

In one move, you can perform either of the following:

 * If the pile is not empty, remove the topmost element of the pile.
 * If there are one or more removed elements, add any one of them back onto the pile. This element becomes the new topmost element.

You are also given an integer k, which denotes the total number of moves to be made.

Return the maximum value of the topmost element of the pile possible after exactly k moves. In case it is not possible to obtain a non-empty pile after k moves, return -1.

 

Example 1:


Input: nums = [5,2,2,4,0,6], k = 4
Output: 5
Explanation:
One of the ways we can end with 5 at the top of the pile after 4 moves is as follows:
- Step 1: Remove the topmost element = 5. The pile becomes [2,2,4,0,6].
- Step 2: Remove the topmost element = 2. The pile becomes [2,4,0,6].
- Step 3: Remove the topmost element = 2. The pile becomes [4,0,6].
- Step 4: Add 5 back onto the pile. The pile becomes [5,4,0,6].
Note that this is not the only way to end with 5 at the top of the pile. It can be shown that 5 is the largest answer possible after 4 moves.


Example 2:


Input: nums = [2], k = 1
Output: -1
Explanation: 
In the first move, our only option is to pop the topmost element of the pile.
Since it is not possible to obtain a non-empty pile after one move, we return -1.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i], k <= 109",Solutions (453),499,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-the-topmost-element-after-k-moves/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumTop(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumTop(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumTop(self, nums: List[int], k: int) -> int:
        # Write your code here
        pass"
False,0,0,1348,,Maximum Score Of Spliced Array,maximum-score-of-spliced-array,False,15427,27632,2321,False,3,"Can you solve this real interview question? Maximum Score Of Spliced Array - You are given two 0-indexed integer arrays nums1 and nums2, both of length n.

You can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].

 * For example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15].

You may choose to apply the mentioned operation once or not do anything.

The score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.

Return the maximum possible score.

A subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).

 

Example 1:


Input: nums1 = [60,60,60], nums2 = [10,90,10]
Output: 210
Explanation: Choosing left = 1 and right = 1, we have nums1 = [60,90,60] and nums2 = [10,60,10].
The score is max(sum(nums1), sum(nums2)) = max(210, 80) = 210.

Example 2:


Input: nums1 = [20,40,20,70,30], nums2 = [50,20,50,40,20]
Output: 220
Explanation: Choosing left = 3, right = 4, we have nums1 = [20,40,20,40,20] and nums2 = [50,20,50,70,30].
The score is max(sum(nums1), sum(nums2)) = max(140, 220) = 220.


Example 3:


Input: nums1 = [7,11,13], nums2 = [1,1,1]
Output: 31
Explanation: We choose not to swap any subarray.
The score is max(sum(nums1), sum(nums2)) = max(31, 3) = 31.


 

Constraints:

 * n == nums1.length == nums2.length
 * 1 <= n <= 105
 * 1 <= nums1[i], nums2[i] <= 104",Solutions (345),649,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-of-spliced-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumsSplicedArray(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumsSplicedArray(self, nums1: List[int], nums2: List[int]) -> int:
        n = len(nums1)
        return max(sum(nums1), sum(nums2) + max(diff[i] for i in range(1, n)))

# Note: The actual implementation may vary based on the specific logic used."
False,0,0,1349,,Check If It Is a Straight Line,check-if-it-is-a-straight-line,False,146507,362901,1232,False,1,"Can you solve this real interview question? Check If It Is a Straight Line - You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.

 

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/15/untitled-diagram-2.jpg]


Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2019/10/09/untitled-diagram-1.jpg]


Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
Output: false


 

Constraints:

 * 2 <= coordinates.length <= 1000
 * coordinates[i].length == 2
 * -10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4
 * coordinates contains no duplicate point.",Solutions (1.5K),1.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-it-is-a-straight-line/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    coordinates: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkStraightLine(coordinates)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkStraightLine(self, coordinates: List[List[int]]) -> bool:
        if len(coordinates) <= 2:
            return True
        
        x0, y0 = coordinates[0]
        x1, y1 = coordinates[1]
        
        for i in range(2, len(coordinates)):
            x, y = coordinates[i]
            if (y1 - y0) * (x - x0) != (x1 - x0) * (y - y0):
                return False
        
        return True"
False,0,0,1350,,Remove Sub-Folders from the Filesystem,remove-sub-folders-from-the-filesystem,False,47810,72889,1233,False,2,"Can you solve this real interview question? Remove Sub-Folders from the Filesystem - Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.

If a folder[i] is located within another folder[j], it is called a sub-folder of it.

The format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.

 * For example, ""/leetcode"" and ""/leetcode/problems"" are valid paths while an empty string and ""/"" are not.

 

Example 1:


Input: folder = [""/a"",""/a/b"",""/c/d"",""/c/d/e"",""/c/f""]
Output: [""/a"",""/c/d"",""/c/f""]
Explanation: Folders ""/a/b"" is a subfolder of ""/a"" and ""/c/d/e"" is inside of folder ""/c/d"" in our filesystem.


Example 2:


Input: folder = [""/a"",""/a/b/c"",""/a/b/d""]
Output: [""/a""]
Explanation: Folders ""/a/b/c"" and ""/a/b/d"" will be removed because they are subfolders of ""/a"".


Example 3:


Input: folder = [""/a/b/c"",""/a/b/ca"",""/a/b/d""]
Output: [""/a/b/c"",""/a/b/ca"",""/a/b/d""]


 

Constraints:

 * 1 <= folder.length <= 4 * 104
 * 2 <= folder[i].length <= 100
 * folder[i] contains only lowercase letters and '/'.
 * folder[i] always starts with the character '/'.
 * Each folder name is unique.",Solutions (532),719,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-sub-folders-from-the-filesystem/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeSubfolders(self, folder: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    folder: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().removeSubfolders(folder)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def removeSubfolders(self, folder: List[str]) -> List[str]:
        folder.sort()
        res = [folder[0]]
        for i in range(1, len(folder)):
            if not folder[i].startswith(res[-1] + '/'):
                res.append(folder[i])
        return res"
False,0,0,1351,,Replace the Substring for Balanced String,replace-the-substring-for-balanced-string,False,27753,74683,1234,False,2,"Can you solve this real interview question? Replace the Substring for Balanced String - You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.

A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.

 

Example 1:


Input: s = ""QWER""
Output: 0
Explanation: s is already balanced.


Example 2:


Input: s = ""QQWE""
Output: 1
Explanation: We need to replace a 'Q' to 'R', so that ""RQWE"" (or ""QRWE"") is balanced.


Example 3:


Input: s = ""QQQW""
Output: 2
Explanation: We can replace the first ""QQ"" to ""ER"". 


 

Constraints:

 * n == s.length
 * 4 <= n <= 105
 * n is a multiple of 4.
 * s contains only 'Q', 'W', 'E', and 'R'.",Solutions (255),996,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-the-substring-for-balanced-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def balancedString(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().balancedString(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def balancedString(self, s: str) -> int:
        import collections
        count = collections.Counter(s)
        n = len(s)
        res = left = 0
        target = n // 4
        for right, char in enumerate(s):
            count[char] -= 1
            while left < n and all(count[c] <= target for c in 'QWER'):
                res = min(res, right - left + 1) if res != 0 else right - left + 1
                count[s[left]] += 1
                left += 1
        return res"
False,0,0,1352,maximum-profit-in-job-scheduling,Maximum Profit in Job Scheduling,maximum-profit-in-job-scheduling,False,179358,335948,1235,False,3,"Can you solve this real interview question? Maximum Profit in Job Scheduling - We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png]


Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.


Example 2:

[https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png]


Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.


Example 3:

[https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png]


Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6


 

Constraints:

 * 1 <= startTime.length == endTime.length == profit.length <= 5 * 104
 * 1 <= startTime[i] < endTime[i] <= 109
 * 1 <= profit[i] <= 104",Solutions (1.1K),4.9K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-profit-in-job-scheduling/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startTime: List[int] = deserialize(""List[int]"", read_line())
    endTime: List[int] = deserialize(""List[int]"", read_line())
    profit: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().jobScheduling(startTime, endTime, profit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        jobs = sorted(zip(startTime, endTime, profit), key=lambda x: x[1])
        dp = [[0, 0]]  # [time, profit]

        for s, e, p in jobs:
            i = bisect_right(dp, [s + 1]) - 1
            if dp[i][1] + p > dp[-1][1]:
                dp.append([e, dp[i][1] + p])

        return dp[-1][1]"
False,0,0,1353,,Find Resultant Array After Removing Anagrams,find-resultant-array-after-removing-anagrams,False,38676,66234,2273,False,1,"Can you solve this real interview question? Find Resultant Array After Removing Anagrams - You are given a 0-indexed string array words, where words[i] consists of lowercase English letters.

In one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. Keep performing this operation as long as you can select an index that satisfies the conditions.

Return words after performing all operations. It can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, ""dacb"" is an anagram of ""abdc"".

 

Example 1:


Input: words = [""abba"",""baba"",""bbaa"",""cd"",""cd""]
Output: [""abba"",""cd""]
Explanation:
One of the ways we can obtain the resultant array is by using the following operations:
- Since words[2] = ""bbaa"" and words[1] = ""baba"" are anagrams, we choose index 2 and delete words[2].
  Now words = [""abba"",""baba"",""cd"",""cd""].
- Since words[1] = ""baba"" and words[0] = ""abba"" are anagrams, we choose index 1 and delete words[1].
  Now words = [""abba"",""cd"",""cd""].
- Since words[2] = ""cd"" and words[1] = ""cd"" are anagrams, we choose index 2 and delete words[2].
  Now words = [""abba"",""cd""].
We can no longer perform any operations, so [""abba"",""cd""] is the final answer.

Example 2:


Input: words = [""a"",""b"",""c"",""d"",""e""]
Output: [""a"",""b"",""c"",""d"",""e""]
Explanation:
No two adjacent strings in words are anagrams of each other, so no operations are performed.

 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 10
 * words[i] consists of lowercase English letters.",Solutions (663),463,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-resultant-array-after-removing-anagrams/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeAnagrams(self, words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().removeAnagrams(words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def removeAnagrams(self, words: List[str]) -> List[str]:
        def is_anagram(w1, w2):
            return sorted(w1) == sorted(w2)
        
        i = 1
        while i < len(words):
            if is_anagram(words[i-1], words[i]):
                words.pop(i)
            else:
                i += 1
        return words"
False,0,0,1354,find-players-with-zero-or-one-losses,Find Players With Zero or One Losses,find-players-with-zero-or-one-losses,False,89431,123272,2225,False,2,"Can you solve this real interview question? Find Players With Zero or One Losses - You are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.

Return a list answer of size 2 where:

 * answer[0] is a list of all players that have not lost any matches.
 * answer[1] is a list of all players that have lost exactly one match.

The values in the two lists should be returned in increasing order.

Note:

 * You should only consider the players that have played at least one match.
 * The testcases will be generated such that no two matches will have the same outcome.

 

Example 1:


Input: matches = [[1,3],[2,3],[3,6],[5,6],[5,7],[4,5],[4,8],[4,9],[10,4],[10,9]]
Output: [[1,2,10],[4,5,7,8]]
Explanation:
Players 1, 2, and 10 have not lost any matches.
Players 4, 5, 7, and 8 each have lost one match.
Players 3, 6, and 9 each have lost two matches.
Thus, answer[0] = [1,2,10] and answer[1] = [4,5,7,8].


Example 2:


Input: matches = [[2,3],[1,3],[5,4],[6,4]]
Output: [[1,2,5,6],[]]
Explanation:
Players 1, 2, 5, and 6 have not lost any matches.
Players 3 and 4 each have lost two matches.
Thus, answer[0] = [1,2,5,6] and answer[1] = [].


 

Constraints:

 * 1 <= matches.length <= 105
 * matches[i].length == 2
 * 1 <= winneri, loseri <= 105
 * winneri != loseri
 * All matches[i] are unique.",Solutions (1.6K),1.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-players-with-zero-or-one-losses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    matches: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findWinners(matches)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def findWinners(self, matches: List[List[int]]) -> List[List[int]]:
        winners = {}
        for winner, loser in matches:
            if winner not in winners:
                winners[winner] = 0
            if loser not in winners:
                winners[loser] = 0
                
            winners[winner] += 1
            
            if winners[loser] > 0:
                del winners[loser]
        
        return [sorted([player for player, losses in winners.items() if losses == 0]), sorted([player for player, losses in winners.items() if losses == 1])]"
False,0,0,1355,,Minimum Deletions to Make Array Beautiful,minimum-deletions-to-make-array-beautiful,False,24787,52918,2216,False,2,"Can you solve this real interview question? Minimum Deletions to Make Array Beautiful - You are given a 0-indexed integer array nums. The array nums is beautiful if:

 * nums.length is even.
 * nums[i] != nums[i + 1] for all i % 2 == 0.

Note that an empty array is considered beautiful.

You can delete any number of elements from nums. When you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.

Return the minimum number of elements to delete from nums to make it beautiful.

 

Example 1:


Input: nums = [1,1,2,3,5]
Output: 1
Explanation: You can delete either nums[0] or nums[1] to make nums = [1,2,3,5] which is beautiful. It can be proven you need at least 1 deletion to make nums beautiful.


Example 2:


Input: nums = [1,1,2,2,3,3]
Output: 2
Explanation: You can delete nums[0] and nums[5] to make nums = [1,2,2,3] which is beautiful. It can be proven you need at least 2 deletions to make nums beautiful.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 105",Solutions (543),594,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-deletions-to-make-array-beautiful/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDeletion(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minDeletion(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDeletion(self, nums: List[int]) -> int:
        n = len(nums)
        deletion = 0
        for i in range(0, n, 2):
            if i < n - 1:
                if nums[i] == nums[i + 1]:
                    deletion += 1
        return deletion"
False,0,0,1356,,Minimum Number of Moves to Make Palindrome,minimum-number-of-moves-to-make-palindrome,False,17031,33229,2193,False,3,"Can you solve this real interview question? Minimum Number of Moves to Make Palindrome - You are given a string s consisting only of lowercase English letters.

In one move, you can select any two adjacent characters of s and swap them.

Return the minimum number of moves needed to make s a palindrome.

Note that the input will be generated such that s can always be converted to a palindrome.

 

Example 1:


Input: s = ""aabb""
Output: 2
Explanation:
We can obtain two palindromes from s, ""abba"" and ""baab"". 
- We can obtain ""abba"" from s in 2 moves: ""aabb"" -> ""abab"" -> ""abba"".
- We can obtain ""baab"" from s in 2 moves: ""aabb"" -> ""abab"" -> ""baab"".
Thus, the minimum number of moves needed to make s a palindrome is 2.


Example 2:


Input: s = ""letelt""
Output: 2
Explanation:
One of the palindromes we can obtain from s in 2 moves is ""lettel"".
One of the ways we can obtain it is ""letelt"" -> ""letetl"" -> ""lettel"".
Other palindromes such as ""tleelt"" can also be obtained in 2 moves.
It can be shown that it is not possible to obtain a palindrome in less than 2 moves.


 

Constraints:

 * 1 <= s.length <= 2000
 * s consists only of lowercase English letters.
 * s can be converted to a palindrome using a finite number of moves.",Solutions (138),697,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-moves-to-make-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMovesToMakePalindrome(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minMovesToMakePalindrome(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMovesToMakePalindrome(self, s: str) -> int:
        n = len(s)
        moves = 0
        for i in range(n // 2):
            if s[i] != s[n - i - 1]:
                moves += 1
        
        return moves"
False,0,0,1359,,Circular Permutation in Binary Representation,circular-permutation-in-binary-representation,False,14628,21262,1238,False,2,"Can you solve this real interview question? Circular Permutation in Binary Representation - Given 2 integers n and start. Your task is return any permutation p of (0,1,2.....,2^n -1) such that :

 * p[0] = start
 * p[i] and p[i+1] differ by only one bit in their binary representation.
 * p[0] and p[2^n -1] must also differ by only one bit in their binary representation.

 

Example 1:


Input: n = 2, start = 3
Output: [3,2,0,1]
Explanation: The binary representation of the permutation is (11,10,00,01). 
All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]


Example 2:


Input: n = 3, start = 2
Output: [2,6,7,5,4,0,1,3]
Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).


 

Constraints:

 * 1 <= n <= 16
 * 0 <= start < 2 ^ n",Solutions (188),345,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/circular-permutation-in-binary-representation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def circularPermutation(self, n: int, start: int) -> List[int]:

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    start: int = deserialize(""int"", read_line())
    ans = Solution().circularPermutation(n, start)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def circularPermutation(self, n: int, start: int) -> List[int]:
        def grayCode(n):
            return [i ^ (i >> 1) for i in range(2**n)]

        gray_code = grayCode(n)
        index = gray_code.index(start)

        return gray_code[index:] + gray_code[:index]"
False,0,0,1360,maximum-length-of-a-concatenated-string-with-unique-characters,Maximum Length of a Concatenated String with Unique Characters,maximum-length-of-a-concatenated-string-with-unique-characters,False,170522,326876,1239,False,2,"Can you solve this real interview question? Maximum Length of a Concatenated String with Unique Characters - You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: arr = [""un"",""iq"",""ue""]
Output: 4
Explanation: All the valid concatenations are:
- """"
- ""un""
- ""iq""
- ""ue""
- ""uniq"" (""un"" + ""iq"")
- ""ique"" (""iq"" + ""ue"")
Maximum length is 4.


Example 2:


Input: arr = [""cha"",""r"",""act"",""ers""]
Output: 6
Explanation: Possible longest valid concatenations are ""chaers"" (""cha"" + ""ers"") and ""acters"" (""act"" + ""ers"").


Example 3:


Input: arr = [""abcdefghijklmnopqrstuvwxyz""]
Output: 26
Explanation: The only string in arr has all 26 characters.


 

Constraints:

 * 1 <= arr.length <= 16
 * 1 <= arr[i].length <= 26
 * arr[i] contains only lowercase English letters.",Solutions (1.6K),3.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().maxLength(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxLength(self, arr: List[str]) -> int:
        def backtrack(index, path):
            if len(set(path)) != len(path):
                return
            nonlocal max_length
            max_length = max(max_length, len(path))
            if index == len(arr):
                return
            for i in range(index, len(arr)):
                backtrack(i + 1, path + arr[i])
        
        max_length = 0
        backtrack(0, '')
        return max_length"
False,0,0,1361,,Tiling a Rectangle with the Fewest Squares,tiling-a-rectangle-with-the-fewest-squares,False,21222,39283,1240,False,3,"Can you solve this real interview question? Tiling a Rectangle with the Fewest Squares - Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/17/sample_11_1592.png]


Input: n = 2, m = 3
Output: 3
Explanation: 3 squares are necessary to cover the rectangle.
2 (squares of 1x1)
1 (square of 2x2)

Example 2:

[https://assets.leetcode.com/uploads/2019/10/17/sample_22_1592.png]


Input: n = 5, m = 8
Output: 5


Example 3:

[https://assets.leetcode.com/uploads/2019/10/17/sample_33_1592.png]


Input: n = 11, m = 13
Output: 6


 

Constraints:

 * 1 <= n, m <= 13",Solutions (158),600,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def tilingRectangle(self, n: int, m: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    m: int = deserialize(""int"", read_line())
    ans = Solution().tilingRectangle(n, m)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def tilingRectangle(self, n: int, m: int) -> int:
        dp = [[0]*(m+1) for i in range(n+1)]
        
        for i in range(1, n+1):
            for j in range(1, m+1):
                dp[i][j] = float('inf')
                for k in range(1, min(i, j)+1):
                    dp[i][j] = min(dp[i][j], 1 + dp[i-k][j] + dp[k][j-k])
                    dp[i][j] = min(dp[i][j], 1 + dp[i][j-k] + dp[i-k][k])
                    
        return dp[n][m]"
False,0,0,1362,,Airplane Seat Assignment Probability,airplane-seat-assignment-probability,False,32638,49730,1227,False,2,"Can you solve this real interview question? Airplane Seat Assignment Probability - n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:

 * Take their own seat if it is still available, and
 * Pick other seats randomly when they find their seat occupied

Return the probability that the nth person gets his own seat.

 

Example 1:


Input: n = 1
Output: 1.00000
Explanation: The first person can only get the first seat.

Example 2:


Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).


 

Constraints:

 * 1 <= n <= 105",Solutions (279),516,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/airplane-seat-assignment-probability/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().nthPersonGetsNthSeat(n)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def nthPersonGetsNthSeat(self, n: int) -> float:
        return 1.0 if n == 1 else 0.5"
False,0,0,1363,,Greatest English Letter in Upper and Lower Case,greatest-english-letter-in-upper-and-lower-case,False,38236,55606,2309,False,1,"Can you solve this real interview question? Greatest English Letter in Upper and Lower Case - Given a string of English letters s, return the greatest English letter which occurs as both a lowercase and uppercase letter in s. The returned letter should be in uppercase. If no such letter exists, return an empty string.

An English letter b is greater than another letter a if b appears after a in the English alphabet.

 

Example 1:


Input: s = ""lEeTcOdE""
Output: ""E""
Explanation:
The letter 'E' is the only letter to appear in both lower and upper case.


Example 2:


Input: s = ""arRAzFif""
Output: ""R""
Explanation:
The letter 'R' is the greatest letter to appear in both lower and upper case.
Note that 'A' and 'F' also appear in both lower and upper case, but 'R' is greater than 'F' or 'A'.


Example 3:


Input: s = ""AbCdEfGhIjK""
Output: """"
Explanation:
There is no letter that appears in both lower and upper case.


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of lowercase and uppercase English letters.",Solutions (768),371,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def greatestLetter(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().greatestLetter(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def greatestLetter(self, s: str) -> str:
        import string
        uppercase = set(filter(lambda x: x.isupper(), s))
        lowercase = set(filter(lambda x: x.islower(), s))
        common_letters = uppercase.intersection(lowercase)
        if not common_letters:
            return """"
        return max(common_letters)"
False,0,0,1364,,Tuple with Same Product,tuple-with-same-product,False,23148,38109,1726,False,2,"Can you solve this real interview question? Tuple with Same Product - Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.

 

Example 1:


Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)


Example 2:


Input: nums = [1,2,4,5,10]
Output: 16
Explanation: There are 16 valid tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 104
 * All elements in nums are distinct.",Solutions (309),544,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/tuple-with-same-product/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def tupleSameProduct(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().tupleSameProduct(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def tupleSameProduct(self, nums: List[int]) -> int:
        import collections
        res = 0
        count = collections.Counter()
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                res += 8 * count[nums[i] * nums[j]]
                count[nums[i] * nums[j]] += 1
        return res"
False,0,0,1367,,Maximum Height by Stacking Cuboids ,maximum-height-by-stacking-cuboids,False,17264,31749,1691,False,3,"Can you solve this real interview question? Maximum Height by Stacking Cuboids  - Given n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.

You can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.

Return the maximum height of the stacked cuboids.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/21/image.jpg]


Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
Output: 190
Explanation:
Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.
Cuboid 0 is placed next with the 45x20 side facing down with height 50.
Cuboid 2 is placed next with the 23x12 side facing down with height 45.
The total height is 95 + 50 + 45 = 190.


Example 2:


Input: cuboids = [[38,25,45],[76,35,3]]
Output: 76
Explanation:
You can't place any of the cuboids on the other.
We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.


Example 3:


Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
Output: 102
Explanation:
After rearranging the cuboids, you can see that all cuboids have the same dimension.
You can place the 11x7 side down on all cuboids so their heights are 17.
The maximum height of stacked cuboids is 6 * 17 = 102.


 

Constraints:

 * n == cuboids.length
 * 1 <= n <= 100
 * 1 <= widthi, lengthi, heighti <= 100",Solutions (218),822,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-height-by-stacking-cuboids/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxHeight(self, cuboids: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cuboids: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxHeight(cuboids)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxHeight(self, cuboids: List[List[int]]) -> int:
        pass"
False,0,0,1369,,Minimum Swaps to Make Strings Equal,minimum-swaps-to-make-strings-equal,False,33113,51690,1247,False,2,"Can you solve this real interview question? Minimum Swaps to Make Strings Equal - You are given two strings s1 and s2 of equal length consisting of letters ""x"" and ""y"" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].

Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.

 

Example 1:


Input: s1 = ""xx"", s2 = ""yy""
Output: 1
Explanation: Swap s1[0] and s2[1], s1 = ""yx"", s2 = ""yx"".


Example 2:


Input: s1 = ""xy"", s2 = ""yx""
Output: 2
Explanation: Swap s1[0] and s2[0], s1 = ""yy"", s2 = ""xx"".
Swap s1[0] and s2[1], s1 = ""xy"", s2 = ""xy"".
Note that you cannot swap s1[0] and s1[1] to make s1 equal to ""yx"", cause we can only swap chars in different strings.


Example 3:


Input: s1 = ""xx"", s2 = ""xy""
Output: -1


 

Constraints:

 * 1 <= s1.length, s2.length <= 1000
 * s1.length == s2.length
 * s1, s2 only contain 'x' or 'y'.",Solutions (496),1.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumSwap(self, s1: str, s2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().minimumSwap(s1, s2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumSwap(self, s1: str, s2: str) -> int:
        x_y, y_x = 0, 0
        
        for c1, c2 in zip(s1, s2):
            if c1 != c2:
                if c1 == 'x':
                    x_y += 1
                else:
                    y_x += 1
        
        if (x_y + y_x) % 2 != 0:
            return -1
        
        return x_y // 2 + y_x // 2 + x_y % 2 + y_x % 2"
False,0,0,1370,,Count Number of Nice Subarrays,count-number-of-nice-subarrays,False,78679,129191,1248,False,2,"Can you solve this real interview question? Count Number of Nice Subarrays - Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:


Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].


Example 2:


Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.


Example 3:


Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16


 

Constraints:

 * 1 <= nums.length <= 50000
 * 1 <= nums[i] <= 10^5
 * 1 <= k <= nums.length",Solutions (794),2.8K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-nice-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numberOfSubarrays(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        count = 0
        map = {0: 1}
        odd_count = 0
        
        for num in nums:
            if num % 2 == 1:
                odd_count += 1
            
            if odd_count - k in map:
                count += map[odd_count - k]
            
            map[odd_count] = map.get(odd_count, 0) + 1
        
        return count"
False,0,0,1371,minimum-remove-to-make-valid-parentheses,Minimum Remove to Make Valid Parentheses,minimum-remove-to-make-valid-parentheses,False,491922,747387,1249,False,2,"Can you solve this real interview question? Minimum Remove to Make Valid Parentheses - Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

 * It is the empty string, contains only lowercase characters, or
 * It can be written as AB (A concatenated with B), where A and B are valid strings, or
 * It can be written as (A), where A is a valid string.

 

Example 1:


Input: s = ""lee(t(c)o)de)""
Output: ""lee(t(c)o)de""
Explanation: ""lee(t(co)de)"" , ""lee(t(c)ode)"" would also be accepted.


Example 2:


Input: s = ""a)b(c)d""
Output: ""ab(c)d""


Example 3:


Input: s = ""))((""
Output: """"
Explanation: An empty string is also valid.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either'(' , ')', or lowercase English letter.",Solutions (2.7K),5.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minRemoveToMakeValid(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def minRemoveToMakeValid(self, s: str) -> str:
        stack = []
        to_remove = set()
        
        for i, char in enumerate(s):
            if char == '(':
                stack.append(i)
            elif char == ')':
                if stack:
                    stack.pop()
                else:
                    to_remove.add(i)
        
        to_remove = to_remove.union(set(stack))
        
        result = []
        for i, char in enumerate(s):
            if i not in to_remove:
                result.append(char)
        
        return ''.join(result)"
False,0,0,1372,,Check If It Is a Good Array,check-if-it-is-a-good-array,False,17381,29548,1250,False,3,"Can you solve this real interview question? Check If It Is a Good Array - Given an array nums of positive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.

Return True if the array is good otherwise return False.

 

Example 1:


Input: nums = [12,5,7,23]
Output: true
Explanation: Pick numbers 5 and 7.
5*3 + 7*(-2) = 1


Example 2:


Input: nums = [29,6,10]
Output: true
Explanation: Pick numbers 29, 6 and 10.
29*1 + 6*(-3) + 10*(-1) = 1


Example 3:


Input: nums = [3,6]
Output: false


 

Constraints:

 * 1 <= nums.length <= 10^5
 * 1 <= nums[i] <= 10^9",Solutions (190),384,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-it-is-a-good-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isGoodArray(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isGoodArray(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isGoodArray(self, nums: List[int]) -> bool:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        g = nums[0]
        for num in nums[1:]:
            g = gcd(g, num)
            if g == 1:
                return True
        return False"
False,0,0,1375,,Find Palindrome With Fixed Length,find-palindrome-with-fixed-length,False,14266,41906,2217,False,2,"Can you solve this real interview question? Find Palindrome With Fixed Length - Given an integer array queries and a positive integer intLength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intLength or -1 if no such palindrome exists.

A palindrome is a number that reads the same backwards and forwards. Palindromes cannot have leading zeros.

 

Example 1:


Input: queries = [1,2,3,4,5,90], intLength = 3
Output: [101,111,121,131,141,999]
Explanation:
The first few palindromes of length 3 are:
101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, ...
The 90th palindrome of length 3 is 999.


Example 2:


Input: queries = [2,4,6], intLength = 4
Output: [1111,1331,1551]
Explanation:
The first six palindromes of length 4 are:
1001, 1111, 1221, 1331, 1441, and 1551.


 

Constraints:

 * 1 <= queries.length <= 5 * 104
 * 1 <= queries[i] <= 109
 * 1 <= intLength <= 15",Solutions (251),498,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-palindrome-with-fixed-length/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[int] = deserialize(""List[int]"", read_line())
    intLength: int = deserialize(""int"", read_line())
    ans = Solution().kthPalindrome(queries, intLength)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def kthPalindrome(self, queries: List[int], intLength: int) -> List[int]:
        def is_palindrome(n):
            return str(n) == str(n)[::-1]

        result = []
        for query in queries:
            count = 0
            for i in range(10 ** (intLength - 1), 10 ** intLength):
                if is_palindrome(i):
                    count += 1
                if count == query:
                    result.append(i)
                    break
            if count < query:
                result.append(-1)

        return result"
False,0,0,1376,,Selling Pieces of Wood,selling-pieces-of-wood,False,7785,16055,2312,False,3,"Can you solve this real interview question? Selling Pieces of Wood - You are given two integers m and n that represent the height and width of a rectangular piece of wood. You are also given a 2D integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.

To cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. After cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. You may sell multiple pieces of the same shape, and you do not have to sell all the shapes. The grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.

Return the maximum money you can earn after cutting an m x n piece of wood.

Note that you can cut the piece of wood as many times as you want.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/27/ex1.png]


Input: m = 3, n = 5, prices = [[1,4,2],[2,2,7],[2,1,3]]
Output: 19
Explanation: The diagram above shows a possible scenario. It consists of:
- 2 pieces of wood shaped 2 x 2, selling for a price of 2 * 7 = 14.
- 1 piece of wood shaped 2 x 1, selling for a price of 1 * 3 = 3.
- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.
This obtains a total of 14 + 3 + 2 = 19 money earned.
It can be shown that 19 is the maximum amount of money that can be earned.


Example 2:

[https://assets.leetcode.com/uploads/2022/04/27/ex2new.png]


Input: m = 4, n = 6, prices = [[3,2,10],[1,4,2],[4,1,3]]
Output: 32
Explanation: The diagram above shows a possible scenario. It consists of:
- 3 pieces of wood shaped 3 x 2, selling for a price of 3 * 10 = 30.
- 1 piece of wood shaped 1 x 4, selling for a price of 1 * 2 = 2.
This obtains a total of 30 + 2 = 32 money earned.
It can be shown that 32 is the maximum amount of money that can be earned.
Notice that we cannot rotate the 1 x 4 piece of wood to obtain a 4 x 1 piece of wood.

 

Constraints:

 * 1 <= m, n <= 200
 * 1 <= prices.length <= 2 * 104
 * prices[i].length == 3
 * 1 <= hi <= m
 * 1 <= wi <= n
 * 1 <= pricei <= 106
 * All the shapes of wood (hi, wi) are pairwise distinct.",Solutions (111),456,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/selling-pieces-of-wood/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    prices: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().sellingWood(m, n, prices)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def sellingWood(self, m: int, n: int, prices: List[List[int]]) -> int:
        dp = [[[0]*102 for _ in range(102)] for _ in range(102)]
        dp[0][0][0] = 0

        for i, j, k in prices:
            for ii in range(m+1):
                for jj in range(n+1):
                    dp[i][ii][jj] = max(dp[i][ii][jj], dp[k][ii-i][jj-j]+1)
                    dp[k][ii][jj] = max(dp[k][ii][jj], dp[i][ii-j][jj-i]+1)
        return dp[m][n][m]"
False,0,0,1378,,Cells with Odd Values in a Matrix,cells-with-odd-values-in-a-matrix,False,93269,118761,1252,False,1,"Can you solve this real interview question? Cells with Odd Values in a Matrix - There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.

For each location indices[i], do both of the following:

 1. Increment all the cells on row ri.
 2. Increment all the cells on column ci.

Given m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/30/e1.png]


Input: m = 2, n = 3, indices = [[0,1],[1,1]]
Output: 6
Explanation: Initial matrix = [[0,0,0],[0,0,0]].
After applying first increment it becomes [[1,2,1],[0,1,0]].
The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.


Example 2:

[https://assets.leetcode.com/uploads/2019/10/30/e2.png]


Input: m = 2, n = 2, indices = [[1,1],[0,0]]
Output: 0
Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.


 

Constraints:

 * 1 <= m, n <= 50
 * 1 <= indices.length <= 100
 * 0 <= ri < m
 * 0 <= ci < n

 

Follow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?",Solutions (1.2K),986,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def oddCells(self, m: int, n: int, indices: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    indices: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().oddCells(m, n, indices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def oddCells(self, m: int, n: int, indices: List[List[int]]) -> int:
        odd_count = 0
        rows = [0] * m
        cols = [0] * n
        
        for i, j in indices:
            rows[i] += 1
            cols[j] += 1
        
        for i in range(m):
            for j in range(n):
                if (rows[i] + cols[j]) % 2 != 0:
                    odd_count += 1
        
        return odd_count"
False,0,0,1379,,Reconstruct a 2-Row Binary Matrix,reconstruct-a-2-row-binary-matrix,False,22437,50643,1253,False,2,"Can you solve this real interview question? Reconstruct a 2-Row Binary Matrix - Given the following details of a matrix with n columns and 2 rows :

 * The matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
 * The sum of elements of the 0-th(upper) row is given as upper.
 * The sum of elements of the 1-st(lower) row is given as lower.
 * The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.

Your task is to reconstruct the matrix with upper, lower and colsum.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.

 

Example 1:


Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.


Example 2:


Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []


Example 3:


Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]


 

Constraints:

 * 1 <= colsum.length <= 10^5
 * 0 <= upper, lower <= colsum.length
 * 0 <= colsum[i] <= 2",Solutions (292),391,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reconstructMatrix(self, upper: int, lower: int, colsum: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    upper: int = deserialize(""int"", read_line())
    lower: int = deserialize(""int"", read_line())
    colsum: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().reconstructMatrix(upper, lower, colsum)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def reconstructMatrix(self, upper: int, lower: int, colsum: List[int]) -> List[List[int]]:
        pass"
False,0,0,1380,number-of-closed-islands,Number of Closed Islands,number-of-closed-islands,False,128399,200282,1254,False,2,"Can you solve this real interview question? Number of Closed Islands - Given a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.

Return the number of closed islands.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/10/31/sample_3_1610.png]


Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).

Example 2:

[https://assets.leetcode.com/uploads/2019/10/31/sample_4_1610.png]


Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1


Example 3:


Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2


 

Constraints:

 * 1 <= grid.length, grid[0].length <= 100
 * 0 <= grid[i][j] <=1",Solutions (1.5K),2.8K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-closed-islands/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().closedIsland(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        def dfs(i, j):
            if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j] == 0:
                grid[i][j] = 1
                dfs(i+1, j)
                dfs(i-1, j)
                dfs(i, j+1)
                dfs(i, j-1)
        
        for i in range(len(grid)):
            dfs(i, 0)
            dfs(i, len(grid[0]) - 1)
        
        for j in range(len(grid[0])):
            dfs(0, j)
            dfs(len(grid) - 1, j)
        
        count = 0
        for i in range(1, len(grid) - 1):
            for j in range(1, len(grid[0]) - 1):
                if grid[i][j] == 0:
                    count += 1
                    dfs(i, j)
        
        return count"
False,0,0,1381,,Maximum Score Words Formed by Letters,maximum-score-words-formed-by-letters,False,29425,40616,1255,False,3,"Can you solve this real interview question? Maximum Score Words Formed by Letters - Given a list of words, list of  single letters (might be repeating) and score of every character.

Return the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).

It is not necessary to use all characters in letters and each letter can only be used once. Score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.

 

Example 1:


Input: words = [""dog"",""cat"",""dad"",""good""], letters = [""a"",""a"",""c"",""d"",""d"",""d"",""g"",""o"",""o""], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words ""dad"" (5+1+5) and ""good"" (3+2+2+5) with a score of 23.
Words ""dad"" and ""dog"" only get a score of 21.

Example 2:


Input: words = [""xxxz"",""ax"",""bx"",""cx""], letters = [""z"",""a"",""b"",""c"",""x"",""x"",""x""], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words ""ax"" (4+5), ""bx"" (4+5) and ""cx"" (4+5) with a score of 27.
Word ""xxxz"" only get a score of 25.

Example 3:


Input: words = [""leetcode""], letters = [""l"",""e"",""t"",""c"",""o"",""d""], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter ""e"" can only be used once.

 

Constraints:

 * 1 <= words.length <= 14
 * 1 <= words[i].length <= 15
 * 1 <= letters.length <= 100
 * letters[i].length == 1
 * score.length == 26
 * 0 <= score[i] <= 10
 * words[i], letters[i] contains only lower case English letters.",Solutions (547),986,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-words-formed-by-letters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    letters: List[str] = deserialize(""List[str]"", read_line())
    score: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxScoreWords(words, letters, score)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScoreWords(self, words: List[str], letters: List[str], score: List[int]) -> int:
        pass
"
False,0,0,1382,,Calculate Amount Paid in Taxes,calculate-amount-paid-in-taxes,False,28652,44695,2303,False,1,"Can you solve this real interview question? Calculate Amount Paid in Taxes - You are given a 0-indexed 2D integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. The brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).

Tax is calculated as follows:

 * The first upper0 dollars earned are taxed at a rate of percent0.
 * The next upper1 - upper0 dollars earned are taxed at a rate of percent1.
 * The next upper2 - upper1 dollars earned are taxed at a rate of percent2.
 * And so on.

You are given an integer income representing the amount of money you earned. Return the amount of money that you have to pay in taxes. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: brackets = [[3,50],[7,10],[12,25]], income = 10
Output: 2.65000
Explanation:
Based on your income, you have 3 dollars in the 1st tax bracket, 4 dollars in the 2nd tax bracket, and 3 dollars in the 3rd tax bracket.
The tax rate for the three tax brackets is 50%, 10%, and 25%, respectively.
In total, you pay $3 * 50% + $4 * 10% + $3 * 25% = $2.65 in taxes.


Example 2:


Input: brackets = [[1,0],[4,25],[5,50]], income = 2
Output: 0.25000
Explanation:
Based on your income, you have 1 dollar in the 1st tax bracket and 1 dollar in the 2nd tax bracket.
The tax rate for the two tax brackets is 0% and 25%, respectively.
In total, you pay $1 * 0% + $1 * 25% = $0.25 in taxes.


Example 3:


Input: brackets = [[2,50]], income = 0
Output: 0.00000
Explanation:
You have no income to tax, so you have to pay a total of $0 in taxes.


 

Constraints:

 * 1 <= brackets.length <= 100
 * 1 <= upperi <= 1000
 * 0 <= percenti <= 100
 * 0 <= income <= 1000
 * upperi is sorted in ascending order.
 * All the values of upperi are unique.
 * The upper bound of the last tax bracket is greater than or equal to income.",Solutions (378),193,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/calculate-amount-paid-in-taxes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def calculateTax(self, brackets: List[List[int]], income: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    brackets: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    income: int = deserialize(""int"", read_line())
    ans = Solution().calculateTax(brackets, income)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def calculateTax(self, brackets: List[List[int]], income: int) -> float:
        def calculate_tax(brackets, income):
            tax = 0.0
            for i in range(len(brackets)):
                if income > brackets[i][0]:
                    current_income = min(income, brackets[i][0]) - (brackets[i-1][0] if i > 0 else 0)
                    tax += current_income * brackets[i][1] / 100.0
            return tax

        return calculate_tax(brackets, income)"
False,0,0,1386,shift-2d-grid,Shift 2D Grid,shift-2d-grid,False,94369,139153,1260,False,1,"Can you solve this real interview question? Shift 2D Grid - Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

 * Element at grid[i][j] moves to grid[i][j + 1].
 * Element at grid[i][n - 1] moves to grid[i + 1][0].
 * Element at grid[m - 1][n - 1] moves to grid[0][0].

Return the 2D grid after applying shift operation k times.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/05/e1.png]


Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]


Example 2:

[https://assets.leetcode.com/uploads/2019/11/05/e2.png]


Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]


Example 3:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m <= 50
 * 1 <= n <= 50
 * -1000 <= grid[i][j] <= 1000
 * 0 <= k <= 100",Solutions (1.4K),1.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/shift-2d-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().shiftGrid(grid, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def shiftGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:
        m, n = len(grid), len(grid[0])
        flattened = [cell for row in grid for cell in row]
        k = k % (m * n)
        flattened = flattened[-k:] + flattened[:-k]
        shifted = [flattened[i*n:(i+1)*n] for i in range(m)]
        return shifted"
False,0,0,1388,,Greatest Sum Divisible by Three,greatest-sum-divisible-by-three,False,45414,89398,1262,False,2,"Can you solve this real interview question? Greatest Sum Divisible by Three - Given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.

 

Example 1:


Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).

Example 2:


Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.


Example 3:


Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).


 

Constraints:

 * 1 <= nums.length <= 4 * 104
 * 1 <= nums[i] <= 104",Solutions (436),1.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/greatest-sum-divisible-by-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumDivThree(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSumDivThree(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumDivThree(self, nums: List[int]) -> int:
        dp = [0, float('-inf'), float('-inf')]
        
        for num in nums:
            dp_new = dp.copy()
            for total in dp:
                dp_new[(total + num) % 3] = max(dp_new[(total + num) % 3], total + num)
            dp = dp_new
        
        return dp[0]"
False,0,0,1389,,Minimum Moves to Move a Box to Their Target Location,minimum-moves-to-move-a-box-to-their-target-location,False,24702,50401,1263,False,3,"Can you solve this real interview question? Minimum Moves to Move a Box to Their Target Location - A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.

The game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.

Your task is to move the box 'B' to the target position 'T' under the following rules:

 * The character 'S' represents the player. The player can move up, down, left, right in grid if it is a floor (empty cell).
 * The character '.' represents the floor which means a free cell to walk.
 * The character '#' represents the wall which means an obstacle (impossible to walk there).
 * There is only one box 'B' and one target cell 'T' in the grid.
 * The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.
 * The player cannot walk through the box.

Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/06/sample_1_1620.png]


Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""#"",""#"",""#"",""#""],
               [""#"",""."",""."",""B"",""."",""#""],
               [""#"",""."",""#"",""#"",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: 3
Explanation: We return only the number of times the box is pushed.

Example 2:


Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""#"",""#"",""#"",""#""],
               [""#"",""."",""."",""B"",""."",""#""],
               [""#"",""#"",""#"",""#"",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: -1


Example 3:


Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""."",""."",""#"",""#""],
               [""#"",""."",""#"",""B"",""."",""#""],
               [""#"",""."",""."",""."",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: 5
Explanation: push the box down, left, left, up and up.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 20
 * grid contains only characters '.', '#', 'S', 'T', or 'B'.
 * There is only one character 'S', 'B', and 'T' in the grid.",Solutions (215),765,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPushBox(self, grid: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().minPushBox(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPushBox(self, grid: List[List[str]]) -> int:
        pass"
False,0,0,1392,,Find the Difference of Two Arrays,find-the-difference-of-two-arrays,False,50001,71017,2215,False,1,"Can you solve this real interview question? Find the Difference of Two Arrays - Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:

 * answer[0] is a list of all distinct integers in nums1 which are not present in nums2.
 * answer[1] is a list of all distinct integers in nums2 which are not present in nums1.

Note that the integers in the lists may be returned in any order.

 

Example 1:


Input: nums1 = [1,2,3], nums2 = [2,4,6]
Output: [[1,3],[4,6]]
Explanation:
For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].
For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].

Example 2:


Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]
Output: [[3],[]]
Explanation:
For nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].
Every integer in nums2 is present in nums1. Therefore, answer[1] = [].


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 1000
 * -1000 <= nums1[i], nums2[i] <= 1000",Solutions (833),583,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-difference-of-two-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findDifference(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:
        set1 = set(nums1)
        set2 = set(nums2)
        diff1 = set1.difference(set2)
        diff2 = set2.difference(set1)
        return [list(diff1), list(diff2)]"
False,0,0,1393,maximum-value-of-k-coins-from-piles,Maximum Value of K Coins From Piles,maximum-value-of-k-coins-from-piles,False,13869,28773,2218,False,3,"Can you solve this real interview question? Maximum Value of K Coins From Piles - There are n piles of coins on a table. Each pile consists of a positive number of coins of assorted denominations.

In one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.

Given a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/09/e1.png]


Input: piles = [[1,100,3],[7,8,9]], k = 2
Output: 101
Explanation:
The above diagram shows the different ways we can choose k coins.
The maximum total we can obtain is 101.


Example 2:


Input: piles = [[100],[100],[100],[100],[100],[100],[1,1,1,1,1,1,700]], k = 7
Output: 706
Explanation:
The maximum total can be obtained if we choose all coins from the last pile.


 

Constraints:

 * n == piles.length
 * 1 <= n <= 1000
 * 1 <= piles[i][j] <= 105
 * 1 <= k <= sum(piles[i].length) <= 2000",Solutions (274),752,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-value-of-k-coins-from-piles/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxValueOfCoins(piles, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxValueOfCoins(self, piles: List[List[int]], k: int) -> int:
        piles = sorted([coin for pile in piles for coin in pile], reverse=True)
        return sum(piles[:k])"
False,0,0,1394,,Minimum Path Cost in a Grid,minimum-path-cost-in-a-grid,False,21043,31995,2304,False,2,"Can you solve this real interview question? Minimum Path Cost in a Grid - You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row.

Each possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the last row of grid can be ignored.

The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/28/griddrawio-2.png]


Input: grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
Output: 17
Explanation: The path with the minimum possible cost is the path 5 -> 0 -> 1.
- The sum of the values of cells visited is 5 + 0 + 1 = 6.
- The cost of moving from 5 to 0 is 3.
- The cost of moving from 0 to 1 is 8.
So the total cost of the path is 6 + 3 + 8 = 17.


Example 2:


Input: grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
Output: 6
Explanation: The path with the minimum possible cost is the path 2 -> 3.
- The sum of the values of cells visited is 2 + 3 = 5.
- The cost of moving from 2 to 3 is 1.
So the total cost of this path is 5 + 1 = 6.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 50
 * grid consists of distinct integers from 0 to m * n - 1.
 * moveCost.length == m * n
 * moveCost[i].length == n
 * 1 <= moveCost[i][j] <= 100",Solutions (471),641,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-path-cost-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    moveCost: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minPathCost(grid, moveCost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPathCost(self, grid: List[List[int]], moveCost: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        dp = grid[0][:]
        
        for i in range(1, m):
            new_dp = [float('inf')] * n
            for j in range(n):
                for k in range(n):
                    new_dp[k] = min(new_dp[k], dp[j] + moveCost[grid[j]][k])
            dp = new_dp
        
        return min(dp)"
False,0,0,1395,,Minimum Time Visiting All Points,minimum-time-visiting-all-points,False,133224,168474,1266,False,1,"Can you solve this real interview question? Minimum Time Visiting All Points - On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.

You can move according to these rules:

 * In 1 second, you can either:
   * move vertically by one unit,
   * move horizontally by one unit, or
   * move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
 * You have to visit the points in the same order as they appear in the array.
 * You are allowed to pass through points that appear later in the order, but these do not count as visits.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/14/1626_example_1.PNG]


Input: points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds

Example 2:


Input: points = [[3,2],[-2,2]]
Output: 5


 

Constraints:

 * points.length == n
 * 1 <= n <= 100
 * points[i].length == 2
 * -1000 <= points[i][0], points[i][1] <= 1000",Solutions (1.3K),1.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-visiting-all-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minTimeToVisitAllPoints(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:
        time = 0
        for i in range(1, len(points)):
            x_diff = abs(points[i][0] - points[i - 1][0])
            y_diff = abs(points[i][1] - points[i - 1][1])
            time += max(x_diff, y_diff)
        return time"
False,0,0,1396,,Count Servers that Communicate,count-servers-that-communicate,False,51027,85783,1267,False,2,"Can you solve this real interview question? Count Servers that Communicate - You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-6.jpg]


Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.

Example 2:

[https://assets.leetcode.com/uploads/2019/11/13/untitled-diagram-4.jpg]


Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.


Example 3:

[https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-1-3.jpg]


Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m <= 250
 * 1 <= n <= 250
 * grid[i][j] == 0 or 1",Solutions (599),1.1K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-servers-that-communicate/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countServers(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countServers(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countServers(self, grid: List[List[int]]) -> int:
        count = 0
        rows = [0] * len(grid)
        cols = [0] * len(grid[0])
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    rows[i] += 1
                    cols[j] += 1
        
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1 and (rows[i] > 1 or cols[j] > 1):
                    count += 1
        
        return count"
False,0,0,1397,search-suggestions-system,Search Suggestions System,search-suggestions-system,False,243528,367576,1268,False,2,"Can you solve this real interview question? Search Suggestions System - You are given an array of strings products and a string searchWord.

Design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return a list of lists of the suggested products after each character of searchWord is typed.

 

Example 1:


Input: products = [""mobile"",""mouse"",""moneypot"",""monitor"",""mousepad""], searchWord = ""mouse""
Output: [[""mobile"",""moneypot"",""monitor""],[""mobile"",""moneypot"",""monitor""],[""mouse"",""mousepad""],[""mouse"",""mousepad""],[""mouse"",""mousepad""]]
Explanation: products sorted lexicographically = [""mobile"",""moneypot"",""monitor"",""mouse"",""mousepad""].
After typing m and mo all products match and we show user [""mobile"",""moneypot"",""monitor""].
After typing mou, mous and mouse the system suggests [""mouse"",""mousepad""].


Example 2:


Input: products = [""havana""], searchWord = ""havana""
Output: [[""havana""],[""havana""],[""havana""],[""havana""],[""havana""],[""havana""]]
Explanation: The only word ""havana"" will be always suggested while typing the search word.


 

Constraints:

 * 1 <= products.length <= 1000
 * 1 <= products[i].length <= 3000
 * 1 <= sum(products[i].length) <= 2 * 104
 * All the strings of products are unique.
 * products[i] consists of lowercase English letters.
 * 1 <= searchWord.length <= 1000
 * searchWord consists of lowercase English letters.",Solutions (2.1K),4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/search-suggestions-system/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    products: List[str] = deserialize(""List[str]"", read_line())
    searchWord: str = deserialize(""str"", read_line())
    ans = Solution().suggestedProducts(products, searchWord)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        import bisect
        products.sort()
        res = []
        prefix = """"
        for char in searchWord:
            prefix += char
            i = bisect.bisect_left(products, prefix)
            res.append([product for product in products[i:i+3] if product.startswith(prefix)])
        return res"
False,0,0,1398,,Number of Ways to Stay in the Same Place After Some Steps,number-of-ways-to-stay-in-the-same-place-after-some-steps,False,31702,72825,1269,False,3,"Can you solve this real interview question? Number of Ways to Stay in the Same Place After Some Steps - You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).

Given two integers steps and arrLen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 differents ways to stay at index 0 after 3 steps.
Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay


Example 2:


Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay


Example 3:


Input: steps = 4, arrLen = 2
Output: 8


 

Constraints:

 * 1 <= steps <= 500
 * 1 <= arrLen <= 106",Solutions (325),672,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    steps: int = deserialize(""int"", read_line())
    arrLen: int = deserialize(""int"", read_line())
    ans = Solution().numWays(steps, arrLen)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numWays(self, steps: int, arrLen: int) -> int:
        MOD = 10**9 + 7
        max_pos = min(arrLen - 1, steps)
        dp = [[0] * (max_pos + 1) for _ in range(steps + 1)]
        dp[0][0] = 1

        for i in range(1, steps + 1):
            for j in range(0, max_pos + 1):
                dp[i][j] = dp[i - 1][j]
                if j > 0:
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % MOD
                if j < max_pos:
                    dp[i][j] = (dp[i][j] + dp[i - 1][j + 1]) % MOD

        return dp[steps][0]"
False,0,0,1400,find-winner-on-a-tic-tac-toe-game,Find Winner on a Tic Tac Toe Game,find-winner-on-a-tic-tac-toe-game,False,100125,184567,1275,False,1,"Can you solve this real interview question? Find Winner on a Tic Tac Toe Game - Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

 * Players take turns placing characters into empty squares ' '.
 * The first player A always places 'X' characters, while the second player B always places 'O' characters.
 * 'X' and 'O' characters are always placed into empty squares, never on filled ones.
 * The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
 * The game also ends if all squares are non-empty.
 * No more moves can be played if the game is over.

Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return ""Draw"". If there are still movements to play return ""Pending"".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/22/xo1-grid.jpg]


Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: ""A""
Explanation: A wins, they always play first.


Example 2:

[https://assets.leetcode.com/uploads/2021/09/22/xo2-grid.jpg]


Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: ""B""
Explanation: B wins.


Example 3:

[https://assets.leetcode.com/uploads/2021/09/22/xo3-grid.jpg]


Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: ""Draw""
Explanation: The game ends in a draw since there are no moves to make.


 

Constraints:

 * 1 <= moves.length <= 9
 * moves[i].length == 2
 * 0 <= rowi, coli <= 2
 * There are no repeated elements on moves.
 * moves follow the rules of tic tac toe.",Solutions (971),1.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    moves: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().tictactoe(moves)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def tictactoe(self, moves: List[List[int]]) -> str:
        def check_winner(board):
            for i in range(3):
                if board[i][0] == board[i][1] == board[i][2] != "" "":
                    return board[i][0]
                if board[0][i] == board[1][i] == board[2][i] != "" "":
                    return board[0][i]
            if board[0][0] == board[1][1] == board[2][2] != "" "":
                return board[0][0]
            if board[0][2] == board[1][1] == board[2][0] != "" "":
                return board[0][2]
            return None
        
        board = [["" "" for _ in range(3)] for _ in range(3)]
        player = ""A""
        
        for i, (row, col) in enumerate(moves):
            board[row][col] = player
            player = ""B"" if i % 2 == 0 else ""A""
        
        winner = check_winner(board)
        
        if winner:
            return winner
        elif len(moves) == 9:
            return ""Draw""
        else:
            return ""Pending"""
False,0,0,1401,,Number of Burgers with No Waste of Ingredients,number-of-burgers-with-no-waste-of-ingredients,False,21361,42120,1276,False,2,"Can you solve this real interview question? Number of Burgers with No Waste of Ingredients - Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:

 * Jumbo Burger: 4 tomato slices and 1 cheese slice.
 * Small Burger: 2 Tomato slices and 1 cheese slice.

Return [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].

 

Example 1:


Input: tomatoSlices = 16, cheeseSlices = 7
Output: [1,6]
Explantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.
There will be no remaining ingredients.


Example 2:


Input: tomatoSlices = 17, cheeseSlices = 4
Output: []
Explantion: There will be no way to use all ingredients to make small and jumbo burgers.


Example 3:


Input: tomatoSlices = 4, cheeseSlices = 17
Output: []
Explantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.


 

Constraints:

 * 0 <= tomatoSlices, cheeseSlices <= 107",Solutions (336),278,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    tomatoSlices: int = deserialize(""int"", read_line())
    cheeseSlices: int = deserialize(""int"", read_line())
    ans = Solution().numOfBurgers(tomatoSlices, cheeseSlices)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numOfBurgers(self, tomatoSlices: int, cheeseSlices: int) -> List[int]:
        if (tomatoSlices - 2 * cheeseSlices) % 2 != 0 or (4 * cheeseSlices - tomatoSlices) % 2 != 0 or tomatoSlices < 0 or cheeseSlices < 0:
            return []
        jumbo = (tomatoSlices - 2 * cheeseSlices) // 2
        small = (4 * cheeseSlices - tomatoSlices) // 2
        if jumbo < 0 or small < 0:
            return []
        return [jumbo, small]"
False,0,0,1402,,Count Square Submatrices with All Ones,count-square-submatrices-with-all-ones,False,191247,256657,1277,False,2,"Can you solve this real interview question? Count Square Submatrices with All Ones - Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:


Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.


Example 2:


Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.


 

Constraints:

 * 1 <= arr.length <= 300
 * 1 <= arr[0].length <= 300
 * 0 <= arr[i][j] <= 1",Solutions (1.3K),4.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-square-submatrices-with-all-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countSquares(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSquares(self, matrix: List[List[int]]) -> int:
        m, n = len(matrix), len(matrix[0])
        dp = [[0] * n for _ in range(m)]
        count = 0
        
        for i in range(m):
            for j in range(n):
                if matrix[i][j] == 1:
                    dp[i][j] = 1
                    count += 1
        
        for i in range(1, m):
            for j in range(1, n):
                if dp[i][j] == 1:
                    dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1
                    count += dp[i][j]
        
        return count"
False,0,0,1403,,Palindrome Partitioning III,palindrome-partitioning-iii,False,22857,37637,1278,False,3,"Can you solve this real interview question? Palindrome Partitioning III - You are given a string s containing lowercase letters and an integer k. You need to :

 * First, change some characters of s to other lowercase English letters.
 * Then divide s into k non-empty disjoint substrings such that each substring is a palindrome.

Return the minimal number of characters that you need to change to divide the string.

 

Example 1:


Input: s = ""abc"", k = 2
Output: 1
Explanation: You can split the string into ""ab"" and ""c"", and change 1 character in ""ab"" to make it palindrome.


Example 2:


Input: s = ""aabbc"", k = 3
Output: 0
Explanation: You can split the string into ""aa"", ""bb"" and ""c"", all of them are palindrome.

Example 3:


Input: s = ""leetcode"", k = 8
Output: 0


 

Constraints:

 * 1 <= k <= s.length <= 100.
 * s only contains lowercase English letters.",Solutions (336),972,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-partitioning-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def palindromePartition(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().palindromePartition(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def palindromePartition(self, s: str, k: int) -> int:
        # Your code here
        pass"
False,0,0,1406,,Subtract the Product and Sum of Digits of an Integer,subtract-the-product-and-sum-of-digits-of-an-integer,False,367475,424007,1281,False,1,"Can you solve this real interview question? Subtract the Product and Sum of Digits of an Integer - Given an integer number n, return the difference between the product of its digits and the sum of its digits.

 

Example 1:


Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15


Example 2:


Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21


 

Constraints:

 * 1 <= n <= 10^5",Solutions (4.2K),2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subtractProductAndSum(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().subtractProductAndSum(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subtractProductAndSum(self, n: int) -> int:
        product = 1
        _sum = 0
        for digit in str(n):
            product *= int(digit)
            _sum += int(digit)
        return product - _sum"
False,0,0,1407,,Group the People Given the Group Size They Belong To,group-the-people-given-the-group-size-they-belong-to,False,99737,116540,1282,False,2,"Can you solve this real interview question? Group the People Given the Group Size They Belong To - There are n people that are split into some unknown number of groups. Each person is labeled with a unique ID from 0 to n - 1.

You are given an integer array groupSizes, where groupSizes[i] is the size of the group that person i is in. For example, if groupSizes[1] = 3, then person 1 must be in a group of size 3.

Return a list of groups such that each person i is in a group of size groupSizes[i].

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.

 

Example 1:


Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.
The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.
The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.
Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].


Example 2:


Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]


 

Constraints:

 * groupSizes.length == n
 * 1 <= n <= 500
 * 1 <= groupSizes[i] <= n",Solutions (1.5K),1.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    groupSizes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().groupThePeople(groupSizes)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def groupThePeople(self, groupSizes: List[int]) -> List[List[int]]:
        groups = {}
        for i, size in enumerate(groupSizes):
            if size in groups:
                groups[size].append(i)
            else:
                groups[size] = [i]
            if len(groups[size]) == size:
                groups[size] = []
        return [group for group in groups.values() if group]"
False,0,0,1408,find-the-smallest-divisor-given-a-threshold,Find the Smallest Divisor Given a Threshold,find-the-smallest-divisor-given-a-threshold,False,106216,189388,1283,False,2,"Can you solve this real interview question? Find the Smallest Divisor Given a Threshold - Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

The test cases are generated so that there will be an answer.

 

Example 1:


Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 


Example 2:


Input: nums = [44,22,33,11,1], threshold = 5
Output: 44


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * 1 <= nums[i] <= 106
 * nums.length <= threshold <= 106",Solutions (920),2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    threshold: int = deserialize(""int"", read_line())
    ans = Solution().smallestDivisor(nums, threshold)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestDivisor(self, nums: List[int], threshold: int) -> int:
        def calculate_sum(divisor):
            total = 0
            for num in nums:
                total += -(-num // divisor)
            return total

        left, right = 1, max(nums)
        while left < right:
            mid = (left + right) // 2
            if calculate_sum(mid) > threshold:
                left = mid + 1
            else:
                right = mid
        return left"
False,0,0,1409,minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix,Minimum Number of Flips to Convert Binary Matrix to Zero Matrix,minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix,False,28981,40300,1284,False,3,"Can you solve this real interview question? Minimum Number of Flips to Convert Binary Matrix to Zero Matrix - Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.

Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.

A binary matrix is a matrix with all cells equal to 0 or 1 only.

A zero matrix is a matrix with all cells equal to 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/11/28/matrix.png]


Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.


Example 2:


Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We do not need to change it.


Example 3:


Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix cannot be a zero matrix.


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 3
 * mat[i][j] is either 0 or 1.",Solutions (370),846,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFlips(self, mat: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minFlips(mat)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFlips(self, mat: List[List[int]]) -> int:
        pass"
False,0,0,1413,,Maximum Side Length of a Square with Sum Less than or Equal to Threshold,maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold,False,29680,55676,1292,False,2,"Can you solve this real interview question? Maximum Side Length of a Square with Sum Less than or Equal to Threshold - Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/12/05/e1.png]


Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.


Example 2:


Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 300
 * 0 <= mat[i][j] <= 104
 * 0 <= threshold <= 105",Solutions (253),983,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    threshold: int = deserialize(""int"", read_line())
    ans = Solution().maxSideLength(mat, threshold)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSideLength(self, mat: List[List[int]], threshold: int) -> int:
        def checkSquareSideLength(matrix, threshold, sideLength):
            return sum(sum(row[j:j + sideLength]) for row in matrix[i:i + sideLength]) <= threshold

        m, n = len(mat), len(mat[0])
        prefixSum = [[0] * (n + 1) for _ in range(m + 1)]

        for i in range(m):
            for j in range(n):
                prefixSum[i + 1][j + 1] = prefixSum[i + 1][j] + prefixSum[i][j + 1] - prefixSum[i][j] + mat[i][j]

        left, right = 0, min(m, n)
        result = 0

        while left <= right:
            mid = left + (right - left) // 2
            found = False

            for i in range(m - mid + 1):
                for j in range(n - mid + 1):
                    if prefixSum[i + mid][j + mid] - prefixSum[i][j + mid] - prefixSum[i + mid][j] + prefixSum[i][j] <= threshold:
                        found = True
                        break

                if found:
                    break

            if found:
                result = mid
                left = mid + 1
            else:
                right = mid - 1

        return result"
False,0,0,1414,shortest-path-in-a-grid-with-obstacles-elimination,Shortest Path in a Grid with Obstacles Elimination,shortest-path-in-a-grid-with-obstacles-elimination,False,175623,387330,1293,False,3,"Can you solve this real interview question? Shortest Path in a Grid with Obstacles Elimination - You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.

Return the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/30/short1-grid.jpg]


Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10.
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).


Example 2:

[https://assets.leetcode.com/uploads/2021/09/30/short2-grid.jpg]


Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1
Output: -1
Explanation: We need to eliminate at least two obstacles to find such a walk.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 40
 * 1 <= k <= m * n
 * grid[i][j] is either 0 or 1.
 * grid[0][0] == grid[m - 1][n - 1] == 0",Solutions (1.1K),4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().shortestPath(grid, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        pass"
False,0,0,1418,,Fair Distribution of Cookies,fair-distribution-of-cookies,False,22487,36394,2305,False,2,"Can you solve this real interview question? Fair Distribution of Cookies - You are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. You are also given an integer k that denotes the number of children to distribute all the bags of cookies to. All the cookies in the same bag must go to the same child and cannot be split up.

The unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.

Return the minimum unfairness of all distributions.

 

Example 1:


Input: cookies = [8,15,10,20,8], k = 2
Output: 31
Explanation: One optimal distribution is [8,15,8] and [10,20]
- The 1st child receives [8,15,8] which has a total of 8 + 15 + 8 = 31 cookies.
- The 2nd child receives [10,20] which has a total of 10 + 20 = 30 cookies.
The unfairness of the distribution is max(31,30) = 31.
It can be shown that there is no distribution with an unfairness less than 31.


Example 2:


Input: cookies = [6,1,3,2,2,4,1,2], k = 3
Output: 7
Explanation: One optimal distribution is [6,1], [3,2,2], and [4,1,2]
- The 1st child receives [6,1] which has a total of 6 + 1 = 7 cookies.
- The 2nd child receives [3,2,2] which has a total of 3 + 2 + 2 = 7 cookies.
- The 3rd child receives [4,1,2] which has a total of 4 + 1 + 2 = 7 cookies.
The unfairness of the distribution is max(7,7,7) = 7.
It can be shown that there is no distribution with an unfairness less than 7.


 

Constraints:

 * 2 <= cookies.length <= 8
 * 1 <= cookies[i] <= 105
 * 2 <= k <= cookies.length",Solutions (308),818,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/fair-distribution-of-cookies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distributeCookies(self, cookies: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cookies: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().distributeCookies(cookies, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distributeCookies(self, cookies: List[int], k: int) -> int:
        cookies.sort()
        i = 0
        j = len(cookies) - 1
        result = 0
        while i <= j:
            result = max(result, cookies[i] + cookies[j])
            i += 1
            j -= 1
        return result"
False,0,0,1421,,Find Numbers with Even Number of Digits,find-numbers-with-even-number-of-digits,False,541369,702759,1295,False,1,"Can you solve this real interview question? Find Numbers with Even Number of Digits - Given an array nums of integers, return how many of them contain an even number of digits.

 

Example 1:


Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.


Example 2:


Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.


 

Constraints:

 * 1 <= nums.length <= 500
 * 1 <= nums[i] <= 105",Solutions (3.9K),1.9K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-numbers-with-even-number-of-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findNumbers(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findNumbers(self, nums: List[int]) -> int:
        return sum(1 for num in nums if len(str(num)) % 2 == 0)"
False,0,0,1422,,Divide Array in Sets of K Consecutive Numbers,divide-array-in-sets-of-k-consecutive-numbers,False,71113,125903,1296,False,2,"Can you solve this real interview question? Divide Array in Sets of K Consecutive Numbers - Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.

Return true if it is possible. Otherwise, return false.

 

Example 1:


Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].


Example 2:


Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].


Example 3:


Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.


 

Constraints:

 * 1 <= k <= nums.length <= 105
 * 1 <= nums[i] <= 109

 

Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/ [https://leetcode.com/problems/hand-of-straights/]",Solutions (680),1.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPossibleDivide(self, nums: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().isPossibleDivide(nums, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPossibleDivide(self, nums: List[int], k: int) -> bool:
        import collections
        count = collections.Counter(nums)
        keys = sorted(count)
        for i in keys:
            if count[i] > 0:
                for j in range(1, k):
                    count[i + j] -= count[i]
                    if count[i + j] < 0:
                        return False
        return True"
False,0,0,1423,,Maximum Number of Occurrences of a Substring,maximum-number-of-occurrences-of-a-substring,False,40386,77815,1297,False,2,"Can you solve this real interview question? Maximum Number of Occurrences of a Substring - Given a string s, return the maximum number of ocurrences of any substring under the following rules:

 * The number of unique characters in the substring must be less than or equal to maxLetters.
 * The substring size must be between minSize and maxSize inclusive.

 

Example 1:


Input: s = ""aababcaab"", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: Substring ""aab"" has 2 ocurrences in the original string.
It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).


Example 2:


Input: s = ""aaaa"", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: Substring ""aaa"" occur 2 times in the string. It can overlap.


 

Constraints:

 * 1 <= s.length <= 105
 * 1 <= maxLetters <= 26
 * 1 <= minSize <= maxSize <= min(26, s.length)
 * s consists of only lowercase English letters.",Solutions (335),850,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    maxLetters: int = deserialize(""int"", read_line())
    minSize: int = deserialize(""int"", read_line())
    maxSize: int = deserialize(""int"", read_line())
    ans = Solution().maxFreq(s, maxLetters, minSize, maxSize)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxFreq(self, s: str, maxLetters: int, minSize: int, maxSize: int) -> int:
        from collections import Counter
        def count_unique(s):
            return len(set(s))
        ans = 0
        limit = Counter()
        substr_counts = Counter()
        for i in range(0, len(s) - minSize + 1):
            cur_substr = s[i: i + minSize]
            if count_unique(cur_substr) <= maxLetters:
                substr_counts[cur_substr] += 1
                limit[substr_counts[cur_substr]] += 1
                ans = max(ans, substr_counts[cur_substr])
        return ans"
False,0,0,1424,,Maximum Candies You Can Get from Boxes,maximum-candies-you-can-get-from-boxes,False,12792,21301,1298,False,3,"Can you solve this real interview question? Maximum Candies You Can Get from Boxes - You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:

 * status[i] is 1 if the ith box is open and 0 if the ith box is closed,
 * candies[i] is the number of candies in the ith box,
 * keys[i] is a list of the labels of the boxes you can open after opening the ith box.
 * containedBoxes[i] is a list of the boxes you found inside the ith box.

You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.

 

Example 1:


Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]
Output: 16
Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.
Box 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.
In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.
Total number of candies collected = 7 + 4 + 5 = 16 candy.


Example 2:


Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
Output: 6
Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.
The total number of candies will be 6.


 

Constraints:

 * n == status.length == candies.length == keys.length == containedBoxes.length
 * 1 <= n <= 1000
 * status[i] is either 0 or 1.
 * 1 <= candies[i] <= 1000
 * 0 <= keys[i].length <= n
 * 0 <= keys[i][j] < n
 * All values of keys[i] are unique.
 * 0 <= containedBoxes[i].length <= n
 * 0 <= containedBoxes[i][j] < n
 * All values of containedBoxes[i] are unique.
 * Each box is contained in one box at most.
 * 0 <= initialBoxes.length <= n
 * 0 <= initialBoxes[i] < n",Solutions (243),273,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCandies(self, status: List[int], candies: List[int], keys: List[List[int]], containedBoxes: List[List[int]], initialBoxes: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    status: List[int] = deserialize(""List[int]"", read_line())
    candies: List[int] = deserialize(""List[int]"", read_line())
    keys: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    containedBoxes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    initialBoxes: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxCandies(status, candies, keys, containedBoxes, initialBoxes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCandies(self, status: List[int], candies: List[int], keys: List[List[int]], containedBoxes: List[List[int]], initialBoxes: List[int]) -> int:
        def can_get_candies(box):
            if opened[box]:
                return 0
            opened[box] = True
            res = candies[box]
            for key in keys[box]:
                has_keys[key] = True
            for cont_box in containedBoxes[box]:
                has_boxes[cont_box] = True
            return res
        
        n = len(status)
        opened = [False] * n
        has_keys = [False] * n
        has_boxes = [False] * n
        total_candies = 0
        
        while True:
            found_box = False
            for box in range(n):
                if has_boxes[box]:
                    found_box = True
                    total_candies += can_get_candies(box)
            if not found_box:
                break
            for box in range(n):
                if has_keys[box] and not opened[box]:
                    total_candies += can_get_candies(box)
        return total_candies"
False,0,0,1426,,Find N Unique Integers Sum up to Zero,find-n-unique-integers-sum-up-to-zero,False,181025,235211,1304,False,1,"Can you solve this real interview question? Find N Unique Integers Sum up to Zero - Given an integer n, return any array containing n unique integers such that they add up to 0.

 

Example 1:


Input: n = 5
Output: [-7,-1,1,3,4]
Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].


Example 2:


Input: n = 3
Output: [-1,0,1]


Example 3:


Input: n = 1
Output: [0]


 

Constraints:

 * 1 <= n <= 1000",Solutions (2.9K),1.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumZero(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().sumZero(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sumZero(self, n: int) -> List[int]:
        return range(1 - n, n, 2)"
False,0,0,1428,jump-game-iii,Jump Game III,jump-game-iii,False,185203,291705,1306,False,2,"Can you solve this real interview question? Jump Game III - Given an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.

Notice that you can not jump outside of the array at any time.

 

Example 1:


Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -> index 4 -> index 1 -> index 3 
index 5 -> index 6 -> index 4 -> index 1 -> index 3 


Example 2:


Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -> index 4 -> index 1 -> index 3


Example 3:


Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.


 

Constraints:

 * 1 <= arr.length <= 5 * 104
 * 0 <= arr[i] < arr.length
 * 0 <= start < arr.length",Solutions (1.9K),3.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canReach(self, arr: List[int], start: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    start: int = deserialize(""int"", read_line())
    ans = Solution().canReach(arr, start)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canReach(self, arr: List[int], start: int) -> bool:
        def dfs(index):
            if 0 <= index < len(arr) and arr[index] >= 0:
                if arr[index] == 0:
                    return True
                arr[index] = -arr[index]
                return dfs(index + arr[index]) or dfs(index - arr[index])
            return False
        
        return dfs(start)"
False,0,0,1429,,Verbal Arithmetic Puzzle,verbal-arithmetic-puzzle,False,10703,31265,1307,False,3,"Can you solve this real interview question? Verbal Arithmetic Puzzle - Given an equation, represented by words on the left side and the result on the right side.

You need to check if the equation is solvable under the following rules:

 * Each character is decoded as one digit (0 - 9).
 * No two characters can map to the same digit.
 * Each words[i] and result are decoded as one number without leading zeros.
 * Sum of numbers on the left side (words) will equal to the number on the right side (result).

Return true if the equation is solvable, otherwise return false.

 

Example 1:


Input: words = [""SEND"",""MORE""], result = ""MONEY""
Output: true
Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'
Such that: ""SEND"" + ""MORE"" = ""MONEY"" ,  9567 + 1085 = 10652

Example 2:


Input: words = [""SIX"",""SEVEN"",""SEVEN""], result = ""TWENTY""
Output: true
Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4
Such that: ""SIX"" + ""SEVEN"" + ""SEVEN"" = ""TWENTY"" ,  650 + 68782 + 68782 = 138214

Example 3:


Input: words = [""LEET"",""CODE""], result = ""POINT""
Output: false
Explanation: There is no possible mapping to satisfy the equation, so we return false.
Note that two different characters cannot map to the same digit.


 

Constraints:

 * 2 <= words.length <= 5
 * 1 <= words[i].length, result.length <= 7
 * words[i], result contain only uppercase English letters.
 * The number of different characters used in the expression is at most 10.",Solutions (161),435,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/verbal-arithmetic-puzzle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isSolvable(self, words: List[str], result: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    result: str = deserialize(""str"", read_line())
    ans = Solution().isSolvable(words, result)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isSolvable(self, words: List[str], result: str) -> bool:
        pass"
False,0,0,1430,,Find the K-Beauty of a Number,find-the-k-beauty-of-a-number,False,34880,60443,2269,False,1,"Can you solve this real interview question? Find the K-Beauty of a Number - The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:

 * It has a length of k.
 * It is a divisor of num.

Given integers num and k, return the k-beauty of num.

Note:

 * Leading zeros are allowed.
 * 0 is not a divisor of any value.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: num = 240, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- ""24"" from ""240"": 24 is a divisor of 240.
- ""40"" from ""240"": 40 is a divisor of 240.
Therefore, the k-beauty is 2.


Example 2:


Input: num = 430043, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- ""43"" from ""430043"": 43 is a divisor of 430043.
- ""30"" from ""430043"": 30 is not a divisor of 430043.
- ""00"" from ""430043"": 0 is not a divisor of 430043.
- ""04"" from ""430043"": 4 is not a divisor of 430043.
- ""43"" from ""430043"": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.


 

Constraints:

 * 1 <= num <= 109
 * 1 <= k <= num.length (taking num as a string)",Solutions (769),453,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-k-beauty-of-a-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().divisorSubstrings(num, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def divisorSubstrings(self, num: int, k: int) -> int:
        def is_divisor(n, substring):
            if int(substring) == 0:
                return False
            return n % int(substring) == 0
        
        num_str = str(num)
        count = 0
        for i in range(len(num_str) - k + 1):
            substring = num_str[i:i + k]
            if is_divisor(num, substring):
                count += 1
        
        return count"
False,0,0,1431,,All Ancestors of a Node in a Directed Acyclic Graph,all-ancestors-of-a-node-in-a-directed-acyclic-graph,False,22920,45186,2192,False,2,"Can you solve this real interview question? All Ancestors of a Node in a Directed Acyclic Graph - You are given a positive integer n representing the number of nodes of a Directed Acyclic Graph (DAG). The nodes are numbered from 0 to n - 1 (inclusive).

You are also given a 2D integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.

Return a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.

A node u is an ancestor of another node v if u can reach v via a set of edges.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/12/12/e1.png]


Input: n = 8, edgeList = [[0,3],[0,4],[1,3],[2,4],[2,7],[3,5],[3,6],[3,7],[4,6]]
Output: [[],[],[],[0,1],[0,2],[0,1,3],[0,1,2,3,4],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Nodes 0, 1, and 2 do not have any ancestors.
- Node 3 has two ancestors 0 and 1.
- Node 4 has two ancestors 0 and 2.
- Node 5 has three ancestors 0, 1, and 3.
- Node 6 has five ancestors 0, 1, 2, 3, and 4.
- Node 7 has four ancestors 0, 1, 2, and 3.


Example 2:

[https://assets.leetcode.com/uploads/2019/12/12/e2.png]


Input: n = 5, edgeList = [[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Output: [[],[0],[0,1],[0,1,2],[0,1,2,3]]
Explanation:
The above diagram represents the input graph.
- Node 0 does not have any ancestor.
- Node 1 has one ancestor 0.
- Node 2 has two ancestors 0 and 1.
- Node 3 has three ancestors 0, 1, and 2.
- Node 4 has four ancestors 0, 1, 2, and 3.


 

Constraints:

 * 1 <= n <= 1000
 * 0 <= edges.length <= min(2000, n * (n - 1) / 2)
 * edges[i].length == 2
 * 0 <= fromi, toi <= n - 1
 * fromi != toi
 * There are no duplicate edges.
 * The graph is directed and acyclic.",Solutions (423),788,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getAncestors(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def getAncestors(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        graph = defaultdict(set)
        for edge in edges:
            graph[edge[1]].add(edge[0])
        
        def dfs(node):
            result = set()
            stack = [node]
            while stack:
                current = stack.pop()
                for parent in graph[current]:
                    result.add(parent)
                    stack.append(parent)
            return sorted(list(result))
        
        return [dfs(i) for i in range(n)]"
False,0,0,1434,,Decrypt String from Alphabet to Integer Mapping,decrypt-string-from-alphabet-to-integer-mapping,False,105193,131952,1309,False,1,"Can you solve this real interview question? Decrypt String from Alphabet to Integer Mapping - You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:

 * Characters ('a' to 'i') are represented by ('1' to '9') respectively.
 * Characters ('j' to 'z') are represented by ('10#' to '26#') respectively.

Return the string formed after mapping.

The test cases are generated so that a unique mapping will always exist.

 

Example 1:


Input: s = ""10#11#12""
Output: ""jkab""
Explanation: ""j"" -> ""10#"" , ""k"" -> ""11#"" , ""a"" -> ""1"" , ""b"" -> ""2"".


Example 2:


Input: s = ""1326#""
Output: ""acz""


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of digits and the '#' letter.
 * s will be a valid string such that mapping is always possible.",Solutions (1.9K),1.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def freqAlphabets(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().freqAlphabets(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def freqAlphabets(self, s: str) -> str:
        decoded = """"
        i = len(s) - 1
        
        while i >= 0:
            if s[i] == '#':
                num = int(s[i-2:i])
                decoded = chr(num + 96) + decoded
                i -= 3
            else:
                num = int(s[i])
                decoded = chr(num + 96) + decoded
                i -= 1
        
        return decoded"
False,0,0,1435,,XOR Queries of a Subarray,xor-queries-of-a-subarray,False,46574,64435,1310,False,2,"Can you solve this real interview question? XOR Queries of a Subarray - You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].

For each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).

Return an array answer where answer[i] is the answer to the ith query.

 

Example 1:


Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8


Example 2:


Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]


 

Constraints:

 * 1 <= arr.length, queries.length <= 3 * 104
 * 1 <= arr[i] <= 109
 * queries[i].length == 2
 * 0 <= lefti <= righti < arr.length",Solutions (658),1.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/xor-queries-of-a-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().xorQueries(arr, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def xorQueries(self, arr: List[int], queries: List[List[int]]) -> List[int]:
        xor_values = []
        for query in queries:
            left = query[0]
            right = query[1]
            xor_val = arr[left]
            for i in range(left+1, right+1):
                xor_val ^= arr[i]
            xor_values.append(xor_val)
        return xor_values"
False,0,0,1436,,Get Watched Videos by Your Friends,get-watched-videos-by-your-friends,False,18053,39305,1311,False,2,"Can you solve this real interview question? Get Watched Videos by Your Friends - There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.

Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. Given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest. 

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_1.png]


Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
Output: [""B"",""C""] 
Explanation: 
You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
Person with id = 1 -> watchedVideos = [""C""] 
Person with id = 2 -> watchedVideos = [""B"",""C""] 
The frequencies of watchedVideos by your friends are: 
B -> 1 
C -> 2


Example 2:

[https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_2.png]


Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
Output: [""D""]
Explanation: 
You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).


 

Constraints:

 * n == watchedVideos.length == friends.length
 * 2 <= n <= 100
 * 1 <= watchedVideos[i].length <= 100
 * 1 <= watchedVideos[i][j].length <= 8
 * 0 <= friends[i].length < n
 * 0 <= friends[i][j] < n
 * 0 <= id < n
 * 1 <= level < n
 * if friends[i] contains j, then friends[j] contains i",Solutions (270),289,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/get-watched-videos-by-your-friends/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def watchedVideosByFriends(self, watchedVideos: List[List[str]], friends: List[List[int]], id: int, level: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    watchedVideos: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    friends: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    id: int = deserialize(""int"", read_line())
    level: int = deserialize(""int"", read_line())
    ans = Solution().watchedVideosByFriends(watchedVideos, friends, id, level)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def watchedVideosByFriends(self, watchedVideos: List[List[str]], friends: List[List[int]], id: int, level: int) -> List[str]:
        import collections
        q = collections.deque([(id, 0)])
        visited = {id}
        friends_set = set(friends[id])
        while q:
            cur, l = q.popleft()
            if l == level:
                cnt = collections.Counter([v for f in friends_set for v in watchedVideos[f]])
                return sorted(cnt.keys(), key=lambda x: (cnt[x], x))
            for f in friends[cur]:
                if f not in visited:
                    visited.add(f)
                    q.append((f, l + 1))
                    friends_set.update(friends[f])
        return []"
False,0,0,1437,minimum-insertion-steps-to-make-a-string-palindrome,Minimum Insertion Steps to Make a String Palindrome,minimum-insertion-steps-to-make-a-string-palindrome,False,75057,113507,1312,False,3,"Can you solve this real interview question? Minimum Insertion Steps to Make a String Palindrome - Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:


Input: s = ""zzazz""
Output: 0
Explanation: The string ""zzazz"" is already palindrome we do not need any insertions.


Example 2:


Input: s = ""mbadm""
Output: 2
Explanation: String can be ""mbdadbm"" or ""mdbabdm"".


Example 3:


Input: s = ""leetcode""
Output: 5
Explanation: Inserting 5 characters the string becomes ""leetcodocteel"".


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of lowercase English letters.",Solutions (1.2K),3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minInsertions(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minInsertions(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minInsertions(self, s: str) -> int:
        n = len(s)
        dp = [[0] * n for _ in range(n)]
        
        for gap in range(1, n):
            left = 0
            for right in range(gap, n):
                if s[left] == s[right]:
                    dp[left][right] = dp[left+1][right-1]
                else:
                    dp[left][right] = min(dp[left+1][right], dp[left][right-1]) + 1
                left += 1
        
        return dp[0][n-1]"
False,0,0,1440,,Convert Integer to the Sum of Two No-Zero Integers,convert-integer-to-the-sum-of-two-no-zero-integers,False,36848,66457,1317,False,1,"Can you solve this real interview question? Convert Integer to the Sum of Two No-Zero Integers - No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

Given an integer n, return a list of two integers [a, b] where:

 * a and b are No-Zero integers.
 * a + b = n

The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.

 

Example 1:


Input: n = 2
Output: [1,1]
Explanation: Let a = 1 and b = 1.
Both a and b are no-zero integers, and a + b = 2 = n.


Example 2:


Input: n = 11
Output: [2,9]
Explanation: Let a = 2 and b = 9.
Both a and b are no-zero integers, and a + b = 9 = n.
Note that there are other valid answers as [8, 3] that can be accepted.


 

Constraints:

 * 2 <= n <= 104",Solutions (639),337,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getNoZeroIntegers(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().getNoZeroIntegers(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getNoZeroIntegers(self, n: int) -> List[int]:
        for i in range(1, n):
            if '0' not in str(i) and '0' not in str(n-i):
                return [i, n-i]"
False,0,0,1441,,Minimum Flips to Make a OR b Equal to c,minimum-flips-to-make-a-or-b-equal-to-c,False,29539,44775,1318,False,2,"Can you solve this real interview question? Minimum Flips to Make a OR b Equal to c - Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make ( a OR b == c ). (bitwise OR operation).
Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png]


Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)

Example 2:


Input: a = 4, b = 2, c = 7
Output: 1


Example 3:


Input: a = 1, b = 2, c = 3
Output: 0


 

Constraints:

 * 1 <= a <= 10^9
 * 1 <= b <= 10^9
 * 1 <= c <= 10^9",Solutions (649),607,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFlips(self, a: int, b: int, c: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().minFlips(a, b, c)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFlips(self, a: int, b: int, c: int) -> int:
        return bin((a | b) ^ c).count('1') + bin(c).count('1') - bin(a).count('1') - bin(b).count('1')"
False,0,0,1442,number-of-operations-to-make-network-connected,Number of Operations to Make Network Connected,number-of-operations-to-make-network-connected,False,116360,197450,1319,False,2,"Can you solve this real interview question? Number of Operations to Make Network Connected - There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.

You are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.

Return the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/02/sample_1_1677.png]


Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.


Example 2:

[https://assets.leetcode.com/uploads/2020/01/02/sample_2_1677.png]


Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2


Example 3:


Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.


 

Constraints:

 * 1 <= n <= 105
 * 1 <= connections.length <= min(n * (n - 1) / 2, 105)
 * connections[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * There are no repeated connections.
 * No two computers are connected by more than one cable.",Solutions (2K),4.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-operations-to-make-network-connected/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    connections: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().makeConnected(n, connections)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def makeConnected(self, n: int, connections: List[List[int]]) -> int:
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            root_x, root_y = find(x), find(y)
            if rank[root_x] < rank[root_y]:
                parent[root_x] = root_y
            else:
                parent[root_y] = root_x
                if rank[root_x] == rank[root_y]:
                    rank[root_x] += 1
        
        parent = list(range(n))
        rank = [0] * n
        cables = 0
        
        for connection in connections:
            x, y = connection
            if find(x) != find(y):
                union(x, y)
            else:
                cables += 1
        
        sets = len(set(find(x) for x in range(n))) - cables
        return sets - 1 if cables >= sets else -1"
False,0,0,1443,,Minimum Distance to Type a Word Using Two Fingers,minimum-distance-to-type-a-word-using-two-fingers,False,27495,46197,1320,False,3,"Can you solve this real interview question? Minimum Distance to Type a Word Using Two Fingers - [https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png]

You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.

 * For example, the letter 'A' is located at coordinate (0, 0), the letter 'B' is located at coordinate (0, 1), the letter 'P' is located at coordinate (2, 3) and the letter 'Z' is located at coordinate (4, 1).

Given the string word, return the minimum total distance to type such string using only two fingers.

The distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.

Note that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.

 

Example 1:


Input: word = ""CAKE""
Output: 3
Explanation: Using two fingers, one optimal way to type ""CAKE"" is: 
Finger 1 on letter 'C' -> cost = 0 
Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
Finger 2 on letter 'K' -> cost = 0 
Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
Total distance = 3


Example 2:


Input: word = ""HAPPY""
Output: 6
Explanation: Using two fingers, one optimal way to type ""HAPPY"" is:
Finger 1 on letter 'H' -> cost = 0
Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
Finger 2 on letter 'P' -> cost = 0
Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
Total distance = 6


 

Constraints:

 * 2 <= word.length <= 300
 * word consists of uppercase English letters.",Solutions (290),916,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDistance(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().minimumDistance(word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDistance(self, word: str) -> int:
        # Your code here."
False,0,0,1444,number-of-steps-to-reduce-a-number-to-zero,Number of Steps to Reduce a Number to Zero,number-of-steps-to-reduce-a-number-to-zero,False,485896,570505,1342,False,1,"Can you solve this real interview question? Number of Steps to Reduce a Number to Zero - Given an integer num, return the number of steps to reduce it to zero.

In one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.

 

Example 1:


Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.


Example 2:


Input: num = 8
Output: 4
Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.


Example 3:


Input: num = 123
Output: 12


 

Constraints:

 * 0 <= num <= 106",Solutions (4.8K),3.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfSteps(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().numberOfSteps(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfSteps(self, num: int) -> int:
        steps = 0
        while num != 0:
            if num % 2 == 0:
                num /= 2
            else:
                num -= 1
            steps += 1
        return steps"
False,0,0,1445,,Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold,number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold,False,53755,79496,1343,False,2,"Can you solve this real interview question? Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold - Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.

 

Example 1:


Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).


Example 2:


Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
Output: 6
Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i] <= 104
 * 1 <= k <= arr.length
 * 0 <= threshold <= 104",Solutions (992),1.1K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    threshold: int = deserialize(""int"", read_line())
    ans = Solution().numOfSubarrays(arr, k, threshold)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:
        count = 0
        total = sum(arr[:k])
        if total / k >= threshold:
            count += 1
        
        for i in range(k, len(arr)):
            total += arr[i] - arr[i - k]
            if total / k >= threshold:
                count += 1
        
        return count"
False,0,0,1446,angle-between-hands-of-a-clock,Angle Between Hands of a Clock,angle-between-hands-of-a-clock,False,104823,165687,1344,False,2,"Can you solve this real interview question? Angle Between Hands of a Clock - Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.

Answers within 10-5 of the actual value will be accepted as correct.

 

Example 1:

[https://assets.leetcode.com/uploads/2019/12/26/sample_1_1673.png]


Input: hour = 12, minutes = 30
Output: 165


Example 2:

[https://assets.leetcode.com/uploads/2019/12/26/sample_2_1673.png]


Input: hour = 3, minutes = 30
Output: 75


Example 3:

[https://assets.leetcode.com/uploads/2019/12/26/sample_3_1673.png]


Input: hour = 3, minutes = 15
Output: 7.5


 

Constraints:

 * 1 <= hour <= 12
 * 0 <= minutes <= 59",Solutions (1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/angle-between-hands-of-a-clock/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def angleClock(self, hour: int, minutes: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    hour: int = deserialize(""int"", read_line())
    minutes: int = deserialize(""int"", read_line())
    ans = Solution().angleClock(hour, minutes)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def angleClock(self, hour: int, minutes: int) -> float:
        return min(abs(30 * hour - 5.5 * minutes), 360 - abs(30 * hour - 5.5 * minutes))"
False,0,0,1447,jump-game-iv,Jump Game IV,jump-game-iv,False,128438,273599,1345,False,3,"Can you solve this real interview question? Jump Game IV - Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

 * i + 1 where: i + 1 < arr.length.
 * i - 1 where: i - 1 >= 0.
 * j where: arr[i] == arr[j] and i != j.

Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:


Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.


Example 2:


Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.


Example 3:


Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.


 

Constraints:

 * 1 <= arr.length <= 5 * 104
 * -108 <= arr[i] <= 108",Solutions (975),3.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minJumps(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minJumps(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minJumps(self, arr: List[int]) -> int:
        pass"
False,0,0,1449,,Print Words Vertically,print-words-vertically,False,33024,53782,1324,False,2,"Can you solve this real interview question? Print Words Vertically - Given a string s. Return all the words vertically in the same order in which they appear in s.
Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).
Each word would be put on only one column and that in one column there will be only one word.

 

Example 1:


Input: s = ""HOW ARE YOU""
Output: [""HAY"",""ORO"",""WEU""]
Explanation: Each word is printed vertically. 
 ""HAY""
 ""ORO""
 ""WEU""


Example 2:


Input: s = ""TO BE OR NOT TO BE""
Output: [""TBONTB"",""OEROOE"",""   T""]
Explanation: Trailing spaces is not allowed. 
""TBONTB""
""OEROOE""
""   T""


Example 3:


Input: s = ""CONTEST IS COMING""
Output: [""CIC"",""OSO"",""N M"",""T I"",""E N"",""S G"",""T""]


 

Constraints:

 * 1 <= s.length <= 200
 * s contains only upper case English letters.
 * It's guaranteed that there is only one space between 2 words.",Solutions (760),651,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/print-words-vertically/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def printVertically(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().printVertically(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def printVertically(self, s: str) -> List[str]:
        words = s.split()
        max_len = max(len(word) for word in words)
        res = [''] * max_len
        
        for i in range(max_len):
            for word in words:
                res[i] += word[i] if i < len(word) else ' '
        
        return [word.rstrip() for word in res]"
False,0,0,1451,,Minimum Number of Taps to Open to Water a Garden,minimum-number-of-taps-to-open-to-water-a-garden,False,67702,142446,1326,False,3,"Can you solve this real interview question? Minimum Number of Taps to Open to Water a Garden - There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/16/1685_example_1.png]


Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]


Example 2:


Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.


 

Constraints:

 * 1 <= n <= 104
 * ranges.length == n + 1
 * 0 <= ranges[i] <= 100",Solutions (417),1.9K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ranges: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minTaps(n, ranges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minTaps(self, n: int, ranges: List[int]) -> int:
        dp = [0] * (n + 1)
        for i, r in enumerate(ranges):
            left, right = max(i - r, 0), min(i + r, n)
            dp[left] = max(dp[left], right - left)
        
        ans = 0
        right, next_right = 0, 0
        
        for i in range(n + 1):
            if i > right:
                return -1
            if i > next_right:
                ans += 1
                right = next_right
            next_right = max(next_right, i + dp[i])
        
        return ans"
False,0,0,1454,remove-palindrome-subsequences,Remove Palindromic Subsequences,remove-palindromic-subsequences,False,119533,156855,1332,False,1,"Can you solve this real interview question? Remove Palindromic Subsequences - You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

 

Example 1:


Input: s = ""ababa""
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.


Example 2:


Input: s = ""abb""
Output: 2
Explanation: ""abb"" -> ""bb"" -> """". 
Remove palindromic subsequence ""a"" then ""bb"".


Example 3:


Input: s = ""baabb""
Output: 2
Explanation: ""baabb"" -> ""b"" -> """". 
Remove palindromic subsequence ""baab"" then ""b"".


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either 'a' or 'b'.",Solutions (1.4K),1.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-palindromic-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removePalindromeSub(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def removePalindromeSub(self, s: str) -> int:
        return 2 if s != s[::-1] else 1"
False,0,0,1455,,"Filter Restaurants by Vegan-Friendly, Price and Distance",filter-restaurants-by-vegan-friendly-price-and-distance,False,26141,43568,1333,False,2,"Can you solve this real interview question? Filter Restaurants by Vegan-Friendly, Price and Distance - Given the array restaurants where  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.

The veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true) or false (meaning you can include any restaurant). In addition, you have the filters maxPrice and maxDistance which are the maximum value for price and distance of restaurants you should consider respectively.

Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.

 

Example 1:


Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10
Output: [3,1,5] 
Explanation: 
The restaurants are:
Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]
Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]
Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]
Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]
Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] 
After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). 


Example 2:


Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10
Output: [4,3,2,1,5]
Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.


Example 3:


Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3
Output: [4,5]


 

Constraints:

 * 1 <= restaurants.length <= 10^4
 * restaurants[i].length == 5
 * 1 <= idi, ratingi, pricei, distancei <= 10^5
 * 1 <= maxPrice, maxDistance <= 10^5
 * veganFriendlyi and veganFriendly are 0 or 1.
 * All idi are distinct.",Solutions (428),263,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def filterRestaurants(self, restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    restaurants: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    veganFriendly: int = deserialize(""int"", read_line())
    maxPrice: int = deserialize(""int"", read_line())
    maxDistance: int = deserialize(""int"", read_line())
    ans = Solution().filterRestaurants(restaurants, veganFriendly, maxPrice, maxDistance)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def filterRestaurants(self, restaurants: List[List[int]], veganFriendly: int, maxPrice: int, maxDistance: int) -> List[int]:
        return [res[0] for res in sorted(filter(lambda x: x[2] >= veganFriendly and x[3] <= maxPrice and x[4] <= maxDistance, restaurants), key=lambda x: (-x[1], -x[0]))]"
False,0,0,1456,,Find the City With the Smallest Number of Neighbors at a Threshold Distance,find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance,False,60033,110212,1334,False,2,"Can you solve this real interview question? Find the City With the Smallest Number of Neighbors at a Threshold Distance - There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/16/find_the_city_01.png]


Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.


Example 2:

[https://assets.leetcode.com/uploads/2020/01/16/find_the_city_02.png]


Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.


 

Constraints:

 * 2 <= n <= 100
 * 1 <= edges.length <= n * (n - 1) / 2
 * edges[i].length == 3
 * 0 <= fromi < toi < n
 * 1 <= weighti, distanceThreshold <= 10^4
 * All pairs (fromi, toi) are distinct.",Solutions (742),1.9K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    distanceThreshold: int = deserialize(""int"", read_line())
    ans = Solution().findTheCity(n, edges, distanceThreshold)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findTheCity(self, n: int, edges: List[List[int]], distanceThreshold: int) -> int:
        import heapq
        
        graph = {i: {} for i in range(n)}
        for fromi, toi, weighti in edges:
            graph[fromi][toi] = weighti
            graph[toi][fromi] = weighti
        
        def dijkstra(start):
            dist = {node: float('inf') for node in graph}
            dist[start] = 0
            pq = [(0, start)]
            while pq:
                d, node = heapq.heappop(pq)
                if d > dist[node]:
                    continue
                for neighbor, weight in graph[node].items():
                    if (new_dist := d + weight) < dist[neighbor]:
                        dist[neighbor] = new_dist
                        heapq.heappush(pq, (new_dist, neighbor))
            return sum(1 for d in dist.values() if d <= distanceThreshold)
        
        min_city = None
        min_count = float('inf')
        for i in range(n):
            count = dijkstra(i)
            if count <= min_count:
                min_city = i
                min_count = count
        return min_city"
False,0,0,1457,minimum-difficulty-of-a-job-schedule,Minimum Difficulty of a Job Schedule,minimum-difficulty-of-a-job-schedule,False,119450,204272,1335,False,3,"Can you solve this real interview question? Minimum Difficulty of a Job Schedule - You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the ith job, you have to finish all the jobs j where 0 <= j < i).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.

You are given an integer array jobDifficulty and an integer d. The difficulty of the ith job is jobDifficulty[i].

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/16/untitled.png]


Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.
Second day you can finish the last job, total difficulty = 1.
The difficulty of the schedule = 6 + 1 = 7 


Example 2:


Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.


Example 3:


Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.


 

Constraints:

 * 1 <= jobDifficulty.length <= 300
 * 0 <= jobDifficulty[i] <= 1000
 * 1 <= d <= 10",Solutions (805),2.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    jobDifficulty: List[int] = deserialize(""List[int]"", read_line())
    d: int = deserialize(""int"", read_line())
    ans = Solution().minDifficulty(jobDifficulty, d)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDifficulty(self, jobDifficulty: List[int], d: int) -> int:
        n, inf = len(jobDifficulty), float('inf')
        if n < d:
            return -1

        dp = [[inf] * n for _ in range(d + 1)]
        dp[0][0] = jobDifficulty[0]

        for i in range(1, n):
            dp[0][i] = max(dp[0][i - 1], jobDifficulty[i])

        for i in range(1, d):
            for j in range(i, n):
                max_d = 0
                for k in range(j, i - 1, -1):
                    max_d = max(max_d, jobDifficulty[k])
                    dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + max_d)

        return dp[d - 1][n - 1]"
False,0,0,1458,,Sort Integers by The Number of 1 Bits,sort-integers-by-the-number-of-1-bits,False,107351,147068,1356,False,1,"Can you solve this real interview question? Sort Integers by The Number of 1 Bits - You are given an integer array arr. Sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the array after sorting it.

 

Example 1:


Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.
[1,2,4,8] all have 1 bit.
[3,5,6] have 2 bits.
[7] has 3 bits.
The sorted array by bits is [0,1,2,4,8,3,5,6,7]


Example 2:


Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.


 

Constraints:

 * 1 <= arr.length <= 500
 * 0 <= arr[i] <= 104",Solutions (1.4K),1.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortByBits(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortByBits(arr)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortByBits(self, arr: List[int]) -> List[int]:
        return sorted(arr, key=lambda x: (bin(x).count('1'), x))"
False,0,0,1460,,Number of Substrings Containing All Three Characters,number-of-substrings-containing-all-three-characters,False,54533,86062,1358,False,2,"Can you solve this real interview question? Number of Substrings Containing All Three Characters - Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:


Input: s = ""abcabc""
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""abc"", ""abca"", ""abcab"", ""abcabc"", ""bca"", ""bcab"", ""bcabc"", ""cab"", ""cabc"" and ""abc"" (again). 


Example 2:


Input: s = ""aaacb""
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""aaacb"", ""aacb"" and ""acb"". 


Example 3:


Input: s = ""abc""
Output: 1


 

Constraints:

 * 3 <= s.length <= 5 x 10^4
 * s only consists of a, b or c characters.",Solutions (692),2.3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-substrings-containing-all-three-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numberOfSubstrings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        count = 0
        start = 0
        seen = {'a': 0, 'b': 0, 'c': 0}
        
        for end, char in enumerate(s):
            seen[char] += 1
            
            while all(seen.values()):
                count += len(s) - end
                seen[s[start]] -= 1
                start += 1
        
        return count"
False,0,0,1461,count-all-valid-pickup-and-delivery-options,Count All Valid Pickup and Delivery Options,count-all-valid-pickup-and-delivery-options,False,58100,93059,1359,False,3,"Can you solve this real interview question? Count All Valid Pickup and Delivery Options - Given n orders, each order consist in pickup and delivery services. 

Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 

Since the answer may be too large, return it modulo 10^9 + 7.

 

Example 1:


Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.


Example 2:


Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).
This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.


Example 3:


Input: n = 3
Output: 90


 

Constraints:

 * 1 <= n <= 500",Solutions (673),1.7K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countOrders(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countOrders(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countOrders(self, n: int) -> int:
        return (factorial(2 * n) // ((factorial(n) ** 2) * 2)) % (10**9 + 7)"
False,0,0,1463,the-k-weakest-rows-in-a-matrix,The K Weakest Rows in a Matrix,the-k-weakest-rows-in-a-matrix,False,237669,329566,1337,False,1,"Can you solve this real interview question? The K Weakest Rows in a Matrix - You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.

A row i is weaker than a row j if one of the following is true:

 * The number of soldiers in row i is less than the number of soldiers in row j.
 * Both rows have the same number of soldiers and i < j.

Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.

 

Example 1:


Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].


Example 2:


Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0,2,3,1].


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 2 <= n, m <= 100
 * 1 <= k <= m
 * matrix[i][j] is either 0 or 1.",Solutions (3K),3.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kWeakestRows(mat, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        def count_ones(row):
            return row.count(1)
        
        return sorted(range(len(mat)), key=lambda x: (count_ones(mat[x]), x))[:k]"
False,0,0,1464,reduce-array-size-to-the-half,Reduce Array Size to The Half,reduce-array-size-to-the-half,False,169485,244107,1338,False,2,"Can you solve this real interview question? Reduce Array Size to The Half - You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.

Return the minimum size of the set so that at least half of the integers of the array are removed.

 

Example 1:


Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).
Possible sets of size 2 are {3,5},{3,2},{5,2}.
Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.


Example 2:


Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.


 

Constraints:

 * 2 <= arr.length <= 105
 * arr.length is even.
 * 1 <= arr[i] <= 105",Solutions (2.3K),3K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/reduce-array-size-to-the-half/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSetSize(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSetSize(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSetSize(self, arr: List[int]) -> int:
        from collections import Counter
        count = Counter(arr)
        sorted_count = sorted(count.values(), reverse=True)
        total = len(arr)
        target = total // 2
        ans = 0
        removed = 0
        for num in sorted_count:
            removed += num
            ans += 1
            if removed >= target:
                return ans"
False,0,0,1466,,Jump Game V,jump-game-v,False,24949,39903,1340,False,3,"Can you solve this real interview question? Jump Game V - Given an array of integers arr and an integer d. In one step you can jump from index i to index:

 * i + x where: i + x < arr.length and 0 < x <= d.
 * i - x where: i - x >= 0 and 0 < x <= d.

In addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i, j) < k < max(i, j)).

You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.

Notice that you can not jump outside of the array at any time.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg]


Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
Output: 4
Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.
Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.
Similarly You cannot jump from index 3 to index 2 or index 1.


Example 2:


Input: arr = [3,3,3,3,3], d = 3
Output: 1
Explanation: You can start at any index. You always cannot jump to any index.


Example 3:


Input: arr = [7,6,5,4,3,2,1], d = 1
Output: 7
Explanation: Start at index 0. You can visit all the indicies. 


 

Constraints:

 * 1 <= arr.length <= 1000
 * 1 <= arr[i] <= 105
 * 1 <= d <= arr.length",Solutions (377),938,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-v/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxJumps(self, arr: List[int], d: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    d: int = deserialize(""int"", read_line())
    ans = Solution().maxJumps(arr, d)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxJumps(self, arr: List[int], d: int) -> int:
        # Add your code here
        pass"
False,0,0,1468,,Check If N and Its Double Exist,check-if-n-and-its-double-exist,False,274103,750783,1346,False,1,"Can you solve this real interview question? Check If N and Its Double Exist - Given an array arr of integers, check if there exist two indices i and j such that :

 * i != j
 * 0 <= i, j < arr.length
 * arr[i] == 2 * arr[j]

 

Example 1:


Input: arr = [10,2,5,3]
Output: true
Explanation: For i = 0 and j = 2, arr[i] == 10 == 2 * 5 == 2 * arr[j]


Example 2:


Input: arr = [3,1,7,11]
Output: false
Explanation: There is no i and j that satisfy the conditions.


 

Constraints:

 * 2 <= arr.length <= 500
 * -103 <= arr[i] <= 103",Solutions (2.3K),1.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-n-and-its-double-exist/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().checkIfExist(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkIfExist(self, arr: List[int]) -> bool:
        seen = set()
        for num in arr:
            if num / 2 in seen or num * 2 in seen:
                return True
            seen.add(num)
        return False"
False,0,0,1469,,Minimum Number of Steps to Make Two Strings Anagram,minimum-number-of-steps-to-make-two-strings-anagram,False,125746,161671,1347,False,2,"Can you solve this real interview question? Minimum Number of Steps to Make Two Strings Anagram - You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.

Return the minimum number of steps to make t an anagram of s.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

Example 1:


Input: s = ""bab"", t = ""aba""
Output: 1
Explanation: Replace the first 'a' in t with b, t = ""bba"" which is anagram of s.


Example 2:


Input: s = ""leetcode"", t = ""practice""
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.


Example 3:


Input: s = ""anagram"", t = ""mangaar""
Output: 0
Explanation: ""anagram"" and ""mangaar"" are anagrams. 


 

Constraints:

 * 1 <= s.length <= 5 * 104
 * s.length == t.length
 * s and t consist of lowercase English letters only.",Solutions (1.4K),1.7K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSteps(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().minSteps(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSteps(self, s: str, t: str) -> int:
        from collections import Counter
        return sum((Counter(t) - Counter(s)).values())"
False,0,0,1471,,Maximum Students Taking Exam,maximum-students-taking-exam,False,12768,26071,1349,False,3,"Can you solve this real interview question? Maximum Students Taking Exam - Given a m * n matrix seats  that represent seats distributions in a classroom. If a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.

Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible..

Students must be placed in seats in good condition.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/01/29/image.png]


Input: seats = [[""#"",""."",""#"",""#"",""."",""#""],
                [""."",""#"",""#"",""#"",""#"","".""],
                [""#"",""."",""#"",""#"",""."",""#""]]
Output: 4
Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. 


Example 2:


Input: seats = [[""."",""#""],
                [""#"",""#""],
                [""#"","".""],
                [""#"",""#""],
                [""."",""#""]]
Output: 3
Explanation: Place all students in available seats. 



Example 3:


Input: seats = [[""#"",""."",""."",""."",""#""],
                [""."",""#"",""."",""#"","".""],
                [""."",""."",""#"",""."","".""],
                [""."",""#"",""."",""#"","".""],
                [""#"",""."",""."",""."",""#""]]
Output: 10
Explanation: Place students in available seats in column 1, 3 and 5.


 

Constraints:

 * seats contains only characters '.' and'#'.
 * m == seats.length
 * n == seats[i].length
 * 1 <= m <= 8
 * 1 <= n <= 8",Solutions (169),709,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-students-taking-exam/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxStudents(self, seats: List[List[str]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    seats: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().maxStudents(seats)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxStudents(self, seats: List[List[str]]) -> int:
        pass"
False,0,0,1472,,Increasing Decreasing String,increasing-decreasing-string,False,64482,83521,1370,False,1,"Can you solve this real interview question? Increasing Decreasing String - You are given a string s. Reorder the string using the following algorithm:

 1. Pick the smallest character from s and append it to the result.
 2. Pick the smallest character from s which is greater than the last appended character to the result and append it.
 3. Repeat step 2 until you cannot pick more characters.
 4. Pick the largest character from s and append it to the result.
 5. Pick the largest character from s which is smaller than the last appended character to the result and append it.
 6. Repeat step 5 until you cannot pick more characters.
 7. Repeat the steps from 1 to 6 until you pick all characters from s.

In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return the result string after sorting s with this algorithm.

 

Example 1:


Input: s = ""aaaabbbbcccc""
Output: ""abccbaabccba""
Explanation: After steps 1, 2 and 3 of the first iteration, result = ""abc""
After steps 4, 5 and 6 of the first iteration, result = ""abccba""
First iteration is done. Now s = ""aabbcc"" and we go back to step 1
After steps 1, 2 and 3 of the second iteration, result = ""abccbaabc""
After steps 4, 5 and 6 of the second iteration, result = ""abccbaabccba""


Example 2:


Input: s = ""rat""
Output: ""art""
Explanation: The word ""rat"" becomes ""art"" after re-ordering it with the mentioned algorithm.


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of only lowercase English letters.",Solutions (815),653,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/increasing-decreasing-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().sortString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def sortString(self, s: str) -> str:
        import collections
        counter = collections.Counter(s)
        sorted_counter = sorted(counter.items(), key=lambda x: x[0])
        
        result = []
        while len(result) < len(s):
            for char, count in sorted_counter:
                if count > 0:
                    result.append(char)
                    counter[char] -= 1
            sorted_counter = sorted(counter.items(), key=lambda x: x[0])
            
            for char, count in sorted_counter[::-1]:
                if count > 0:
                    result.append(char)
                    counter[char] -= 1
            sorted_counter = sorted(counter.items(), key=lambda x: x[0])
        
        return """".join(result)"
False,0,0,1473,,Find the Longest Substring Containing Vowels in Even Counts,find-the-longest-substring-containing-vowels-in-even-counts,False,22191,35135,1371,False,2,"Can you solve this real interview question? Find the Longest Substring Containing Vowels in Even Counts - Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.

 

Example 1:


Input: s = ""eleetminicoworoep""
Output: 13
Explanation: The longest substring is ""leetminicowor"" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.


Example 2:


Input: s = ""leetcodeisgreat""
Output: 5
Explanation: The longest substring is ""leetc"" which contains two e's.


Example 3:


Input: s = ""bcbcbc""
Output: 6
Explanation: In this case, the given string ""bcbcbc"" is the longest because all vowels: a, e, i, o and u appear zero times.


 

Constraints:

 * 1 <= s.length <= 5 x 10^5
 * s contains only lowercase English letters.",Solutions (209),1.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheLongestSubstring(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().findTheLongestSubstring(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findTheLongestSubstring(self, s: str) -> int:
        vowels = {'a': 0, 'e': 1, 'i': 2, 'o': 3, 'u': 4}
        state = [0] + [-1] * 31
        res, curr_state = 0, 0
        for i, c in enumerate(s):
            if c in vowels:
                curr_state ^= 1 << vowels[c]
            if state[curr_state] >= 0:
                res = max(res, i + 1 - state[curr_state])
            else:
                state[curr_state] = i + 1
        return res"
False,0,0,1476,,Count Negative Numbers in a Sorted Matrix,count-negative-numbers-in-a-sorted-matrix,False,235533,312044,1351,False,1,"Can you solve this real interview question? Count Negative Numbers in a Sorted Matrix - Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.

 

Example 1:


Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.


Example 2:


Input: grid = [[3,2],[1,0]]
Output: 0


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 100
 * -100 <= grid[i][j] <= 100

 

Follow up: Could you find an O(n + m) solution?",Solutions (3K),3.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countNegatives(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countNegatives(self, grid: List[List[int]]) -> int:
        count = 0
        for row in grid:
            count += len([i for i in row if i < 0])
        return count"
False,0,0,1478,,Maximum Number of Events That Can Be Attended,maximum-number-of-events-that-can-be-attended,False,67992,208801,1353,False,2,"Can you solve this real interview question? Maximum Number of Events That Can Be Attended - You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/02/05/e1.png]


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.


Example 2:


Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4


 

Constraints:

 * 1 <= events.length <= 105
 * events[i].length == 2
 * 1 <= startDayi <= endDayi <= 105",Solutions (374),2.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    events: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxEvents(events)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxEvents(self, events: List[List[int]]) -> int:
        events.sort(reverse=True)
        visited = set()
        count = 0
        
        for start, end in events:
            for day in range(start, end+1):
                if day not in visited:
                    visited.add(day)
                    count += 1
                    break
        
        return count"
False,0,0,1479,construct-target-array-with-multiple-sums,Construct Target Array With Multiple Sums,construct-target-array-with-multiple-sums,False,63937,176240,1354,False,3,"Can you solve this real interview question? Construct Target Array With Multiple Sums - You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :

 * let x be the sum of all elements currently in your array.
 * choose index i, such that 0 <= i < n and set the value of arr at index i to x.
 * You may repeat this procedure as many times as needed.

Return true if it is possible to construct the target array from arr, otherwise, return false.

 

Example 1:


Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done


Example 2:


Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].


Example 3:


Input: target = [8,5]
Output: true


 

Constraints:

 * n == target.length
 * 1 <= n <= 5 * 104
 * 1 <= target[i] <= 109",Solutions (469),2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-target-array-with-multiple-sums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPossible(self, target: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().isPossible(target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPossible(self, target: List[int]) -> bool:
        import heapq
        
        heap = [-x for x in target]
        heapq.heapify(heap)
        total = sum(target)
        
        while True:
            largest = -heapq.heappop(heap)
            total -= largest
            if largest == 1 or total == 1:
                return largest == 1 or total == 1
            if largest < total or total == 0 or largest % total == 0:
                return False
            largest %= total
            total += largest
            heapq.heappush(heap, -largest)"
False,0,0,1482,,How Many Numbers Are Smaller Than the Current Number,how-many-numbers-are-smaller-than-the-current-number,False,416983,481365,1365,False,1,"Can you solve this real interview question? How Many Numbers Are Smaller Than the Current Number - Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:


Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).


Example 2:


Input: nums = [6,5,4,8]
Output: [2,1,0,3]


Example 3:


Input: nums = [7,7,7,7]
Output: [0,0,0,0]


 

Constraints:

 * 2 <= nums.length <= 500
 * 0 <= nums[i] <= 100",Solutions (3.9K),4.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().smallerNumbersThanCurrent(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        count = [0] * 102
        for num in nums:
            count[num+1] += 1
        for i in range(1, 102):
            count[i] += count[i-1]
        return [count[num] for num in nums]"
False,0,0,1483,,Rank Teams by Votes,rank-teams-by-votes,False,51851,89510,1366,False,2,"Can you solve this real interview question? Rank Teams by Votes - In a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.

The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.

You are given an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.

Return a string of all teams sorted by the ranking system.

 

Example 1:


Input: votes = [""ABC"",""ACB"",""ABC"",""ACB"",""ACB""]
Output: ""ACB""
Explanation: 
Team A was ranked first place by 5 voters. No other team was voted as first place, so team A is the first team.
Team B was ranked second by 2 voters and ranked third by 3 voters.
Team C was ranked second by 3 voters and ranked third by 2 voters.
As most of the voters ranked C second, team C is the second team, and team B is the third.


Example 2:


Input: votes = [""WXYZ"",""XYZW""]
Output: ""XWYZ""
Explanation:
X is the winner due to the tie-breaking rule. X has the same votes as W for the first position, but X has one vote in the second position, while W does not have any votes in the second position. 


Example 3:


Input: votes = [""ZMNAGUEDSJYLBOPHRQICWFXTVK""]
Output: ""ZMNAGUEDSJYLBOPHRQICWFXTVK""
Explanation: Only one voter, so their votes are used for the ranking.


 

Constraints:

 * 1 <= votes.length <= 1000
 * 1 <= votes[i].length <= 26
 * votes[i].length == votes[j].length for 0 <= i, j < votes.length.
 * votes[i][j] is an English uppercase letter.
 * All characters of votes[i] are unique.
 * All the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length.",Solutions (412),1.1K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/rank-teams-by-votes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rankTeams(self, votes: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    votes: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().rankTeams(votes)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def rankTeams(self, votes: List[str]) -> str:
        from collections import defaultdict
        
        counts = defaultdict(lambda: [0]*26)
        for vote in votes:
            for i, team in enumerate(vote):
                counts[team][i] -= 1
        
        sorted_teams = sorted(votes[0], key=lambda x: (counts[x], x))
        return ''.join(sorted_teams)"
False,0,0,1485,,Minimum Cost to Make at Least One Valid Path in a Grid,minimum-cost-to-make-at-least-one-valid-path-in-a-grid,False,39319,63862,1368,False,3,"Can you solve this real interview question? Minimum Cost to Make at Least One Valid Path in a Grid - Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

 * 1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
 * 2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
 * 3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
 * 4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])

Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/02/13/grid1.png]


Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.


Example 2:

[https://assets.leetcode.com/uploads/2020/02/13/grid2.png]


Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).


Example 3:

[https://assets.leetcode.com/uploads/2020/02/13/grid3.png]


Input: grid = [[1,2],[4,3]]
Output: 1


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 100
 * 1 <= grid[i][j] <= 4",Solutions (430),1.5K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minCost(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, grid: List[List[int]]) -> int:
        pass  # Your code here"
False,0,0,1486,,Find the Distance Value Between Two Arrays,find-the-distance-value-between-two-arrays,False,79063,119017,1385,False,1,"Can you solve this real interview question? Find the Distance Value Between Two Arrays - Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.

The distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.

 

Example 1:


Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
Output: 2
Explanation: 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
|8-10|=2 <= d=2
|8-9|=1 <= d=2
|8-1|=7 > d=2
|8-8|=0 <= d=2


Example 2:


Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
Output: 2


Example 3:


Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
Output: 1


 

Constraints:

 * 1 <= arr1.length, arr2.length <= 500
 * -1000 <= arr1[i], arr2[j] <= 1000
 * 0 <= d <= 100",Solutions (1K),724,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-distance-value-between-two-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    d: int = deserialize(""int"", read_line())
    ans = Solution().findTheDistanceValue(arr1, arr2, d)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        distance = 0
        for num1 in arr1:
            valid = True
            for num2 in arr2:
                if abs(num1 - num2) <= d:
                    valid = False
                    break
            if valid:
                distance += 1
        return distance"
False,0,0,1487,,Cinema Seat Allocation,cinema-seat-allocation,False,37860,92515,1386,False,2,"Can you solve this real interview question? Cinema Seat Allocation - [https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_1.png]

A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

Given the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_3.png]


Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.


Example 2:


Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2


Example 3:


Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4


 

Constraints:

 * 1 <= n <= 10^9
 * 1 <= reservedSeats.length <= min(10*n, 10^4)
 * reservedSeats[i].length == 2
 * 1 <= reservedSeats[i][0] <= n
 * 1 <= reservedSeats[i][1] <= 10
 * All reservedSeats[i] are distinct.",Solutions (384),730,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/cinema-seat-allocation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    reservedSeats: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxNumberOfFamilies(n, reservedSeats)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNumberOfFamilies(self, n: int, reservedSeats: List[List[int]]) -> int:
        reserved = collections.defaultdict(set)
        for seat in reservedSeats:
            row, seat_num = seat
            reserved[row].add(seat_num)
        
        result = 2 * n
        count = 0
        
        for row in reserved:
            if not reserved[row] & {2, 3, 4, 5} and not reserved[row] & {6, 7, 8, 9} and not reserved[row] & {4, 5, 6, 7}:
                count += 2
            elif not reserved[row] & {2, 3, 4, 5} or not reserved[row] & {6, 7, 8, 9} or not reserved[row] & {4, 5, 6, 7}:
                count += 1
        
        return result + count"
False,0,0,1488,,Sort Integers by The Power Value,sort-integers-by-the-power-value,False,75946,108338,1387,False,2,"Can you solve this real interview question? Sort Integers by The Power Value - The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:

 * if x is even then x = x / 2
 * if x is odd then x = 3 * x + 1

For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the kth integer in the range [lo, hi] sorted by the power value.

Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.

 

Example 1:


Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
The power of 13 is 9
The power of 14 is 17
The power of 15 is 17
The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.
Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.


Example 2:


Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].
The interval sorted by power is [8, 10, 11, 7, 9].
The fourth number in the sorted array is 7.


 

Constraints:

 * 1 <= lo <= hi <= 1000
 * 1 <= k <= hi - lo + 1",Solutions (1.1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-integers-by-the-power-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getKth(self, lo: int, hi: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    lo: int = deserialize(""int"", read_line())
    hi: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getKth(lo, hi, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getKth(self, lo: int, hi: int, k: int) -> int:
        def power(x):
            count = 0
            while x != 1:
                if x % 2 == 0:
                    x = x // 2
                else:
                    x = 3 * x + 1
                count += 1
            return count

        arr = []
        for i in range(lo, hi + 1):
            arr.append((power(i), i))

        arr.sort()
        return arr[k - 1][1]"
False,0,0,1489,,Pizza With 3n Slices,pizza-with-3n-slices,False,13934,27738,1388,False,3,"Can you solve this real interview question? Pizza With 3n Slices - There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:

 * You will pick any pizza slice.
 * Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.
 * Your friend Bob will pick the next slice in the clockwise direction of your pick.
 * Repeat until there are no more slices of pizzas.

Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/02/18/sample_3_1723.png]


Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.


Example 2:

[https://assets.leetcode.com/uploads/2020/02/18/sample_4_1723.png]


Input: slices = [8,9,8,6,1,1]
Output: 16
Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.


 

Constraints:

 * 3 * n == slices.length
 * 1 <= slices.length <= 500
 * 1 <= slices[i] <= 1000",Solutions (161),810,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/pizza-with-3n-slices/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSizeSlices(self, slices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    slices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSizeSlices(slices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSizeSlices(self, slices: List[int]) -> int:
        n = len(slices) // 3
        return max(self.helper(slices[1:-1], n), self.helper(slices[:-1], n))
    
    def helper(self, slices, n):
        dp = [[0] * (n + 1) for _ in range(len(slices) + 1)]
        
        for i in range(1, len(slices) + 1):
            for j in range(1, n + 1):
                dp[i][j] = max(dp[i-1][j], (dp[i-2][j-1] if i > 1 else 0) + slices[i-1])

        return dp[-1][-1]"
False,0,0,1490,,Generate a String With Characters That Have Odd Counts,generate-a-string-with-characters-that-have-odd-counts,False,77982,100509,1374,False,1,"Can you solve this real interview question? Generate a String With Characters That Have Odd Counts - Given an integer n, return a string with n characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  

 

Example 1:


Input: n = 4
Output: ""pppz""
Explanation: ""pppz"" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as ""ohhh"" and ""love"".


Example 2:


Input: n = 2
Output: ""xy""
Explanation: ""xy"" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as ""ag"" and ""ur"".


Example 3:


Input: n = 7
Output: ""holasss""


 

Constraints:

 * 1 <= n <= 500",Solutions (1.1K),402,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def generateTheString(self, n: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().generateTheString(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def generateTheString(self, n: int) -> str:
        if n % 2 == 0:
            return 'a' * (n - 1) + 'b'
        else:
            return 'a' * n"
False,0,0,1491,,Number of Times Binary String Is Prefix-Aligned,number-of-times-binary-string-is-prefix-aligned,False,45811,69635,1375,False,2,"Can you solve this real interview question? Number of Times Binary String Is Prefix-Aligned - You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.

A binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.

Return the number of times the binary string is prefix-aligned during the flipping process.

 

Example 1:


Input: flips = [3,2,4,1,5]
Output: 2
Explanation: The binary string is initially ""00000"".
After applying step 1: The string becomes ""00100"", which is not prefix-aligned.
After applying step 2: The string becomes ""01100"", which is not prefix-aligned.
After applying step 3: The string becomes ""01110"", which is not prefix-aligned.
After applying step 4: The string becomes ""11110"", which is prefix-aligned.
After applying step 5: The string becomes ""11111"", which is prefix-aligned.
We can see that the string was prefix-aligned 2 times, so we return 2.


Example 2:


Input: flips = [4,1,2,3]
Output: 1
Explanation: The binary string is initially ""0000"".
After applying step 1: The string becomes ""0001"", which is not prefix-aligned.
After applying step 2: The string becomes ""1001"", which is not prefix-aligned.
After applying step 3: The string becomes ""1101"", which is not prefix-aligned.
After applying step 4: The string becomes ""1111"", which is prefix-aligned.
We can see that the string was prefix-aligned 1 time, so we return 1.


 

Constraints:

 * n == flips.length
 * 1 <= n <= 5 * 104
 * flips is a permutation of the integers in the range [1, n].",Solutions (527),839,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-times-binary-string-is-prefix-aligned/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTimesAllBlue(self, flips: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    flips: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numTimesAllBlue(flips)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTimesAllBlue(self, flips: List[int]) -> int:
        count = total = 0
        for i, flip in enumerate(flips, 1):
            count += 1 if flip <= count else 0
            total += count == i
        return total"
False,0,0,1492,,Time Needed to Inform All Employees,time-needed-to-inform-all-employees,False,128332,220093,1376,False,2,"Can you solve this real interview question? Time Needed to Inform All Employees - A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.

Each employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.

The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.

The i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).

Return the number of minutes needed to inform all the employees about the urgent news.

 

Example 1:


Input: n = 1, headID = 0, manager = [-1], informTime = [0]
Output: 0
Explanation: The head of the company is the only employee in the company.


Example 2:

[https://assets.leetcode.com/uploads/2020/02/27/graph.png]


Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]
Output: 1
Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.
The tree structure of the employees in the company is shown.


 

Constraints:

 * 1 <= n <= 105
 * 0 <= headID < n
 * manager.length == n
 * 0 <= manager[i] < n
 * manager[headID] == -1
 * informTime.length == n
 * 0 <= informTime[i] <= 1000
 * informTime[i] == 0 if employee i has no subordinates.
 * It is guaranteed that all the employees can be informed.",Solutions (1.3K),2.6K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/time-needed-to-inform-all-employees/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfMinutes(self, n: int, headID: int, manager: List[int], informTime: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    headID: int = deserialize(""int"", read_line())
    manager: List[int] = deserialize(""List[int]"", read_line())
    informTime: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numOfMinutes(n, headID, manager, informTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfMinutes(self, n: int, headID: int, manager: List[int], informTime: List[int]) -> int:
        from collections import defaultdict

        def dfs(employee):
            return informTime[employee] + max(dfs(subordinate) for subordinate in employees[employee])

        employees = defaultdict(list)
        for i, m in enumerate(manager):
            employees[m].append(i)

        return dfs(headID)"
False,0,0,1493,,Frog Position After T Seconds,frog-position-after-t-seconds,False,24257,67842,1377,False,3,"Can you solve this real interview question? Frog Position After T Seconds - Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.

Return the probability that after t seconds the frog is on the vertex target. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/21/frog1.jpg]


Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666 
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. 


Example 2:

[https://assets.leetcode.com/uploads/2021/12/21/frog2.jpg]


Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
Output: 0.3333333333333333
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. 


 

Constraints:

 * 1 <= n <= 100
 * edges.length == n - 1
 * edges[i].length == 2
 * 1 <= ai, bi <= n
 * 1 <= t <= 50
 * 1 <= target <= n",Solutions (358),635,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/frog-position-after-t-seconds/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    t: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().frogPosition(n, edges, t, target)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:
        prob = [0] * (n + 1)
        prob[1] = 1.0
        
        graph = defaultdict(list)
        for a, b in edges:
            graph[a].append(b)
            graph[b].append(a)
        
        for _ in range(t):
            new_prob = [0] * (n + 1)
            for node in range(1, n + 1):
                if prob[node] > 0:
                    neighbors = [neighbor for neighbor in graph[node] if prob[neighbor] == 0]
                    if neighbors:
                        for neighbor in neighbors:
                            new_prob[neighbor] += prob[node] / len(neighbors)
                    else:
                        new_prob[node] += prob[node]
            prob = new_prob
        
        return prob[target]"
False,0,0,1496,,Lucky Numbers in a Matrix,lucky-numbers-in-a-matrix,False,81582,115487,1380,False,1,"Can you solve this real interview question? Lucky Numbers in a Matrix - Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.

 

Example 1:


Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 2:


Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 3:


Input: matrix = [[7,8],[1,2]]
Output: [7]
Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= n, m <= 50
 * 1 <= matrix[i][j] <= 105.
 * All elements in the matrix are distinct.",Solutions (1.3K),1.4K,"# Created by asetti2002 at 2024/04/17 02:12
# leetgo: 1.4.3
# https://leetcode.com/problems/lucky-numbers-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().luckyNumbers (matrix)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def luckyNumbers (self, matrix: List[List[int]]) -> List[int]:
        row_min = [min(row) for row in matrix]
        col_max = [max(col) for col in zip(*matrix)]
        return list(set(row_min) & set(col_max))"
False,0,0,1499,maximum-performance-of-a-team,Maximum Performance of a Team,maximum-performance-of-a-team,False,85866,177081,1383,False,3,"Can you solve this real interview question? Maximum Performance of a Team - You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.

Choose at most k different engineers out of the n engineers to form a team with the maximum performance.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.

Return the maximum performance of this team. Since the answer can be a huge number, return it modulo 109 + 7.

 

Example 1:


Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
Explanation: 
We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.


Example 2:


Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
Explanation:
This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.


Example 3:


Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72


 

Constraints:

 * 1 <= k <= n <= 105
 * speed.length == n
 * efficiency.length == n
 * 1 <= speed[i] <= 105
 * 1 <= efficiency[i] <= 108",Solutions (618),2.8K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-performance-of-a-team/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    speed: List[int] = deserialize(""List[int]"", read_line())
    efficiency: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxPerformance(n, speed, efficiency, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxPerformance(self, n: int, speed: List[int], efficiency: List[int], k: int) -> int:
        mod = 10**9 + 7
        engineers = sorted(zip(efficiency, speed), reverse=True)
        heap = []
        speed_sum, perf = 0, 0
        
        for eff, spd in engineers:
            heapq.heappush(heap, spd)
            speed_sum += spd
            
            if len(heap) > k:
                speed_sum -= heapq.heappop(heap)
            
            perf = max(perf, speed_sum * eff)
        
        return perf % mod"
False,0,0,1500,,Count Largest Group,count-largest-group,False,37324,55717,1399,False,1,"Can you solve this real interview question? Count Largest Group - You are given an integer n.

Each number from 1 to n is grouped according to the sum of its digits.

Return the number of groups that have the largest size.

 

Example 1:


Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].
There are 4 groups with largest size.


Example 2:


Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.


 

Constraints:

 * 1 <= n <= 104",Solutions (549),367,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-largest-group/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countLargestGroup(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countLargestGroup(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countLargestGroup(self, n: int) -> int:
        def digit_sum(num):
            return sum([int(i) for i in str(num)])

        group_size = {}
        for i in range(1, n+1):
            sum_digit = digit_sum(i)
            group_size[sum_digit] = group_size.get(sum_digit, 0) + 1

        max_count = max(group_size.values())
        return list(group_size.values()).count(max_count)"
False,0,0,1501,,Circle and Rectangle Overlapping,circle-and-rectangle-overlapping,False,11552,26182,1401,False,2,"Can you solve this real interview question? Circle and Rectangle Overlapping - You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.

Return true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/02/20/sample_4_1728.png]


Input: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
Output: true
Explanation: Circle and rectangle share the point (1,0).


Example 2:


Input: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
Output: false


Example 3:

[https://assets.leetcode.com/uploads/2020/02/20/sample_2_1728.png]


Input: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
Output: true


 

Constraints:

 * 1 <= radius <= 2000
 * -104 <= xCenter, yCenter <= 104
 * -104 <= x1 < x2 <= 104
 * -104 <= y1 < y2 <= 104",Solutions (163),274,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/circle-and-rectangle-overlapping/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkOverlap(self, radius: int, xCenter: int, yCenter: int, x1: int, y1: int, x2: int, y2: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    radius: int = deserialize(""int"", read_line())
    xCenter: int = deserialize(""int"", read_line())
    yCenter: int = deserialize(""int"", read_line())
    x1: int = deserialize(""int"", read_line())
    y1: int = deserialize(""int"", read_line())
    x2: int = deserialize(""int"", read_line())
    y2: int = deserialize(""int"", read_line())
    ans = Solution().checkOverlap(radius, xCenter, yCenter, x1, y1, x2, y2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkOverlap(self, radius: int, xCenter: int, yCenter: int, x1: int, y1: int, x2: int, y2: int) -> bool:
        circle_distance_x = abs(xCenter - ((x1 + x2) / 2))
        circle_distance_y = abs(yCenter - ((y1 + y2) / 2))

        if circle_distance_x <= ((x2 - x1) / 2 + radius) and circle_distance_y <= ((y2 - y1) / 2 + radius):
            if circle_distance_x <= (x2 - x1) / 2 or circle_distance_y <= (y2 - y1) / 2:
                return True

            corner_distance_sq = (circle_distance_x - (x2 - x1) / 2) ** 2 + (circle_distance_y - (y2 - y1) / 2) ** 2
            return corner_distance_sq <= radius ** 2

        return False"
False,0,0,1502,,Construct K Palindrome Strings,construct-k-palindrome-strings,False,44488,70801,1400,False,2,"Can you solve this real interview question? Construct K Palindrome Strings - Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.

 

Example 1:


Input: s = ""annabelle"", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.
Some possible constructions ""anna"" + ""elble"", ""anbna"" + ""elle"", ""anellena"" + ""b""


Example 2:


Input: s = ""leetcode"", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.


Example 3:


Input: s = ""true"", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.
 * 1 <= k <= 105",Solutions (446),911,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-k-palindrome-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canConstruct(self, s: str, k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().canConstruct(s, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canConstruct(self, s: str, k: int) -> bool:
        from collections import Counter
        char_count = Counter(s)
        odd_count = sum(1 for count in char_count.values() if count % 2 == 1)
        return odd_count <= k <= len(s)"
False,0,0,1503,reducing-dishes,Reducing Dishes,reducing-dishes,False,54168,75197,1402,False,3,"Can you solve this real interview question? Reducing Dishes - A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].

Return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.

 

Example 1:


Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).
Each dish is prepared in one unit of time.

Example 2:


Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)


Example 3:


Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People do not like the dishes. No dish is prepared.


 

Constraints:

 * n == satisfaction.length
 * 1 <= n <= 500
 * -1000 <= satisfaction[i] <= 1000",Solutions (1.8K),2.7K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/reducing-dishes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSatisfaction(self, satisfaction: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    satisfaction: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSatisfaction(satisfaction)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSatisfaction(self, satisfaction: List[int]) -> int:
        satisfaction.sort()
        max_sum = 0
        total = 0
        
        for s in satisfaction:
            total += s
            if total > 0:
                max_sum += total
            else:
                break
        
        return max_sum"
False,0,0,1505,,Create Target Array in the Given Order,create-target-array-in-the-given-order,False,187501,218413,1389,False,1,"Can you solve this real interview question? Create Target Array in the Given Order - Given two arrays of integers nums and index. Your task is to create target array under the following rules:

 * Initially target array is empty.
 * From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
 * Repeat the previous step until there are no elements to read in nums and index.

Return the target array.

It is guaranteed that the insertion operations will be valid.

 

Example 1:


Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
Explanation:
nums       index     target
0            0        [0]
1            1        [0,1]
2            2        [0,1,2]
3            2        [0,1,3,2]
4            1        [0,4,1,3,2]


Example 2:


Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]
Output: [0,1,2,3,4]
Explanation:
nums       index     target
1            0        [1]
2            1        [1,2]
3            2        [1,2,3]
4            3        [1,2,3,4]
0            0        [0,1,2,3,4]


Example 3:


Input: nums = [1], index = [0]
Output: [1]


 

Constraints:

 * 1 <= nums.length, index.length <= 100
 * nums.length == index.length
 * 0 <= nums[i] <= 100
 * 0 <= index[i] <= i",Solutions (2.4K),1.6K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/create-target-array-in-the-given-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    index: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().createTargetArray(nums, index)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def createTargetArray(self, nums: List[int], index: List[int]) -> List[int]:
        target = []
        for i in range(len(nums)):
            target.insert(index[i], nums[i])
        return target"
False,0,0,1507,,Check if There is a Valid Path in a Grid,check-if-there-is-a-valid-path-in-a-grid,False,24217,51236,1391,False,2,"Can you solve this real interview question? Check if There is a Valid Path in a Grid - You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:

 * 1 which means a street connecting the left cell and the right cell.
 * 2 which means a street connecting the upper cell and the lower cell.
 * 3 which means a street connecting the left cell and the lower cell.
 * 4 which means a street connecting the right cell and the lower cell.
 * 5 which means a street connecting the left cell and the upper cell.
 * 6 which means a street connecting the right cell and the upper cell.

[https://assets.leetcode.com/uploads/2020/03/05/main.png]

You will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/03/05/e1.png]


Input: grid = [[2,4,3],[6,5,2]]
Output: true
Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).


Example 2:

[https://assets.leetcode.com/uploads/2020/03/05/e2.png]


Input: grid = [[1,2,1],[1,2,1]]
Output: false
Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)


Example 3:


Input: grid = [[1,1,2]]
Output: false
Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 300
 * 1 <= grid[i][j] <= 6",Solutions (434),704,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hasValidPath(self, grid: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().hasValidPath(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def hasValidPath(self, grid: List[List[int]]) -> bool:
        pass"
False,0,0,1508,,Longest Happy Prefix,longest-happy-prefix,False,28954,64614,1392,False,3,"Can you solve this real interview question? Longest Happy Prefix - A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string s, return the longest happy prefix of s. Return an empty string """" if no such prefix exists.

 

Example 1:


Input: s = ""level""
Output: ""l""
Explanation: s contains 4 prefix excluding itself (""l"", ""le"", ""lev"", ""leve""), and suffix (""l"", ""el"", ""vel"", ""evel""). The largest prefix which is also suffix is given by ""l"".


Example 2:


Input: s = ""ababab""
Output: ""abab""
Explanation: ""abab"" is the largest prefix which is also suffix. They can overlap in the original string.


 

Constraints:

 * 1 <= s.length <= 105
 * s contains only lowercase English letters.",Solutions (395),1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-happy-prefix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPrefix(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestPrefix(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestPrefix(self, s: str) -> str:
        n = len(s)
        lps = [0] * n
        j = 0
        for i in range(1, n):
            while j > 0 and s[i] != s[j]:
                j = lps[j - 1]
            if s[i] == s[j]:
                j += 1
                lps[i] = j
        return s[:lps[-1]] if lps[-1] > 0 else """""
False,0,0,1510,find-lucky-integer-in-an-array,Find Lucky Integer in an Array,find-lucky-integer-in-an-array,False,90667,140729,1394,False,1,"Can you solve this real interview question? Find Lucky Integer in an Array - Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.

Return the largest lucky integer in the array. If there is no lucky integer return -1.

 

Example 1:


Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.


Example 2:


Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.


Example 3:


Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.


 

Constraints:

 * 1 <= arr.length <= 500
 * 1 <= arr[i] <= 500",Solutions (1.4K),931,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-lucky-integer-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLucky(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLucky(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLucky(self, arr: List[int]) -> int:
        from collections import Counter
        count = Counter(arr)
        result = -1
        for key, value in count.items():
            if key == value:
                result = max(result, key)
        return result"
False,0,0,1511,,Count Number of Teams,count-number-of-teams,False,99787,148268,1395,False,2,"Can you solve this real interview question? Count Number of Teams - There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

 * Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
 * A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).

Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:


Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 


Example 2:


Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.


Example 3:


Input: rating = [1,2,3,4]
Output: 4


 

Constraints:

 * n == rating.length
 * 3 <= n <= 1000
 * 1 <= rating[i] <= 105
 * All the integers in rating are unique.",Solutions (798),2.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-teams/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTeams(self, rating: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rating: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numTeams(rating)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTeams(self, rating: List[int]) -> int:
        count = 0
        for i in range(len(rating)):
            for j in range(i+1, len(rating)):
                for k in range(j+1, len(rating)):
                    if rating[i] < rating[j] < rating[k] or rating[i] > rating[j] > rating[k]:
                        count += 1
        return count"
False,0,0,1513,,Find All Good Strings,find-all-good-strings,False,5152,12175,1397,False,3,"Can you solve this real interview question? Find All Good Strings - Given the strings s1 and s2 of size n and the string evil, return the number of good strings.

A good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 109 + 7.

 

Example 1:


Input: n = 2, s1 = ""aa"", s2 = ""da"", evil = ""b""
Output: 51 
Explanation: There are 25 good strings starting with 'a': ""aa"",""ac"",""ad"",...,""az"". Then there are 25 good strings starting with 'c': ""ca"",""cc"",""cd"",...,""cz"" and finally there is one good string starting with 'd': ""da"". 


Example 2:


Input: n = 8, s1 = ""leetcode"", s2 = ""leetgoes"", evil = ""leet""
Output: 0 
Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix ""leet"", therefore, there is not any good string.


Example 3:


Input: n = 2, s1 = ""gx"", s2 = ""gz"", evil = ""x""
Output: 2


 

Constraints:

 * s1.length == n
 * s2.length == n
 * s1 <= s2
 * 1 <= n <= 500
 * 1 <= evil.length <= 50
 * All strings consist of lowercase English letters.",Solutions (88),391,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-good-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    evil: str = deserialize(""str"", read_line())
    ans = Solution().findGoodStrings(n, s1, s2, evil)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findGoodStrings(self, n: int, s1: str, s2: str, evil: str) -> int:
        MOD = 10**9 + 7
  
        def buildKMP(pat):
            m = len(pat)
            kmp = [0] * (m + 1)
            i, j = 0, -1
            kmp[0] = -1
            while i < m:
                while j >= 0 and pat[i] != pat[j]:
                    j = kmp[j]
                i += 1
                j += 1
                kmp[i] = j
            return kmp
        
        kmp = buildKMP(evil)
        def dfs(i, pre, prefixMatched, s1Pre, s2Pre):
            if prefixMatched:
                return 0
            
            if i == n:
                return 1
            
            a, b = 'a', 'z'
            if i < len(s1):
                a = s1[i]
            if i < len(s2):
                b = s2[i]
            
            res = 0
            for c in range(ord(a), ord(b) + 1):
                matchLength = prefixMatched
                while matchLength >= 0 and chr(c) != evil[matchLength]: 
                    matchLength = kmp[matchLength]
                if matchLength + 1 == len(evil):
                    continue
                
                prefixMatched = matchLength + 1 == len(evil)
                res += dfs(i + 1, pre * 26 + c - ord('a'), prefixMatched, s1 == s1[:i] + chr(c), s2Pre & (s2[:i] == s2Pre))
                res = res % MOD
            return res
        
        return dfs(0, 0, False, '', True) - 1
"
False,0,0,1514,minimum-value-to-get-positive-step-by-step-total,Minimum Value to Get Positive Step by Step Sum,minimum-value-to-get-positive-step-by-step-sum,False,95730,142163,1413,False,1,"Can you solve this real interview question? Minimum Value to Get Positive Step by Step Sum - Given an array of integers nums, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.

 

Example 1:


Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
step by step sum
startValue = 4 | startValue = 5 | nums
  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
  (4 +2 ) = 6  | (5 +2 ) = 7    |   2


Example 2:


Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 


Example 3:


Input: nums = [1,-2,-3]
Output: 5


 

Constraints:

 * 1 <= nums.length <= 100
 * -100 <= nums[i] <= 100",Solutions (1.3K),1.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minStartValue(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minStartValue(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minStartValue(self, nums: List[int]) -> int:
        min_val = 1
        cur_sum = 0
        
        for num in nums:
            cur_sum += num
            min_val = max(min_val, 1 - cur_sum)
        
        return min_val"
False,0,0,1515,,Find the Minimum Number of Fibonacci Numbers Whose Sum Is K,find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k,False,36519,55809,1414,False,2,"Can you solve this real interview question? Find the Minimum Number of Fibonacci Numbers Whose Sum Is K - Given an integer k, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:

 * F1 = 1
 * F2 = 1
 * Fn = Fn-1 + Fn-2 for n > 2.

It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.

 

Example 1:


Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.

Example 2:


Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.


Example 3:


Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.


 

Constraints:

 * 1 <= k <= 109",Solutions (487),884,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinFibonacciNumbers(self, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    ans = Solution().findMinFibonacciNumbers(k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinFibonacciNumbers(self, k: int) -> int:
        a, b = 1, 1
        fib = [a, b]
        while b < k:
            a, b = b, a + b
            fib.append(b)
        count = 0
        while k > 0:
            while fib[-1] > k:
                fib.pop()
            k -= fib[-1]
            count += 1
        return count"
False,0,0,1516,,The k-th Lexicographical String of All Happy Strings of Length n,the-k-th-lexicographical-string-of-all-happy-strings-of-length-n,False,31144,42963,1415,False,2,"Can you solve this real interview question? The k-th Lexicographical String of All Happy Strings of Length n - A happy string is a string that:

 * consists only of letters of the set ['a', 'b', 'c'].
 * s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).

For example, strings ""abc"", ""ac"", ""b"" and ""abcbabcbcb"" are all happy strings and strings ""aa"", ""baa"" and ""ababbc"" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

 

Example 1:


Input: n = 1, k = 3
Output: ""c""
Explanation: The list [""a"", ""b"", ""c""] contains all happy strings of length 1. The third string is ""c"".


Example 2:


Input: n = 1, k = 4
Output: """"
Explanation: There are only 3 happy strings of length 1.


Example 3:


Input: n = 3, k = 9
Output: ""cab""
Explanation: There are 12 different happy string of length 3 [""aba"", ""abc"", ""aca"", ""acb"", ""bab"", ""bac"", ""bca"", ""bcb"", ""cab"", ""cac"", ""cba"", ""cbc""]. You will find the 9th string = ""cab""


 

Constraints:

 * 1 <= n <= 10
 * 1 <= k <= 100",Solutions (710),833,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getHappyString(n, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def getHappyString(self, n: int, k: int) -> str:
        import itertools
        l = list(itertools.product('abc', repeat=n))
        happy_strings = []
        for s in l:
            if all(s[i] != s[i + 1] for i in range(len(s) - 1)):
                happy_strings.append(''.join(s))
        
        return happy_strings[k - 1] if k <= len(happy_strings) else """""
False,0,0,1517,restore-the-array,Restore The Array,restore-the-array,False,14683,38016,1416,False,3,"Can you solve this real interview question? Restore The Array - A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.

Given the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""1000"", k = 10000
Output: 1
Explanation: The only possible array is [1000]


Example 2:


Input: s = ""1000"", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.


Example 3:


Input: s = ""1317"", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only digits and does not contain leading zeros.
 * 1 <= k <= 109",Solutions (194),471,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/restore-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numberOfArrays(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        mod = 10**9 + 7
        n = len(s)
        dp = [0] * (n + 1)
        dp[0] = 1
        
        for i in range(1, n + 1):
            for j in range(i - 1, max(i - 1 - len(str(k)), -1), -1):
                if s[j] == '0':
                    continue
                num = int(s[j:i])
                if 1 <= num <= k:
                    dp[i] = (dp[i] + dp[j]) % mod
                    
        return dp[n]"
False,0,0,1519,,Minimum Subsequence in Non-Increasing Order,minimum-subsequence-in-non-increasing-order,False,60188,83287,1403,False,1,"Can you solve this real interview question? Minimum Subsequence in Non-Increasing Order - Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. 

If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. 

Note that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.

 

Example 1:


Input: nums = [4,3,10,9,8]
Output: [10,9] 
Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included. However, the subsequence [10,9] has the maximum total sum of its elements. 


Example 2:


Input: nums = [4,4,7,6,7]
Output: [7,7,6] 
Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to be returned in non-decreasing order.  


 

Constraints:

 * 1 <= nums.length <= 500
 * 1 <= nums[i] <= 100",Solutions (896),482,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSubsequence(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSubsequence(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def minSubsequence(self, nums: List[int]) -> List[int]:
        nums.sort(reverse=True)
        total_sum = sum(nums)
        sub_sum = 0
        result = []

        for num in nums:
            sub_sum += num
            result.append(num)
            if sub_sum > total_sum - sub_sum:
                return result"
False,0,0,1520,,Number of Steps to Reduce a Number in Binary Representation to One,number-of-steps-to-reduce-a-number-in-binary-representation-to-one,False,33589,63900,1404,False,2,"Can you solve this real interview question? Number of Steps to Reduce a Number in Binary Representation to One - Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

 * If the current number is even, you have to divide it by 2.

 * If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.

 

Example 1:


Input: s = ""1101""
Output: 6
Explanation: ""1101"" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  


Example 2:


Input: s = ""10""
Output: 1
Explanation: ""10"" corressponds to number 2 in their decimal representation.
Step 1) 2 is even, divide by 2 and obtain 1.  


Example 3:


Input: s = ""1""
Output: 0


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of characters '0' or '1'
 * s[0] == '1'",Solutions (475),670,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSteps(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numSteps(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSteps(self, s: str) -> int:
        res = 0
        num = int(s, 2)
        while num != 1:
            if num % 2 == 0:
                num //= 2
            else:
                num += 1
            res += 1
        return res"
False,0,0,1522,,Stone Game III,stone-game-iii,False,42315,71074,1406,False,3,"Can you solve this real interview question? Stone Game III - Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.

The score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.

Assume Alice and Bob play optimally.

Return ""Alice"" if Alice will win, ""Bob"" if Bob will win, or ""Tie"" if they will end the game with the same score.

 

Example 1:


Input: values = [1,2,3,7]
Output: ""Bob""
Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.


Example 2:


Input: values = [1,2,3,-9]
Output: ""Alice""
Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.
If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.
If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.
Remember that both play optimally so here Alice will choose the scenario that makes her win.


Example 3:


Input: values = [1,2,3,6]
Output: ""Tie""
Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.


 

Constraints:

 * 1 <= stoneValue.length <= 5 * 104
 * -1000 <= stoneValue[i] <= 1000",Solutions (376),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameIII(self, stoneValue: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    stoneValue: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameIII(stoneValue)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def stoneGameIII(self, stoneValue: List[int]) -> str:
        # implementation of the stoneGameIII function
        pass"
False,0,0,1524,,String Matching in an Array,string-matching-in-an-array,False,68634,107607,1408,False,1,"Can you solve this real interview question? String Matching in an Array - Given an array of string words, return all strings in words that is a substring of another word. You can return the answer in any order.

A substring is a contiguous sequence of characters within a string

 

Example 1:


Input: words = [""mass"",""as"",""hero"",""superhero""]
Output: [""as"",""hero""]
Explanation: ""as"" is substring of ""mass"" and ""hero"" is substring of ""superhero"".
[""hero"",""as""] is also a valid answer.


Example 2:


Input: words = [""leetcode"",""et"",""code""]
Output: [""et"",""code""]
Explanation: ""et"", ""code"" are substring of ""leetcode"".


Example 3:


Input: words = [""blue"",""green"",""bu""]
Output: []
Explanation: No string of words is substring of another string.


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 30
 * words[i] contains only lowercase English letters.
 * All the strings of words are unique.",Solutions (922),736,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/string-matching-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().stringMatching(words)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def stringMatching(self, words: List[str]) -> List[str]:
        substrings = []
        for i in range(len(words)):
            for j in range(len(words)):
                if i != j and words[i] in words[j]:
                    substrings.append(words[i])
                    break
        return substrings"
False,0,0,1525,,Queries on a Permutation With Key,queries-on-a-permutation-with-key,False,42835,51331,1409,False,2,"Can you solve this real interview question? Queries on a Permutation With Key - Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:

 * In the beginning, you have the permutation P=[1,2,3,...,m].
 * For the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P. Notice that the position of queries[i] in P is the result for queries[i].

Return an array containing the result for the given queries.

 

Example 1:


Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1] 
Explanation: The queries are processed as follow: 
For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. 
For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. 
For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. 
For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. 
Therefore, the array containing the result is [2,1,2,1].  


Example 2:


Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]


Example 3:


Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]


 

Constraints:

 * 1 <= m <= 10^3
 * 1 <= queries.length <= m
 * 1 <= queries[i] <= m",Solutions (658),424,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/queries-on-a-permutation-with-key/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def processQueries(self, queries: List[int], m: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    ans = Solution().processQueries(queries, m)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def processQueries(self, queries: List[int], m: int) -> List[int]:
        P = list(range(1, m+1))
        result = []
        for q in queries:
            idx = P.index(q)
            result.append(idx)
            P = [P.pop(idx)] + P
        return result"
False,0,0,1526,,HTML Entity Parser,html-entity-parser,False,21230,41068,1410,False,2,"Can you solve this real interview question? HTML Entity Parser - HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:

 * Quotation Mark: the entity is &quot; and symbol character is "".
 * Single Quote Mark: the entity is &apos; and symbol character is '.
 * Ampersand: the entity is &amp; and symbol character is &.
 * Greater Than Sign: the entity is &gt; and symbol character is >.
 * Less Than Sign: the entity is &lt; and symbol character is <.
 * Slash: the entity is &frasl; and symbol character is /.

Given the input text string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.

 

Example 1:


Input: text = ""&amp; is an HTML entity but &ambassador; is not.""
Output: ""& is an HTML entity but &ambassador; is not.""
Explanation: The parser will replace the &amp; entity by &


Example 2:


Input: text = ""and I quote: &quot;...&quot;""
Output: ""and I quote: \""...\""""


 

Constraints:

 * 1 <= text.length <= 105
 * The string may contain any possible characters out of all the 256 ASCII characters.",Solutions (385),157,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/html-entity-parser/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def entityParser(self, text: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().entityParser(text)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def entityParser(self, text: str) -> str:
        return text.replace(""&quot;"", ""\"""").replace(""&apos;"", ""'"").replace(""&amp;"", ""&"").replace(""&gt;"", "">"").replace(""&lt;"", ""<"").replace(""&frasl;"", ""/"")"
False,0,0,1527,,Number of Ways to Paint N × 3 Grid,number-of-ways-to-paint-n-3-grid,False,28509,45644,1411,False,3,"Can you solve this real interview question? Number of Ways to Paint N × 3 Grid - You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/03/26/e1.png]


Input: n = 1
Output: 12
Explanation: There are 12 possible way to paint the grid as shown.


Example 2:


Input: n = 5000
Output: 30228214


 

Constraints:

 * n == grid.length
 * 1 <= n <= 5000",Solutions (298),945,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfWays(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numOfWays(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfWays(self, n: int) -> int:
        mod = 1000000007
        a = b = 6
        for i in range(1, n):
            a, b = (2 * a + 2 * b) % mod, (2 * a + 3 * b) % mod
        return (a + b) % mod"
False,0,0,1528,kids-with-the-greatest-number-of-candies,Kids With the Greatest Number of Candies,kids-with-the-greatest-number-of-candies,False,390655,447737,1431,False,1,"Can you solve this real interview question? Kids With the Greatest Number of Candies - There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

Note that multiple kids can have the greatest number of candies.

 

Example 1:


Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: If you give all extraCandies to:
- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.
- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.
- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.
- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.
- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.


Example 2:


Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy.
Kid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.


Example 3:


Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]


 

Constraints:

 * n == candies.length
 * 2 <= n <= 100
 * 1 <= candies[i] <= 100
 * 1 <= extraCandies <= 50",Solutions (3.8K),2.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    candies: List[int] = deserialize(""List[int]"", read_line())
    extraCandies: int = deserialize(""int"", read_line())
    ans = Solution().kidsWithCandies(candies, extraCandies)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:
        max_candies = max(candies)
        return [candy + extraCandies >= max_candies for candy in candies]"
False,0,0,1529,,Max Difference You Can Get From Changing an Integer,max-difference-you-can-get-from-changing-an-integer,False,14429,34114,1432,False,2,"Can you solve this real interview question? Max Difference You Can Get From Changing an Integer - You are given an integer num. You will apply the following steps exactly two times:

 * Pick a digit x (0 <= x <= 9).
 * Pick another digit y (0 <= y <= 9). The digit y can be equal to x.
 * Replace all the occurrences of x in the decimal representation of num by y.
 * The new integer cannot have any leading zeros, also the new integer cannot be 0.

Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b.

 

Example 1:


Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888


Example 2:


Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8


 

Constraints:

 * 1 <= num <= 108",Solutions (251),180,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDiff(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().maxDiff(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDiff(self, num: int) -> int:
        s = str(num)
        a = max(int(s.replace(d, '9') for d in s if d != '0'))
        b = min(int(s.replace(d, '1') for d in s[0] + s[1:] if d != s[0]))
        return a - b"
False,0,0,1530,,Check If a String Can Break Another String,check-if-a-string-can-break-another-string,False,35303,51234,1433,False,2,"Can you solve this real interview question? Check If a String Can Break Another String - Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.

A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.

 

Example 1:


Input: s1 = ""abc"", s2 = ""xya""
Output: true
Explanation: ""ayx"" is a permutation of s2=""xya"" which can break to string ""abc"" which is a permutation of s1=""abc"".


Example 2:


Input: s1 = ""abe"", s2 = ""acd""
Output: false 
Explanation: All permutations for s1=""abe"" are: ""abe"", ""aeb"", ""bae"", ""bea"", ""eab"" and ""eba"" and all permutation for s2=""acd"" are: ""acd"", ""adc"", ""cad"", ""cda"", ""dac"" and ""dca"". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.


Example 3:


Input: s1 = ""leetcodee"", s2 = ""interview""
Output: true


 

Constraints:

 * s1.length == n
 * s2.length == n
 * 1 <= n <= 10^5
 * All strings consist of lowercase English letters.",Solutions (568),651,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-a-string-can-break-another-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkIfCanBreak(self, s1: str, s2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().checkIfCanBreak(s1, s2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkIfCanBreak(self, s1: str, s2: str) -> bool:
        s1_sorted = sorted(s1)
        s2_sorted = sorted(s2)
        return all(a >= b for a, b in zip(s1_sorted, s2_sorted)) or all(a >= b for a, b in zip(s2_sorted, s1_sorted))"
False,0,0,1531,,Number of Ways to Wear Different Hats to Each Other,number-of-ways-to-wear-different-hats-to-each-other,False,11459,26627,1434,False,3,"Can you solve this real interview question? Number of Ways to Wear Different Hats to Each Other - There are n people and 40 types of hats labeled from 1 to 40.

Given a 2D integer array hats, where hats[i] is a list of all hats preferred by the ith person.

Return the number of ways that the n people wear different hats to each other.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: hats = [[3,4],[4,5],[5]]
Output: 1
Explanation: There is only one way to choose hats given the conditions. 
First person choose hat 3, Second person choose hat 4 and last one hat 5.


Example 2:


Input: hats = [[3,5,1],[3,5]]
Output: 4
Explanation: There are 4 ways to choose hats:
(3,5), (5,3), (1,3) and (1,5)


Example 3:


Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
Output: 24
Explanation: Each person can choose hats labeled from 1 to 4.
Number of Permutations of (1,2,3,4) = 24.


 

Constraints:

 * n == hats.length
 * 1 <= n <= 10
 * 1 <= hats[i].length <= 40
 * 1 <= hats[i][j] <= 40
 * hats[i] contains a list of unique integers.",Solutions (156),747,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberWays(self, hats: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    hats: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numberWays(hats)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberWays(self, hats: List[List[int]]) -> int:
        MOD = 10**9 + 7
        n = len(hats)
        all_hats = (1 << 40) - 1
        dp = [0] * (1 << 40)
        dp[0] = 1

        for i in range(1, 41):
            people_with_hat = defaultdict(int)
            for person, hats_list in enumerate(hats):
                for hat in hats_list:
                    people_with_hat[hat] |= (1 << person)

            new_dp = dp[:]
            for state in range(all_hats, -1, -1):
                for person in range(n):
                    if people_with_hat.get(i, 0) & (1 << person):
                        new_dp[state | (1 << i)] += dp[state]
                        new_dp[state | (1 << i)] %= MOD
            dp = new_dp
        
        return dp[all_hats]


# Note: Make sure to import the necessary libraries (e.g. List, defaultdict) at the beginning of the script."
False,0,0,1532,,Reformat The String,reformat-the-string,False,49463,90260,1417,False,1,"Can you solve this real interview question? Reformat The String - You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.

 

Example 1:


Input: s = ""a0b1c2""
Output: ""0a1b2c""
Explanation: No two adjacent characters have the same type in ""0a1b2c"". ""a0b1c2"", ""0a1b2c"", ""0c2a1b"" are also valid permutations.


Example 2:


Input: s = ""leetcode""
Output: """"
Explanation: ""leetcode"" has only characters so we cannot separate them by digits.


Example 3:


Input: s = ""1229857369""
Output: """"
Explanation: ""1229857369"" has only digits so we cannot separate them by characters.


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of only lowercase English letters and/or digits.",Solutions (757),500,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/reformat-the-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reformat(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().reformat(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reformat(self, s: str) -> str:
        import random
        letters = []
        digits = []
        
        for char in s:
            if char.isalpha():
                letters.append(char)
            else:
                digits.append(char)
        
        if abs(len(letters) - len(digits)) > 1:
            return """"
        
        res = ''
        
        if len(letters) < len(digits):
            letters, digits = digits, letters
        
        while letters and digits:
            res += letters.pop()
            res += digits.pop()
        
        if letters:
            res += letters.pop()
        
        if digits:
            res = digits.pop() + res
        
        return res"
False,0,0,1533,,Display Table of Food Orders in a Restaurant,display-table-of-food-orders-in-a-restaurant,False,23054,31106,1418,False,2,"Can you solve this real interview question? Display Table of Food Orders in a Restaurant - Given the array orders, which represents the orders that customers have done in a restaurant. More specifically orders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi is the table customer sit at, and foodItemi is the item customer orders.

Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.

 

Example 1:


Input: orders = [[""David"",""3"",""Ceviche""],[""Corina"",""10"",""Beef Burrito""],[""David"",""3"",""Fried Chicken""],[""Carla"",""5"",""Water""],[""Carla"",""5"",""Ceviche""],[""Rous"",""3"",""Ceviche""]]
Output: [[""Table"",""Beef Burrito"",""Ceviche"",""Fried Chicken"",""Water""],[""3"",""0"",""2"",""1"",""0""],[""5"",""0"",""1"",""0"",""1""],[""10"",""1"",""0"",""0"",""0""]] 
Explanation:
The displaying table looks like:
Table,Beef Burrito,Ceviche,Fried Chicken,Water
3    ,0           ,2      ,1            ,0
5    ,0           ,1      ,0            ,1
10   ,1           ,0      ,0            ,0
For the table 3: David orders ""Ceviche"" and ""Fried Chicken"", and Rous orders ""Ceviche"".
For the table 5: Carla orders ""Water"" and ""Ceviche"".
For the table 10: Corina orders ""Beef Burrito"". 


Example 2:


Input: orders = [[""James"",""12"",""Fried Chicken""],[""Ratesh"",""12"",""Fried Chicken""],[""Amadeus"",""12"",""Fried Chicken""],[""Adam"",""1"",""Canadian Waffles""],[""Brianna"",""1"",""Canadian Waffles""]]
Output: [[""Table"",""Canadian Waffles"",""Fried Chicken""],[""1"",""2"",""0""],[""12"",""0"",""3""]] 
Explanation: 
For the table 1: Adam and Brianna order ""Canadian Waffles"".
For the table 12: James, Ratesh and Amadeus order ""Fried Chicken"".


Example 3:


Input: orders = [[""Laura"",""2"",""Bean Burrito""],[""Jhon"",""2"",""Beef Burrito""],[""Melissa"",""2"",""Soda""]]
Output: [[""Table"",""Bean Burrito"",""Beef Burrito"",""Soda""],[""2"",""1"",""1"",""1""]]


 

Constraints:

 * 1 <= orders.length <= 5 * 10^4
 * orders[i].length == 3
 * 1 <= customerNamei.length, foodItemi.length <= 20
 * customerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.
 * tableNumberi is a valid integer between 1 and 500.",Solutions (434),299,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:

# @lc code=end

if __name__ == ""__main__"":
    orders: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().displayTable(orders)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def displayTable(self, orders: List[List[str]]) -> List[List[str]]:
        from collections import defaultdict
        
        table_dict = defaultdict(lambda: defaultdict(int))
        food_items = set()
        
        for order in orders:
            table_number = order[1]
            food_item = order[2]
            food_items.add(food_item)
            table_dict[table_number][food_item] += 1
        
        food_items = sorted(food_items)
        result = [[""Table""] + food_items]
        
        for table_number in sorted(table_dict, key=int):
            temp = [table_number]
            for food_item in food_items:
                temp.append(str(table_dict[table_number][food_item]))
            result.append(temp)
        
        return result"
False,0,0,1534,,Minimum Number of Frogs Croaking,minimum-number-of-frogs-croaking,False,35565,70866,1419,False,2,"Can you solve this real interview question? Minimum Number of Frogs Croaking - You are given the string croakOfFrogs, which represents a combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple ""croak"" are mixed.

Return the minimum number of different frogs to finish all the croaks in the given string.

A valid ""croak"" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid ""croak"" return -1.

 

Example 1:


Input: croakOfFrogs = ""croakcroak""
Output: 1 
Explanation: One frog yelling ""croak"" twice.


Example 2:


Input: croakOfFrogs = ""crcoakroak""
Output: 2 
Explanation: The minimum number of frogs is two. 
The first frog could yell ""crcoakroak"".
The second frog could yell later ""crcoakroak"".


Example 3:


Input: croakOfFrogs = ""croakcrook""
Output: -1
Explanation: The given string is an invalid combination of ""croak"" from different frogs.


 

Constraints:

 * 1 <= croakOfFrogs.length <= 105
 * croakOfFrogs is either 'c', 'r', 'o', 'a', or 'k'.",Solutions (418),846,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-frogs-croaking/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    croakOfFrogs: str = deserialize(""str"", read_line())
    ans = Solution().minNumberOfFrogs(croakOfFrogs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minNumberOfFrogs(self, croakOfFrogs: str) -> int:
        cnt = 0
        res = 0
        for char in croakOfFrogs:
            if char == 'c':
                cnt += 1
                res = max(res, cnt)
            elif char == 'k' or char == 'a' or char == 'o' or char == 'r':
                index = ""croak"".index(char)
                if cnt == 0 or ""croak""[index-1] != croakOfFrogs[croakOfFrogs.index(char) - cnt]:
                    return -1
                cnt -= 1
            else:
                return -1
        return res if cnt == 0 else -1"
False,0,0,1535,,Build Array Where You Can Find The Maximum Exactly K Comparisons,build-array-where-you-can-find-the-maximum-exactly-k-comparisons,False,11258,17839,1420,False,3,"Can you solve this real interview question? Build Array Where You Can Find The Maximum Exactly K Comparisons - You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:

[https://assets.leetcode.com/uploads/2020/04/02/e.png]

You should build the array arr which has the following properties:

 * arr has exactly n integers.
 * 1 <= arr[i] <= m where (0 <= i < n).
 * After applying the mentioned algorithm to arr, the value search_cost is equal to k.

Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:


Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]


Example 2:


Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.


Example 3:


Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]


 

Constraints:

 * 1 <= n <= 50
 * 1 <= m <= 100
 * 0 <= k <= n",Solutions (179),471,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    m: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numOfArrays(n, m, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfArrays(self, n: int, m: int, k: int) -> int:
        MOD = 10**9 + 7
        dp = [[[0] * (k + 1) for _ in range(m + 1)] for _ in range(n + 1)]
        
        for j in range(1, m + 1):
            dp[1][j][1] = 1
        
        for i in range(2, n + 1):
            for j in range(1, m + 1):
                for kk in range(1, k + 1):
                    dp[i][j][kk] += j * dp[i - 1][j][kk]
                    dp[i][j][kk] %= MOD
                    
                    for jj in range(1, j):
                        dp[i][j][kk] += dp[i - 1][jj][kk - 1]
                        dp[i][j][kk] %= MOD
        
        return sum(dp[n][j][k] for j in range(1, m + 1)) % MOD"
False,0,0,1537,,Maximum Score After Splitting a String,maximum-score-after-splitting-a-string,False,45540,78547,1422,False,1,"Can you solve this real interview question? Maximum Score After Splitting a String - Given a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.

 

Example 1:


Input: s = ""011101""
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = ""0"" and right = ""11101"", score = 1 + 4 = 5 
left = ""01"" and right = ""1101"", score = 1 + 3 = 4 
left = ""011"" and right = ""101"", score = 1 + 2 = 3 
left = ""0111"" and right = ""01"", score = 1 + 1 = 2 
left = ""01110"" and right = ""1"", score = 2 + 1 = 3


Example 2:


Input: s = ""00111""
Output: 5
Explanation: When left = ""00"" and right = ""111"", we get the maximum score = 2 + 3 = 5


Example 3:


Input: s = ""1111""
Output: 3


 

Constraints:

 * 2 <= s.length <= 500
 * The string s consists of characters '0' and '1' only.",Solutions (673),582,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-after-splitting-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScore(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxScore(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScore(self, s: str) -> int:
        max_score = 0
        for i in range(1, len(s)):
            left = s[:i]
            right = s[i:]
            score = left.count('0') + right.count('1')
            max_score = max(max_score, score)
        return max_score"
False,0,0,1538,maximum-points-you-can-obtain-from-cards,Maximum Points You Can Obtain from Cards,maximum-points-you-can-obtain-from-cards,False,217435,416118,1423,False,2,"Can you solve this real interview question? Maximum Points You Can Obtain from Cards - There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array cardPoints and the integer k, return the maximum score you can obtain.

 

Example 1:


Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.


Example 2:


Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.


Example 3:


Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.


 

Constraints:

 * 1 <= cardPoints.length <= 105
 * 1 <= cardPoints[i] <= 104
 * 1 <= k <= cardPoints.length",Solutions (2.3K),5.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cardPoints: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxScore(cardPoints, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScore(self, cardPoints: List[int], k: int) -> int:
        n = len(cardPoints)
        window = n - k
        total_sum = sum(cardPoints)
        min_sum = sum(cardPoints[:window])
        curr_sum = min_sum
        
        for i in range(window, n):
            curr_sum += cardPoints[i] - cardPoints[i - window]
            min_sum = min(min_sum, curr_sum)
            
        return total_sum - min_sum"
False,0,0,1539,,Diagonal Traverse II,diagonal-traverse-ii,False,47348,93854,1424,False,2,"Can you solve this real interview question? Diagonal Traverse II - Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/08/sample_1_1784.png]


Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]


Example 2:

[https://assets.leetcode.com/uploads/2020/04/08/sample_2_1784.png]


Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i].length <= 105
 * 1 <= sum(nums[i].length) <= 105
 * 1 <= nums[i][j] <= 105",Solutions (555),1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/diagonal-traverse-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findDiagonalOrder(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findDiagonalOrder(self, nums: List[List[int]]) -> List[int]:
        diagonal_map = {}
        for i in range(len(nums)):
            for j in range(len(nums[i])):
                if i + j not in diagonal_map:
                    diagonal_map[i + j] = []
                diagonal_map[i + j].append(nums[i][j])
        
        result = []
        for k in sorted(diagonal_map.keys()):
            result.extend(reversed(diagonal_map[k]))
        
        return result"
False,0,0,1542,consecutive-characters,Consecutive Characters,consecutive-characters,False,137859,225044,1446,False,1,"Can you solve this real interview question? Consecutive Characters - The power of the string is the maximum length of a non-empty substring that contains only one unique character.

Given a string s, return the power of s.

 

Example 1:


Input: s = ""leetcode""
Output: 2
Explanation: The substring ""ee"" is of length 2 with the character 'e' only.


Example 2:


Input: s = ""abbcccddddeeeeedcba""
Output: 5
Explanation: The substring ""eeeee"" is of length 5 with the character 'e' only.


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of only lowercase English letters.",Solutions (1.8K),1.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/consecutive-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPower(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxPower(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxPower(self, s: str) -> int:
        res = cur = 1
        for i in range(1, len(s)):
            if s[i] == s[i - 1]:
                cur += 1
            else:
                res = max(res, cur)
                cur = 1
        return max(res, cur)"
False,0,0,1543,,Simplified Fractions,simplified-fractions,False,26126,40138,1447,False,2,"Can you solve this real interview question? Simplified Fractions - Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.

 

Example 1:


Input: n = 2
Output: [""1/2""]
Explanation: ""1/2"" is the only unique fraction with a denominator less-than-or-equal-to 2.


Example 2:


Input: n = 3
Output: [""1/2"",""1/3"",""2/3""]


Example 3:


Input: n = 4
Output: [""1/2"",""1/3"",""1/4"",""2/3"",""3/4""]
Explanation: ""2/4"" is not a simplified fraction because it can be simplified to ""1/2"".


 

Constraints:

 * 1 <= n <= 100",Solutions (360),347,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/simplified-fractions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def simplifiedFractions(self, n: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().simplifiedFractions(n)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def simplifiedFractions(self, n: int) -> List[str]:
        res = []
        for i in range(2, n + 1):
            for j in range(1, i):
                if math.gcd(i, j) == 1:
                    res.append(f""{j}/{i}"")
        return res"
False,0,0,1545,,Form Largest Integer With Digits That Add up to Target,form-largest-integer-with-digits-that-add-up-to-target,False,14673,30741,1449,False,3,"Can you solve this real interview question? Form Largest Integer With Digits That Add up to Target - Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:

 * The cost of painting a digit (i + 1) is given by cost[i] (0-indexed).
 * The total cost used must be equal to target.
 * The integer does not have 0 digits.

Since the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return ""0"".

 

Example 1:


Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
Output: ""7772""
Explanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(""7772"") = 2*3+ 3*1 = 9. You could also paint ""977"", but ""7772"" is the largest number.
Digit    cost
  1  ->   4
  2  ->   3
  3  ->   2
  4  ->   5
  5  ->   6
  6  ->   7
  7  ->   2
  8  ->   5
  9  ->   5


Example 2:


Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
Output: ""85""
Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(""85"") = 7 + 5 = 12.


Example 3:


Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
Output: ""0""
Explanation: It is impossible to paint any integer with total cost equal to target.


 

Constraints:

 * cost.length == 9
 * 1 <= cost[i], target <= 5000",Solutions (181),601,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestNumber(self, cost: List[int], target: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    cost: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().largestNumber(cost, target)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestNumber(self, cost: List[int], target: int) -> str:
        dp = [""""] + [""0""] * target
        for t in range(1, target + 1):
            for i, c in enumerate(cost):
                if t >= c and dp[t - c] != ""0"":
                    dp[t] = max(dp[t], str(i + 1) + dp[t - c], key=lambda x: (len(x), x))
        return dp[target]"
False,0,0,1547,,Destination City,destination-city,False,122517,158112,1436,False,1,"Can you solve this real interview question? Destination City - You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.

 

Example 1:


Input: paths = [[""London"",""New York""],[""New York"",""Lima""],[""Lima"",""Sao Paulo""]]
Output: ""Sao Paulo"" 
Explanation: Starting at ""London"" city you will reach ""Sao Paulo"" city which is the destination city. Your trip consist of: ""London"" -> ""New York"" -> ""Lima"" -> ""Sao Paulo"".


Example 2:


Input: paths = [[""B"",""C""],[""D"",""B""],[""C"",""A""]]
Output: ""A""
Explanation: All possible trips are: 
""D"" -> ""B"" -> ""C"" -> ""A"". 
""B"" -> ""C"" -> ""A"". 
""C"" -> ""A"". 
""A"". 
Clearly the destination city is ""A"".


Example 3:


Input: paths = [[""A"",""Z""]]
Output: ""Z""


 

Constraints:

 * 1 <= paths.length <= 100
 * paths[i].length == 2
 * 1 <= cityAi.length, cityBi.length <= 10
 * cityAi != cityBi
 * All strings consist of lowercase and uppercase English letters and the space character.",Solutions (1.7K),1.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/destination-city/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    paths: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().destCity(paths)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def destCity(self, paths: List[List[str]]) -> str:
        destination = paths[0][1]
        while any(destination == path[0] for path in paths):
            for path in paths:
                if path[0] == destination:
                    destination = path[1]
                    break
        return destination"
False,0,0,1548,check-if-all-ones-are-at-least-k-places-away,Check If All 1's Are at Least Length K Places Away,check-if-all-1s-are-at-least-length-k-places-away,False,66143,112524,1437,False,1,"Can you solve this real interview question? Check If All 1's Are at Least Length K Places Away - Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png]


Input: nums = [1,0,0,0,1,0,0,1], k = 2
Output: true
Explanation: Each of the 1s are at least 2 places away from each other.


Example 2:

[https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png]


Input: nums = [1,0,0,1,0,1], k = 2
Output: false
Explanation: The second 1 and third 1 are only one apart from each other.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= k <= nums.length
 * nums[i] is 0 or 1",Solutions (900),530,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kLengthApart(self, nums: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kLengthApart(nums, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def kLengthApart(self, nums: List[int], k: int) -> bool:
        prev = -1
        for i in range(len(nums)):
            if nums[i] == 1:
                if prev != -1 and i - prev <= k:
                    return False
                prev = i
        return True"
False,0,0,1549,,Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit,longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit,False,107876,223405,1438,False,2,"Can you solve this real interview question? Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit - Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.

 

Example 1:


Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.


Example 2:


Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.


Example 3:


Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 0 <= limit <= 109",Solutions (681),2.9K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    limit: int = deserialize(""int"", read_line())
    ans = Solution().longestSubarray(nums, limit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        left = 0
        right = 0
        min_queue = deque()
        max_queue = deque()
        result = 0
        
        while right < len(nums):
            while min_queue and nums[right] < min_queue[-1]:
                min_queue.pop()
            min_queue.append(nums[right])
            
            while max_queue and nums[right] > max_queue[-1]:
                max_queue.pop()
            max_queue.append(nums[right])
            
            while max_queue[0] - min_queue[0] > limit:
                if nums[left] == min_queue[0]:
                    min_queue.popleft()
                if nums[left] == max_queue[0]:
                    max_queue.popleft()
                left += 1
            
            result = max(result, right - left + 1)
            right += 1
        
        return result"
False,0,0,1550,,Find the Kth Smallest Sum of a Matrix With Sorted Rows,find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows,False,28538,46484,1439,False,3,"Can you solve this real interview question? Find the Kth Smallest Sum of a Matrix With Sorted Rows - You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.

You are allowed to choose exactly one element from each row to form an array.

Return the kth smallest array sum among all possible arrays.

 

Example 1:


Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.


Example 2:


Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17


Example 3:


Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  


 

Constraints:

 * m == mat.length
 * n == mat.length[i]
 * 1 <= m, n <= 40
 * 1 <= mat[i][j] <= 5000
 * 1 <= k <= min(200, nm)
 * mat[i] is a non-decreasing array.",Solutions (239),1.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthSmallest(self, mat: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthSmallest(mat, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kthSmallest(self, mat: List[List[int]], k: int) -> int:
        import heapq
        
        def countArrays(row_index, sum_so_far, k):
            if row_index == len(mat):
                if k == 1:
                    heapq.heappush(min_heap, sum_so_far)
                return
            
            for num in mat[row_index]:
                if len(min_heap) == k and num + sum_so_far >= min_heap[0]:
                    break
                countArrays(row_index + 1, num + sum_so_far, k)
        
        min_heap = []
        countArrays(0, 0, k)
        
        return min_heap[0]"
False,0,0,1552,,Build an Array With Stack Operations,build-an-array-with-stack-operations,False,72151,100505,1441,False,2,"Can you solve this real interview question? Build an Array With Stack Operations - You are given an integer array target and an integer n.

You have an empty stack with the two following operations:

 * ""Push"": pushes an integer to the top of the stack.
 * ""Pop"": removes the integer on the top of the stack.

You also have a stream of the integers in the range [1, n].

Use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. You should follow the following rules:

 * If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.
 * If the stack is not empty, pop the integer at the top of the stack.
 * If, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack.

Return the stack operations needed to build target following the mentioned rules. If there are multiple valid answers, return any of them.

 

Example 1:


Input: target = [1,3], n = 3
Output: [""Push"",""Push"",""Pop"",""Push""]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Pop the integer on the top of the stack. s = [1].
Read 3 from the stream and push it to the stack. s = [1,3].


Example 2:


Input: target = [1,2,3], n = 3
Output: [""Push"",""Push"",""Push""]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Read 3 from the stream and push it to the stack. s = [1,2,3].


Example 3:


Input: target = [1,2], n = 4
Output: [""Push"",""Push""]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Since the stack (from the bottom to the top) is equal to target, we stop the stack operations.
The answers that read integer 3 from the stream are not accepted.


 

Constraints:

 * 1 <= target.length <= 100
 * 1 <= n <= 100
 * 1 <= target[i] <= n
 * target is strictly increasing.",Solutions (1.4K),163,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/build-an-array-with-stack-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def buildArray(self, target: List[int], n: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    target: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().buildArray(target, n)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def buildArray(self, target: List[int], n: int) -> List[str]:
        result = []
        curr = 1
        for num in target:
            while curr < num:
                result.append(""Push"")
                result.append(""Pop"")
                curr += 1
            result.append(""Push"")
            curr += 1
        return result"
False,0,0,1553,,Count Triplets That Can Form Two Arrays of Equal XOR,count-triplets-that-can-form-two-arrays-of-equal-xor,False,31476,41398,1442,False,2,"Can you solve this real interview question? Count Triplets That Can Form Two Arrays of Equal XOR - Given an array of integers arr.

We want to select three indices i, j and k where (0 <= i < j <= k < arr.length).

Let's define a and b as follows:

 * a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
 * b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]

Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (i, j and k) Where a == b.

 

Example 1:


Input: arr = [2,3,1,6,7]
Output: 4
Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)


Example 2:


Input: arr = [1,1,1,1,1]
Output: 10


 

Constraints:

 * 1 <= arr.length <= 300
 * 1 <= arr[i] <= 108",Solutions (318),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countTriplets(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countTriplets(self, arr: List[int]) -> int:
        count = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                a = arr[i] 
                for k in range(j, len(arr)):
                    b = arr[j] 
                    if a == b:
                        count += 1
        return count"
False,0,0,1554,minimum-time-to-collect-all-apples-in-a-tree,Minimum Time to Collect All Apples in a Tree,minimum-time-to-collect-all-apples-in-a-tree,False,98170,156393,1443,False,2,"Can you solve this real interview question? Minimum Time to Collect All Apples in a Tree - Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_1.png]


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  


Example 2:

[https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_2.png]


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  


Example 3:


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0


 

Constraints:

 * 1 <= n <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai < bi <= n - 1
 * hasApple.length == n",Solutions (1.5K),3.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    hasApple: List[bool] = deserialize(""List[bool]"", read_line())
    ans = Solution().minTime(n, edges, hasApple)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minTime(self, n: int, edges: List[List[int]], hasApple: List[bool]) -> int:
        # Your code here"
False,0,0,1555,number-of-ways-of-cutting-a-pizza,Number of Ways of Cutting a Pizza,number-of-ways-of-cutting-a-pizza,False,25516,45542,1444,False,3,"Can you solve this real interview question? Number of Ways of Cutting a Pizza - Given a rectangular pizza represented as a rows x cols matrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts. 

For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.

Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png]


Input: pizza = [""A.."",""AAA"",""...""], k = 3
Output: 3 
Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.


Example 2:


Input: pizza = [""A.."",""AA."",""...""], k = 3
Output: 1


Example 3:


Input: pizza = [""A.."",""A.."",""...""], k = 1
Output: 1


 

Constraints:

 * 1 <= rows, cols <= 50
 * rows == pizza.length
 * cols == pizza[i].length
 * 1 <= k <= 10
 * pizza consists of characters 'A' and '.' only.",Solutions (224),727,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def ways(self, pizza: List[str], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    pizza: List[str] = deserialize(""List[str]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().ways(pizza, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def ways(self, pizza: List[str], k: int) -> int:
        MOD = 10**9 + 7
        rows, cols = len(pizza), len(pizza[0])
        
        dp = [[[0] * (k) for _ in range(cols)] for _ in range(rows)]
        
        prefix_sum = [[0] * (cols+1) for _ in range(rows+1)]
        
        for i in range(rows-1, -1, -1):
            for j in range(cols-1, -1, -1):
                prefix_sum[i][j] = prefix_sum[i+1][j] + prefix_sum[i][j+1] - prefix_sum[i+1][j+1] + (pizza[i][j] == 'A')
                
        def hasApple(x1, y1, x2, y2):
            return prefix_sum[x1][y1] - prefix_sum[x2][y1] - prefix_sum[x1][y2] + prefix_sum[x2][y2] > 0
        
        for i in range(rows):
            for j in range(cols):
                dp[i][j][0] = hasApple(i, j, rows, cols)
        
        for kk in range(1, k):
            for i in range(rows-1, -1, -1):
                for j in range(cols-1, -1, -1):
                    for x in range(i+1, rows):
                        if hasApple(i, j, x, cols):
                            dp[i][j][kk] = (dp[i][j][kk] + dp[x][j][kk-1]) % MOD
                    for y in range(j+1, cols):
                        if hasApple(i, j, rows, y):
                            dp[i][j][kk] = (dp[i][j][kk] + dp[i][y][kk-1]) % MOD
        
        return dp[0][0][k-1]"
False,0,0,1556,,Make Two Arrays Equal by Reversing Subarrays,make-two-arrays-equal-by-reversing-subarrays,False,104262,144447,1460,False,1,"Can you solve this real interview question? Make Two Arrays Equal by Reversing Subarrays - You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty subarray of arr and reverse it. You are allowed to make any number of steps.

Return true if you can make arr equal to target or false otherwise.

 

Example 1:


Input: target = [1,2,3,4], arr = [2,4,1,3]
Output: true
Explanation: You can follow the next steps to convert arr to target:
1- Reverse subarray [2,4,1], arr becomes [1,4,2,3]
2- Reverse subarray [4,2], arr becomes [1,2,4,3]
3- Reverse subarray [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, this is not the only way to do so.


Example 2:


Input: target = [7], arr = [7]
Output: true
Explanation: arr is equal to target without any reverses.


Example 3:


Input: target = [3,7,9], arr = [3,7,11]
Output: false
Explanation: arr does not have value 9 and it can never be converted to target.


 

Constraints:

 * target.length == arr.length
 * 1 <= target.length <= 1000
 * 1 <= target[i] <= 1000
 * 1 <= arr[i] <= 1000",Solutions (1.3K),911,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/make-two-arrays-equal-by-reversing-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    target: List[int] = deserialize(""List[int]"", read_line())
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canBeEqual(target, arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canBeEqual(self, target: List[int], arr: List[int]) -> bool:
        return sorted(target) == sorted(arr)"
False,0,0,1557,check-if-a-string-contains-all-binary-codes-of-size-k,Check If a String Contains All Binary Codes of Size K,check-if-a-string-contains-all-binary-codes-of-size-k,False,108434,191503,1461,False,2,"Can you solve this real interview question? Check If a String Contains All Binary Codes of Size K - Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.

 

Example 1:


Input: s = ""00110110"", k = 2
Output: true
Explanation: The binary codes of length 2 are ""00"", ""01"", ""10"" and ""11"". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.


Example 2:


Input: s = ""0110"", k = 1
Output: true
Explanation: The binary codes of length 1 are ""0"" and ""1"", it is clear that both exist as a substring. 


Example 3:


Input: s = ""0110"", k = 2
Output: false
Explanation: The binary code ""00"" is of length 2 and does not exist in the array.


 

Constraints:

 * 1 <= s.length <= 5 * 105
 * s[i] is either '0' or '1'.
 * 1 <= k <= 20",Solutions (1.2K),2.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hasAllCodes(self, s: str, k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().hasAllCodes(s, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def hasAllCodes(self, s: str, k: int) -> bool:
        if len(s) < k:
            return False
        
        codes = set()
        for i in range(len(s) - k + 1):
            codes.add(s[i:i+k])
        
        return len(codes) == 2**k"
False,0,0,1558,,Course Schedule IV,course-schedule-iv,False,41839,85383,1462,False,2,"Can you solve this real interview question? Course Schedule IV - There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.

 * For example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.

Prerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.

You are also given an array queries where queries[j] = [uj, vj]. For the jth query, you should answer whether course uj is a prerequisite of course vj or not.

Return a boolean array answer, where answer[j] is the answer to the jth query.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/01/courses4-1-graph.jpg]


Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
Output: [false,true]
Explanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.
Course 0 is not a prerequisite of course 1, but the opposite is true.


Example 2:


Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]
Output: [false,false]
Explanation: There are no prerequisites, and each course is independent.


Example 3:

[https://assets.leetcode.com/uploads/2021/05/01/courses4-3-graph.jpg]


Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
Output: [true,true]


 

Constraints:

 * 2 <= numCourses <= 100
 * 0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)
 * prerequisites[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi
 * All the pairs [ai, bi] are unique.
 * The prerequisites graph has no cycles.
 * 1 <= queries.length <= 104
 * 0 <= ui, vi <= n - 1
 * ui != vi",Solutions (572),1.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/course-schedule-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    numCourses: int = deserialize(""int"", read_line())
    prerequisites: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkIfPrerequisite(numCourses, prerequisites, queries)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def checkIfPrerequisite(self, numCourses: int, prerequisites: List[List[int]], queries: List[List[int]]) -> List[bool]:
        # your code here"
False,0,0,1559,cherry-pickup-ii,Cherry Pickup II,cherry-pickup-ii,False,78427,112840,1463,False,3,"Can you solve this real interview question? Cherry Pickup II - You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.

You have two robots that can collect cherries for you:

 * Robot #1 is located at the top-left corner (0, 0), and
 * Robot #2 is located at the top-right corner (0, cols - 1).

Return the maximum number of cherries collection using both robots by following the rules below:

 * From a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).
 * When any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.
 * When both robots stay in the same cell, only one takes the cherries.
 * Both robots cannot move outside of the grid at any moment.
 * Both robots should reach the bottom row in grid.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/29/sample_1_1802.png]


Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.
Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.
Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.
Total of cherries: 12 + 12 = 24.


Example 2:

[https://assets.leetcode.com/uploads/2020/04/23/sample_2_1802.png]


Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
Output: 28
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.
Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.
Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.
Total of cherries: 17 + 11 = 28.


 

Constraints:

 * rows == grid.length
 * cols == grid[i].length
 * 2 <= rows, cols <= 70
 * 0 <= grid[i][j] <= 100",Solutions (832),2.9K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/cherry-pickup-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().cherryPickup(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int: 
        pass"
False,0,0,1560,,Number of Students Doing Homework at a Given Time,number-of-students-doing-homework-at-a-given-time,False,100679,132673,1450,False,1,"Can you solve this real interview question? Number of Students Doing Homework at a Given Time - Given two integer arrays startTime and endTime and given an integer queryTime.

The ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].

Return the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.

 

Example 1:


Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4
Output: 1
Explanation: We have 3 students where:
The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.
The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.
The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.


Example 2:


Input: startTime = [4], endTime = [4], queryTime = 4
Output: 1
Explanation: The only student was doing their homework at the queryTime.


 

Constraints:

 * startTime.length == endTime.length
 * 1 <= startTime.length <= 100
 * 1 <= startTime[i] <= endTime[i] <= 1000
 * 1 <= queryTime <= 1000",Solutions (1.4K),754,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startTime: List[int] = deserialize(""List[int]"", read_line())
    endTime: List[int] = deserialize(""List[int]"", read_line())
    queryTime: int = deserialize(""int"", read_line())
    ans = Solution().busyStudent(startTime, endTime, queryTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def busyStudent(self, startTime: List[int], endTime: List[int], queryTime: int) -> int:
        count = 0
        for i in range(len(startTime)):
            if startTime[i] <= queryTime <= endTime[i]:
                count += 1
        return count"
False,0,0,1561,,Rearrange Words in a Sentence,rearrange-words-in-a-sentence,False,43913,69627,1451,False,2,"Can you solve this real interview question? Rearrange Words in a Sentence - Given a sentence text (A sentence is a string of space-separated words) in the following format:

 * First letter is in upper case.
 * Each word in text are separated by a single space.

Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.

Return the new text following the format shown above.

 

Example 1:


Input: text = ""Leetcode is cool""
Output: ""Is cool leetcode""
Explanation: There are 3 words, ""Leetcode"" of length 8, ""is"" of length 2 and ""cool"" of length 4.
Output is ordered by length and the new first word starts with capital letter.


Example 2:


Input: text = ""Keep calm and code on""
Output: ""On and keep calm code""
Explanation: Output is ordered as follows:
""On"" 2 letters.
""and"" 3 letters.
""keep"" 4 letters in case of tie order by position in original text.
""calm"" 4 letters.
""code"" 4 letters.


Example 3:


Input: text = ""To be or not to be""
Output: ""To be or to be not""


 

Constraints:

 * text begins with a capital letter and then contains lowercase letters and single space between words.
 * 1 <= text.length <= 10^5",Solutions (695),633,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/rearrange-words-in-a-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrangeWords(self, text: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().arrangeWords(text)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def arrangeWords(self, text: str) -> str:
        words = text.split()
        words.sort(key=lambda x: (len(x), words.index(x)))
        return ' '.join(words).capitalize()"
False,0,0,1562,,People Whose List of Favorite Companies Is Not a Subset of Another List,people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list,False,21033,37030,1452,False,2,"Can you solve this real interview question? People Whose List of Favorite Companies Is Not a Subset of Another List - Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).

Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.

 

Example 1:


Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""google"",""microsoft""],[""google"",""facebook""],[""google""],[""amazon""]]
Output: [0,1,4] 
Explanation: 
Person with index=2 has favoriteCompanies[2]=[""google"",""facebook""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] corresponding to the person with index 0. 
Person with index=3 has favoriteCompanies[3]=[""google""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] and favoriteCompanies[1]=[""google"",""microsoft""]. 
Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].


Example 2:


Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""leetcode"",""amazon""],[""facebook"",""google""]]
Output: [0,1] 
Explanation: In this case favoriteCompanies[2]=[""facebook"",""google""] is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""], therefore, the answer is [0,1].


Example 3:


Input: favoriteCompanies = [[""leetcode""],[""google""],[""facebook""],[""amazon""]]
Output: [0,1,2,3]


 

Constraints:

 * 1 <= favoriteCompanies.length <= 100
 * 1 <= favoriteCompanies[i].length <= 500
 * 1 <= favoriteCompanies[i][j].length <= 20
 * All strings in favoriteCompanies[i] are distinct.
 * All lists of favorite companies are distinct, that is, If we sort alphabetically each list then favoriteCompanies[i] != favoriteCompanies[j].
 * All strings consist of lowercase English letters only.",Solutions (286),298,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    favoriteCompanies: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().peopleIndexes(favoriteCompanies)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:
        def is_subset(list1, list2):
            return len(set(list1) - set(list2)) == 0
        
        res = []
        for i in range(len(favoriteCompanies)):
            is_subset_flag = False
            for j in range(len(favoriteCompanies)):
                if i != j and is_subset(favoriteCompanies[i], favoriteCompanies[j]):
                    is_subset_flag = True
                    break
            if not is_subset_flag:
                res.append(i)
        
        return res"
False,0,0,1563,,Maximum Number of Darts Inside of a Circular Dartboard,maximum-number-of-darts-inside-of-a-circular-dartboard,False,5160,13994,1453,False,3,"Can you solve this real interview question? Maximum Number of Darts Inside of a Circular Dartboard - Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that Alice threw on the wall.

Bob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lies on the dartboard.

Given the integer r, return the maximum number of darts that can lie on the dartboard.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/04/29/sample_1_1806.png]


Input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.


Example 2:

[https://assets.leetcode.com/uploads/2020/04/29/sample_2_1806.png]


Input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).


 

Constraints:

 * 1 <= darts.length <= 100
 * darts[i].length == 2
 * -104 <= xi, yi <= 104
 * All the darts are unique
 * 1 <= r <= 5000",Solutions (62),130,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numPoints(self, darts: List[List[int]], r: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    darts: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    r: int = deserialize(""int"", read_line())
    ans = Solution().numPoints(darts, r)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numPoints(self, darts: List[List[int]], r: int) -> int:
        pass"
False,0,0,1566,,Check If a Word Occurs As a Prefix of Any Word in a Sentence,check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence,False,62923,97998,1455,False,1,"Can you solve this real interview question? Check If a Word Occurs As a Prefix of Any Word in a Sentence - Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.

Return the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:


Input: sentence = ""i love eating burger"", searchWord = ""burg""
Output: 4
Explanation: ""burg"" is prefix of ""burger"" which is the 4th word in the sentence.


Example 2:


Input: sentence = ""this problem is an easy problem"", searchWord = ""pro""
Output: 2
Explanation: ""pro"" is prefix of ""problem"" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.


Example 3:


Input: sentence = ""i am tired"", searchWord = ""you""
Output: -1
Explanation: ""you"" is not a prefix of any word in the sentence.


 

Constraints:

 * 1 <= sentence.length <= 100
 * 1 <= searchWord.length <= 10
 * sentence consists of lowercase English letters and spaces.
 * searchWord consists of lowercase English letters.",Solutions (1.3K),696,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    searchWord: str = deserialize(""str"", read_line())
    ans = Solution().isPrefixOfWord(sentence, searchWord)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def isPrefixOfWord(self, sentence: str, searchWord: str) -> int:
        words = sentence.split()
        for i, word in enumerate(words, 1):
            if word.startswith(searchWord):
                return i
        return -1"
False,0,0,1567,,Maximum Number of Vowels in a Substring of Given Length,maximum-number-of-vowels-in-a-substring-of-given-length,False,57404,98648,1456,False,2,"Can you solve this real interview question? Maximum Number of Vowels in a Substring of Given Length - Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:


Input: s = ""abciiidef"", k = 3
Output: 3
Explanation: The substring ""iii"" contains 3 vowel letters.


Example 2:


Input: s = ""aeiou"", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.


Example 3:


Input: s = ""leetcode"", k = 3
Output: 2
Explanation: ""lee"", ""eet"" and ""ode"" contain 2 vowels.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.
 * 1 <= k <= s.length",Solutions (961),1.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxVowels(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        vowels = set(""aeiou"")
        max_vowels = curr_vowels = sum(s[i] in vowels for i in range(k))
        for i in range(k, len(s)):
            curr_vowels += s[i] in vowels
            curr_vowels -= s[i-k] in vowels
            max_vowels = max(max_vowels, curr_vowels)
        return max_vowels"
False,0,0,1569,,Max Dot Product of Two Subsequences,max-dot-product-of-two-subsequences,False,19442,41711,1458,False,3,"Can you solve this real interview question? Max Dot Product of Two Subsequences - Given two arrays nums1 and nums2.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).

 

Example 1:


Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.
Their dot product is (2*3 + (-2)*(-6)) = 18.

Example 2:


Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.
Their dot product is (3*7) = 21.

Example 3:


Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.
Their dot product is -1.

 

Constraints:

 * 1 <= nums1.length, nums2.length <= 500
 * -1000 <= nums1[i], nums2[i] <= 1000",Solutions (303),716,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/max-dot-product-of-two-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxDotProduct(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDotProduct(self, nums1: List[int], nums2: List[int]) -> int:
        m, n = len(nums1), len(nums2)
        dp = [[-float('inf')] * n for _ in range(m)]

        dp[0][0] = nums1[0] * nums2[0]
        for i in range(1, n):
            dp[0][i] = max(dp[0][i - 1], nums1[0] * nums2[i])
        for i in range(1, m):
            dp[i][0] = max(dp[i - 1][0], nums1[i] * nums2[0])

        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = max(nums1[i] * nums2[j], nums1[i] * nums2[j] + dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])

        return dp[-1][-1]"
False,0,0,1570,,Final Prices With a Special Discount in a Shop,final-prices-with-a-special-discount-in-a-shop,False,104392,137239,1475,False,1,"Can you solve this real interview question? Final Prices With a Special Discount in a Shop - You are given an integer array prices where prices[i] is the price of the ith item in a shop.

There is a special discount for items in the shop. If you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. Otherwise, you will not receive any discount at all.

Return an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.

 

Example 1:


Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.
For items 3 and 4 you will not receive any discount at all.


Example 2:


Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.


Example 3:


Input: prices = [10,1,1,6]
Output: [9,0,1,6]


 

Constraints:

 * 1 <= prices.length <= 500
 * 1 <= prices[i] <= 1000",Solutions (1.5K),1.6K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def finalPrices(self, prices: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().finalPrices(prices)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def finalPrices(self, prices: List[int]) -> List[int]:
        stack = []
        for i, price in enumerate(prices):
            while stack and prices[stack[-1]] >= price:
                prices[stack.pop()] -= price
            stack.append(i)
        return prices"
False,0,0,1571,,Allocate Mailboxes,allocate-mailboxes,False,19996,36009,1478,False,3,"Can you solve this real interview question? Allocate Mailboxes - Given the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.

Return the minimum total distance between each house and its nearest mailbox.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/05/07/sample_11_1816.png]


Input: houses = [1,4,8,10,20], k = 3
Output: 5
Explanation: Allocate mailboxes in position 3, 9 and 20.
Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 


Example 2:

[https://assets.leetcode.com/uploads/2020/05/07/sample_2_1816.png]


Input: houses = [2,3,5,12,18], k = 2
Output: 9
Explanation: Allocate mailboxes in position 3 and 14.
Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.


 

Constraints:

 * 1 <= k <= houses.length <= 100
 * 1 <= houses[i] <= 104
 * All the integers of houses are unique.",Solutions (173),943,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/allocate-mailboxes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDistance(self, houses: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    houses: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minDistance(houses, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDistance(self, houses: List[int], k: int) -> int:
        def calculate_cost(start, end):
            cost = 0
            while start < end:
                cost += houses[end] - houses[start]
                start += 1
                end -= 1
            return cost
        
        houses.sort()
        n = len(houses)
        dp = [[0] * n for _ in range(k)]
        for i in range(n):
            dp[0][i] = calculate_cost(0, i)
        
        for i in range(1, k):
            for j in range(n):
                dp[i][j] = float('inf')
                for x in range(j):
                    dp[i][j] = min(dp[i][j], dp[i-1][x] + calculate_cost(x+1, j))
        
        return dp[k-1][n-1]"
False,0,0,1573,,Find Two Non-overlapping Sub-arrays Each With Target Sum,find-two-non-overlapping-sub-arrays-each-with-target-sum,False,43190,117284,1477,False,2,"Can you solve this real interview question? Find Two Non-overlapping Sub-arrays Each With Target Sum - You are given an array of integers arr and an integer target.

You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.

 

Example 1:


Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.


Example 2:


Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.


Example 3:


Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i] <= 1000
 * 1 <= target <= 108",Solutions (377),1.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSumOfLengths(self, arr: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().minSumOfLengths(arr, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSumOfLengths(self, arr: List[int], target: int) -> int:
        from collections import defaultdict
        best = float('inf')
        cur = total = l = 0
        seen = defaultdict(int)
        res = float('inf')
        for r, a in enumerate(arr):
            total += a
            while total > target:
                total -= arr[l]
                l += 1
            if total == target:
                if l > 0:
                    best = min(best, l - seen[total])
                if seen[total] < float('inf'):
                    res = min(res, r - seen[total] + 1 + best)
                seen[total] = r + 1
        return res if res < float('inf') else -1"
False,0,0,1574,,Maximum Product of Two Elements in an Array,maximum-product-of-two-elements-in-an-array,False,183053,229104,1464,False,1,"Can you solve this real interview question? Maximum Product of Two Elements in an Array - Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).

 

Example 1:


Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 


Example 2:


Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.


Example 3:


Input: nums = [3,7]
Output: 12


 

Constraints:

 * 2 <= nums.length <= 500
 * 1 <= nums[i] <= 10^3",Solutions (2.6K),1.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProduct(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProduct(self, nums: List[int]) -> int:
        nums.sort()
        return (nums[-1] - 1) * (nums[-2] - 1)"
False,0,0,1575,maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts,Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts,maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts,False,159813,391063,1465,False,2,"Can you solve this real interview question? Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts - You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:

 * horizontalCuts[i] is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
 * verticalCuts[j] is the distance from the left of the rectangular cake to the jth vertical cut.

Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_2.png]


Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.


Example 2:

[https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_3.png]


Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.


Example 3:


Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9


 

Constraints:

 * 2 <= h, w <= 109
 * 1 <= horizontalCuts.length <= min(h - 1, 105)
 * 1 <= verticalCuts.length <= min(w - 1, 105)
 * 1 <= horizontalCuts[i] < h
 * 1 <= verticalCuts[i] < w
 * All the elements in horizontalCuts are distinct.
 * All the elements in verticalCuts are distinct.",Solutions (1.5K),2.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    h: int = deserialize(""int"", read_line())
    w: int = deserialize(""int"", read_line())
    horizontalCuts: List[int] = deserialize(""List[int]"", read_line())
    verticalCuts: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxArea(h, w, horizontalCuts, verticalCuts)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:
        MOD = 10**9 + 7
        horizontalCuts.sort()
        verticalCuts.sort()
        max_h = max(horizontalCuts[0], h - horizontalCuts[-1])
        max_v = max(verticalCuts[0], w - verticalCuts[-1])
        
        for i in range(1, len(horizontalCuts)):
            max_h = max(max_h, horizontalCuts[i] - horizontalCuts[i-1])
        
        for i in range(1, len(verticalCuts)):
            max_v = max(max_v, verticalCuts[i] - verticalCuts[i-1])
        
        return (max_h * max_v) % MOD"
False,0,0,1576,reorder-routes-to-make-all-paths-lead-to-the-city-zero,Reorder Routes to Make All Paths Lead to the City Zero,reorder-routes-to-make-all-paths-lead-to-the-city-zero,False,75196,121915,1466,False,2,"Can you solve this real interview question? Reorder Routes to Make All Paths Lead to the City Zero - There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach city 0 after reorder.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/05/13/sample_1_1819.png]


Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 2:

[https://assets.leetcode.com/uploads/2020/05/13/sample_2_1819.png]


Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 3:


Input: n = 3, connections = [[1,0],[2,0]]
Output: 0


 

Constraints:

 * 2 <= n <= 5 * 104
 * connections.length == n - 1
 * connections[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi",Solutions (1.5K),3.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minReorder(self, n: int, connections: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    connections: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minReorder(n, connections)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minReorder(self, n: int, connections: List[List[int]]) -> int:
        def dfs(cities, roads, node, parent):
            res = 0
            for city, direction in roads[node]:
                if city != parent:
                    res += direction
                    res += dfs(cities, roads, city, node)
            return res
        
        cities = [[] for _ in range(n)]
        roads = [[] for _ in range(n)]
        
        for a, b in connections:
            cities[a].append((b, 1))
            cities[b].append((a, 0))
        
        for i in range(n):
            roads[i] = cities[i]
        
        return dfs(cities, roads, 0, -1)"
False,0,0,1577,,Probability of a Two Boxes Having The Same Number of Distinct Balls,probability-of-a-two-boxes-having-the-same-number-of-distinct-balls,False,7039,11591,1467,False,3,"Can you solve this real interview question? Probability of a Two Boxes Having The Same Number of Distinct Balls - Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.

All the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).

Please note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).

Return the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value will be accepted as correct.

 

Example 1:


Input: balls = [1,1]
Output: 1.00000
Explanation: Only 2 ways to divide the balls equally:
- A ball of color 1 to box 1 and a ball of color 2 to box 2
- A ball of color 2 to box 1 and a ball of color 1 to box 2
In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1


Example 2:


Input: balls = [2,1,1]
Output: 0.66667
Explanation: We have the set of balls [1, 1, 2, 3]
This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):
[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]
After that, we add the first two balls to the first box and the second two balls to the second box.
We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.
Probability is 8/12 = 0.66667


Example 3:


Input: balls = [1,2,1,2]
Output: 0.60000
Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.
Probability = 108 / 180 = 0.6


 

Constraints:

 * 1 <= balls.length <= 8
 * 1 <= balls[i] <= 6
 * sum(balls) is even.",Solutions (94),251,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getProbability(self, balls: List[int]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    balls: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getProbability(balls)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def getProbability(self, balls: List[int]) -> float:
        pass  # Add your implementation here"
False,0,0,1580,shuffle-the-array,Shuffle the Array,shuffle-the-array,False,510506,573365,1470,False,1,"Can you solve this real interview question? Shuffle the Array - Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

 

Example 1:


Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].


Example 2:


Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]


Example 3:


Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]


 

Constraints:

 * 1 <= n <= 500
 * nums.length == 2n
 * 1 <= nums[i] <= 10^3",Solutions (5.8K),4.7K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/shuffle-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().shuffle(nums, n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def shuffle(self, nums: List[int], n: int) -> List[int]:
        res = []
        for i in range(n):
            res.append(nums[i])
            res.append(nums[i + n])
        return res"
False,0,0,1581,,The k Strongest Values in an Array,the-k-strongest-values-in-an-array,False,33123,54803,1471,False,2,"Can you solve this real interview question? The k Strongest Values in an Array - Given an array of integers arr and an integer k.

A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.
If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].

Return a list of the strongest k values in the array. return the answer in any arbitrary order.

Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).

 * For arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6.
 * For arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.

 

Example 1:


Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.
Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.


Example 2:


Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].


Example 3:


Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].
Any permutation of [11,8,6,6,7] is accepted.


 

Constraints:

 * 1 <= arr.length <= 105
 * -105 <= arr[i] <= 105
 * 1 <= k <= arr.length",Solutions (483),592,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/the-k-strongest-values-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getStrongest(self, arr: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getStrongest(arr, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getStrongest(self, arr: List[int], k: int) -> List[int]:
        def findStrongest(arr, k, m):
            return sorted(arr, key=lambda x: (abs(x - m), x), reverse=True)[:k]
        
        arr.sort()
        m = arr[(len(arr) - 1) // 2]
        return findStrongest(arr, k, m)"
False,0,0,1583,paint-house-iii,Paint House III,paint-house-iii,False,55297,89857,1473,False,3,"Can you solve this real interview question? Paint House III - There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

 * For example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].

Given an array houses, an m x n matrix cost and an integer target where:

 * houses[i]: is the color of the house i, and 0 if the house is not painted yet.
 * cost[i][j]: is the cost of paint the house i with the color j + 1.

Return the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.

 

Example 1:


Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].
Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.


Example 2:


Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.


Example 3:


Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.


 

Constraints:

 * m == houses.length == cost.length
 * n == cost[i].length
 * 1 <= m <= 100
 * 1 <= n <= 20
 * 1 <= target <= m
 * 0 <= houses[i] <= n
 * 1 <= cost[i][j] <= 104",Solutions (537),1.9K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/paint-house-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, houses: List[int], cost: List[List[int]], m: int, n: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    houses: List[int] = deserialize(""List[int]"", read_line())
    cost: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().minCost(houses, cost, m, n, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, houses: List[int], cost: List[List[int]], m: int, n: int, target: int) -> int:
        # Your code here
        pass"
False,0,0,1584,,Average Salary Excluding the Minimum and Maximum Salary,average-salary-excluding-the-minimum-and-maximum-salary,False,198407,323442,1491,False,1,"Can you solve this real interview question? Average Salary Excluding the Minimum and Maximum Salary - You are given an array of unique integers salary where salary[i] is the salary of the ith employee.

Return the average salary of employees excluding the minimum and maximum salary. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500


Example 2:


Input: salary = [1000,2000,3000]
Output: 2000.00000
Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.
Average salary excluding minimum and maximum salary is (2000) / 1 = 2000


 

Constraints:

 * 3 <= salary.length <= 100
 * 1000 <= salary[i] <= 106
 * All the integers of salary are unique.",Solutions (2.8K),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def average(self, salary: List[int]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    salary: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().average(salary)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def average(self, salary: List[int]) -> float:
        return (sum(salary) - min(salary) - max(salary)) / (len(salary) - 2)"
False,0,0,1585,the-kth-factor-of-n,The kth Factor of n,the-kth-factor-of-n,False,112668,179438,1492,False,2,"Can you solve this real interview question? The kth Factor of n - You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.

Consider a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.

 

Example 1:


Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.


Example 2:


Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.


Example 3:


Input: n = 4, k = 4
Output: -1
Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.


 

Constraints:

 * 1 <= k <= n <= 1000

 

Follow up:

Could you solve this problem in less than O(n) complexity?",Solutions (1.1K),991,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/the-kth-factor-of-n/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthFactor(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthFactor(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kthFactor(self, n: int, k: int) -> int:
        factors = []
        for i in range(1, n+1):
            if n % i == 0:
                factors.append(i)
        if k <= len(factors):
            return factors[k-1]
        else:
            return -1"
False,0,0,1586,,Longest Subarray of 1's After Deleting One Element,longest-subarray-of-1s-after-deleting-one-element,False,58651,97075,1493,False,2,"Can you solve this real interview question? Longest Subarray of 1's After Deleting One Element - Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:


Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.


Example 2:


Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].


Example 3:


Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.",Solutions (1K),1.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestSubarray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        left = [0] * len(nums)
        right = [0] * len(nums)
        
        count = 0
        for i in range(len(nums)):
            if nums[i] == 1:
                count += 1
                left[i] = count
            else:
                count = 0
        
        count = 0
        for i in range(len(nums) - 1, -1, -1):
            if nums[i] == 1:
                count += 1
                right[i] = count
            else:
                count = 0
        
        res = 0
        for i in range(1, len(nums) - 1):
            res = max(res, left[i-1] + right[i+1])
        
        return res"
False,0,0,1587,,Parallel Courses II,parallel-courses-ii,False,13590,44781,1494,False,3,"Can you solve this real interview question? Parallel Courses II - You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.

In one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.

Return the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png]


Input: n = 4, relations = [[2,1],[3,1],[1,4]], k = 2
Output: 3
Explanation: The figure above represents the given graph.
In the first semester, you can take courses 2 and 3.
In the second semester, you can take course 1.
In the third semester, you can take course 4.


Example 2:

[https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png]


Input: n = 5, relations = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4
Explanation: The figure above represents the given graph.
In the first semester, you can only take courses 2 and 3 since you cannot take more than two per semester.
In the second semester, you can take course 4.
In the third semester, you can take course 1.
In the fourth semester, you can take course 5.


 

Constraints:

 * 1 <= n <= 15
 * 1 <= k <= n
 * 0 <= relations.length <= n * (n-1) / 2
 * relations[i].length == 2
 * 1 <= prevCoursei, nextCoursei <= n
 * prevCoursei != nextCoursei
 * All the pairs [prevCoursei, nextCoursei] are unique.
 * The given graph is a directed acyclic graph.",Solutions (221),791,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/parallel-courses-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    relations: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minNumberOfSemesters(n, relations, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minNumberOfSemesters(self, n: int, relations: List[List[int]], k: int) -> int:
        pass"
False,0,0,1603,running-sum-of-1d-array,Running Sum of 1d Array,running-sum-of-1d-array,False,1381862,1577233,1480,False,1,"Can you solve this real interview question? Running Sum of 1d Array - Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

 

Example 1:


Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].

Example 2:


Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].

Example 3:


Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]


 

Constraints:

 * 1 <= nums.length <= 1000
 * -10^6 <= nums[i] <= 10^6",Solutions (8.1K),6.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/running-sum-of-1d-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().runningSum(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def runningSum(self, nums: List[int]) -> List[int]:
        return [sum(nums[:i+1]) for i in range(len(nums))]"
False,0,0,1604,,Least Number of Unique Integers after K Removals,least-number-of-unique-integers-after-k-removals,False,94195,169291,1481,False,2,"Can you solve this real interview question? Least Number of Unique Integers after K Removals - Given an array of integers arr and an integer k. Find the least number of unique integers after removing exactly k elements.

 

Example 1:


Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.


Example 2:


Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.

 

Constraints:

 * 1 <= arr.length <= 10^5
 * 1 <= arr[i] <= 10^9
 * 0 <= k <= arr.length",Solutions (832),1.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findLeastNumOfUniqueInts(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:
        from collections import Counter
        counts = Counter(arr)
        remaining = len(counts)
        for num, freq in sorted(counts.items(), key=lambda x: x[1]):
            if k >= freq:
                k -= freq
                remaining -= 1
            else:
                break
        return remaining"
False,0,0,1605,,Minimum Number of Days to Make m Bouquets,minimum-number-of-days-to-make-m-bouquets,False,58499,108039,1482,False,2,"Can you solve this real interview question? Minimum Number of Days to Make m Bouquets - You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:


Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.


Example 2:


Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.


Example 3:


Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.
Here is the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.
After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.


 

Constraints:

 * bloomDay.length == n
 * 1 <= n <= 105
 * 1 <= bloomDay[i] <= 109
 * 1 <= m <= 106
 * 1 <= k <= n",Solutions (716),2.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    bloomDay: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minDays(bloomDay, m, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDays(self, bloomDay: List[int], m: int, k: int) -> int:
        def is_possible(days):
            bouquets = flowers = 0
            for bloom in bloomDay:
                if bloom > days:
                    flowers = 0
                else:
                    flowers += 1
                    if flowers == k:
                        bouquets += 1
                        flowers = 0
                    if bouquets == m:
                        return True
            return False
        
        if len(bloomDay) < m * k:
            return -1
        
        left, right = 1, max(bloomDay)
        while left < right:
            mid = (left + right) // 2
            if is_possible(mid):
                right = mid
            else:
                left = mid + 1
        return left"
False,0,0,1610,,XOR Operation in an Array,xor-operation-in-an-array,False,151541,179094,1486,False,1,"Can you solve this real interview question? XOR Operation in an Array - You are given an integer n and an integer start.

Define an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.

Return the bitwise XOR of all elements of nums.

 

Example 1:


Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
Where ""^"" corresponds to bitwise XOR operator.


Example 2:


Input: n = 4, start = 3
Output: 8
Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.


 

Constraints:

 * 1 <= n <= 1000
 * 0 <= start <= 1000
 * n == nums.length",Solutions (2.1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/xor-operation-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def xorOperation(self, n: int, start: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    start: int = deserialize(""int"", read_line())
    ans = Solution().xorOperation(n, start)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def xorOperation(self, n: int, start: int) -> int:
        result = start
        for i in range(1, n):
            result ^= start + 2 * i
        return result"
False,0,0,1611,,Making File Names Unique,making-file-names-unique,False,29670,82028,1487,False,2,"Can you solve this real interview question? Making File Names Unique - Given an array of strings names of size n. You will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].

Since two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.

Return an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.

 

Example 1:


Input: names = [""pes"",""fifa"",""gta"",""pes(2019)""]
Output: [""pes"",""fifa"",""gta"",""pes(2019)""]
Explanation: Let's see how the file system creates folder names:
""pes"" --> not assigned before, remains ""pes""
""fifa"" --> not assigned before, remains ""fifa""
""gta"" --> not assigned before, remains ""gta""
""pes(2019)"" --> not assigned before, remains ""pes(2019)""


Example 2:


Input: names = [""gta"",""gta(1)"",""gta"",""avalon""]
Output: [""gta"",""gta(1)"",""gta(2)"",""avalon""]
Explanation: Let's see how the file system creates folder names:
""gta"" --> not assigned before, remains ""gta""
""gta(1)"" --> not assigned before, remains ""gta(1)""
""gta"" --> the name is reserved, system adds (k), since ""gta(1)"" is also reserved, systems put k = 2. it becomes ""gta(2)""
""avalon"" --> not assigned before, remains ""avalon""


Example 3:


Input: names = [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece""]
Output: [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece(4)""]
Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes ""onepiece(4)"".


 

Constraints:

 * 1 <= names.length <= 5 * 104
 * 1 <= names[i].length <= 20
 * names[i] consists of lowercase English letters, digits, and/or round brackets.",Solutions (352),397,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/making-file-names-unique/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getFolderNames(self, names: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    names: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().getFolderNames(names)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def getFolderNames(self, names: List[str]) -> List[str]:
        seen = {}
        result = []
        
        for name in names:
            if name not in seen:
                result.append(name)
                seen[name] = 1
            else:
                k = seen[name]
                new_name = f""{name}({k})""
                while new_name in seen:
                    k += 1
                    new_name = f""{name}({k})""
                result.append(new_name)
                seen[name] = k + 1
                seen[new_name] = 1
                
        return result"
False,0,0,1612,,Avoid Flood in The City,avoid-flood-in-the-city,False,30246,114558,1488,False,2,"Can you solve this real interview question? Avoid Flood in The City - Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.

Given an integer array rains where:

 * rains[i] > 0 means there will be rains over the rains[i] lake.
 * rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.

Return an array ans where:

 * ans.length == rains.length
 * ans[i] == -1 if rains[i] > 0.
 * ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.

If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.

 

Example 1:


Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.


Example 2:


Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.
After the fifth day, full lakes are [2].
After the sixth day, full lakes are [1,2].
It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.


Example 3:


Input: rains = [1,2,0,1,2]
Output: []
Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.
After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.


 

Constraints:

 * 1 <= rains.length <= 105
 * 0 <= rains[i] <= 109",Solutions (371),1.3K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/avoid-flood-in-the-city/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def avoidFlood(self, rains: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    rains: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().avoidFlood(rains)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def avoidFlood(self, rains: List[int]) -> List[int]:
        ans = []
        full_lakes = set()
        dry_days = []
        
        for i, lake in enumerate(rains):
            if lake == 0:
                dry_days.append(i)
                ans.append(1)
            else:
                if lake in full_lakes:
                    dry = None
                    for day in dry_days:
                        if day > i and day not in full_lakes:
                            dry = day
                            break
                    if dry is None:
                        return []
                    else:
                        ans[dry] = lake
                        full_lakes.remove(lake)
                else:
                    full_lakes.add(lake)
                    ans.append(-1)
        
        return ans"
False,0,0,1613,,Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree,find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree,False,10810,20556,1489,False,3,"Can you solve this real interview question? Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree - Given a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.

Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.

Note that you can return the indices of the edges in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/06/04/ex1.png]


Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
Output: [[0,1],[2,3,4,5]]
Explanation: The figure above describes the graph.
The following figure shows all the possible MSTs:
[https://assets.leetcode.com/uploads/2020/06/04/msts.png]
Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.
The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.


Example 2:

[https://assets.leetcode.com/uploads/2020/06/04/ex2.png]


Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
Output: [[],[0,1,2,3]]
Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.


 

Constraints:

 * 2 <= n <= 100
 * 1 <= edges.length <= min(200, n * (n - 1) / 2)
 * edges[i].length == 3
 * 0 <= ai < bi < n
 * 1 <= weighti <= 1000
 * All pairs (ai, bi) are distinct.",Solutions (143),653,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findCriticalAndPseudoCriticalEdges(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def findCriticalAndPseudoCriticalEdges(self, n: int, edges: List[List[int]]) -> List[List[int]]:
        pass"
False,0,0,1615,,Range Sum of Sorted Subarray Sums,range-sum-of-sorted-subarray-sums,False,32212,54577,1508,False,2,"Can you solve this real interview question? Range Sum of Sorted Subarray Sums - You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

 

Example 1:


Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 


Example 2:


Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


Example 3:


Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50


 

Constraints:

 * n == nums.length
 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 100
 * 1 <= left <= right <= n * (n + 1) / 2",Solutions (345),815,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().rangeSum(nums, n, left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rangeSum(self, nums: List[int], n: int, left: int, right: int) -> int:
        MOD = 10**9 + 7
        subarray_sums = []
        for i in range(len(nums)):
            summ = 0
            for j in range(i, len(nums)):
                summ += nums[j]
                subarray_sums.append(summ)
        
        subarray_sums.sort()
        result = sum(subarray_sums[left-1:right]) % MOD
        
        return result"
False,0,0,1616,,Minimum Difference Between Largest and Smallest Value in Three Moves,minimum-difference-between-largest-and-smallest-value-in-three-moves,False,74357,136114,1509,False,2,"Can you solve this real interview question? Minimum Difference Between Largest and Smallest Value in Three Moves - You are given an integer array nums.

In one move, you can choose one element of nums and change it to any value.

Return the minimum difference between the largest and smallest value of nums after performing at most three moves.

 

Example 1:


Input: nums = [5,3,2,4]
Output: 0
Explanation: We can make at most 3 moves.
In the first move, change 2 to 3. nums becomes [5,3,3,4].
In the second move, change 4 to 3. nums becomes [5,3,3,3].
In the third move, change 5 to 3. nums becomes [3,3,3,3].
After performing 3 moves, the difference between the minimum and maximum is 3 - 3 = 0.


Example 2:


Input: nums = [1,5,0,10,14]
Output: 1
Explanation: We can make at most 3 moves.
In the first move, change 5 to 0. nums becomes [1,0,0,10,14].
In the second move, change 10 to 0. nums becomes [1,0,0,0,14].
In the third move, change 14 to 1. nums becomes [1,0,0,0,1].
After performing 3 moves, the difference between the minimum and maximum is 1 - 0 = 0.
It can be shown that there is no way to make the difference 0 in 3 moves.

Example 3:


Input: nums = [3,100,20]
Output: 0
Explanation: We can make at most 3 moves.
In the first move, change 100 to 7. nums becomes [4,7,20].
In the second move, change 20 to 7. nums becomes [4,7,7].
In the third move, change 4 to 3. nums becomes [7,7,7].
After performing 3 moves, the difference between the minimum and maximum is 7 - 7 = 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (609),1.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDifference(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDifference(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        if n <= 4:
            return 0
        return min(nums[n-4] - nums[0], nums[n-3] - nums[1], nums[n-2] - nums[2], nums[n-1] - nums[3])"
False,0,0,1617,stone-game-iv,Stone Game IV,stone-game-iv,False,64486,107183,1510,False,3,"Can you solve this real interview question? Stone Game IV - Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.

 

Example 1:


Input: n = 1
Output: true
Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.

Example 2:


Input: n = 2
Output: false
Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).


Example 3:


Input: n = 4
Output: true
Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).


 

Constraints:

 * 1 <= n <= 105",Solutions (561),1.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def winnerSquareGame(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().winnerSquareGame(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def winnerSquareGame(self, n: int) -> bool:
        dp = [False] * (n + 1)
        for i in range(1, n + 1):
            for j in range(1, int(i**0.5) + 1):
                if dp[i - j*j] == False:
                    dp[i] = True
                    break
        return dp[n]"
False,0,0,1619,,Path Crossing,path-crossing,False,44583,79570,1496,False,1,"Can you solve this real interview question? Path Crossing - Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/06/10/screen-shot-2020-06-10-at-123929-pm.png]


Input: path = ""NES""
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.


Example 2:

[https://assets.leetcode.com/uploads/2020/06/10/screen-shot-2020-06-10-at-123843-pm.png]


Input: path = ""NESWW""
Output: true
Explanation: Notice that the path visits the origin twice.

 

Constraints:

 * 1 <= path.length <= 104
 * path[i] is either 'N', 'S', 'E', or 'W'.",Solutions (700),620,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/path-crossing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPathCrossing(self, path: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    path: str = deserialize(""str"", read_line())
    ans = Solution().isPathCrossing(path)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPathCrossing(self, path: str) -> bool:
        visited = set()
        x, y = 0, 0
        visited.add((x, y))
        
        for direction in path:
            if direction == 'N':
                y += 1
            elif direction == 'S':
                y -= 1
            elif direction == 'E':
                x += 1
            else:
                x -= 1
                
            if (x, y) in visited:
                return True
            visited.add((x, y))
        
        return False"
False,0,0,1620,,Check If Array Pairs Are Divisible by k,check-if-array-pairs-are-divisible-by-k,False,40137,102620,1497,False,2,"Can you solve this real interview question? Check If Array Pairs Are Divisible by k - Given an array of integers arr of even length n and an integer k.

We want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.

Return true If you can find a way to do that or false otherwise.

 

Example 1:


Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).


Example 2:


Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).


Example 3:


Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.


 

Constraints:

 * arr.length == n
 * 1 <= n <= 105
 * n is even.
 * -109 <= arr[i] <= 109
 * 1 <= k <= 105",Solutions (445),1.4K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().canArrange(arr, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canArrange(self, arr: List[int], k: int) -> bool:
        from collections import defaultdict
        count = defaultdict(int)
        for num in arr:
            count[num % k] += 1
        if count[0] % 2 != 0:
            return False
        for i in range(1, k):
            if count[i] != count[k - i]:
                return False
        return True"
False,0,0,1621,,Number of Subsequences That Satisfy the Given Sum Condition,number-of-subsequences-that-satisfy-the-given-sum-condition,False,40730,108490,1498,False,2,"Can you solve this real interview question? Number of Subsequences That Satisfy the Given Sum Condition - You are given an array of integers nums and an integer target.

Return the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.
[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)


Example 2:


Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).
[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]


Example 3:


Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).
Number of valid subsequences (63 - 2 = 61).


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 106
 * 1 <= target <= 106",Solutions (269),1.8K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubseq(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().numSubseq(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubseq(self, nums: List[int], target: int) -> int:
        MOD = 10**9 + 7
        nums.sort()
        l, r = 0, len(nums) - 1
        result = 0
        while l <= r:
            if nums[l] + nums[r] <= target:
                result = (result + pow(2, r - l, MOD)) % MOD
                l += 1
            else:
                r -= 1
        return result"
False,0,0,1622,,Max Value of Equation,max-value-of-equation,False,36882,80587,1499,False,3,"Can you solve this real interview question? Max Value of Equation - You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.

Return the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.

It is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.

 

Example 1:


Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.
No other pairs satisfy the condition, so we return the max of 4 and 1.


Example 2:


Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.


 

Constraints:

 * 2 <= points.length <= 105
 * points[i].length == 2
 * -108 <= xi, yi <= 108
 * 0 <= k <= 2 * 108
 * xi < xj for all 1 <= i < j <= points.length
 * xi form a strictly increasing sequence.",Solutions (253),1.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/max-value-of-equation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findMaxValueOfEquation(points, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaxValueOfEquation(self, points: List[List[int]], k: int) -> int:
        res = float('-inf')
        deque = collections.deque()
        for x, y in points:
            while deque and deque[0][1] < x - k:
                deque.popleft()
            if deque:
                res = max(res, deque[0][0] + y + x)
            while deque and deque[-1][0] <= y - x:
                deque.pop()
            deque.append([y - x, x])
        return res"
False,0,0,1626,,Can Make Arithmetic Progression From Sequence,can-make-arithmetic-progression-from-sequence,False,126086,186105,1502,False,1,"Can you solve this real interview question? Can Make Arithmetic Progression From Sequence - A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.

 

Example 1:


Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.


Example 2:


Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.


 

Constraints:

 * 2 <= arr.length <= 1000
 * -106 <= arr[i] <= 106",Solutions (1.8K),1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canMakeArithmeticProgression(arr)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canMakeArithmeticProgression(self, arr: List[int]) -> bool:
        arr.sort()
        diff = arr[1] - arr[0]
        for i in range(2, len(arr)):
            if arr[i] - arr[i-1] != diff:
                return False
        return True"
False,0,0,1627,,Last Moment Before All Ants Fall Out of a Plank,last-moment-before-all-ants-fall-out-of-a-plank,False,18259,32785,1503,False,2,"Can you solve this real interview question? Last Moment Before All Ants Fall Out of a Plank - We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.

When an ant reaches one end of the plank at a time t, it falls out of the plank immediately.

Given an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/06/17/ants.jpg]


Input: n = 4, left = [4,3], right = [0,1]
Output: 4
Explanation: In the image above:
-The ant at index 0 is named A and going to the right.
-The ant at index 1 is named B and going to the right.
-The ant at index 3 is named C and going to the left.
-The ant at index 4 is named D and going to the left.
The last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).


Example 2:

[https://assets.leetcode.com/uploads/2020/06/17/ants2.jpg]


Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]
Output: 7
Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.


Example 3:

[https://assets.leetcode.com/uploads/2020/06/17/ants3.jpg]


Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []
Output: 7
Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.


 

Constraints:

 * 1 <= n <= 104
 * 0 <= left.length <= n + 1
 * 0 <= left[i] <= n
 * 0 <= right.length <= n + 1
 * 0 <= right[i] <= n
 * 1 <= left.length + right.length <= n + 1
 * All values of left and right are unique, and each value can appear only in one of the two arrays.",Solutions (258),431,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    left: List[int] = deserialize(""List[int]"", read_line())
    right: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getLastMoment(n, left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getLastMoment(self, n: int, left: List[int], right: List[int]) -> int:
        max_time = 0
        for ant in left:
            max_time = max(max_time, ant)
        for ant in right:
            max_time = max(max_time, n - ant)
        return max_time"
False,0,0,1628,,Count Submatrices With All Ones,count-submatrices-with-all-ones,False,43341,75336,1504,False,2,"Can you solve this real interview question? Count Submatrices With All Ones - Given an m x n binary matrix mat, return the number of submatrices that have all ones.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/27/ones1-grid.jpg]


Input: mat = [[1,0,1],[1,1,0],[1,1,0]]
Output: 13
Explanation: 
There are 6 rectangles of side 1x1.
There are 2 rectangles of side 1x2.
There are 3 rectangles of side 2x1.
There is 1 rectangle of side 2x2. 
There is 1 rectangle of side 3x1.
Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.


Example 2:

[https://assets.leetcode.com/uploads/2021/10/27/ones2-grid.jpg]


Input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]
Output: 24
Explanation: 
There are 8 rectangles of side 1x1.
There are 5 rectangles of side 1x2.
There are 2 rectangles of side 1x3. 
There are 4 rectangles of side 2x1.
There are 2 rectangles of side 2x2. 
There are 2 rectangles of side 3x1. 
There is 1 rectangle of side 3x2. 
Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.


 

Constraints:

 * 1 <= m, n <= 150
 * mat[i][j] is either 0 or 1.",Solutions (291),1.9K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-submatrices-with-all-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numSubmat(mat)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSubmat(self, mat: List[List[int]]) -> int:
        pass"
False,0,0,1629,,Minimum Possible Integer After at Most K Adjacent Swaps On Digits,minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits,False,8637,22488,1505,False,3,"Can you solve this real interview question? Minimum Possible Integer After at Most K Adjacent Swaps On Digits - You are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times.

Return the minimum integer you can obtain also as a string.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/06/17/q4_1.jpg]


Input: num = ""4321"", k = 4
Output: ""1342""
Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.


Example 2:


Input: num = ""100"", k = 1
Output: ""010""
Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.


Example 3:


Input: num = ""36789"", k = 1000
Output: ""36789""
Explanation: We can keep the number without any swaps.


 

Constraints:

 * 1 <= num.length <= 3 * 104
 * num consists of only digits and does not contain leading zeros.
 * 1 <= k <= 109",Solutions (132),420,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minInteger(self, num: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minInteger(num, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def minInteger(self, num: str, k: int) -> str:
        pass"
False,0,0,1630,count-odd-numbers-in-an-interval-range,Count Odd Numbers in an Interval Range,count-odd-numbers-in-an-interval-range,False,283531,571469,1523,False,1,"Can you solve this real interview question? Count Odd Numbers in an Interval Range - Given two non-negative integers low and high. Return the count of odd numbers between low and high (inclusive).

 

Example 1:


Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].

Example 2:


Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].

 

Constraints:

 * 0 <= low <= high <= 10^9",Solutions (3.7K),2.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-odd-numbers-in-an-interval-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countOdds(self, low: int, high: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    low: int = deserialize(""int"", read_line())
    high: int = deserialize(""int"", read_line())
    ans = Solution().countOdds(low, high)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countOdds(self, low: int, high: int) -> int:
        return (high + 1) // 2 - (low // 2)"
False,0,0,1631,,Number of Sub-arrays With Odd Sum,number-of-sub-arrays-with-odd-sum,False,31641,73106,1524,False,2,"Can you solve this real interview question? Number of Sub-arrays With Odd Sum - Given an array of integers arr, return the number of subarrays with an odd sum.

Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:


Input: arr = [1,3,5]
Output: 4
Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].
Odd sums are [1,9,3,5] so the answer is 4.


Example 2:


Input: arr = [2,4,6]
Output: 0
Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].
All sub-arrays have even sum and the answer is 0.


Example 3:


Input: arr = [1,2,3,4,5,6,7]
Output: 16


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i] <= 100",Solutions (402),1.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfSubarrays(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numOfSubarrays(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfSubarrays(self, arr: List[int]) -> int:
        res = 0
        odd = 0
        even = 1
        curr_sum = 0
        mod = 10**9 + 7

        for num in arr:
            curr_sum += num
            if curr_sum % 2 == 0:
                res += odd
                even += 1
            else:
                res += even
                odd += 1

        return res % mod"
False,0,0,1632,,Number of Good Ways to Split a String,number-of-good-ways-to-split-a-string,False,88072,127773,1525,False,2,"Can you solve this real interview question? Number of Good Ways to Split a String - You are given a string s.

A split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.

Return the number of good splits you can make in s.

 

Example 1:


Input: s = ""aacaba""
Output: 2
Explanation: There are 5 ways to split ""aacaba"" and 2 of them are good. 
(""a"", ""acaba"") Left string and right string contains 1 and 3 different letters respectively.
(""aa"", ""caba"") Left string and right string contains 1 and 3 different letters respectively.
(""aac"", ""aba"") Left string and right string contains 2 and 2 different letters respectively (good split).
(""aaca"", ""ba"") Left string and right string contains 2 and 2 different letters respectively (good split).
(""aacab"", ""a"") Left string and right string contains 3 and 1 different letters respectively.


Example 2:


Input: s = ""abcd""
Output: 1
Explanation: Split the string as follows (""ab"", ""cd"").


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only lowercase English letters.",Solutions (1.1K),1.8K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-good-ways-to-split-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSplits(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numSplits(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSplits(self, s: str) -> int:
        left_count = {}
        right_count = {}
        good_splits = 0
        
        for char in s:
            if char not in right_count:
                right_count[char] = 1
            else:
                right_count[char] += 1
        
        for char in s:
            if char not in left_count:
                left_count[char] = 1
            else:
                left_count[char] += 1
            right_count[char] -= 1
            if right_count[char] == 0:
                del right_count[char]
            if len(left_count) == len(right_count):
                good_splits += 1
        
        return good_splits"
False,0,0,1633,,Minimum Number of Increments on Subarrays to Form a Target Array,minimum-number-of-increments-on-subarrays-to-form-a-target-array,False,30886,45003,1526,False,3,"Can you solve this real interview question? Minimum Number of Increments on Subarrays to Form a Target Array - You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.

In one operation you can choose any subarray from initial and increment each value by one.

Return the minimum number of operations to form a target array from initial.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:


Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the target array from the initial array.
[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).
[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).
[1,2,2,2,1] increment 1 at index 2.
[1,2,3,2,1] target array is formed.


Example 2:


Input: target = [3,1,1,2]
Output: 4
Explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2]


Example 3:


Input: target = [3,1,5,4,2]
Output: 7
Explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2].


 

Constraints:

 * 1 <= target.length <= 105
 * 1 <= target[i] <= 105",Solutions (349),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minNumberOperations(self, target: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minNumberOperations(target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minNumberOperations(self, target: List[int]) -> int:
        res = target[0]
        for i in range(1, len(target)):
            res += max(target[i] - target[i-1], 0)
        return res"
False,0,0,1635,,Number of Good Pairs,number-of-good-pairs,False,422708,479099,1512,False,1,"Can you solve this real interview question? Number of Good Pairs - Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:


Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.


Example 2:


Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.


Example 3:


Input: nums = [1,2,3]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (4.7K),3.7K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-good-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numIdenticalPairs(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numIdenticalPairs(self, nums: List[int]) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] == nums[j]:
                    count += 1
        return count"
False,0,0,1636,,Number of Substrings With Only 1s,number-of-substrings-with-only-1s,False,36318,79961,1513,False,2,"Can you solve this real interview question? Number of Substrings With Only 1s - Given a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""0110111""
Output: 9
Explanation: There are 9 substring in total with only 1's characters.
""1"" -> 5 times.
""11"" -> 3 times.
""111"" -> 1 time.

Example 2:


Input: s = ""101""
Output: 2
Explanation: Substring ""1"" is shown 2 times in s.


Example 3:


Input: s = ""111111""
Output: 21
Explanation: Each substring contains only 1's characters.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (537),708,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-substrings-with-only-1s/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSub(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numSub(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSub(self, s: str) -> int:
        count = s.split('0')
        res = sum(len(char)*(len(char)+1)//2 for char in count)
        return res % (10**9 + 7)"
False,0,0,1637,string-compression-ii,String Compression II,string-compression-ii,False,43261,87383,1531,False,3,"Can you solve this real interview question? String Compression II - Run-length encoding [http://en.wikipedia.org/wiki/Run-length_encoding] is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string ""aabccc"" we replace ""aa"" by ""a2"" and replace ""ccc"" by ""c3"". Thus the compressed string becomes ""a2bc3"".

Notice that in this problem, we are not adding '1' after single characters.

Given a string s and an integer k. You need to delete at most k characters from s such that the run-length encoded version of s has minimum length.

Find the minimum length of the run-length encoded version of s after deleting at most k characters.

 

Example 1:


Input: s = ""aaabcccd"", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us ""a3bc3d"" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = ""abcccd"" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be ""a3c3"" of length 4.

Example 2:


Input: s = ""aabbaa"", k = 2
Output: 2
Explanation: If we delete both 'b' characters, the resulting compressed string would be ""a4"" of length 2.


Example 3:


Input: s = ""aaaaaaaaaaa"", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is ""a11"" of length 3.


 

Constraints:

 * 1 <= s.length <= 100
 * 0 <= k <= s.length
 * s contains only lowercase English letters.",Solutions (243),1.6K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/string-compression-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getLengthOfOptimalCompression(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getLengthOfOptimalCompression(self, s: str, k: int) -> int:
        pass"
False,0,0,1638,,Best Position for a Service Centre,best-position-for-a-service-centre,False,11952,32023,1515,False,3,"Can you solve this real interview question? Best Position for a Service Centre - A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:

[https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg]

Answers within 10-5 of the actual value will be accepted.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg]


Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.


Example 2:

[https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg]


Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843


 

Constraints:

 * 1 <= positions.length <= 50
 * positions[i].length == 2
 * 0 <= xi, yi <= 100",Solutions (120),204,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/best-position-for-a-service-centre/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMinDistSum(self, positions: List[List[int]]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    positions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getMinDistSum(positions)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def getMinDistSum(self, positions: List[List[int]]) -> float:
        from scipy.optimize import minimize

        def total_distance(point):
            return sum(((point[0] - x) ** 2 + (point[1] - y) ** 2) ** 0.5 for x, y in positions)

        res = minimize(total_distance, (0, 0), method='nelder-mead')
        return res.fun"
False,0,0,1642,,Water Bottles,water-bottles,False,61149,101175,1518,False,1,"Can you solve this real interview question? Water Bottles - There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Given the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/01/sample_1_1875.png]


Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.
Number of water bottles you can drink: 9 + 3 + 1 = 13.


Example 2:

[https://assets.leetcode.com/uploads/2020/07/01/sample_2_1875.png]


Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.


 

Constraints:

 * 1 <= numBottles <= 100
 * 2 <= numExchange <= 100",Solutions (1.1K),854,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/water-bottles/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    numBottles: int = deserialize(""int"", read_line())
    numExchange: int = deserialize(""int"", read_line())
    ans = Solution().numWaterBottles(numBottles, numExchange)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numWaterBottles(self, numBottles: int, numExchange: int) -> int:
        return numBottles + (numBottles - 1) // (numExchange - 1)"
False,0,0,1643,number-of-nodes-in-the-sub-tree-with-the-same-label,Number of Nodes in the Sub-Tree With the Same Label,number-of-nodes-in-the-sub-tree-with-the-same-label,False,77937,140909,1519,False,2,"Can you solve this real interview question? Number of Nodes in the Sub-Tree With the Same Label - You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).

The edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.

Return an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.

A subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/01/q3e1.jpg]


Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = ""abaedcd""
Output: [2,1,1,1,1,1,1]
Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.
Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).


Example 2:

[https://assets.leetcode.com/uploads/2020/07/01/q3e2.jpg]


Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = ""bbbb""
Output: [4,2,1,1]
Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.
The sub-tree of node 3 contains only node 3, so the answer is 1.
The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.
The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.


Example 3:

[https://assets.leetcode.com/uploads/2020/07/01/q3e3.jpg]


Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = ""aabab""
Output: [3,2,1,1,1]


 

Constraints:

 * 1 <= n <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * labels.length == n
 * labels is consisting of only of lowercase English letters.",Solutions (1.2K),2.1K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    labels: str = deserialize(""str"", read_line())
    ans = Solution().countSubTrees(n, edges, labels)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countSubTrees(self, n: int, edges: List[List[int]], labels: str) -> List[int]:
        import collections
        
        def dfs(node, parent):
            count = collections.Counter()
            count[labels[node]] += 1
            
            for child in graph[node]:
                if child == parent:
                    continue
                count += dfs(child, node)
            
            ans[node] = count[labels[node]]
            return count
        
        graph = collections.defaultdict(list)
        for a, b in edges:
            graph[a].append(b)
            graph[b].append(a)
        
        ans = [0] * n
        dfs(0, -1)
        
        return ans"
False,0,0,1644,,Maximum Number of Non-Overlapping Substrings,maximum-number-of-non-overlapping-substrings,False,13025,34067,1520,False,3,"Can you solve this real interview question? Maximum Number of Non-Overlapping Substrings - Given a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:

 1. The substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true.
 2. A substring that contains a certain character c must also contain all occurrences of c.

Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.

Notice that you can return the substrings in any order.

 

Example 1:


Input: s = ""adefaddaccc""
Output: [""e"",""f"",""ccc""]
Explanation: The following are all the possible substrings that meet the conditions:
[
  ""adefaddaccc""
  ""adefadda"",
  ""ef"",
  ""e"",
  ""f"",
  ""ccc"",
]
If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose ""adefadda"", we are left with ""ccc"" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose ""ef"" since it can be split into two. Therefore, the optimal way is to choose [""e"",""f"",""ccc""] which gives us 3 substrings. No other solution of the same number of substrings exist.


Example 2:


Input: s = ""abbaccd""
Output: [""d"",""bb"",""cc""]
Explanation: Notice that while the set of substrings [""d"",""abba"",""cc""] also has length 3, it's considered incorrect since it has larger total length.


 

Constraints:

 * 1 <= s.length <= 105
 * s contains only lowercase English letters.",Solutions (114),663,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumOfSubstrings(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxNumOfSubstrings(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def maxNumOfSubstrings(self, s: str) -> List[str]:
        pass"
False,0,0,1645,,Find a Value of a Mysterious Function Closest to Target,find-a-value-of-a-mysterious-function-closest-to-target,False,8635,19901,1521,False,3,"Can you solve this real interview question? Find a Value of a Mysterious Function Closest to Target - [https://assets.leetcode.com/uploads/2020/07/09/change.png]

Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.

Return the minimum possible value of |func(arr, l, r) - target|.

Notice that func should be called with the values l and r where 0 <= l, r < arr.length.

 

Example 1:


Input: arr = [9,12,3,7,15], target = 5
Output: 2
Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.


Example 2:


Input: arr = [1000000,1000000,1000000], target = 1
Output: 999999
Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.


Example 3:


Input: arr = [1,2,4,8,16], target = 0
Output: 0


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i] <= 106
 * 0 <= target <= 107",Solutions (110),329,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestToTarget(self, arr: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().closestToTarget(arr, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def closestToTarget(self, arr: List[int], target: int) -> int:
        # Add your code here
        pass"
False,0,0,1646,kth-missing-positive-number,Kth Missing Positive Number,kth-missing-positive-number,False,297474,507965,1539,False,1,"Can you solve this real interview question? Kth Missing Positive Number - Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.

Return the kth positive integer that is missing from this array.

 

Example 1:


Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.


Example 2:


Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.


 

Constraints:

 * 1 <= arr.length <= 1000
 * 1 <= arr[i] <= 1000
 * 1 <= k <= 1000
 * arr[i] < arr[j] for 1 <= i < j <= arr.length

 

Follow up:

Could you solve this problem in less than O(n) complexity?",Solutions (3K),5.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-missing-positive-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKthPositive(self, arr: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKthPositive(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findKthPositive(self, arr: List[int], k: int) -> int:
        missing = []
        i = 1
        while len(missing) < k:
            if i not in arr:
                missing.append(i)
            i += 1
        return missing[k - 1]"
False,0,0,1647,,Can Convert String in K Moves,can-convert-string-in-k-moves,False,15979,47801,1540,False,2,"Can you solve this real interview question? Can Convert String in K Moves - Given two strings s and t, your goal is to convert s into t in k moves or less.

During the ith (1 <= i <= k) move you can:

 * Choose any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times.
 * Do nothing.

Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Shifting a character by i means applying the shift operations i times.

Remember that any index j can be picked at most once.

Return true if it's possible to convert s into t in no more than k moves, otherwise return false.

 

Example 1:


Input: s = ""input"", t = ""ouput"", k = 9
Output: true
Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.


Example 2:


Input: s = ""abc"", t = ""bcd"", k = 10
Output: false
Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.


Example 3:


Input: s = ""aab"", t = ""bbb"", k = 27
Output: true
Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.


 

Constraints:

 * 1 <= s.length, t.length <= 10^5
 * 0 <= k <= 10^9
 * s, t contain only lowercase English letters.",Solutions (262),330,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/can-convert-string-in-k-moves/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canConvertString(self, s: str, t: str, k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().canConvertString(s, t, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canConvertString(self, s: str, t: str, k: int) -> bool:
        if len(s) != len(t):
            return False
        diffs = [0] * 26
        for i in range(len(s)):
            diff = (ord(t[i]) - ord(s[i]) + 26) % 26
            if diff == 0:
                continue
            if diff > k or (diff != 0 and diffs[diff] * 26 + diff > k):
                return False
            diffs[diff] += 1
        return True"
False,0,0,1648,,Minimum Insertions to Balance a Parentheses String,minimum-insertions-to-balance-a-parentheses-string,False,38106,76476,1541,False,2,"Can you solve this real interview question? Minimum Insertions to Balance a Parentheses String - Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:

 * Any left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.
 * Left parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.

In other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.

 * For example, ""())"", ""())(())))"" and ""(())())))"" are balanced, "")()"", ""()))"" and ""(()))"" are not balanced.

You can insert the characters '(' and ')' at any position of the string to balance it if needed.

Return the minimum number of insertions needed to make s balanced.

 

Example 1:


Input: s = ""(()))""
Output: 1
Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add one more ')' at the end of the string to be ""(())))"" which is balanced.


Example 2:


Input: s = ""())""
Output: 0
Explanation: The string is already balanced.


Example 3:


Input: s = ""))())(""
Output: 3
Explanation: Add '(' to match the first '))', Add '))' to match the last '('.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of '(' and ')' only.",Solutions (434),859,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minInsertions(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minInsertions(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minInsertions(self, s: str) -> int:
        stack = []
        insertions = 0
        i = 0
        
        while i < len(s):
            if s[i] == '(':
                stack.append('(')
                i += 1
            else:
                if i + 1 < len(s) and s[i + 1] == ')':
                    if stack:
                        stack.pop()
                    else:
                        insertions += 1
                    i += 2
                else:
                    insertions += 1
                    i += 1
                    
        insertions += len(stack) * 2
        
        return insertions"
False,0,0,1649,,Maximum Number of Non-Overlapping Subarrays With Sum Equals Target,maximum-number-of-non-overlapping-subarrays-with-sum-equals-target,False,24332,51386,1546,False,2,"Can you solve this real interview question? Maximum Number of Non-Overlapping Subarrays With Sum Equals Target - Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.

 

Example 1:


Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).


Example 2:


Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.
([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104
 * 0 <= target <= 106",Solutions (298),925,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNonOverlapping(self, nums: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().maxNonOverlapping(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNonOverlapping(self, nums: List[int], target: int) -> int:
        seen = set()
        curr_sum = 0
        count = 0
        for num in nums:
            if curr_sum - target in seen:
                count += 1
                seen = set()
                curr_sum = 0
            curr_sum += num
            seen.add(curr_sum)
        return count"
False,0,0,1651,,Shuffle String,shuffle-string,False,285348,334810,1528,False,1,"Can you solve this real interview question? Shuffle String - You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.

Return the shuffled string.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/09/q1.jpg]


Input: s = ""codeleet"", indices = [4,5,6,7,0,2,1,3]
Output: ""leetcode""
Explanation: As shown, ""codeleet"" becomes ""leetcode"" after shuffling.


Example 2:


Input: s = ""abc"", indices = [0,1,2]
Output: ""abc""
Explanation: After shuffling, each character remains in its position.


 

Constraints:

 * s.length == indices.length == n
 * 1 <= n <= 100
 * s consists of only lowercase English letters.
 * 0 <= indices[i] < n
 * All values of indices are unique.",Solutions (3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/shuffle-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    indices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().restoreString(s, indices)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def restoreString(self, s: str, indices: List[int]) -> str:
        return ''.join([x for _, x in sorted(zip(indices, s))])"
False,0,0,1652,,Minimum Suffix Flips,minimum-suffix-flips,False,38792,53443,1529,False,2,"Can you solve this real interview question? Minimum Suffix Flips - You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.

In one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.

Return the minimum number of operations needed to make s equal to target.

 

Example 1:


Input: target = ""10111""
Output: 3
Explanation: Initially, s = ""00000"".
Choose index i = 2: ""00000"" -> ""00111""
Choose index i = 0: ""00111"" -> ""11000""
Choose index i = 1: ""11000"" -> ""10111""
We need at least 3 flip operations to form target.


Example 2:


Input: target = ""101""
Output: 3
Explanation: Initially, s = ""000"".
Choose index i = 0: ""000"" -> ""111""
Choose index i = 1: ""111"" -> ""100""
Choose index i = 2: ""100"" -> ""101""
We need at least 3 flip operations to form target.


Example 3:


Input: target = ""00000""
Output: 0
Explanation: We do not need any operations since the initial s already equals target.


 

Constraints:

 * n == target.length
 * 1 <= n <= 105
 * target[i] is either '0' or '1'.",Solutions (767),841,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-suffix-flips/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFlips(self, target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: str = deserialize(""str"", read_line())
    ans = Solution().minFlips(target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFlips(self, target: str) -> int:
        flips = 0
        current = '0' * len(target)
        for i in range(len(target)):
            if current[i] != target[i]:
                flips += 1
                current = current[:i] + target[i:]
        return flips

# Example usage
sol = Solution()
print(sol.minFlips(""10111""))
print(sol.minFlips(""101""))
print(sol.minFlips(""00000""))"
False,0,0,1656,,Count Good Triplets,count-good-triplets,False,95111,117507,1534,False,1,"Can you solve this real interview question? Count Good Triplets - Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.

A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:

 * 0 <= i < j < k < arr.length
 * |arr[i] - arr[j]| <= a
 * |arr[j] - arr[k]| <= b
 * |arr[i] - arr[k]| <= c

Where |x| denotes the absolute value of x.

Return the number of good triplets.

 

Example 1:


Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Output: 4
Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].


Example 2:


Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
Output: 0
Explanation: No triplet satisfies all conditions.


 

Constraints:

 * 3 <= arr.length <= 100
 * 0 <= arr[i] <= 1000
 * 0 <= a, b, c <= 1000",Solutions (862),623,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/count-good-triplets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().countGoodTriplets(arr, a, b, c)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countGoodTriplets(self, arr: List[int], a: int, b: int, c: int) -> int:
        count = 0
        for i in range(len(arr)):
            for j in range(i+1, len(arr)):
                for k in range(j+1, len(arr)):
                    if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:
                        count += 1
        return count"
False,0,0,1657,,Find the Winner of an Array Game,find-the-winner-of-an-array-game,False,28239,58145,1535,False,2,"Can you solve this real interview question? Find the Winner of an Array Game - Given an integer array arr of distinct integers and an integer k.

A game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.

 

Example 1:


Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.


Example 2:


Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.


 

Constraints:

 * 2 <= arr.length <= 105
 * 1 <= arr[i] <= 106
 * arr contains distinct integers.
 * 1 <= k <= 109",Solutions (347),561,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-winner-of-an-array-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getWinner(self, arr: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getWinner(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getWinner(self, arr: List[int], k: int) -> int:
        while True:
            if arr[0] > arr[1]:
                arr.append(arr[1])
                arr.pop(1)
            else:
                arr.append(arr[0])
                arr.pop(0)
                
            if arr[0] == max(arr):
                return arr[0] if k > 1 else max(arr)"
False,0,0,1658,,Minimum Swaps to Arrange a Binary Grid,minimum-swaps-to-arrange-a-binary-grid,False,12823,27591,1536,False,2,"Can you solve this real interview question? Minimum Swaps to Arrange a Binary Grid - Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/28/fw.jpg]


Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3


Example 2:

[https://assets.leetcode.com/uploads/2020/07/16/e2.jpg]


Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swaps have no effect on the grid.


Example 3:

[https://assets.leetcode.com/uploads/2020/07/16/e3.jpg]


Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
Output: 0


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 200
 * grid[i][j] is either 0 or 1",Solutions (229),515,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwaps(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minSwaps(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwaps(self, grid: List[List[int]]) -> int:
        pass     # Your code implementation goes here"
False,0,0,1659,,Get the Maximum Score,get-the-maximum-score,False,21211,53958,1537,False,3,"Can you solve this real interview question? Get the Maximum Score - You are given two sorted arrays of distinct integers nums1 and nums2.

A valid path is defined as follows:

 * Choose array nums1 or nums2 to traverse (from index-0).
 * Traverse the current array from left to right.
 * If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).

The score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png]


Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].


Example 2:


Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].


Example 3:


Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.
Maximum sum is obtained with the path [6,7,8,9,10].


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * 1 <= nums1[i], nums2[i] <= 107
 * nums1 and nums2 are strictly increasing.",Solutions (300),805,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/get-the-maximum-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSum(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSum(self, nums1: List[int], nums2: List[int]) -> int:
        MOD = 10**9 + 7
        i = j = res = 0
        m, n = len(nums1), len(nums2)
        
        while i < m or j < n:
            if i < m and (j == n or nums1[i] < nums2[j]):
                res += nums1[i]
                i += 1
            elif j < n and (i == m or nums1[i] > nums2[j]):
                res += nums2[j]
                j += 1
            else:
                res += nums1[i]
                i += 1
                j += 1
            
        return res % MOD"
False,0,0,1660,,Thousand Separator,thousand-separator,False,41227,75610,1556,False,1,"Can you solve this real interview question? Thousand Separator - Given an integer n, add a dot (""."") as the thousands separator and return it in string format.

 

Example 1:


Input: n = 987
Output: ""987""


Example 2:


Input: n = 1234
Output: ""1.234""


 

Constraints:

 * 0 <= n <= 231 - 1",Solutions (830),411,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/thousand-separator/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def thousandSeparator(self, n: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().thousandSeparator(n)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def thousandSeparator(self, n: int) -> str:
        return '{:,}'.format(n).replace(',', '.')"
False,0,0,1661,,Minimum Number of Vertices to Reach All Nodes,minimum-number-of-vertices-to-reach-all-nodes,False,88995,112026,1557,False,2,"Can you solve this real interview question? Minimum Number of Vertices to Reach All Nodes - Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/07/untitled22.png]


Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].

Example 2:

[https://assets.leetcode.com/uploads/2020/07/07/untitled.png]


Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.


 

Constraints:

 * 2 <= n <= 10^5
 * 1 <= edges.length <= min(10^5, n * (n - 1) / 2)
 * edges[i].length == 2
 * 0 <= fromi, toi < n
 * All pairs (fromi, toi) are distinct.",Solutions (1.2K),2.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findSmallestSetOfVertices(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:
        in_degrees = [0] * n
        for edge in edges:
            in_degrees[edge[1]] += 1
        
        result = []
        for i in range(n):
            if in_degrees[i] == 0:
                result.append(i)
        
        return result"
False,0,0,1662,,Minimum Numbers of Function Calls to Make Target Array,minimum-numbers-of-function-calls-to-make-target-array,False,18069,28267,1558,False,2,"Can you solve this real interview question? Minimum Numbers of Function Calls to Make Target Array - You are given an integer array nums. You have an integer array arr of the same length with all values set to 0 initially. You also have the following modify function:

[https://assets.leetcode.com/uploads/2020/07/10/sample_2_1887.png]

You want to use the modify function to covert arr to nums using the minimum number of calls.

Return the minimum number of function calls to make nums from arr.

The test cases are generated so that the answer fits in a 32-bit signed integer.

 

Example 1:


Input: nums = [1,5]
Output: 5
Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).
Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).
Increment by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).
Total of operations: 1 + 2 + 2 = 5.


Example 2:


Input: nums = [2,2]
Output: 3
Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).
Double all the elements: [1, 1] -> [2, 2] (1 operation).
Total of operations: 2 + 1 = 3.


Example 3:


Input: nums = [4,2,5]
Output: 6
Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109",Solutions (244),541,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums: List[int]) -> int:
        pass"
False,0,0,1663,,Detect Cycles in 2D Grid,detect-cycles-in-2d-grid,False,32045,66789,1559,False,2,"Can you solve this real interview question? Detect Cycles in 2D Grid - Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.

Return true if any cycle of the same value exists in grid, otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/15/1.png]


Input: grid = [[""a"",""a"",""a"",""a""],[""a"",""b"",""b"",""a""],[""a"",""b"",""b"",""a""],[""a"",""a"",""a"",""a""]]
Output: true
Explanation: There are two valid cycles shown in different colors in the image below:
[https://assets.leetcode.com/uploads/2020/07/15/11.png]


Example 2:

[https://assets.leetcode.com/uploads/2020/07/15/22.png]


Input: grid = [[""c"",""c"",""c"",""a""],[""c"",""d"",""c"",""c""],[""c"",""c"",""e"",""c""],[""f"",""c"",""c"",""c""]]
Output: true
Explanation: There is only one valid cycle highlighted in the image below:
[https://assets.leetcode.com/uploads/2020/07/15/2.png]


Example 3:

[https://assets.leetcode.com/uploads/2020/07/15/3.png]


Input: grid = [[""a"",""b"",""b""],[""b"",""z"",""b""],[""b"",""b"",""a""]]
Output: false


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 500
 * grid consists only of lowercase English letters.",Solutions (451),932,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/detect-cycles-in-2d-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containsCycle(self, grid: List[List[str]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().containsCycle(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def containsCycle(self, grid: List[List[str]]) -> bool:
        def dfs(x, y, px, py, color):
            if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]) or grid[x][y] != color:
                return False
            if visited[x][y]:
                return True
            visited[x][y] = True
            for nx, ny in [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]:
                if (nx, ny) == (px, py):
                    continue
                if dfs(nx, ny, x, y, color):
                    return True
            return False
        
        visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if not visited[i][j]:
                    if dfs(i, j, -1, -1, grid[i][j]):
                        return True
        return False"
False,0,0,1666,make-the-string-great,Make The String Great,make-the-string-great,False,135450,214079,1544,False,1,"Can you solve this real interview question? Make The String Great - Given a string s of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:

 * 0 <= i <= s.length - 2
 * s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.

To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.

 

Example 1:


Input: s = ""leEeetcode""
Output: ""leetcode""
Explanation: In the first step, either you choose i = 1 or i = 2, both will result ""leEeetcode"" to be reduced to ""leetcode"".


Example 2:


Input: s = ""abBAcC""
Output: """"
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
""abBAcC"" --> ""aAcC"" --> ""cC"" --> """"
""abBAcC"" --> ""abBA"" --> ""aA"" --> """"


Example 3:


Input: s = ""s""
Output: ""s""


 

Constraints:

 * 1 <= s.length <= 100
 * s contains only lower and upper case English letters.",Solutions (2.3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/make-the-string-great/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeGood(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().makeGood(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def makeGood(self, s: str) -> str:
        stack = []
        for char in s:
            if stack and abs(ord(stack[-1]) - ord(char)) == 32:
                stack.pop()
            else:
                stack.append(char)
        return ''.join(stack)"
False,0,0,1667,,Find Kth Bit in Nth Binary String,find-kth-bit-in-nth-binary-string,False,32656,55860,1545,False,2,"Can you solve this real interview question? Find Kth Bit in Nth Binary String - Given two positive integers n and k, the binary string Sn is formed as follows:

 * S1 = ""0""
 * Si = Si - 1 + ""1"" + reverse(invert(Si - 1)) for i > 1

Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

 * S1 = ""0""
 * S2 = ""011""
 * S3 = ""0111001""
 * S4 = ""011100110110001""

Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

 

Example 1:


Input: n = 3, k = 1
Output: ""0""
Explanation: S3 is ""0111001"".
The 1st bit is ""0"".


Example 2:


Input: n = 4, k = 11
Output: ""1""
Explanation: S4 is ""011100110110001"".
The 11th bit is ""1"".


 

Constraints:

 * 1 <= n <= 20
 * 1 <= k <= 2n - 1",Solutions (560),749,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKthBit(self, n: int, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKthBit(n, k)
    print(""\noutput:"", serialize(ans, ""character""))
","class Solution:
    def findKthBit(self, n: int, k: int) -> str:
        k -= 1
        for i in range(n - 1, 0, -1):
            if k == (1 << i) - 1:
                return '1'
            elif k < (1 << i) - 1:
                k = (1 << i) - 1 - k
                s = self.findKthBit(n - 1, k)
                return '1' if s == '0' else '0'
        return '0'"
False,0,0,1668,,Find Longest Awesome Substring,find-longest-awesome-substring,False,11169,26951,1542,False,3,"Can you solve this real interview question? Find Longest Awesome Substring - You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.

Return the length of the maximum length awesome substring of s.

 

Example 1:


Input: s = ""3242415""
Output: 5
Explanation: ""24241"" is the longest awesome substring, we can form the palindrome ""24142"" with some swaps.


Example 2:


Input: s = ""12345678""
Output: 1


Example 3:


Input: s = ""213123""
Output: 6
Explanation: ""213123"" is the longest awesome substring, we can form the palindrome ""231132"" with some swaps.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists only of digits.",Solutions (111),666,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/find-longest-awesome-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestAwesome(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestAwesome(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestAwesome(self, s: str) -> int:
        pass"
False,0,0,1669,,Minimum Cost to Cut a Stick,minimum-cost-to-cut-a-stick,False,45715,80325,1547,False,3,"Can you solve this real interview question? Minimum Cost to Cut a Stick - Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:

[https://assets.leetcode.com/uploads/2020/07/21/statement.jpg]

Given an integer array cuts where cuts[i] denotes a position you should perform a cut at.

You should perform the cuts in order, you can change the order of the cuts as you wish.

The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/07/23/e1.jpg]


Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:
[https://assets.leetcode.com/uploads/2020/07/21/e11.jpg]
The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.
Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).

Example 2:


Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cuts ordering the cost will be 25.
There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.


 

Constraints:

 * 2 <= n <= 106
 * 1 <= cuts.length <= min(n - 1, 100)
 * 1 <= cuts[i] <= n - 1
 * All the integers in cuts array are distinct.",Solutions (443),2.5K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-cut-a-stick/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, n: int, cuts: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    cuts: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(n, cuts)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, n: int, cuts: List[int]) -> int:
        cuts.sort()
        cuts = [0] + cuts + [n]
        m = len(cuts)
        dp = [[0] * m for _ in range(m)]
        
        for d in range(2, m):
            for left in range(m - d):
                right = left + d
                dp[left][right] = min(dp[left][mid] + dp[mid][right] for mid in range(left + 1, right)) + cuts[right] - cuts[left]
        
        return dp[0][m-1]"
False,0,0,1674,minimum-operations-to-make-array-equal,Minimum Operations to Make Array Equal,minimum-operations-to-make-array-equal,False,80716,99076,1551,False,2,"Can you solve this real interview question? Minimum Operations to Make Array Equal - You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n).

In one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.

 

Example 1:


Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].


Example 2:


Input: n = 6
Output: 9


 

Constraints:

 * 1 <= n <= 104",Solutions (1.3K),1.2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-array-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minOperations(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, n: int) -> int:
        return (n//2) * ((n+1)//2)"
False,0,0,1675,,Magnetic Force Between Two Balls,magnetic-force-between-two-balls,False,39727,68431,1552,False,2,"Can you solve this real interview question? Magnetic Force Between Two Balls - In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions x and y is |x - y|.

Given the integer array position and the integer m. Return the required force.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/11/q3v1.jpg]


Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.


Example 2:


Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use baskets 1 and 1000000000.


 

Constraints:

 * n == position.length
 * 2 <= n <= 105
 * 1 <= position[i] <= 109
 * All integers in position are distinct.
 * 2 <= m <= position.length",Solutions (517),1.7K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/magnetic-force-between-two-balls/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDistance(self, position: List[int], m: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    position: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    ans = Solution().maxDistance(position, m)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDistance(self, position: List[int], m: int) -> int:
        position.sort()
        left, right = 1, position[-1] - position[0]
        while left < right:
            mid = (left + right) // 2
            count, prev = 1, position[0]
            for i in range(1, len(position)):
                if position[i] - prev >= mid:
                    count += 1
                    prev = position[i]
            if count >= m:
                left = mid + 1
            else:
                right = mid
        return left - 1"
False,0,0,1676,,Minimum Number of Days to Eat N Oranges,minimum-number-of-days-to-eat-n-oranges,False,29214,84105,1553,False,3,"Can you solve this real interview question? Minimum Number of Days to Eat N Oranges - There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:

 * Eat one orange.
 * If the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges.
 * If the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges.

You can only choose one of the actions per day.

Given the integer n, return the minimum number of days to eat n oranges.

 

Example 1:


Input: n = 10
Output: 4
Explanation: You have 10 oranges.
Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.
You need at least 4 days to eat the 10 oranges.


Example 2:


Input: n = 6
Output: 3
Explanation: You have 6 oranges.
Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).
Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.
You need at least 3 days to eat the 6 oranges.


 

Constraints:

 * 1 <= n <= 2 * 109",Solutions (262),864,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDays(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minDays(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDays(self, n: int) -> int:
        dp = {}
        
        def dfs(n):
            if n <= 1:
                return n
            
            if n not in dp:
                dp[n] = 1 + min(n%2 + dfs(n//2), n%3 + dfs(n//3))
                
            return dp[n]
        
        return dfs(n)"
False,0,0,1677,,Matrix Diagonal Sum,matrix-diagonal-sum,False,172735,215251,1572,False,1,"Can you solve this real interview question? Matrix Diagonal Sum - Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/14/sample_1911.png]


Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.


Example 2:


Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8


Example 3:


Input: mat = [[5]]
Output: 5


 

Constraints:

 * n == mat.length == mat[i].length
 * 1 <= n <= 100
 * 1 <= mat[i][j] <= 100",Solutions (3.3K),2K,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/matrix-diagonal-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().diagonalSum(mat)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def diagonalSum(self, mat: List[List[int]]) -> int:
        n = len(mat)
        primary_sum = secondary_sum = 0
        for i in range(n):
            primary_sum += mat[i][i]
            secondary_sum += mat[i][n - 1 - i] if i != n - 1 - i else 0
        return primary_sum + secondary_sum"
False,0,0,1678,,Number of Ways to Split a String,number-of-ways-to-split-a-string,False,23724,73054,1573,False,2,"Can you solve this real interview question? Number of Ways to Split a String - Given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.

Return the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""10101""
Output: 4
Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.
""1|010|1""
""1|01|01""
""10|10|1""
""10|1|01""


Example 2:


Input: s = ""1001""
Output: 0


Example 3:


Input: s = ""0000""
Output: 3
Explanation: There are three ways to split s in 3 parts.
""0|0|00""
""0|00|0""
""00|0|0""


 

Constraints:

 * 3 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (249),591,"# Created by asetti2002 at 2024/04/17 02:11
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-split-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numWays(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numWays(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numWays(self, s: str) -> int:
        MOD = 10**9 + 7
        ones = s.count('1')
        
        if ones % 3 != 0:
            return 0
        
        if ones == 0:
            return ((len(s) - 1) * (len(s) - 2) // 2) % MOD
        
        target = ones // 3
        prefix = 0
        suffix = 0
        count = 0
        
        for c in s:
            if c == '1':
                prefix += 1
            if prefix == target and c == '0':
                count += 1
            if prefix > target:
                break
        
        for c in reversed(s):
            if c == '1':
                suffix += 1
            if suffix == target and c == '0':
                count = (count + 1) % MOD
            if suffix > target:
                break
        
        return count % MOD"
False,0,0,1679,,Shortest Subarray to be Removed to Make Array Sorted,shortest-subarray-to-be-removed-to-make-array-sorted,False,24885,67181,1574,False,2,"Can you solve this real interview question? Shortest Subarray to be Removed to Make Array Sorted - Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.

Return the length of the shortest subarray to remove.

A subarray is a contiguous subsequence of the array.

 

Example 1:


Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.
Another correct solution is to remove the subarray [3,10,4].


Example 2:


Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].


Example 3:


Input: arr = [1,2,3]
Output: 0
Explanation: The array is already non-decreasing. We do not need to remove any elements.


 

Constraints:

 * 1 <= arr.length <= 105
 * 0 <= arr[i] <= 109",Solutions (219),1.4K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLengthOfShortestSubarray(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLengthOfShortestSubarray(self, arr: List[int]) -> int:
        n = len(arr)
        left, right = 0, n - 1
        while left < n - 1 and arr[left] <= arr[left + 1]:
            left += 1
        if left == n - 1:
            return 0
        while right > 0 and arr[right] >= arr[right - 1]:
            right -= 1
        res = min(n - left - 1, right) 
        for i in range(left + 1):
            if arr[i] <= arr[right]:
                res = min(res, right - i - 1)
            elif right < n - 1:
                right += 1
            else:
                break
        return res"
False,0,0,1680,,Count All Possible Routes,count-all-possible-routes,False,12647,22299,1575,False,3,"Can you solve this real interview question? Count All Possible Routes - You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.

Notice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).

Return the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5
Output: 4
Explanation: The following are all possible routes, each uses 5 units of fuel:
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3


Example 2:


Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6
Output: 5
Explanation: The following are all possible routes:
1 -> 0, used fuel = 1
1 -> 2 -> 0, used fuel = 5
1 -> 2 -> 1 -> 0, used fuel = 5
1 -> 0 -> 1 -> 0, used fuel = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5


Example 3:


Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3
Output: 0
Explanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.


 

Constraints:

 * 2 <= locations.length <= 100
 * 1 <= locations[i] <= 109
 * All integers in locations are distinct.
 * 0 <= start, finish < locations.length
 * 1 <= fuel <= 200",Solutions (199),478,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-all-possible-routes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    locations: List[int] = deserialize(""List[int]"", read_line())
    start: int = deserialize(""int"", read_line())
    finish: int = deserialize(""int"", read_line())
    fuel: int = deserialize(""int"", read_line())
    ans = Solution().countRoutes(locations, start, finish, fuel)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countRoutes(self, locations: List[int], start: int, finish: int, fuel: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * len(locations) for _ in range(fuel + 1)]
        
        for f in range(fuel + 1):
            dp[f][start] = 1
        
        for f in range(1, fuel + 1):
            for i in range(len(locations)):
                for j in range(len(locations)):
                    if i != j:
                        diff = abs(locations[i] - locations[j])
                        if f >= diff:
                            dp[f][i] = (dp[f][i] + dp[f - diff][j]) % MOD
        
        return dp[fuel][finish]"
False,0,0,1682,,Most Visited Sector in  a Circular Track,most-visited-sector-in-a-circular-track,False,26022,44413,1560,False,1,"Can you solve this real interview question? Most Visited Sector in  a Circular Track - Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]

Return an array of the most visited sectors sorted in ascending order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg]


Input: n = 4, rounds = [1,3,1,2]
Output: [1,2]
Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:
1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)
We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.

Example 2:


Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]
Output: [2]


Example 3:


Input: n = 7, rounds = [1,3,5,7]
Output: [1,2,3,4,5,6,7]


 

Constraints:

 * 2 <= n <= 100
 * 1 <= m <= 100
 * rounds.length == m + 1
 * 1 <= rounds[i] <= n
 * rounds[i] != rounds[i + 1] for 0 <= i < m",Solutions (260),263,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/most-visited-sector-in-a-circular-track/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostVisited(self, n: int, rounds: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    rounds: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mostVisited(n, rounds)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def mostVisited(self, n: int, rounds: List[int]) -> List[int]:
        freq = [0] * (n + 1)
        for i in range(len(rounds) - 1):
            start, end = rounds[i], rounds[i + 1]
            if start <= end:
                for j in range(start, end):
                    freq[j] += 1
            else:
                for j in range(1, end):
                    freq[j] += 1
                for j in range(start, n + 1):
                    freq[j] += 1
        
        max_freq = max(freq)
        result = [i for i in range(1, n + 1) if freq[i] == max_freq]
        
        return result"
False,0,0,1683,,Maximum Number of Coins You Can Get,maximum-number-of-coins-you-can-get,False,64355,81355,1561,False,2,"Can you solve this real interview question? Maximum Number of Coins You Can Get - There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:

 * In each step, you will choose any 3 piles of coins (not necessarily consecutive).
 * Of your choice, Alice will pick the pile with the maximum number of coins.
 * You will pick the next pile with the maximum number of coins.
 * Your friend Bob will pick the last pile.
 * Repeat until there are no more piles of coins.

Given an array of integers piles where piles[i] is the number of coins in the ith pile.

Return the maximum number of coins that you can have.

 

Example 1:


Input: piles = [2,4,1,2,7,8]
Output: 9
Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.
Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.
The maximum number of coins which you can have are: 7 + 2 = 9.
On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.


Example 2:


Input: piles = [2,4,5]
Output: 4


Example 3:


Input: piles = [9,8,7,6,5,1,2,3,4]
Output: 18


 

Constraints:

 * 3 <= piles.length <= 105
 * piles.length % 3 == 0
 * 1 <= piles[i] <= 104",Solutions (1.2K),1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-coins-you-can-get/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCoins(self, piles: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxCoins(piles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCoins(self, piles: List[int]) -> int:
        piles.sort()
        return sum(piles[n // 3 * 2::3])"
False,0,0,1684,,Find Latest Group of Size M,find-latest-group-of-size-m,False,16030,37449,1562,False,2,"Can you solve this real interview question? Find Latest Group of Size M - Given an array arr that represents a permutation of numbers from 1 to n.

You have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.

You are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.

 

Example 1:


Input: arr = [3,5,1,2,4], m = 1
Output: 4
Explanation: 
Step 1: ""00100"", groups: [""1""]
Step 2: ""00101"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""11101"", groups: [""111"", ""1""]
Step 5: ""11111"", groups: [""11111""]
The latest step at which there exists a group of size 1 is step 4.


Example 2:


Input: arr = [3,1,5,4,2], m = 2
Output: -1
Explanation: 
Step 1: ""00100"", groups: [""1""]
Step 2: ""10100"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""10111"", groups: [""1"", ""111""]
Step 5: ""11111"", groups: [""11111""]
No group of size 2 exists during any step.


 

Constraints:

 * n == arr.length
 * 1 <= m <= n <= 105
 * 1 <= arr[i] <= n
 * All integers in arr are distinct.",Solutions (208),581,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/find-latest-group-of-size-m/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLatestStep(self, arr: List[int], m: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    ans = Solution().findLatestStep(arr, m)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findLatestStep(self, arr: List[int], m: int) -> int:
        def findGroupLength(arr):
            max_length = 0
            current_length = 0
            for digit in arr:
                if digit == '1':
                    current_length += 1
                else:
                    max_length = max(max_length, current_length)
                    current_length = 0
            max_length = max(max_length, current_length)
            return max_length
        
        n = len(arr)
        binary_str = ['0'] * n
        result = -1
        
        for i in range(n):
            binary_str[arr[i]-1] = '1'
            group_length = findGroupLength(binary_str)
            if group_length == m:
                result = i + 1
        
        return result"
False,0,0,1685,,Stone Game V,stone-game-v,False,15534,38525,1563,False,3,"Can you solve this real interview question? Stone Game V - There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.

In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.

The game ends when there is only one stone remaining. Alice's is initially zero.

Return the maximum score that Alice can obtain.

 

Example 1:


Input: stoneValue = [6,2,3,4,5,5]
Output: 18
Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.
In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).
The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.


Example 2:


Input: stoneValue = [7,7,7,7,7,7,7]
Output: 28


Example 3:


Input: stoneValue = [4]
Output: 0


 

Constraints:

 * 1 <= stoneValue.length <= 500
 * 1 <= stoneValue[i] <= 106",Solutions (221),505,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-v/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameV(self, stoneValue: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stoneValue: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameV(stoneValue)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def stoneGameV(self, stoneValue: List[int]) -> int:
        n = len(stoneValue)
        dp = [[0]*n for _ in range(n)]
        prefix_sum = [0] + list(itertools.accumulate(stoneValue))

        def rangeSum(i, j):
            return prefix_sum[j + 1] - prefix_sum[i]

        for length in range(2, n+1):
            for i in range(n-length+1):
                j = i + length - 1
                for k in range(i, j):
                    left_sum = rangeSum(i, k)
                    right_sum = rangeSum(k+1, j)
                    if left_sum <= right_sum:
                        dp[i][j] = max(dp[i][j], dp[i][k] + left_sum)
                    if left_sum >= right_sum:
                        dp[i][j] = max(dp[i][j], dp[k+1][j] + right_sum)

        return dp[0][n-1]"
False,0,0,1689,,Detect Pattern of Length M Repeated K or More Times,detect-pattern-of-length-m-repeated-k-or-more-times,False,29156,67251,1566,False,1,"Can you solve this real interview question? Detect Pattern of Length M Repeated K or More Times - Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return true if there exists a pattern of length m that is repeated k or more times, otherwise return false.

 

Example 1:


Input: arr = [1,2,4,4,4,4], m = 1, k = 3
Output: true
Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.


Example 2:


Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2
Output: true
Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.


Example 3:


Input: arr = [1,2,1,2,1,3], m = 2, k = 3
Output: false
Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.


 

Constraints:

 * 2 <= arr.length <= 100
 * 1 <= arr[i] <= 100
 * 1 <= m <= 100
 * 2 <= k <= 100",Solutions (341),582,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().containsPattern(arr, m, k)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def containsPattern(self, arr: List[int], m: int, k: int) -> bool:
        for i in range(len(arr) - m * k + 1):
            if arr[i:i+m] * k == arr[i:i+m*k]:
                return True
        return False"
False,0,0,1690,,Maximum Length of Subarray With Positive Product,maximum-length-of-subarray-with-positive-product,False,81982,186250,1567,False,2,"Can you solve this real interview question? Maximum Length of Subarray With Positive Product - Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:


Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.


Example 2:


Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.

Example 3:


Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].


 

Constraints:

 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (803),2.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaxLen(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getMaxLen(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaxLen(self, nums: List[int]) -> int:
        pos = neg = 0
        max_len = 0
        
        for num in nums:
            if num > 0:
                pos += 1
                neg = neg + 1 if neg > 0 else 0
            elif num < 0:
                new_pos = neg + 1 if neg > 0 else 0
                neg = pos + 1
                pos = new_pos
            else:
                pos = neg = 0
                
            max_len = max(max_len, pos)
        
        return max_len"
False,0,0,1691,,Minimum Number of Days to Disconnect Island,minimum-number-of-days-to-disconnect-island,False,10656,22910,1568,False,3,"Can you solve this real interview question? Minimum Number of Days to Disconnect Island - You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell (1) into a water cell (0).

Return the minimum number of days to disconnect the grid.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/24/land1.jpg]


Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]

Output: 2
Explanation: We need at least 2 days to get a disconnected grid.
Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/24/land2.jpg]


Input: grid = [[1,1]]
Output: 2
Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 30
 * grid[i][j] is either 0 or 1.",Solutions (151),544,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDays(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minDays(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDays(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,1692,,Number of Ways to Reorder Array to Get Same BST,number-of-ways-to-reorder-array-to-get-same-bst,False,11711,24476,1569,False,3,"Can you solve this real interview question? Number of Ways to Reorder Array to Get Same BST - Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.

 * For example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.

Return the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/12/bb.png]


Input: nums = [2,1,3]
Output: 1
Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.


Example 2:

[https://assets.leetcode.com/uploads/2020/08/12/ex1.png]


Input: nums = [3,4,5,1,2]
Output: 5
Explanation: The following 5 arrays will yield the same BST: 
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]


Example 3:

[https://assets.leetcode.com/uploads/2020/08/12/ex4.png]


Input: nums = [1,2,3]
Output: 0
Explanation: There are no other orderings of nums that will yield the same BST.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= nums.length
 * All integers in nums are distinct.",Solutions (150),535,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfWays(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numOfWays(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfWays(self, nums: List[int]) -> int:
        def ways(nums):
            if len(nums) <= 2:
                return 1
            left = [n for n in nums if n < nums[0]]
            right = [n for n in nums if n > nums[0]]
            return comb(len(left) + len(right), len(left)) * ways(left) * ways(right) % 1000000007

        return (ways(nums) - 1) % 1000000007"
False,0,0,1693,sum-of-all-odd-length-subarrays,Sum of All Odd Length Subarrays,sum-of-all-odd-length-subarrays,False,151800,182021,1588,False,1,"Can you solve this real interview question? Sum of All Odd Length Subarrays - Given an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.

A subarray is a contiguous subsequence of the array.

 

Example 1:


Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:


Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.

Example 3:


Input: arr = [10,11,12]
Output: 66


 

Constraints:

 * 1 <= arr.length <= 100
 * 1 <= arr[i] <= 1000

 

Follow up:

Could you solve this problem in O(n) time complexity?",Solutions (1.8K),3.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-all-odd-length-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumOddLengthSubarrays(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumOddLengthSubarrays(self, arr: List[int]) -> int:
        res = 0
        for i in range(len(arr)):
            res += ((i + 1) * (len(arr) - i) + 1) // 2 * arr[i]
        return res"
False,0,0,1694,,Make Sum Divisible by P,make-sum-divisible-by-p,False,21328,76119,1590,False,2,"Can you solve this real interview question? Make Sum Divisible by P - Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.

Return the length of the smallest subarray that you need to remove, or -1 if it's impossible.

A subarray is defined as a contiguous block of elements in the array.

 

Example 1:


Input: nums = [3,1,4,2], p = 6
Output: 1
Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.


Example 2:


Input: nums = [6,3,5,2], p = 9
Output: 2
Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.


Example 3:


Input: nums = [1,2,3], p = 3
Output: 0
Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= p <= 109",Solutions (184),1.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/make-sum-divisible-by-p/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSubarray(self, nums: List[int], p: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    p: int = deserialize(""int"", read_line())
    ans = Solution().minSubarray(nums, p)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSubarray(self, nums: List[int], p: int) -> int:
        target = sum(nums) % p
        if target == 0:
            return 0
        dic = {0: -1}
        cur, res = 0, len(nums)
        for i in range(len(nums)):
            cur = (cur + nums[i]) % p
            dic[cur] = i
            if (cur - target) % p in dic:
                res = min(res, i - dic[(cur - target) % p])
        return res if res < len(nums) else -1"
False,0,0,1695,,Maximum Sum Obtained of Any Permutation,maximum-sum-obtained-of-any-permutation,False,15706,42174,1589,False,2,"Can you solve this real interview question? Maximum Sum Obtained of Any Permutation - We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.

Return the maximum total sum of all requests among all permutations of nums.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.
A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.


Example 2:


Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].

Example 3:


Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].

 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 0 <= nums[i] <= 105
 * 1 <= requests.length <= 105
 * requests[i].length == 2
 * 0 <= starti <= endi < n",Solutions (183),644,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    requests: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxSumRangeQuery(nums, requests)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumRangeQuery(self, nums: List[int], requests: List[List[int]]) -> int:
        MOD = 10**9 + 7
        count = [0] * len(nums)
        
        for start, end in requests:
            count[start] += 1
            if end + 1 < len(nums):
                count[end + 1] -= 1
                
        for i in range(1, len(nums)):
            count[i] += count[i - 1]
            
        nums.sort()
        count.sort()
        
        return sum(x * y for x, y in zip(nums, count)) % MOD"
False,0,0,1696,,Strange Printer II,strange-printer-ii,False,8458,14427,1591,False,3,"Can you solve this real interview question? Strange Printer II - There is a strange printer with the following two special requirements:

 * On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.
 * Once the printer has used a color for the above operation, the same color cannot be used again.

You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.

Return true if it is possible to print the matrix targetGrid, otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/23/print1.jpg]


Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true


Example 2:

[https://assets.leetcode.com/uploads/2021/12/23/print2.jpg]


Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true


Example 3:


Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.


 

Constraints:

 * m == targetGrid.length
 * n == targetGrid[i].length
 * 1 <= m, n <= 60
 * 1 <= targetGrid[row][col] <= 60",Solutions (111),503,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/strange-printer-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPrintable(self, targetGrid: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    targetGrid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isPrintable(targetGrid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPrintable(self, targetGrid: List[List[int]]) -> bool:
        pass"
False,0,0,1698,,Replace All ?'s to Avoid Consecutive Repeating Characters,replace-all-s-to-avoid-consecutive-repeating-characters,False,51797,107297,1576,False,1,"Can you solve this real interview question? Replace All ?'s to Avoid Consecutive Repeating Characters - Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.

It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.

Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.

 

Example 1:


Input: s = ""?zs""
Output: ""azs""
Explanation: There are 25 solutions for this problem. From ""azs"" to ""yzs"", all are valid. Only ""z"" is an invalid modification as the string will consist of consecutive repeating characters in ""zzs"".


Example 2:


Input: s = ""ubv?w""
Output: ""ubvaw""
Explanation: There are 24 solutions for this problem. Only ""v"" and ""w"" are invalid modifications as the strings will consist of consecutive repeating characters in ""ubvvw"" and ""ubvww"".


 

Constraints:

 * 1 <= s.length <= 100
 * s consist of lowercase English letters and '?'.",Solutions (583),487,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def modifyString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().modifyString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def modifyString(self, s: str) -> str:
        s = list(s)
        for i in range(len(s)):
            if s[i] == '?':
                for c in 'abcdefghijklmnopqrstuvwxyz':
                    if i > 0 and s[i - 1] == c:
                        continue
                    if i < len(s) - 1 and s[i + 1] == c:
                        continue
                    s[i] = c
                    break
        return ''.join(s)"
False,0,0,1699,,Number of Ways Where Square of Number Is Equal to Product of Two Numbers,number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers,False,17907,44636,1577,False,2,"Can you solve this real interview question? Number of Ways Where Square of Number Is Equal to Product of Two Numbers - Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:

 * Type 1: Triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
 * Type 2: Triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.

 

Example 1:


Input: nums1 = [7,4], nums2 = [5,2,8,9]
Output: 1
Explanation: Type 1: (1, 1, 2), nums1[1]2 = nums2[1] * nums2[2]. (42 = 2 * 8). 


Example 2:


Input: nums1 = [1,1], nums2 = [1,1,1]
Output: 9
Explanation: All Triplets are valid, because 12 = 1 * 1.
Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]2 = nums2[j] * nums2[k].
Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]2 = nums1[j] * nums1[k].


Example 3:


Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]
Output: 2
Explanation: There are 2 valid triplets.
Type 1: (3,0,2).  nums1[3]2 = nums2[0] * nums2[2].
Type 2: (3,0,1).  nums2[3]2 = nums1[0] * nums1[1].


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 1000
 * 1 <= nums1[i], nums2[i] <= 105",Solutions (237),320,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numTriplets(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        count = 0
        for i in range(len(nums1)):
            for j in range(len(nums2)):
                for k in range(j+1, len(nums2)):
                    if nums1[i]*nums1[i] == nums2[j]*nums2[k]:
                        count += 1
        
        for i in range(len(nums2)):
            for j in range(len(nums1)):
                for k in range(j+1, len(nums1)):
                    if nums2[i]*nums2[i] == nums1[j]*nums1[k]:
                        count += 1
        
        return count"
False,0,0,1700,minimum-time-to-make-rope-colorful,Minimum Time to Make Rope Colorful,minimum-time-to-make-rope-colorful,False,145184,228718,1578,False,2,"Can you solve this real interview question? Minimum Time to Make Rope Colorful - Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the ith balloon.

Alice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the ith balloon from the rope.

Return the minimum time Bob needs to make the rope colorful.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/13/ballon1.jpg]


Input: colors = ""abaac"", neededTime = [1,2,3,4,5]
Output: 3
Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.
Bob can remove the blue balloon at index 2. This takes 3 seconds.
There are no longer two consecutive balloons of the same color. Total time = 3.

Example 2:

[https://assets.leetcode.com/uploads/2021/12/13/balloon2.jpg]


Input: colors = ""abc"", neededTime = [1,2,3]
Output: 0
Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.


Example 3:

[https://assets.leetcode.com/uploads/2021/12/13/balloon3.jpg]


Input: colors = ""aabaa"", neededTime = [1,2,3,4,1]
Output: 2
Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.
There are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.


 

Constraints:

 * n == colors.length == neededTime.length
 * 1 <= n <= 105
 * 1 <= neededTime[i] <= 104
 * colors contains only lowercase English letters.",Solutions (2.3K),2.8K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-make-rope-colorful/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, colors: str, neededTime: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    colors: str = deserialize(""str"", read_line())
    neededTime: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(colors, neededTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, colors: str, neededTime: List[int]) -> int:
        pass"
False,0,0,1701,remove-max-number-of-edges-to-keep-graph-fully-traversable,Remove Max Number of Edges to Keep Graph Fully Traversable,remove-max-number-of-edges-to-keep-graph-fully-traversable,False,18436,34658,1579,False,3,"Can you solve this real interview question? Remove Max Number of Edges to Keep Graph Fully Traversable - Alice and Bob have an undirected graph of n nodes and three types of edges:

 * Type 1: Can be traversed by Alice only.
 * Type 2: Can be traversed by Bob only.
 * Type 3: Can be traversed by both Alice and Bob.

Given an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return -1 if Alice and Bob cannot fully traverse the graph.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/19/ex1.png]


Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
Output: 2
Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.


Example 2:

[https://assets.leetcode.com/uploads/2020/08/19/ex2.png]


Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
Output: 0
Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.


Example 3:

[https://assets.leetcode.com/uploads/2020/08/19/ex3.png]


Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
Output: -1
Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.

 

 

Constraints:

 * 1 <= n <= 105
 * 1 <= edges.length <= min(105, 3 * n * (n - 1) / 2)
 * edges[i].length == 3
 * 1 <= typei <= 3
 * 1 <= ui < vi <= n
 * All tuples (typei, ui, vi) are distinct.",Solutions (295),944,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxNumEdgesToRemove(n, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNumEdgesToRemove(self, n: int, edges: List[List[int]]) -> int:
        # Your code here

        return 0"
False,0,0,1704,,Special Positions in a Binary Matrix,special-positions-in-a-binary-matrix,False,39811,60875,1582,False,1,"Can you solve this real interview question? Special Positions in a Binary Matrix - Given an m x n binary matrix mat, return the number of special positions in mat.

A position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/23/special1.jpg]


Input: mat = [[1,0,0],[0,0,1],[1,0,0]]
Output: 1
Explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/24/special-grid.jpg]


Input: mat = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
Explanation: (0, 0), (1, 1) and (2, 2) are special positions.


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 100
 * mat[i][j] is either 0 or 1.",Solutions (559),601,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/special-positions-in-a-binary-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numSpecial(self, mat: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numSpecial(mat)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numSpecial(self, mat: List[List[int]]) -> int:
        row_count = [0] * len(mat)
        col_count = [0] * len(mat[0])
        for i in range(len(mat)):
            for j in range(len(mat[0])):
                row_count[i] += mat[i][j]
                col_count[j] += mat[i][j]
        return sum(mat[i][j] == 1 and row_count[i] == 1 and col_count[j] == 1 for i in range(len(mat)) for j in range(len(mat[0])) )"
False,0,0,1705,,Count Unhappy Friends,count-unhappy-friends,False,23665,38813,1583,False,2,"Can you solve this real interview question? Count Unhappy Friends - You are given a list of preferences for n friends, where n is always even.

For each person i, preferences[i] contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from 0 to n-1.

All the friends are divided into pairs. The pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.

However, this pairing may cause some of the friends to be unhappy. A friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:

 * x prefers u over y, and
 * u prefers x over v.

Return the number of unhappy friends.

 

Example 1:


Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
Output: 2
Explanation:
Friend 1 is unhappy because:
- 1 is paired with 0 but prefers 3 over 0, and
- 3 prefers 1 over 2.
Friend 3 is unhappy because:
- 3 is paired with 2 but prefers 1 over 2, and
- 1 prefers 3 over 0.
Friends 0 and 2 are happy.


Example 2:


Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
Output: 0
Explanation: Both friends 0 and 1 are happy.


Example 3:


Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
Output: 4


 

Constraints:

 * 2 <= n <= 500
 * n is even.
 * preferences.length == n
 * preferences[i].length == n - 1
 * 0 <= preferences[i][j] <= n - 1
 * preferences[i] does not contain i.
 * All values in preferences[i] are unique.
 * pairs.length == n/2
 * pairs[i].length == 2
 * xi != yi
 * 0 <= xi, yi <= n - 1
 * Each person is contained in exactly one pair.",Solutions (252),242,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-unhappy-friends/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    preferences: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    pairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().unhappyFriends(n, preferences, pairs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -> int:
        def find_index(arr, ele):
            for i in range(len(arr)):
                if arr[i] == ele:
                    return i
            return -1
        
        preference_map = {}
        for i in range(n):
            preference_map[i] = preferences[i]
        
        pair_map = {}
        for pair in pairs:
            pair_map[pair[0]] = pair[1]
            pair_map[pair[1]] = pair[0]
        
        unhappy_count = 0
        for x in range(n):
            y = pair_map[x]
            x_index = find_index(preferences[x], y)
            for i in range(x_index):
                u = preferences[x][i]
                v = pair_map[u]
                if find_index(preferences[u], x) < find_index(preferences[u], v):
                    unhappy_count += 1
                    break
        
        return unhappy_count"
False,0,0,1706,min-cost-to-connect-all-points,Min Cost to Connect All Points,min-cost-to-connect-all-points,False,152998,239062,1584,False,2,"Can you solve this real interview question? Min Cost to Connect All Points - You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/08/26/d.png]


Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation: 
[https://assets.leetcode.com/uploads/2020/08/26/c.png]
We can connect the points as shown above to get the minimum cost of 20.
Notice that there is a unique path between every pair of points.


Example 2:


Input: points = [[3,12],[-2,5],[-4,1]]
Output: 18


 

Constraints:

 * 1 <= points.length <= 1000
 * -106 <= xi, yi <= 106
 * All pairs (xi, yi) are distinct.",Solutions (1.2K),3.5K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/min-cost-to-connect-all-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minCostConnectPoints(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        import heapq
        def manhattan_distance(p1, p2):
            return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

        n = len(points)
        min_cost = 0
        visited = [False] * n
        pq = [(0, 0)]
        while pq:
            cost, node = heapq.heappop(pq)
            if visited[node]:
                continue
            visited[node] = True
            min_cost += cost
            for i in range(n):
                if not visited[i]:
                    heapq.heappush(pq, (manhattan_distance(points[node], points[i]), i))
        return min_cost"
False,0,0,1707,,Check If String Is Transformable With Substring Sort Operations,check-if-string-is-transformable-with-substring-sort-operations,False,6872,14338,1585,False,3,"Can you solve this real interview question? Check If String Is Transformable With Substring Sort Operations - Given two strings s and t, transform string s into string t using the following operation any number of times:

 * Choose a non-empty substring in s and sort it in place so the characters are in ascending order.
   * For example, applying the operation on the underlined substring in ""14234"" results in ""12344"".

Return true if it is possible to transform s into t. Otherwise, return false.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""84532"", t = ""34852""
Output: true
Explanation: You can transform s into t using the following sort operations:
""84532"" (from index 2 to 3) -> ""84352""
""84352"" (from index 0 to 2) -> ""34852""


Example 2:


Input: s = ""34521"", t = ""23415""
Output: true
Explanation: You can transform s into t using the following sort operations:
""34521"" -> ""23451""
""23451"" -> ""23415""


Example 3:


Input: s = ""12345"", t = ""12435""
Output: false


 

Constraints:

 * s.length == t.length
 * 1 <= s.length <= 105
 * s and t consist of only digits.",Solutions (79),397,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isTransformable(self, s: str, t: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().isTransformable(s, t)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isTransformable(self, s: str, t: str) -> bool:
        def check_sort(s: str, t: str) -> bool:
            s_dict, t_dict = {}, {}
            for char_s, char_t in zip(s, t):
                if char_s in s_dict:
                    s_dict[char_s] += 1
                else:
                    s_dict[char_s] = 1
                if char_t in t_dict:
                    t_dict[char_t] += 1
                else:
                    t_dict[char_t] = 1

            return s_dict == t_dict

        def can_transform_tail(s: str, t: str) -> bool:
            if not s:
                return True
            if s[0] == t[0]:
                return can_transform_tail(s[1:], t[1:])
            i = s.find(t[0])
            if i == -1:
                return False
            return can_transform_tail(s[:i], t[:1]) and check_sort(s[i:], t[1:])

        return can_transform_tail(s, t)"
False,0,0,1709,,Alert Using Same Key-Card Three or More Times in a One Hour Period,alert-using-same-key-card-three-or-more-times-in-a-one-hour-period,False,29195,62237,1604,False,2,"Can you solve this real interview question? Alert Using Same Key-Card Three or More Times in a One Hour Period - LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.

You are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.

Access times are given in the 24-hour time format ""HH:MM"", such as ""23:51"" and ""09:49"".

Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.

Notice that ""10:00"" - ""11:00"" is considered to be within a one-hour period, while ""22:51"" - ""23:52"" is not considered to be within a one-hour period.

 

Example 1:


Input: keyName = [""daniel"",""daniel"",""daniel"",""luis"",""luis"",""luis"",""luis""], keyTime = [""10:00"",""10:40"",""11:00"",""09:00"",""11:00"",""13:00"",""15:00""]
Output: [""daniel""]
Explanation: ""daniel"" used the keycard 3 times in a one-hour period (""10:00"",""10:40"", ""11:00"").


Example 2:


Input: keyName = [""alice"",""alice"",""alice"",""bob"",""bob"",""bob"",""bob""], keyTime = [""12:01"",""12:00"",""18:00"",""21:00"",""21:20"",""21:30"",""23:00""]
Output: [""bob""]
Explanation: ""bob"" used the keycard 3 times in a one-hour period (""21:00"",""21:20"", ""21:30"").


 

Constraints:

 * 1 <= keyName.length, keyTime.length <= 105
 * keyName.length == keyTime.length
 * keyTime[i] is in the format ""HH:MM"".
 * [keyName[i], keyTime[i]] is unique.
 * 1 <= keyName[i].length <= 10
 * keyName[i] contains only lowercase English letters.",Solutions (298),254,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    keyName: List[str] = deserialize(""List[str]"", read_line())
    keyTime: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().alertNames(keyName, keyTime)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def alertNames(self, keyName: List[str], keyTime: List[str]) -> List[str]:
        from collections import defaultdict

        def convert_time(time_str):
            hours, minutes = map(int, time_str.split("":""))
            return hours * 60 + minutes

        keycards = defaultdict(list)
        alerts = set()

        for name, time in zip(keyName, keyTime):
            keycards[name].append(convert_time(time))

        for name, times in keycards.items():
            times.sort()
            for i in range(2, len(times)):
                if times[i] - times[i-2] <= 60:
                    alerts.add(name)

        return sorted(alerts)"
False,0,0,1710,find-server-that-handled-most-number-of-requests,Find Servers That Handled Most Number of Requests,find-servers-that-handled-most-number-of-requests,False,12889,30001,1606,False,3,"Can you solve this real interview question? Find Servers That Handled Most Number of Requests - You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:

 * The ith (0-indexed) request arrives.
 * If all servers are busy, the request is dropped (not handled at all).
 * If the (i % k)th server is available, assign the request to that server.
 * Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.

You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/08/load-1.png]


Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
Output: [1] 
Explanation: 
All of the servers start out available.
The first 3 requests are handled by the first 3 servers in order.
Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.
Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.
Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.


Example 2:


Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
Output: [0]
Explanation: 
The first 3 requests are handled by first 3 servers.
Request 3 comes in. It is handled by server 0 since the server is available.
Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.


Example 3:


Input: k = 3, arrival = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles a single request, so they are all considered the busiest.


 

Constraints:

 * 1 <= k <= 105
 * 1 <= arrival.length, load.length <= 105
 * arrival.length == load.length
 * 1 <= arrival[i], load[i] <= 109
 * arrival is strictly increasing.",Solutions (144),492,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    arrival: List[int] = deserialize(""List[int]"", read_line())
    load: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().busiestServers(k, arrival, load)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:
        # Solution code here
        pass"
False,0,0,1711,,Find Valid Matrix Given Row and Column Sums,find-valid-matrix-given-row-and-column-sums,False,33133,42485,1605,False,2,"Can you solve this real interview question? Find Valid Matrix Given Row and Column Sums - You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the ith row and colSum[j] is the sum of the elements of the jth column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.

 

Example 1:


Input: rowSum = [3,8], colSum = [4,7]
Output: [[3,0],
         [1,7]]
Explanation: 
0th row: 3 + 0 = 3 == rowSum[0]
1st row: 1 + 7 = 8 == rowSum[1]
0th column: 3 + 1 = 4 == colSum[0]
1st column: 0 + 7 = 7 == colSum[1]
The row and column sums match, and all matrix elements are non-negative.
Another possible matrix is: [[1,2],
                             [3,5]]


Example 2:


Input: rowSum = [5,7,10], colSum = [8,6,8]
Output: [[0,5,0],
         [6,1,0],
         [2,0,8]]


 

Constraints:

 * 1 <= rowSum.length, colSum.length <= 500
 * 0 <= rowSum[i], colSum[i] <= 108
 * sum(rowSum) == sum(colSum)",Solutions (356),1.2K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    rowSum: List[int] = deserialize(""List[int]"", read_line())
    colSum: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().restoreMatrix(rowSum, colSum)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def restoreMatrix(self, rowSum: List[int], colSum: List[int]) -> List[List[int]]:
        m, n = len(rowSum), len(colSum)
        matrix = [[0]*n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                matrix[i][j] = min(rowSum[i], colSum[j])
                rowSum[i] -= matrix[i][j]
                colSum[j] -= matrix[i][j]
        return matrix"
False,0,0,1714,,Rearrange Spaces Between Words,rearrange-spaces-between-words,False,46990,107929,1592,False,1,"Can you solve this real interview question? Rearrange Spaces Between Words - You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.

Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.

Return the string after rearranging the spaces.

 

Example 1:


Input: text = ""  this   is  a sentence ""
Output: ""this   is   a   sentence""
Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.


Example 2:


Input: text = "" practice   makes   perfect""
Output: ""practice   makes   perfect ""
Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.


 

Constraints:

 * 1 <= text.length <= 100
 * text consists of lowercase English letters and ' '.
 * text contains at least one word.",Solutions (603),363,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/rearrange-spaces-between-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reorderSpaces(self, text: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    ans = Solution().reorderSpaces(text)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reorderSpaces(self, text: str) -> str:
        words = text.split()
        word_count = len(words)
        space_count = text.count(' ')
        
        if word_count == 1:
            return words[0] + ' ' * space_count
        
        spaces_between = space_count // (word_count - 1)
        extra_spaces = space_count % (word_count - 1)
        
        return (' ' * spaces_between).join(words) + ' ' * extra_spaces"
False,0,0,1715,,Split a String Into the Max Number of Unique Substrings,split-a-string-into-the-max-number-of-unique-substrings,False,25392,45928,1593,False,2,"Can you solve this real interview question? Split a String Into the Max Number of Unique Substrings - Given a string s, return the maximum number of unique substrings that the given string can be split into.

You can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""ababccc""
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.


Example 2:


Input: s = ""aba""
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].


Example 3:


Input: s = ""aa""
Output: 1
Explanation: It is impossible to split the string any further.


 

Constraints:

 * 1 <= s.length <= 16

 * s contains only lower case English letters.",Solutions (336),719,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxUniqueSplit(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxUniqueSplit(self, s: str) -> int:
        def backtrack(start, path):
            if start == len(s):
                self.max_splits = max(self.max_splits, len(path))
                return
            for i in range(start+1, len(s)+1):
                if s[start:i] not in path:
                    backtrack(i, path + [s[start:i]])
        
        self.max_splits = 0
        backtrack(0, [])
        return self.max_splits"
False,0,0,1716,,Maximum Non Negative Product in a Matrix,maximum-non-negative-product-in-a-matrix,False,20316,61334,1594,False,2,"Can you solve this real interview question? Maximum Non Negative Product in a Matrix - You are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo 109 + 7. If the maximum product is negative, return -1.

Notice that the modulo is performed after getting the maximum product.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/23/product1.jpg]


Input: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]
Output: -1
Explanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/23/product2.jpg]


Input: grid = [[1,-2,1],[1,-2,1],[3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).


Example 3:

[https://assets.leetcode.com/uploads/2021/12/23/product3.jpg]


Input: grid = [[1,3],[0,-4]]
Output: 0
Explanation: Maximum non-negative product is shown (1 * 0 * -4 = 0).


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 15
 * -4 <= grid[i][j] <= 4",Solutions (347),709,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProductPath(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxProductPath(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProductPath(self, grid: List[List[int]]) -> int:
        MOD = 10**9 + 7
        m, n = len(grid), len(grid[0])
        max_dp = [[0 for _ in range(n)] for _ in range(m)]
        min_dp = [[0 for _ in range(n)] for _ in range(m)]

        max_dp[0][0] = min_dp[0][0] = grid[0][0]

        for i in range(1, m):
            max_dp[i][0] = min_dp[i][0] = min(grid[i][0], max_dp[i - 1][0])

        for j in range(1, n):
            max_dp[0][j] = min_dp[0][j] = min(grid[0][j], max_dp[0][j - 1])

        for i in range(1, m):
            for j in range(1, n):
                max_dp[i][j] = max(max_dp[i - 1][j] * grid[i][j], max_dp[i][j - 1] * grid[i][j])
                max_dp[i][j] = max(max_dp[i][j], min_dp[i - 1][j] * grid[i][j])
                max_dp[i][j] = max(max_dp[i][j], min_dp[i][j - 1] * grid[i][j])
                min_dp[i][j] = min(min_dp[i - 1][j] * grid[i][j], min_dp[i][j - 1] * grid[i][j])
                min_dp[i][j] = min(min_dp[i][j], max_dp[i - 1][j] * grid[i][j])

        return max_dp[-1][-1] % MOD if max_dp[-1][-1] >= 0 else -1"
False,0,0,1717,,Minimum Cost to Connect Two Groups of Points,minimum-cost-to-connect-two-groups-of-points,False,7198,15495,1595,False,3,"Can you solve this real interview question? Minimum Cost to Connect Two Groups of Points - You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.

The cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.

Return the minimum cost it takes to connect the two groups.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/03/ex1.jpg]


Input: cost = [[15, 96], [36, 2]]
Output: 17
Explanation: The optimal way of connecting the groups is:
1--A
2--B
This results in a total cost of 17.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/03/ex2.jpg]


Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
Output: 4
Explanation: The optimal way of connecting the groups is:
1--A
2--B
2--C
3--A
This results in a total cost of 4.
Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.


Example 3:


Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
Output: 10


 

Constraints:

 * size1 == cost.length
 * size2 == cost[i].length
 * 1 <= size1, size2 <= 12
 * size1 >= size2
 * 0 <= cost[i][j] <= 100",Solutions (91),395,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def connectTwoGroups(self, cost: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cost: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().connectTwoGroups(cost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def connectTwoGroups(self, cost: List[List[int]]) -> int:
        pass"
False,0,0,1720,,Crawler Log Folder,crawler-log-folder,False,57888,89694,1598,False,1,"Can you solve this real interview question? Crawler Log Folder - The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:

 * ""../"" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).
 * ""./"" : Remain in the same folder.
 * ""x/"" : Move to the child folder named x (This folder is guaranteed to always exist).

You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.

The file system starts in the main folder, then the operations in logs are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/09/sample_11_1957.png]


Input: logs = [""d1/"",""d2/"",""../"",""d21/"",""./""]
Output: 2
Explanation: Use this change folder operation ""../"" 2 times and go back to the main folder.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/09/sample_22_1957.png]


Input: logs = [""d1/"",""d2/"",""./"",""d3/"",""../"",""d31/""]
Output: 3


Example 3:


Input: logs = [""d1/"",""../"",""../"",""../""]
Output: 0


 

Constraints:

 * 1 <= logs.length <= 103
 * 2 <= logs[i].length <= 10
 * logs[i] contains lowercase English letters, digits, '.', and '/'.
 * logs[i] follows the format described in the statement.
 * Folder names consist of lowercase English letters and digits.",Solutions (1.1K),746,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/crawler-log-folder/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, logs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    logs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().minOperations(logs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, logs: List[str]) -> int:
        count = 0
        for log in logs:
            if log == ""../"":
                count = max(0, count - 1)
            elif log != ""./"":
                count += 1
        return count"
False,0,0,1721,,Maximum Profit of Operating a Centennial Wheel,maximum-profit-of-operating-a-centennial-wheel,False,10857,24788,1599,False,2,"Can you solve this real interview question? Maximum Profit of Operating a Centennial Wheel - You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.

You are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.

You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.

Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/09/wheeldiagram12.png]


Input: customers = [8,3], boardingCost = 5, runningCost = 6
Output: 3
Explanation: The numbers written on the gondolas are the number of people currently there.
1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.
2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.
3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.
The highest profit was $37 after rotating the wheel 3 times.


Example 2:


Input: customers = [10,9,6], boardingCost = 6, runningCost = 4
Output: 7
Explanation:
1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.
2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.
3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.
4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.
5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.
6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.
7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.
The highest profit was $122 after rotating the wheel 7 times.


Example 3:


Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92
Output: -1
Explanation:
1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.
2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.
3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.
4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.
5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.
The profit was never positive, so return -1.


 

Constraints:

 * n == customers.length
 * 1 <= n <= 105
 * 0 <= customers[i] <= 50
 * 1 <= boardingCost, runningCost <= 100",Solutions (177),89,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    customers: List[int] = deserialize(""List[int]"", read_line())
    boardingCost: int = deserialize(""int"", read_line())
    runningCost: int = deserialize(""int"", read_line())
    ans = Solution().minOperationsMaxProfit(customers, boardingCost, runningCost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperationsMaxProfit(self, customers: List[int], boardingCost: int, runningCost: int) -> int:
        pass"
False,0,0,1723,,Maximum Number of Achievable Transfer Requests,maximum-number-of-achievable-transfer-requests,False,9206,17977,1601,False,3,"Can you solve this real interview question? Maximum Number of Achievable Transfer Requests - We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.

You are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.

All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.

Return the maximum number of achievable requests.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/10/move1.jpg]


Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
Output: 5
Explantion: Let's see the requests:
From building 0 we have employees x and y and both want to move to building 1.
From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.
From building 2 we have employee z and they want to move to building 0.
From building 3 we have employee c and they want to move to building 4.
From building 4 we don't have any requests.
We can achieve the requests of users x and b by swapping their places.
We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/10/move2.jpg]


Input: n = 3, requests = [[0,0],[1,2],[2,1]]
Output: 3
Explantion: Let's see the requests:
From building 0 we have employee x and they want to stay in the same building 0.
From building 1 we have employee y and they want to move to building 2.
From building 2 we have employee z and they want to move to building 1.
We can achieve all the requests. 

Example 3:


Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
Output: 4


 

Constraints:

 * 1 <= n <= 20
 * 1 <= requests.length <= 16
 * requests[i].length == 2
 * 0 <= fromi, toi < n",Solutions (125),273,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    requests: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumRequests(n, requests)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumRequests(self, n: int, requests: List[List[int]]) -> int:
        pass"
False,0,0,1725,,Number of Sets of K Non-Overlapping Line Segments,number-of-sets-of-k-non-overlapping-line-segments,False,8169,19272,1621,False,2,"Can you solve this real interview question? Number of Sets of K Non-Overlapping Line Segments - Given n points on a 1-D plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.

Return the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/07/ex1.png]


Input: n = 4, k = 2
Output: 5
Explanation: The two line segments are shown in red and blue.
The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.


Example 2:


Input: n = 3, k = 1
Output: 3
Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.


Example 3:


Input: n = 30, k = 7
Output: 796297179
Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.


 

Constraints:

 * 2 <= n <= 1000
 * 1 <= k <= n-1",Solutions (124),403,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfSets(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numberOfSets(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfSets(self, n: int, k: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * (k + 1) for _ in range(n)]
        for i in range(n):
            dp[i][0] = 1
        for i in range(1, n):
            for j in range(1, k + 1):
                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD
        return dp[n - 1][k]"
False,0,0,1726,,Coordinate With Maximum Network Quality,coordinate-with-maximum-network-quality,False,7443,19730,1620,False,2,"Can you solve this real interview question? Coordinate With Maximum Network Quality - You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.

You are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.

The signal quality of the ith tower at a coordinate (x, y) is calculated with the formula ⌊qi / (1 + d)⌋, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.

Return the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.

Note:

 * A coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either:
   * x1 < x2, or
   * x1 == x2 and y1 < y2.
 * ⌊val⌋ is the greatest integer less than or equal to val (the floor function).

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/22/untitled-diagram.png]


Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
Output: [2,1]
Explanation: At coordinate (2, 1) the total quality is 13.
- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate has a higher network quality.

Example 2:


Input: towers = [[23,11,21]], radius = 9
Output: [23,11]
Explanation: Since there is only one tower, the network quality is highest right at the tower's location.


Example 3:


Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
Output: [1,2]
Explanation: Coordinate (1, 2) has the highest network quality.


 

Constraints:

 * 1 <= towers.length <= 50
 * towers[i].length == 3
 * 0 <= xi, yi, qi <= 50
 * 1 <= radius <= 50",Solutions (106),71,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/coordinate-with-maximum-network-quality/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    towers: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    radius: int = deserialize(""int"", read_line())
    ans = Solution().bestCoordinate(towers, radius)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def bestCoordinate(self, towers: List[List[int]], radius: int) -> List[int]:
        import math
        
        def signal_quality(x, y, tower):
            distance = math.sqrt((x - tower[0]) ** 2 + (y - tower[1]) ** 2)
            if distance <= radius:
                return math.floor(tower[2] / (1 + distance))
            else:
                return 0
            
        def network_quality(x, y):
            total_quality = 0
            for tower in towers:
                total_quality += signal_quality(x, y, tower)
            return total_quality
        
        max_quality = 0
        best_coordinate = [0, 0]
        for x in range(51):
            for y in range(51):
                quality = network_quality(x, y)
                if quality > max_quality:
                    max_quality = quality
                    best_coordinate = [x, y]
        
        return best_coordinate"
False,0,0,1727,,Cat and Mouse II,cat-and-mouse-ii,False,5745,14397,1728,False,3,"Can you solve this real interview question? Cat and Mouse II - A game is played by a cat and a mouse named Cat and Mouse.

The environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.

 * Players are represented by the characters 'C'(Cat),'M'(Mouse).
 * Floors are represented by the character '.' and can be walked on.
 * Walls are represented by the character '#' and cannot be walked on.
 * Food is represented by the character 'F' and can be walked on.
 * There is only one of each character 'C', 'M', and 'F' in grid.

Mouse and Cat play according to the following rules:

 * Mouse moves first, then they take turns to move.
 * During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid.
 * catJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.
 * Staying in the same position is allowed.
 * Mouse can jump over Cat.

The game can end in 4 ways:

 * If Cat occupies the same position as Mouse, Cat wins.
 * If Cat reaches the food first, Cat wins.
 * If Mouse reaches the food first, Mouse wins.
 * If Mouse cannot get to the food within 1000 turns, Cat wins.

Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png]


Input: grid = [""####F"",""#C..."",""M....""], catJump = 1, mouseJump = 2
Output: true
Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png]


Input: grid = [""M.C...F""], catJump = 1, mouseJump = 4
Output: true


Example 3:


Input: grid = [""M.C...F""], catJump = 1, mouseJump = 3
Output: false


 

Constraints:

 * rows == grid.length
 * cols = grid[i].length
 * 1 <= rows, cols <= 8
 * grid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.
 * There is only one of each character 'C', 'M', and 'F' in grid.
 * 1 <= catJump, mouseJump <= 8",Solutions (69),231,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/cat-and-mouse-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[str] = deserialize(""List[str]"", read_line())
    catJump: int = deserialize(""int"", read_line())
    mouseJump: int = deserialize(""int"", read_line())
    ans = Solution().canMouseWin(grid, catJump, mouseJump)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canMouseWin(self, grid: List[str], catJump: int, mouseJump: int) -> bool:
        pass"
False,0,0,1730,,Special Array With X Elements Greater Than or Equal X,special-array-with-x-elements-greater-than-or-equal-x,False,64011,105879,1608,False,1,"Can you solve this real interview question? Special Array With X Elements Greater Than or Equal X - You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.

Notice that x does not have to be an element in nums.

Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.

 

Example 1:


Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.


Example 2:


Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.
If x = 0, there should be 0 numbers >= x, but there are 2.
If x = 1, there should be 1 number >= x, but there are 0.
If x = 2, there should be 2 numbers >= x, but there are 0.
x cannot be greater since there are only 2 numbers in nums.


Example 3:


Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 1000",Solutions (1.1K),1.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def specialArray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().specialArray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def specialArray(self, nums: List[int]) -> int:
        nums.sort(reverse=True)
        for x in range(1, len(nums) + 1):
            count = sum(num >= x for num in nums)
            if count == x:
                return x
        return -1"
False,0,0,1732,,Minimum One Bit Operations to Make Integers Zero,minimum-one-bit-operations-to-make-integers-zero,False,12567,19850,1611,False,3,"Can you solve this real interview question? Minimum One Bit Operations to Make Integers Zero - Given an integer n, you must transform it into 0 using the following operations any number of times:

 * Change the rightmost (0th) bit in the binary representation of n.
 * Change the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.

Return the minimum number of operations to transform n into 0.

 

Example 1:


Input: n = 3
Output: 2
Explanation: The binary representation of 3 is ""11"".
""11"" -> ""01"" with the 2nd operation since the 0th bit is 1.
""01"" -> ""00"" with the 1st operation.


Example 2:


Input: n = 6
Output: 4
Explanation: The binary representation of 6 is ""110"".
""110"" -> ""010"" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.
""010"" -> ""011"" with the 1st operation.
""011"" -> ""001"" with the 2nd operation since the 0th bit is 1.
""001"" -> ""000"" with the 1st operation.


 

Constraints:

 * 0 <= n <= 109",Solutions (133),384,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumOneBitOperations(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minimumOneBitOperations(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumOneBitOperations(self, n: int) -> int:
        dp = {0: 0}

        def helper(n):
            if n not in dp:
                highest_set_bit = n.bit_length() - 1
                mask = (1 << highest_set_bit) - 1
                dp[n] = helper(n ^ mask) + 1 + helper(mask)
            return dp[n]

        return helper(n)"
False,0,0,1733,,Maximum Number of Visible Points,maximum-number-of-visible-points,False,36097,96724,1610,False,3,"Can you solve this real interview question? Maximum Number of Visible Points - You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.

Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].

Your browser does not support the video tag or this video format.

You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.

There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.

Return the maximum number of points you can see.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/30/89a07e9b-00ab-4967-976a-c723b2aa8656.png]


Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
Output: 3
Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.


Example 2:


Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
Output: 4
Explanation: All points can be made visible in your field of view, including the one at your location.


Example 3:

[https://assets.leetcode.com/uploads/2020/09/30/5010bfd3-86e6-465f-ac64-e9df941d2e49.png]


Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
Output: 1
Explanation: You can only see one of the two points, as shown above.


 

Constraints:

 * 1 <= points.length <= 105
 * points[i].length == 2
 * location.length == 2
 * 0 <= angle < 360
 * 0 <= posx, posy, xi, yi <= 100",Solutions (172),503,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-visible-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def visiblePoints(self, points: List[List[int]], angle: int, location: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    angle: int = deserialize(""int"", read_line())
    location: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().visiblePoints(points, angle, location)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def visiblePoints(self, points: List[List[int]], angle: int, location: List[int]) -> int:
        pass  # Your implementation here"
False,0,0,1737,,Maximum Nesting Depth of the Parentheses,maximum-nesting-depth-of-the-parentheses,False,124622,151495,1614,False,1,"Can you solve this real interview question? Maximum Nesting Depth of the Parentheses - A string is a valid parentheses string (denoted VPS) if it meets one of the following:

 * It is an empty string """", or a single character not equal to ""("" or "")"",
 * It can be written as AB (A concatenated with B), where A and B are VPS's, or
 * It can be written as (A), where A is a VPS.

We can similarly define the nesting depth depth(S) of any VPS S as follows:

 * depth("""") = 0
 * depth(C) = 0, where C is a string with a single character not equal to ""("" or "")"".
 * depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.
 * depth(""("" + A + "")"") = 1 + depth(A), where A is a VPS.

For example, """", ""()()"", and ""()(()())"" are VPS's (with nesting depths 0, 1, and 2), and "")("" and ""(()"" are not VPS's.

Given a VPS represented as string s, return the nesting depth of s.

 

Example 1:


Input: s = ""(1+(2*3)+((8)/4))+1""
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.


Example 2:


Input: s = ""(1)+((2))+(((3)))""
Output: 3


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.
 * It is guaranteed that parentheses expression s is a VPS.",Solutions (1.8K),1.4K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDepth(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxDepth(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDepth(self, s: str) -> int:
        depth = 0
        max_depth = 0
        
        for char in s:
            if char == ""("":
                depth += 1
                max_depth = max(max_depth, depth)
            elif char == "")"":
                depth -= 1
        
        return max_depth"
False,0,0,1738,,Maximal Network Rank,maximal-network-rank,False,60524,103449,1615,False,2,"Can you solve this real interview question? Maximal Network Rank - There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer n and the array roads, return the maximal network rank of the entire infrastructure.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/21/ex1.png]


Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.


Example 2:

[https://assets.leetcode.com/uploads/2020/09/21/ex2.png]


Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads that are connected to cities 1 or 2.


Example 3:


Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
Output: 5
Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.


 

Constraints:

 * 2 <= n <= 100
 * 0 <= roads.length <= n * (n - 1) / 2
 * roads[i].length == 2
 * 0 <= ai, bi <= n-1
 * ai != bi
 * Each pair of cities has at most one road connecting them.",Solutions (607),1.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximal-network-rank/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    roads: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximalNetworkRank(n, roads)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximalNetworkRank(self, n: int, roads: List[List[int]]) -> int:
        from collections import defaultdict
        
        adj_list = defaultdict(set)
        cities = [0] * n
        
        for a, b in roads:
            adj_list[a].add(b)
            adj_list[b].add(a)
            cities[a] += 1
            cities[b] += 1
        
        max_rank = 0
        
        for i in range(n):
            for j in range(i+1, n):
                rank = cities[i] + cities[j]
                if j in adj_list[i]:
                    rank -= 1
                max_rank = max(max_rank, rank)
        
        return max_rank"
False,0,0,1739,,Split Two Strings to Make Palindrome,split-two-strings-to-make-palindrome,False,20029,64054,1616,False,2,"Can you solve this real interview question? Split Two Strings to Make Palindrome - You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.

When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = ""abc"", then """" + ""abc"", ""a"" + ""bc"", ""ab"" + ""c"" , and ""abc"" + """" are valid splits.

Return true if it is possible to form a palindrome string, otherwise return false.

Notice that x + y denotes the concatenation of strings x and y.

 

Example 1:


Input: a = ""x"", b = ""y""
Output: true
Explaination: If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = """", asuffix = ""x""
bprefix = """", bsuffix = ""y""
Then, aprefix + bsuffix = """" + ""y"" = ""y"", which is a palindrome.


Example 2:


Input: a = ""xbdef"", b = ""xecab""
Output: false


Example 3:


Input: a = ""ulacfd"", b = ""jizalu""
Output: true
Explaination: Split them at index 3:
aprefix = ""ula"", asuffix = ""cfd""
bprefix = ""jiz"", bsuffix = ""alu""
Then, aprefix + bsuffix = ""ula"" + ""alu"" = ""ulaalu"", which is a palindrome.


 

Constraints:

 * 1 <= a.length, b.length <= 105
 * a.length == b.length
 * a and b consist of lowercase English letters",Solutions (247),637,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/split-two-strings-to-make-palindrome/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkPalindromeFormation(self, a: str, b: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    a: str = deserialize(""str"", read_line())
    b: str = deserialize(""str"", read_line())
    ans = Solution().checkPalindromeFormation(a, b)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkPalindromeFormation(self, a: str, b: str) -> bool:
        def is_palindrome(s):
            return s == s[::-1]
        
        n = len(a)
        def check(a, b):
            i, j = 0, n - 1
            while i < j and a[i] == b[j]:
                i += 1
                j -= 1
            return is_palindrome(a[i:j+1]) or is_palindrome(b[i:j+1])
        
        return check(a, b) or check(b, a)"
False,0,0,1740,,Count Subtrees With Max Distance Between Cities,count-subtrees-with-max-distance-between-cities,False,8023,12162,1617,False,3,"Can you solve this real interview question? Count Subtrees With Max Distance Between Cities - There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.

Return an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.

Notice that the distance between the two cities is the number of edges in the path between them.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/21/p1.png]


Input: n = 4, edges = [[1,2],[2,3],[2,4]]
Output: [3,4,0]
Explanation:
The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.
The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.
No subtree has two nodes where the max distance between them is 3.


Example 2:


Input: n = 2, edges = [[1,2]]
Output: [1]


Example 3:


Input: n = 3, edges = [[1,2],[2,3]]
Output: [2,1]


 

Constraints:

 * 2 <= n <= 15
 * edges.length == n-1
 * edges[i].length == 2
 * 1 <= ui, vi <= n
 * All pairs (ui, vi) are distinct.",Solutions (119),433,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countSubgraphsForEachDiameter(n, edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countSubgraphsForEachDiameter(self, n: int, edges: List[List[int]]) -> List[int]: 
        # Add your solution here
        pass"
False,0,0,1741,,Sort Array by Increasing Frequency,sort-array-by-increasing-frequency,False,91973,132466,1636,False,1,"Can you solve this real interview question? Sort Array by Increasing Frequency - Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.

 

Example 1:


Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.


Example 2:


Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.


Example 3:


Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

 

Constraints:

 * 1 <= nums.length <= 100
 * -100 <= nums[i] <= 100",Solutions (1.3K),2.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-array-by-increasing-frequency/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().frequencySort(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        import collections
        counts = collections.Counter(nums)
        nums.sort(key=lambda x: (counts[x], -x))
        return nums"
False,0,0,1742,,Widest Vertical Area Between Two Points Containing No Points,widest-vertical-area-between-two-points-containing-no-points,False,38431,45563,1637,False,2,"Can you solve this real interview question? Widest Vertical Area Between Two Points Containing No Points - Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/09/19/points3.png]


Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.


Example 2:


Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3


 

Constraints:

 * n == points.length
 * 2 <= n <= 105
 * points[i].length == 2
 * 0 <= xi, yi <= 109",Solutions (640),277,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxWidthOfVerticalArea(points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxWidthOfVerticalArea(self, points: List[List[int]]) -> int:
        points.sort(key=lambda x: x[0])
        max_width = 0
        for i in range(1, len(points)):
            max_width = max(max_width, points[i][0] - points[i-1][0])
        return max_width
"
False,0,0,1743,,Count Substrings That Differ by One Character,count-substrings-that-differ-by-one-character,False,23947,33559,1638,False,2,"Can you solve this real interview question? Count Substrings That Differ by One Character - Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.

For example, the underlined substrings in ""computer"" and ""computation"" only differ by the 'e'/'a', so this is a valid way.

Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""aba"", t = ""baba""
Output: 6
Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
The underlined portions are the substrings that are chosen from s and t.


Example 2:


Input: s = ""ab"", t = ""bb""
Output: 3
Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
(""ab"", ""bb"")
(""ab"", ""bb"")
(""ab"", ""bb"")
​​​​The underlined portions are the substrings that are chosen from s and t.


 

Constraints:

 * 1 <= s.length, t.length <= 100
 * s and t consist of lowercase English letters only.",Solutions (230),973,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-substrings-that-differ-by-one-character/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubstrings(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().countSubstrings(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSubstrings(self, s: str, t: str) -> int:
        def countDiff(a, b):
            return sum(1 for i in range(len(a)) if a[i] != b[i])
        
        res = 0
        for i in range(len(s)):
            for j in range(len(t)):
                if len(s) - i > len(t) - j:
                    continue
                for k in range(1, min(len(s) - i, len(t) - j) + 1):
                    if countDiff(s[i:i+k], t[j:j+k]) == 1:
                        res += 1
        return res"
False,0,0,1744,number-of-ways-to-form-a-target-string-given-a-dictionary,Number of Ways to Form a Target String Given a Dictionary,number-of-ways-to-form-a-target-string-given-a-dictionary,False,10513,24282,1639,False,3,"Can you solve this real interview question? Number of Ways to Form a Target String Given a Dictionary - You are given a list of strings of the same length words and a string target.

Your task is to form target using the given words under the following rules:

 * target should be formed from left to right.
 * To form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
 * Once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.
 * Repeat the process until you form the string target.

Notice that you can use multiple characters from the same string in words provided the conditions above are met.

Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: words = [""acca"",""bbbb"",""caca""], target = ""aba""
Output: 6
Explanation: There are 6 ways to form target.
""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""acca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""caca"")


Example 2:


Input: words = [""abba"",""baab""], target = ""bab""
Output: 4
Explanation: There are 4 ways to form target.
""bab"" -> index 0 (""baab""), index 1 (""baab""), index 2 (""abba"")
""bab"" -> index 0 (""baab""), index 1 (""baab""), index 3 (""baab"")
""bab"" -> index 0 (""baab""), index 2 (""baab""), index 3 (""baab"")
""bab"" -> index 1 (""abba""), index 2 (""baab""), index 3 (""baab"")


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 1000
 * All strings in words have the same length.
 * 1 <= target.length <= 1000
 * words[i] and target contain only lowercase English letters.",Solutions (118),399,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numWays(self, words: List[str], target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().numWays(words, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numWays(self, words: List[str], target: str) -> int:
        MODULO = 10 ** 9 + 7
        len_words, len_target = len(words), len(target)
        
        dp = [[0] * (len_target + 1) for _ in range(len_words + 1)]
        dp[0][0] = 1
        
        for i in range(len(dp[0])):
            for j in range(1, len(dp)):
                dp[j][i] = (dp[j][i] + dp[j - 1][i]) % MODULO
                if i < len_target and target[i] == words[j - 1]:
                    dp[j][i + 1] = (dp[j][i + 1] + dp[j - 1][i]) % MODULO
        
        return dp[-1][-1]"
False,0,0,1746,,Largest Substring Between Two Equal Characters,largest-substring-between-two-equal-characters,False,41111,69542,1624,False,1,"Can you solve this real interview question? Largest Substring Between Two Equal Characters - Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""aa""
Output: 0
Explanation: The optimal substring here is an empty substring between the two 'a's.

Example 2:


Input: s = ""abca""
Output: 2
Explanation: The optimal substring here is ""bc"".


Example 3:


Input: s = ""cbzxy""
Output: -1
Explanation: There are no characters that appear twice in s.


 

Constraints:

 * 1 <= s.length <= 300
 * s contains only lowercase English letters.",Solutions (766),537,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-substring-between-two-equal-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxLengthBetweenEqualCharacters(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxLengthBetweenEqualCharacters(self, s: str) -> int:
        max_length = -1
        for i in range(len(s)):
            for j in range(i + 1, len(s)):
                if s[i] == s[j]:
                    max_length = max(max_length, j - i - 1)
        return max_length"
False,0,0,1747,,Lexicographically Smallest String After Applying Operations,lexicographically-smallest-string-after-applying-operations,False,12343,18823,1625,False,2,"Can you solve this real interview question? Lexicographically Smallest String After Applying Operations - You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.

You can apply either of the following two operations any number of times and in any order on s:

 * Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = ""3456"" and a = 5, s becomes ""3951"".
 * Rotate s to the right by b positions. For example, if s = ""3456"" and b = 1, s becomes ""6345"".

Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, ""0158"" is lexicographically smaller than ""0190"" because the first position they differ is at the third letter, and '5' comes before '9'.

 

Example 1:


Input: s = ""5525"", a = 9, b = 2
Output: ""2050""
Explanation: We can apply the following operations:
Start:  ""5525""
Rotate: ""2555""
Add:    ""2454""
Add:    ""2353""
Rotate: ""5323""
Add:    ""5222""
Add:    ""5121""
Rotate: ""2151""
​​​​​​​Add:    ""2050""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""2050"".


Example 2:


Input: s = ""74"", a = 5, b = 1
Output: ""24""
Explanation: We can apply the following operations:
Start:  ""74""
Rotate: ""47""
​​​​​​​Add:    ""42""
​​​​​​​Rotate: ""24""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""24"".


Example 3:


Input: s = ""0011"", a = 4, b = 2
Output: ""0011""
Explanation: There are no sequence of operations that will give us a lexicographically smaller string than ""0011"".


 

Constraints:

 * 2 <= s.length <= 100
 * s.length is even.
 * s consists of digits from 0 to 9 only.
 * 1 <= a <= 9
 * 1 <= b <= s.length - 1",Solutions (198),299,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLexSmallestString(self, s: str, a: int, b: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    ans = Solution().findLexSmallestString(s, a, b)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def findLexSmallestString(self, s: str, a: int, b: int) -> str:
        from collections import deque
        seen = set()
        q = deque([s])
        smallest = s
        while q:
            curr = q.popleft()
            if curr < smallest:
                smallest = curr
            if (k := tuple(map(int, curr))) not in seen:
                seen.add(k)
                q.append(curr[-b:] + curr[:-b])
                q.append(''.join(str((int(x) + a) % 10 if i % 2 else x for i, x in enumerate(curr))))

        return smallest"
False,0,0,1748,best-team-with-no-conflicts,Best Team With No Conflicts,best-team-with-no-conflicts,False,70370,137585,1626,False,2,"Can you solve this real interview question? Best Team With No Conflicts - You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.

Given two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.

 

Example 1:


Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.


Example 2:


Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.


Example 3:


Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 


 

Constraints:

 * 1 <= scores.length, ages.length <= 1000
 * scores.length == ages.length
 * 1 <= scores[i] <= 106
 * 1 <= ages[i] <= 1000",Solutions (858),2.6K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/best-team-with-no-conflicts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    scores: List[int] = deserialize(""List[int]"", read_line())
    ages: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().bestTeamScore(scores, ages)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bestTeamScore(self, scores: List[int], ages: List[int]) -> int:
        dp = [(score, age) for score, age in sorted(zip(scores, ages))]
        n = len(dp)
        for i in range(n):
            for j in range(i):
                if dp[i][1] >= dp[j][1]:
                    dp[i] = max(dp[i], (dp[i][0] + dp[j][0], dp[i][1]), key=lambda x: x[0])
        return max(dp, key=lambda x: x[0])[0]"
False,0,0,1751,slowest-key,Slowest Key,slowest-key,False,88104,148809,1629,False,1,"Can you solve this real interview question? Slowest Key - A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.

You are given a string keysPressed of length n, where keysPressed[i] was the ith key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the ith key was released. Both arrays are 0-indexed. The 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.

The tester wants to know the key of the keypress that had the longest duration. The ith keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0th keypress had a duration of releaseTimes[0].

Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.

Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.

 

Example 1:


Input: releaseTimes = [9,29,49,50], keysPressed = ""cbcd""
Output: ""c""
Explanation: The keypresses were as follows:
Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).
Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).
Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).
Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).
The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.
'c' is lexicographically larger than 'b', so the answer is 'c'.


Example 2:


Input: releaseTimes = [12,23,36,46,62], keysPressed = ""spuda""
Output: ""a""
Explanation: The keypresses were as follows:
Keypress for 's' had a duration of 12.
Keypress for 'p' had a duration of 23 - 12 = 11.
Keypress for 'u' had a duration of 36 - 23 = 13.
Keypress for 'd' had a duration of 46 - 36 = 10.
Keypress for 'a' had a duration of 62 - 46 = 16.
The longest of these was the keypress for 'a' with duration 16.

 

Constraints:

 * releaseTimes.length == n
 * keysPressed.length == n
 * 2 <= n <= 1000
 * 1 <= releaseTimes[i] <= 109
 * releaseTimes[i] < releaseTimes[i+1]
 * keysPressed contains only lowercase English letters.",Solutions (899),667,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/slowest-key/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    releaseTimes: List[int] = deserialize(""List[int]"", read_line())
    keysPressed: str = deserialize(""str"", read_line())
    ans = Solution().slowestKey(releaseTimes, keysPressed)
    print(""\noutput:"", serialize(ans, ""character""))
","class Solution:
    def slowestKey(self, releaseTimes: List[int], keysPressed: str) -> str:
        ans_key = keysPressed[0]
        max_duration = releaseTimes[0]
        
        for i in range(1, len(releaseTimes)):
            duration = releaseTimes[i] - releaseTimes[i - 1]
            if duration > max_duration or (duration == max_duration and keysPressed[i] > ans_key):
                max_duration = duration
                ans_key = keysPressed[i]
        
        return ans_key"
False,0,0,1752,,Arithmetic Subarrays,arithmetic-subarrays,False,49185,61215,1630,False,2,"Can you solve this real interview question? Arithmetic Subarrays - A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.

For example, these are arithmetic sequences:


1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9

The following sequence is not arithmetic:


1, 1, 2, 5, 7

You are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. All the arrays are 0-indexed.

Return a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.

 

Example 1:


Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]
Output: [true,false,true]
Explanation:
In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.
In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.
In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.

Example 2:


Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
Output: [false,true,false,false,true,true]


 

Constraints:

 * n == nums.length
 * m == l.length
 * m == r.length
 * 2 <= n <= 500
 * 1 <= m <= 500
 * 0 <= l[i] < r[i] < n
 * -105 <= nums[i] <= 105",Solutions (873),952,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/arithmetic-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    l: List[int] = deserialize(""List[int]"", read_line())
    r: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().checkArithmeticSubarrays(nums, l, r)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def checkArithmeticSubarrays(self, nums: List[int], l: List[int], r: List[int]) -> List[bool]: 
        def arithmetic_subarray(arr):
            return all(arr[i + 1] - arr[i] == arr[1] - arr[0] for i in range(len(arr) - 1))
        
        result = []
        for i in range(len(l)):
            result.append(arithmetic_subarray(sorted(nums[l[i]:r[i] + 1])))
        
        return result"
False,0,0,1753,path-with-minimum-effort,Path With Minimum Effort,path-with-minimum-effort,False,141496,254276,1631,False,2,"Can you solve this real interview question? Path With Minimum Effort - You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/04/ex1.png]


Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


Example 2:

[https://assets.leetcode.com/uploads/2020/10/04/ex2.png]


Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].


Example 3:

[https://assets.leetcode.com/uploads/2020/10/04/ex3.png]


Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.


 

Constraints:

 * rows == heights.length
 * columns == heights[i].length
 * 1 <= rows, columns <= 100
 * 1 <= heights[i][j] <= 106",Solutions (979),4.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/path-with-minimum-effort/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    heights: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumEffortPath(heights)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumEffortPath(self, heights: List[List[int]]) -> int:
        # Write your code here
        pass"
False,0,0,1756,,Minimum Deletions to Make String Balanced,minimum-deletions-to-make-string-balanced,False,33702,57044,1653,False,2,"Can you solve this real interview question? Minimum Deletions to Make String Balanced - You are given a string s consisting only of characters 'a' and 'b' .

You can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.

Return the minimum number of deletions needed to make s balanced.

 

Example 1:


Input: s = ""aababbab""
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 (""aababbab"" -> ""aaabbb""), or
Delete the characters at 0-indexed positions 3 and 6 (""aababbab"" -> ""aabbbb"").


Example 2:


Input: s = ""bbaaaaabb""
Output: 2
Explanation: The only solution is to delete the first two characters.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is 'a' or 'b' .",Solutions (400),1.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDeletions(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minimumDeletions(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDeletions(self, s: str) -> int:
        dp, cnt_a = 0, 0
        for char in s:
            if char == 'a':
                cnt_a += 1
            else:
                dp = min(dp + 1, cnt_a)
        return dp"
False,0,0,1757,,Minimum Jumps to Reach Home,minimum-jumps-to-reach-home,False,34736,119627,1654,False,2,"Can you solve this real interview question? Minimum Jumps to Reach Home - A certain bug's home is on the x-axis at position x. Help them get there from position 0.

The bug jumps according to the following rules:

 * It can jump exactly a positions forward (to the right).
 * It can jump exactly b positions backward (to the left).
 * It cannot jump backward twice in a row.
 * It cannot jump to any forbidden positions.

The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.

 

Example 1:


Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3
Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.


Example 2:


Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1


Example 3:


Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2
Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.


 

Constraints:

 * 1 <= forbidden.length <= 1000
 * 1 <= a, b, forbidden[i] <= 2000
 * 0 <= x <= 2000
 * All the elements in forbidden are distinct.
 * Position x is not forbidden.",Solutions (319),1.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-jumps-to-reach-home/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    forbidden: List[int] = deserialize(""List[int]"", read_line())
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    x: int = deserialize(""int"", read_line())
    ans = Solution().minimumJumps(forbidden, a, b, x)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumJumps(self, forbidden: List[int], a: int, b: int, x: int) -> int:
        pass"
False,0,0,1758,,Distribute Repeating Integers,distribute-repeating-integers,False,10205,26225,1655,False,3,"Can you solve this real interview question? Distribute Repeating Integers - You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. Determine if it is possible to distribute nums such that:

 * The ith customer gets exactly quantity[i] integers,
 * The integers the ith customer gets are all equal, and
 * Every customer is satisfied.

Return true if it is possible to distribute nums according to the above conditions.

 

Example 1:


Input: nums = [1,2,3,4], quantity = [2]
Output: false
Explanation: The 0th customer cannot be given two different integers.


Example 2:


Input: nums = [1,2,3,3], quantity = [2]
Output: true
Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.


Example 3:


Input: nums = [1,1,2,2], quantity = [2,2]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 1 <= nums[i] <= 1000
 * m == quantity.length
 * 1 <= m <= 10
 * 1 <= quantity[i] <= 105
 * There are at most 50 unique values in nums.",Solutions (107),304,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/distribute-repeating-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    quantity: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canDistribute(nums, quantity)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canDistribute(self, nums: List[int], quantity: List[int]) -> bool:
        pass"
False,0,0,1760,check-array-formation-through-concatenation,Check Array Formation Through Concatenation,check-array-formation-through-concatenation,False,74123,131795,1640,False,1,"Can you solve this real interview question? Check Array Formation Through Concatenation - You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].

Return true if it is possible to form the array arr from pieces. Otherwise, return false.

 

Example 1:


Input: arr = [15,88], pieces = [[88],[15]]
Output: true
Explanation: Concatenate [15] then [88]


Example 2:


Input: arr = [49,18,16], pieces = [[16,18,49]]
Output: false
Explanation: Even though the numbers match, we cannot reorder pieces[0].


Example 3:


Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
Output: true
Explanation: Concatenate [91] then [4,64] then [78]


 

Constraints:

 * 1 <= pieces.length <= arr.length <= 100
 * sum(pieces[i].length) == arr.length
 * 1 <= pieces[i].length <= arr.length
 * 1 <= arr[i], pieces[i][j] <= 100
 * The integers in arr are distinct.
 * The integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).",Solutions (780),799,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/check-array-formation-through-concatenation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    pieces: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().canFormArray(arr, pieces)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canFormArray(self, arr: List[int], pieces: List[List[int]]) -> bool:
        hashmap = {piece[0]: piece for piece in pieces}
        concat_pieces = []
        for num in arr:
            if num in hashmap:
                concat_pieces.extend(hashmap[num])
        return concat_pieces == arr"
False,0,0,1761,count-sorted-vowel-strings,Count Sorted Vowel Strings,count-sorted-vowel-strings,False,154616,199810,1641,False,2,"Can you solve this real interview question? Count Sorted Vowel Strings - Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.

 

Example 1:


Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are [""a"",""e"",""i"",""o"",""u""].


Example 2:


Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
[""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""].
Note that ""ea"" is not a valid string since 'e' comes after 'a' in the alphabet.


Example 3:


Input: n = 33
Output: 66045


 

Constraints:

 * 1 <= n <= 50 ",Solutions (2.3K),3.4K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-sorted-vowel-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countVowelStrings(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countVowelStrings(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countVowelStrings(self, n: int) -> int:
        dp = [1] * 5
        for i in range(n):
            for j in range(1, 5):
                dp[j] += dp[j-1]
        return dp[-1]"
False,0,0,1762,furthest-building-you-can-reach,Furthest Building You Can Reach,furthest-building-you-can-reach,False,112651,233196,1642,False,2,"Can you solve this real interview question? Furthest Building You Can Reach - You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),

 * If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
 * If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.

Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/10/27/q4.gif]


Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.
- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.
- Go to building 3 without using ladders nor bricks since 7 >= 6.
- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.
It is impossible to go beyond building 4 because you do not have any more bricks or ladders.


Example 2:


Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7


Example 3:


Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3


 

Constraints:

 * 1 <= heights.length <= 105
 * 1 <= heights[i] <= 106
 * 0 <= bricks <= 109
 * 0 <= ladders <= heights.length",Solutions (1K),4.2K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/furthest-building-you-can-reach/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    heights: List[int] = deserialize(""List[int]"", read_line())
    bricks: int = deserialize(""int"", read_line())
    ladders: int = deserialize(""int"", read_line())
    ans = Solution().furthestBuilding(heights, bricks, ladders)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        import heapq
        heap = []
        for i in range(len(heights) - 1):
            diff = heights[i+1] - heights[i]
            if diff > 0:
                heapq.heappush(heap, diff)
            if len(heap) > ladders:
                bricks -= heapq.heappop(heap)
            if bricks < 0:
                return i
        return len(heights) - 1"
False,0,0,1764,,Maximum Repeating Substring,maximum-repeating-substring,False,34162,86462,1668,False,1,"Can you solve this real interview question? Maximum Repeating Substring - For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.

Given strings sequence and word, return the maximum k-repeating value of word in sequence.

 

Example 1:


Input: sequence = ""ababc"", word = ""ab""
Output: 2
Explanation: ""abab"" is a substring in ""ababc"".


Example 2:


Input: sequence = ""ababc"", word = ""ba""
Output: 1
Explanation: ""ba"" is a substring in ""ababc"". ""baba"" is not a substring in ""ababc"".


Example 3:


Input: sequence = ""ababc"", word = ""ac""
Output: 0
Explanation: ""ac"" is not a substring in ""ababc"". 


 

Constraints:

 * 1 <= sequence.length <= 100
 * 1 <= word.length <= 100
 * sequence and word contains only lowercase English letters.",Solutions (593),552,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-repeating-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxRepeating(self, sequence: str, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    sequence: str = deserialize(""str"", read_line())
    word: str = deserialize(""str"", read_line())
    ans = Solution().maxRepeating(sequence, word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxRepeating(self, sequence: str, word: str) -> int:
        max_k = 0
        for k in range(1, len(sequence)//len(word) + 1):
            if word*k in sequence:
                max_k = k
            else:
                break
        return max_k"
False,0,0,1766,,Minimum Number of Removals to Make Mountain Array,minimum-number-of-removals-to-make-mountain-array,False,20765,48938,1671,False,3,"Can you solve this real interview question? Minimum Number of Removals to Make Mountain Array - You may recall that an array arr is a mountain array if and only if:

 * arr.length >= 3
 * There exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
   * arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
   * arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

Given an integer array nums , return the minimum number of elements to remove to make nums a mountain array.

 

Example 1:


Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.


Example 2:


Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].


 

Constraints:

 * 3 <= nums.length <= 1000
 * 1 <= nums[i] <= 109
 * It is guaranteed that you can make a mountain array out of nums.",Solutions (345),1.2K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumMountainRemovals(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumMountainRemovals(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumMountainRemovals(self, nums: List[int]) -> int:
        n = len(nums)
        left = [0] * n
        right = [0] * n

        for i in range(n):
            left[i] = 1
            for j in range(i):
                if nums[i] > nums[j]:
                    left[i] = max(left[i], left[j] + 1)

        for i in range(n - 1, -1, -1):
            right[i] = 1
            for j in range(n - 1, i, -1):
                if nums[i] > nums[j]:
                    right[i] = max(right[i], right[j] + 1)

        res = 0
        for i in range(1, n - 1):
            if left[i] > 1 and right[i] > 1:
                res = max(res, left[i] + right[i] - 1)

        return n - res"
False,0,0,1769,get-maximum-in-generated-array,Get Maximum in Generated Array,get-maximum-in-generated-array,False,84496,168421,1646,False,1,"Can you solve this real interview question? Get Maximum in Generated Array - You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:

 * nums[0] = 0
 * nums[1] = 1
 * nums[2 * i] = nums[i] when 2 <= 2 * i <= n
 * nums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n

Return the maximum integer in the array nums .

 

Example 1:


Input: n = 7
Output: 3
Explanation: According to the given rules:
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.


Example 2:


Input: n = 2
Output: 1
Explanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.


Example 3:


Input: n = 3
Output: 2
Explanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.


 

Constraints:

 * 0 <= n <= 100",Solutions (1K),609,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/get-maximum-in-generated-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaximumGenerated(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().getMaximumGenerated(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaximumGenerated(self, n: int) -> int:
        if n == 0:
            return 0
        
        nums = [0] * (n + 1)
        nums[1] = 1
        
        maximum = 1
        
        for i in range(2, n + 1):
            if i % 2 == 0:
                nums[i] = nums[i // 2]
            else:
                nums[i] = nums[i // 2] + nums[i // 2 + 1]
            
            maximum = max(maximum, nums[i])
        
        return maximum"
False,0,0,1770,minimum-deletions-to-make-character-frequencies-unique,Minimum Deletions to Make Character Frequencies Unique,minimum-deletions-to-make-character-frequencies-unique,False,169809,287265,1647,False,2,"Can you solve this real interview question? Minimum Deletions to Make Character Frequencies Unique - A string s is called good if there are no two different characters in s that have the same frequency.

Given a string s, return the minimum number of characters you need to delete to make s good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string ""aab"", the frequency of 'a' is 2, while the frequency of 'b' is 1.

 

Example 1:


Input: s = ""aab""
Output: 0
Explanation: s is already good.


Example 2:


Input: s = ""aaabbbcc""
Output: 2
Explanation: You can delete two 'b's resulting in the good string ""aaabcc"".
Another way it to delete one 'b' and one 'c' resulting in the good string ""aaabbc"".

Example 3:


Input: s = ""ceabaacb""
Output: 2
Explanation: You can delete both 'c's resulting in the good string ""eabaab"".
Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).


 

Constraints:

 * 1 <= s.length <= 105
 * s contains only lowercase English letters.",Solutions (1.8K),3.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDeletions(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minDeletions(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minDeletions(self, s: str) -> int:
        from collections import Counter
        
        char_freq = Counter(s)
        freq_set = set()
        min_deletions = 0
        
        for char, freq in char_freq.items():
            while freq in freq_set:
                freq -= 1
                min_deletions += 1
            if freq > 0:
                freq_set.add(freq)
        
        return min_deletions"
False,0,0,1771,,Sell Diminishing-Valued Colored Balls,sell-diminishing-valued-colored-balls,False,34603,113701,1648,False,2,"Can you solve this real interview question? Sell Diminishing-Valued Colored Balls - You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.

The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your inventory. For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).

You are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.

Return the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/05/jj.gif]


Input: inventory = [2,5], orders = 4
Output: 14
Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).
The maximum total value is 2 + 5 + 4 + 3 = 14.


Example 2:


Input: inventory = [3,5], orders = 6
Output: 19
Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).
The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.


 

Constraints:

 * 1 <= inventory.length <= 105
 * 1 <= inventory[i] <= 109
 * 1 <= orders <= min(sum(inventory[i]), 109)",Solutions (251),960,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/sell-diminishing-valued-colored-balls/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProfit(self, inventory: List[int], orders: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    inventory: List[int] = deserialize(""List[int]"", read_line())
    orders: int = deserialize(""int"", read_line())
    ans = Solution().maxProfit(inventory, orders)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProfit(self, inventory: List[int], orders: int) -> int:
        # Code implementation here
        pass"
False,0,0,1772,create-sorted-array-through-instructions,Create Sorted Array through Instructions,create-sorted-array-through-instructions,False,22430,59894,1649,False,3,"Can you solve this real interview question? Create Sorted Array through Instructions - Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:

 * The number of elements currently in nums that are strictly less than instructions[i].
 * The number of elements currently in nums that are strictly greater than instructions[i].

For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].

Return the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7

 

Example 1:


Input: instructions = [1,5,6,2]
Output: 1
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 5 with cost min(1, 0) = 0, now nums = [1,5].
Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].
Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].
The total cost is 0 + 0 + 0 + 1 = 1.

Example 2:


Input: instructions = [1,2,3,6,5,4]
Output: 3
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 2 with cost min(1, 0) = 0, now nums = [1,2].
Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].
Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].
Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].
Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].
The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.


Example 3:


Input: instructions = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].
Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].
Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].
​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].
The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.


 

Constraints:

 * 1 <= instructions.length <= 105
 * 1 <= instructions[i] <= 105",Solutions (201),568,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/create-sorted-array-through-instructions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def createSortedArray(self, instructions: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    instructions: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().createSortedArray(instructions)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def createSortedArray(self, instructions: List[int]) -> int: 
        MOD = 10**9 + 7
        c = [0] * 100002

        def update(x):
            while x < 100002:
                c[x] += 1
                x += x & -x

        def query(x):
            res = 0
            while x > 0:
                res += c[x]
                x -= x & -x
            return res

        res = 0
        for i, num in enumerate(instructions):
            res += min(query(num - 1), i - query(num))
            update(num)
        return res % MOD"
False,0,0,1776,minimum-operations-to-reduce-x-to-zero,Minimum Operations to Reduce X to Zero,minimum-operations-to-reduce-x-to-zero,False,109180,290424,1658,False,2,"Can you solve this real interview question? Minimum Operations to Reduce X to Zero - You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.

 

Example 1:


Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.


Example 2:


Input: nums = [5,6,7,8,9], x = 4
Output: -1


Example 3:


Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 104
 * 1 <= x <= 109",Solutions (974),3.9K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    x: int = deserialize(""int"", read_line())
    ans = Solution().minOperations(nums, x)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        target = sum(nums) - x
        if target == 0:
            return len(nums)
        
        left = 0
        cur_sum = 0
        max_len = -1
        
        for right in range(len(nums)):
            cur_sum += nums[right]
            
            while cur_sum > target and left <= right:
                cur_sum -= nums[left]
                left += 1
                
            if cur_sum == target:
                max_len = max(max_len, right - left + 1)
        
        if max_len == -1:
            return -1
        
        return len(nums) - max_len"
False,0,0,1777,determine-if-two-strings-are-close,Determine if Two Strings Are Close,determine-if-two-strings-are-close,False,105483,187287,1657,False,2,"Can you solve this real interview question? Determine if Two Strings Are Close - Two strings are considered close if you can attain one from the other using the following operations:

 * Operation 1: Swap any two existing characters.
   * For example, abcde -> aecdb
 * Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
   * For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)

You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

 

Example 1:


Input: word1 = ""abc"", word2 = ""bca""
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: ""abc"" -> ""acb""
Apply Operation 1: ""acb"" -> ""bca""


Example 2:


Input: word1 = ""a"", word2 = ""aa""
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.


Example 3:


Input: word1 = ""cabbba"", word2 = ""abbccc""
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: ""cabbba"" -> ""caabbb""
Apply Operation 2: ""caabbb"" -> ""baaccc""
Apply Operation 2: ""baaccc"" -> ""abbccc""


 

Constraints:

 * 1 <= word1.length, word2.length <= 105
 * word1 and word2 contain only lowercase English letters.",Solutions (1.6K),2.2K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/determine-if-two-strings-are-close/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().closeStrings(word1, word2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        if len(word1) != len(word2):
            return False
        
        return sorted(set(word1)) == sorted(set(word2)) and sorted(collections.Counter(word1).values()) == sorted(collections.Counter(word2).values())"
False,0,0,1778,,Maximize Grid Happiness,maximize-grid-happiness,False,4288,11226,1659,False,3,"Can you solve this real interview question? Maximize Grid Happiness - You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.

You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.

The happiness of each person is calculated as follows:

 * Introverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).
 * Extroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).

Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.

The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/11/05/grid_happiness.png]


Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2
Output: 240
Explanation: Assume the grid is 1-indexed with coordinates (row, column).
We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).
- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120
- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
The grid happiness is 120 + 60 + 60 = 240.
The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.


Example 2:


Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1
Output: 260
Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).
- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80
- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
The grid happiness is 90 + 80 + 90 = 260.


Example 3:


Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0
Output: 240


 

Constraints:

 * 1 <= m, n <= 5
 * 0 <= introvertsCount, extrovertsCount <= min(m * n, 6)",Solutions (53),278,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-grid-happiness/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaxGridHappiness(self, m: int, n: int, introvertsCount: int, extrovertsCount: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    introvertsCount: int = deserialize(""int"", read_line())
    extrovertsCount: int = deserialize(""int"", read_line())
    ans = Solution().getMaxGridHappiness(m, n, introvertsCount, extrovertsCount)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaxGridHappiness(self, m: int, n: int, introvertsCount: int, extrovertsCount: int) -> int:
        pass"
False,0,0,1781,check-if-two-string-arrays-are-equivalent,Check If Two String Arrays are Equivalent,check-if-two-string-arrays-are-equivalent,False,266070,318782,1662,False,1,"Can you solve this real interview question? Check If Two String Arrays are Equivalent - Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.

 

Example 1:


Input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""]
Output: true
Explanation:
word1 represents string ""ab"" + ""c"" -> ""abc""
word2 represents string ""a"" + ""bc"" -> ""abc""
The strings are the same, so return true.

Example 2:


Input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""]
Output: false


Example 3:


Input: word1  = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""]
Output: true


 

Constraints:

 * 1 <= word1.length, word2.length <= 103
 * 1 <= word1[i].length, word2[i].length <= 103
 * 1 <= sum(word1[i].length), sum(word2[i].length) <= 103
 * word1[i] and word2[i] consist of lowercase letters.",Solutions (3.7K),2.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: List[str] = deserialize(""List[str]"", read_line())
    word2: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().arrayStringsAreEqual(word1, word2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def arrayStringsAreEqual(self, word1: List[str], word2: List[str]) -> bool:
        return ''.join(word1) == ''.join(word2)"
False,0,0,1782,smallest-string-with-a-given-numeric-value,Smallest String With A Given Numeric Value,smallest-string-with-a-given-numeric-value,False,87120,130472,1663,False,2,"Can you solve this real interview question? Smallest String With A Given Numeric Value - The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string ""abe"" is equal to 1 + 2 + 5 = 8.

You are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.

Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.

 

Example 1:


Input: n = 3, k = 27
Output: ""aay""
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.


Example 2:


Input: n = 5, k = 73
Output: ""aaszz""


 

Constraints:

 * 1 <= n <= 105
 * n <= k <= 26 * n",Solutions (1.2K),1.7K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-string-with-a-given-numeric-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getSmallestString(self, n: int, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getSmallestString(n, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def getSmallestString(self, n: int, k: int) -> str:
        z = (k - n) // 25
        y = (k - n) % 25

        res = 'a' * (n - z - 1)
        res += chr(ord('a') + y)
        res += 'z' * z

        return res[::-1]"
False,0,0,1783,,Ways to Make a Fair Array,ways-to-make-a-fair-array,False,30194,47612,1664,False,2,"Can you solve this real interview question? Ways to Make a Fair Array - You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if nums = [6,1,7,4,1]:

 * Choosing to remove index 1 results in nums = [6,7,4,1].
 * Choosing to remove index 2 results in nums = [6,1,4,1].
 * Choosing to remove index 4 results in nums = [6,1,7,4].

An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, nums is fair.

 

Example 1:


Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
There is 1 index that you can remove to make nums fair.


Example 2:


Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.


Example 3:


Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 104",Solutions (522),1.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/ways-to-make-a-fair-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToMakeFair(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().waysToMakeFair(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToMakeFair(self, nums: List[int]) -> int:
        even_sum = sum(nums[::2])
        odd_sum = sum(nums[1::2])
        
        count = 0
        cur_even = 0
        cur_odd = 0
        
        for i in range(len(nums)):
            if i % 2 == 0:
                cur_even += nums[i]
            else:
                cur_odd += nums[i]
            
            if cur_even + odd_sum - cur_odd == cur_odd + even_sum - cur_even:
                count += 1
        
        return count"
False,0,0,1784,,Minimum Initial Energy to Finish Tasks,minimum-initial-energy-to-finish-tasks,False,14075,24985,1665,False,3,"Can you solve this real interview question? Minimum Initial Energy to Finish Tasks - You are given an array tasks where tasks[i] = [actuali, minimumi]:

 * actuali is the actual amount of energy you spend to finish the ith task.
 * minimumi is the minimum amount of energy you require to begin the ith task.

For example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.

You can finish the tasks in any order you like.

Return the minimum initial amount of energy you will need to finish all the tasks.

 

Example 1:


Input: tasks = [[1,2],[2,4],[4,8]]
Output: 8
Explanation:
Starting with 8 energy, we finish the tasks in the following order:
    - 3rd task. Now energy = 8 - 4 = 4.
    - 2nd task. Now energy = 4 - 2 = 2.
    - 1st task. Now energy = 2 - 1 = 1.
Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.

Example 2:


Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
Output: 32
Explanation:
Starting with 32 energy, we finish the tasks in the following order:
    - 1st task. Now energy = 32 - 1 = 31.
    - 2nd task. Now energy = 31 - 2 = 29.
    - 3rd task. Now energy = 29 - 10 = 19.
    - 4th task. Now energy = 19 - 10 = 9.
    - 5th task. Now energy = 9 - 8 = 1.

Example 3:


Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
Output: 27
Explanation:
Starting with 27 energy, we finish the tasks in the following order:
    - 5th task. Now energy = 27 - 5 = 22.
    - 2nd task. Now energy = 22 - 2 = 20.
    - 3rd task. Now energy = 20 - 3 = 17.
    - 1st task. Now energy = 17 - 1 = 16.
    - 4th task. Now energy = 16 - 4 = 12.
    - 6th task. Now energy = 12 - 6 = 6.


 

Constraints:

 * 1 <= tasks.length <= 105
 * 1 <= actual i <= minimumi <= 104",Solutions (240),489,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumEffort(self, tasks: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumEffort(tasks)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumEffort(self, tasks: List[List[int]]) -> int:
        tasks.sort(key=lambda x: (x[1] - x[0], x[1]))
        energy = 0
        initial_energy = 0
        
        for task in tasks:
            initial_energy = max(initial_energy + task[0], task[1])
            
        return initial_energy"
False,0,0,1786,,Count the Number of Consistent Strings,count-the-number-of-consistent-strings,False,125200,152265,1684,False,1,"Can you solve this real interview question? Count the Number of Consistent Strings - You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:


Input: allowed = ""ab"", words = [""ad"",""bd"",""aaab"",""baa"",""badab""]
Output: 2
Explanation: Strings ""aaab"" and ""baa"" are consistent since they only contain characters 'a' and 'b'.


Example 2:


Input: allowed = ""abc"", words = [""a"",""b"",""c"",""ab"",""ac"",""bc"",""abc""]
Output: 7
Explanation: All strings are consistent.


Example 3:


Input: allowed = ""cad"", words = [""cc"",""acd"",""b"",""ba"",""bac"",""bad"",""ac"",""d""]
Output: 4
Explanation: Strings ""cc"", ""acd"", ""ac"", and ""d"" are consistent.


 

Constraints:

 * 1 <= words.length <= 104
 * 1 <= allowed.length <= 26
 * 1 <= words[i].length <= 10
 * The characters in allowed are distinct.
 * words[i] and allowed contain only lowercase English letters.",Solutions (1.8K),1.4K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-consistent-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    allowed: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().countConsistentStrings(allowed, words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:
        return sum(all(c in allowed for c in word) for word in words)"
False,0,0,1787,,Sum of Absolute Differences in a Sorted Array,sum-of-absolute-differences-in-a-sorted-array,False,26685,41955,1685,False,2,"Can you solve this real interview question? Sum of Absolute Differences in a Sorted Array - You are given an integer array nums sorted in non-decreasing order.

Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.

In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).

 

Example 1:


Input: nums = [2,3,5]
Output: [4,3,5]
Explanation: Assuming the arrays are 0-indexed, then
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,
result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,
result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.


Example 2:


Input: nums = [1,4,6,8,10]
Output: [24,15,13,15,21]


 

Constraints:

 * 2 <= nums.length <= 105
 * 1 <= nums[i] <= nums[i + 1] <= 104",Solutions (525),1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getSumAbsoluteDifferences(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getSumAbsoluteDifferences(self, nums: List[int]) -> List[int]:
        n = len(nums)
        prefix_sum = [0] * n
        suffix_sum = [0] * n
        
        prefix_sum[0] = nums[0]
        suffix_sum[n-1] = nums[n-1]
        
        for i in range(1, n):
            prefix_sum[i] = prefix_sum[i-1] + nums[i]
        
        for i in range(n-2, -1, -1):
            suffix_sum[i] = suffix_sum[i+1] + nums[i]
        
        result = [0] * n
        
        for i in range(n):
            result[i] = (nums[i] * i - prefix_sum[i]) + (suffix_sum[i] - nums[i] * (n-i-1))
        
        return result"
False,0,0,1788,,Stone Game VI,stone-game-vi,False,14222,26037,1686,False,2,"Can you solve this real interview question? Stone Game VI - Alice and Bob take turns playing a game, with Alice starting first.

There are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:

 * If Alice wins, return 1.
 * If Bob wins, return -1.
 * If the game results in a draw, return 0.

 

Example 1:


Input: aliceValues = [1,3], bobValues = [2,1]
Output: 1
Explanation:
If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.
Bob can only choose stone 0, and will only receive 2 points.
Alice wins.


Example 2:


Input: aliceValues = [1,2], bobValues = [3,1]
Output: 0
Explanation:
If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.
Draw.


Example 3:


Input: aliceValues = [2,4,3], bobValues = [1,6,7]
Output: -1
Explanation:
Regardless of how Alice plays, Bob will be able to have more points than Alice.
For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.
Bob wins.


 

Constraints:

 * n == aliceValues.length == bobValues.length
 * 1 <= n <= 105
 * 1 <= aliceValues[i], bobValues[i] <= 100",Solutions (195),653,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-vi/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    aliceValues: List[int] = deserialize(""List[int]"", read_line())
    bobValues: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameVI(aliceValues, bobValues)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def stoneGameVI(self, aliceValues: List[int], bobValues: List[int]) -> int:
        total_values = [(aliceValues[i] + bobValues[i], i) for i in range(len(aliceValues))]
        total_values.sort(reverse=True)
        
        alice_points = 0
        bob_points = 0
        for i in range(len(total_values)):
            index = total_values[i][1]
            if i % 2 == 0:
                alice_points += aliceValues[index]
            else:
                bob_points += bobValues[index]
        
        if alice_points > bob_points:
            return 1
        elif alice_points < bob_points:
            return -1
        else:
            return 0"
False,0,0,1789,,Delivering Boxes from Storage to Ports,delivering-boxes-from-storage-to-ports,False,4980,12860,1687,False,3,"Can you solve this real interview question? Delivering Boxes from Storage to Ports - You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.

You are given an array boxes, where boxes[i] = [ports i , weighti], and three integers portsCount, maxBoxes, and maxWeight.

 * ports i is the port where you need to deliver the ith box and weightsi is the weight of the ith box.
 * portsCount is the number of ports.
 * maxBoxes and maxWeight are the respective box and weight limits of the ship.

The boxes need to be delivered in the order they are given. The ship will follow these steps:

 * The ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints.
 * For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.
 * The ship then makes a return trip to storage to take more boxes from the queue.

The ship must end at storage after all the boxes have been delivered.

Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.

 

Example 1:


Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
Output: 4
Explanation: The optimal strategy is as follows: 
- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.
So the total number of trips is 4.
Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).


Example 2:


Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
Output: 6
Explanation: The optimal strategy is as follows: 
- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.
- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.
- The ship takes the fifth box, goes to port 2, then returns to storage. 2 trips.
So the total number of trips is 2 + 2 + 2 = 6.


Example 3:


Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.
- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.
- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.
So the total number of trips is 2 + 2 + 2 = 6.


 

Constraints:

 * 1 <= boxes.length <= 105
 * 1 <= portsCount, maxBoxes, maxWeight <= 105
 * 1 <= ports i <= portsCount
 * 1 <= weightsi <= maxWeight",Solutions (51),325,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/delivering-boxes-from-storage-to-ports/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def boxDelivering(self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    boxes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    portsCount: int = deserialize(""int"", read_line())
    maxBoxes: int = deserialize(""int"", read_line())
    maxWeight: int = deserialize(""int"", read_line())
    ans = Solution().boxDelivering(boxes, portsCount, maxBoxes, maxWeight)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def boxDelivering(self, boxes: List[List[int]], portsCount: int, maxBoxes: int, maxWeight: int) -> int:
        # Add your code here
        pass"
False,0,0,1791,richest-customer-wealth,Richest Customer Wealth,richest-customer-wealth,False,563193,640642,1672,False,1,"Can you solve this real interview question? Richest Customer Wealth - You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i th customer has in the j th bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

 

Example 1:


Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
1st customer has wealth = 1 + 2 + 3 = 6
2nd customer has wealth = 3 + 2 + 1 = 6
Both customers are considered the richest with a wealth of 6 each, so return 6.


Example 2:


Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.

Example 3:


Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17


 

Constraints:

 * m == accounts.length
 * n == accounts[i].length
 * 1 <= m, n <= 50
 * 1 <= accounts[i][j] <= 100",Solutions (5.1K),3.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/richest-customer-wealth/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    accounts: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumWealth(accounts)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumWealth(self, accounts: List[List[int]]) -> int:
        return max([sum(customer) for customer in accounts])"
False,0,0,1792,find-the-most-competitive-subsequence,Find the Most Competitive Subsequence,find-the-most-competitive-subsequence,False,51218,103946,1673,False,2,"Can you solve this real interview question? Find the Most Competitive Subsequence - Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.

 

Example 1:


Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.


Example 2:


Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109
 * 1 <= k <= nums.length",Solutions (482),1.7K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-most-competitive-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().mostCompetitive(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:
        stack = []
        to_pop = len(nums) - k
        
        for num in nums:
            while to_pop > 0 and stack and num < stack[-1]:
                stack.pop()
                to_pop -= 1
            stack.append(num)
        
        return stack[:k]"
False,0,0,1793,,Minimum Moves to Make Array Complementary,minimum-moves-to-make-array-complementary,False,7330,18980,1674,False,2,"Can you solve this real interview question? Minimum Moves to Make Array Complementary - You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.

The array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.

Return the minimum number of moves required to make nums complementary.

 

Example 1:


Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).
nums[0] + nums[3] = 1 + 3 = 4.
nums[1] + nums[2] = 2 + 2 = 4.
nums[2] + nums[1] = 2 + 2 = 4.
nums[3] + nums[0] = 3 + 1 = 4.
Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.


Example 2:


Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.


Example 3:


Input: nums = [1,2,1,2], limit = 2
Output: 0
Explanation: nums is already complementary.


 

Constraints:

 * n == nums.length
 * 2 <= n <= 105
 * 1 <= nums[i] <= limit <= 105
 * n is even.",Solutions (65),558,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-make-array-complementary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMoves(self, nums: List[int], limit: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    limit: int = deserialize(""int"", read_line())
    ans = Solution().minMoves(nums, limit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMoves(self, nums: List[int], limit: int) -> int:
        pass"
False,0,0,1794,minimize-deviation-in-array,Minimize Deviation in Array,minimize-deviation-in-array,False,87596,160441,1675,False,3,"Can you solve this real interview question? Minimize Deviation in Array - You are given an array nums of n positive integers.

You can perform two types of operations on any element of the array any number of times:

 * If the element is even, divide it by 2.
   * For example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
 * If the element is odd, multiply it by 2.
   * For example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].

The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.

 

Example 1:


Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.


Example 2:


Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.


Example 3:


Input: nums = [2,10,8]
Output: 3


 

Constraints:

 * n == nums.length
 * 2 <= n <= 5 * 104
 * 1 <= nums[i] <= 109",Solutions (690),2.9K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-deviation-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDeviation(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumDeviation(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDeviation(self, nums: List[int]) -> int:
        nums = sorted(set([x * 2 if x % 2 else x for x in nums]))
        res = float('inf')
        while len(nums) == len(nums):
            res = min(res, nums[-1] - nums[0])
            if nums[0] % 2 == 0:
                nums[0] *= 2
                nums.sort()
            else:
                break
        return res"
False,0,0,1797,,Goal Parser Interpretation,goal-parser-interpretation,False,173219,200116,1678,False,1,"Can you solve this real interview question? Goal Parser Interpretation - You own a Goal Parser that can interpret a string command. The command consists of an alphabet of ""G"", ""()"" and/or ""(al)"" in some order. The Goal Parser will interpret ""G"" as the string ""G"", ""()"" as the string ""o"", and ""(al)"" as the string ""al"". The interpreted strings are then concatenated in the original order.

Given the string command, return the Goal Parser's interpretation of command.

 

Example 1:


Input: command = ""G()(al)""
Output: ""Goal""
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is ""Goal"".


Example 2:


Input: command = ""G()()()()(al)""
Output: ""Gooooal""


Example 3:


Input: command = ""(al)G(al)()()G""
Output: ""alGalooG""


 

Constraints:

 * 1 <= command.length <= 100
 * command consists of ""G"", ""()"", and/or ""(al)"" in some order.",Solutions (3K),1.2K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/goal-parser-interpretation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def interpret(self, command: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    command: str = deserialize(""str"", read_line())
    ans = Solution().interpret(command)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def interpret(self, command: str) -> str:
        return command.replace(""()"", ""o"").replace(""(al)"", ""al"")"
False,0,0,1798,max-number-of-k-sum-pairs,Max Number of K-Sum Pairs,max-number-of-k-sum-pairs,False,121698,212526,1679,False,2,"Can you solve this real interview question? Max Number of K-Sum Pairs - You are given an integer array nums and an integer k.

In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 

Example 1:


Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.

Example 2:


Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.

 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= k <= 109",Solutions (1.6K),2.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/max-number-of-k-sum-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxOperations(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        count = 0
        num_count = {}
        for num in nums:
            if k - num in num_count and num_count[k - num] > 0:
                count += 1
                num_count[k - num] -= 1
            else:
                num_count[num] = num_count.get(num, 0) + 1
        return count"
False,0,0,1799,,Minimum Incompatibility,minimum-incompatibility,False,6743,18080,1681,False,3,"Can you solve this real interview question? Minimum Incompatibility - You are given an integer array nums and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.

A subset's incompatibility is the difference between the maximum and minimum elements in that array.

Return the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.

A subset is a group integers that appear in the array with no particular order.

 

Example 1:


Input: nums = [1,2,1,4], k = 2
Output: 4
Explanation: The optimal distribution of subsets is [1,2] and [1,4].
The incompatibility is (2-1) + (4-1) = 4.
Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.

Example 2:


Input: nums = [6,3,8,1,3,1,2,2], k = 4
Output: 6
Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].
The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.


Example 3:


Input: nums = [5,3,3,6,3,3], k = 3
Output: -1
Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.


 

Constraints:

 * 1 <= k <= nums.length <= 16
 * nums.length is divisible by k
 * 1 <= nums[i] <= nums.length",Solutions (75),241,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-incompatibility/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumIncompatibility(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumIncompatibility(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumIncompatibility(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,1800,concatenation-of-consecutive-binary-numbers,Concatenation of Consecutive Binary Numbers,concatenation-of-consecutive-binary-numbers,False,86912,152552,1680,False,2,"Can you solve this real interview question? Concatenation of Consecutive Binary Numbers - Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.

 

Example 1:


Input: n = 1
Output: 1
Explanation: ""1"" in binary corresponds to the decimal value 1. 


Example 2:


Input: n = 3
Output: 27
Explanation: In binary, 1, 2, and 3 corresponds to ""1"", ""10"", and ""11"".
After concatenating them, we have ""11011"", which corresponds to the decimal value 27.


Example 3:


Input: n = 12
Output: 505379714
Explanation: The concatenation results in ""1101110010111011110001001101010111100"".
The decimal value of that is 118505380540.
After modulo 109 + 7, the result is 505379714.


 

Constraints:

 * 1 <= n <= 105",Solutions (907),1.4K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def concatenatedBinary(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().concatenatedBinary(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def concatenatedBinary(self, n: int) -> int:
        result = 0
        for i in range(1, n+1):
            result = (result << (len(bin(i)) - 2)) + i
            result = result % (10**9 + 7)
        return result"
False,0,0,1802,,Number of Students Unable to Eat Lunch,number-of-students-unable-to-eat-lunch,False,61545,89627,1700,False,1,"Can you solve this real interview question? Number of Students Unable to Eat Lunch - The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:

 * If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
 * Otherwise, they will leave it and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.

 

Example 1:


Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.


Example 2:


Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3


 

Constraints:

 * 1 <= students.length, sandwiches.length <= 100
 * students.length == sandwiches.length
 * sandwiches[i] is 0 or 1.
 * students[i] is 0 or 1.",Solutions (997),1.3K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-students-unable-to-eat-lunch/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    students: List[int] = deserialize(""List[int]"", read_line())
    sandwiches: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countStudents(students, sandwiches)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countStudents(self, students: List[int], sandwiches: List[int]) -> int:
        unable_to_eat = 0
        while students:
            if students[0] == sandwiches[0]:
                students.pop(0)
                sandwiches.pop(0)
                unable_to_eat = 0
            else:
                students.append(students.pop(0))
                unable_to_eat += 1
                if unable_to_eat == len(students):
                    break
        return len(students)"
False,0,0,1803,,Average Waiting Time,average-waiting-time,False,23793,38006,1701,False,2,"Can you solve this real interview question? Average Waiting Time - There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:

 * arrivali is the arrival time of the ith customer. The arrival times are sorted in non-decreasing order.
 * timei is the time needed to prepare the order of the ith customer.

When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.

Return the average waiting time of all customers. Solutions within 10-5 from the actual answer are considered accepted.

 

Example 1:


Input: customers = [[1,2],[2,5],[4,3]]
Output: 5.00000
Explanation:
1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.
2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.
3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.
So the average waiting time = (2 + 6 + 7) / 3 = 5.


Example 2:


Input: customers = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
Explanation:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.
2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.
3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.
4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.
So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.


 

Constraints:

 * 1 <= customers.length <= 105
 * 1 <= arrivali, timei <= 104
 * arrivali <= arrivali+1",Solutions (451),433,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/average-waiting-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def averageWaitingTime(self, customers: List[List[int]]) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    customers: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().averageWaitingTime(customers)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def averageWaitingTime(self, customers: List[List[int]]) -> float:
        total_wait_time = 0
        start_time = 0
        
        for arrival, cook_time in customers:
            start_time = max(arrival, start_time) + cook_time
            total_wait_time += start_time - arrival
        
        return total_wait_time / len(customers)"
False,0,0,1804,,Maximum Binary String After Change,maximum-binary-string-after-change,False,10643,23036,1702,False,2,"Can you solve this real interview question? Maximum Binary String After Change - You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:

 * Operation 1: If the number contains the substring ""00"", you can replace it with ""10"".
   * For example, ""00010"" -> ""10010""
 * Operation 2: If the number contains the substring ""10"", you can replace it with ""01"".
   * For example, ""00010"" -> ""00001""

Return the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.

 

Example 1:


Input: binary = ""000110""
Output: ""111011""
Explanation: A valid transformation sequence can be:
""000110"" -> ""000101"" 
""000101"" -> ""100101"" 
""100101"" -> ""110101"" 
""110101"" -> ""110011"" 
""110011"" -> ""111011""


Example 2:


Input: binary = ""01""
Output: ""01""
Explanation: ""01"" cannot be transformed any further.


 

Constraints:

 * 1 <= binary.length <= 105
 * binary consist of '0' and '1'.",Solutions (178),427,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-binary-string-after-change/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumBinaryString(self, binary: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    binary: str = deserialize(""str"", read_line())
    ans = Solution().maximumBinaryString(binary)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def maximumBinaryString(self, binary: str) -> str:
        k = binary.count('0')
        if k == 0:
            return binary
        if k == 1:
            return binary
        ind = binary.index('0')
        res = '1' * (ind + k - 1) + '0' + '1' * (len(binary) - ind - k)
        return res"
False,0,0,1805,,Minimum Adjacent Swaps for K Consecutive Ones,minimum-adjacent-swaps-for-k-consecutive-ones,False,8250,19478,1703,False,3,"Can you solve this real interview question? Minimum Adjacent Swaps for K Consecutive Ones - You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that nums has k consecutive 1's.

 

Example 1:


Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.


Example 2:


Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].


Example 3:


Input: nums = [1,1,0,1], k = 2
Output: 0
Explanation: nums already has 2 consecutive 1's.


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is 0 or 1.
 * 1 <= k <= sum(nums)",Solutions (61),586,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMoves(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minMoves(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMoves(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,1806,,Count of Matches in Tournament,count-of-matches-in-tournament,False,95067,114273,1688,False,1,"Can you solve this real interview question? Count of Matches in Tournament - You are given an integer n, the number of teams in a tournament that has strange rules:

 * If the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.
 * If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.

Return the number of matches played in the tournament until a winner is decided.

 

Example 1:


Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.
- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 3 + 2 + 1 = 6.


Example 2:


Input: n = 14
Output: 13
Explanation: Details of the tournament:
- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.
- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.
- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.
- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.
Total number of matches = 7 + 3 + 2 + 1 = 13.


 

Constraints:

 * 1 <= n <= 200",Solutions (1.5K),886,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/count-of-matches-in-tournament/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfMatches(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numberOfMatches(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfMatches(self, n: int) -> int:
        return n - 1"
False,0,0,1807,partitioning-into-minimum-number-of-deci-binary-numbers,Partitioning Into Minimum Number Of Deci-Binary Numbers,partitioning-into-minimum-number-of-deci-binary-numbers,False,169937,190411,1689,False,2,"Can you solve this real interview question? Partitioning Into Minimum Number Of Deci-Binary Numbers - A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.

Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.

 

Example 1:


Input: n = ""32""
Output: 3
Explanation: 10 + 11 + 11 = 32


Example 2:


Input: n = ""82734""
Output: 8


Example 3:


Input: n = ""27346209830709182346""
Output: 9


 

Constraints:

 * 1 <= n.length <= 105
 * n consists of only digits.
 * n does not contain any leading zeros and represents a positive integer.",Solutions (1.9K),2.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPartitions(self, n: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: str = deserialize(""str"", read_line())
    ans = Solution().minPartitions(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPartitions(self, n: str) -> int:
        return int(max(n))"
False,0,0,1808,stone-game-vii,Stone Game VII,stone-game-vii,False,30127,51867,1690,False,2,"Can you solve this real interview question? Stone Game VII - Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.

 

Example 1:


Input: stones = [5,3,1,4,2]
Output: 6
Explanation: 
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].
- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].
- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].
- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].
- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].
The score difference is 18 - 12 = 6.


Example 2:


Input: stones = [7,90,5,1,100,10,10,2]
Output: 122

 

Constraints:

 * n == stones.length
 * 2 <= n <= 1000
 * 1 <= stones[i] <= 1000",Solutions (341),842,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-vii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameVII(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        n = len(stones)
        dp = [[0] * n for _ in range(n)]
        
        prefix_sum = [0] + list(accumulate(stones))
        
        for l in range(2, n + 1):
            for i in range(n - l + 1):
                j = i + l - 1
                dp[i][j] = max(prefix_sum[j + 1] - prefix_sum[i + 1] - dp[i + 1][j], 
                               prefix_sum[j] - prefix_sum[i] - dp[i][j - 1])
        
        return dp[0][n - 1]"
False,0,0,1812,,Reformat Phone Number,reformat-phone-number,False,30429,46781,1694,False,1,"Can you solve this real interview question? Reformat Phone Number - You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:

 * 2 digits: A single block of length 2.
 * 3 digits: A single block of length 3.
 * 4 digits: Two blocks of length 2 each.

The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.

 

Example 1:


Input: number = ""1-23-45 6""
Output: ""123-456""
Explanation: The digits are ""123456"".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".
Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is ""456"".
Joining the blocks gives ""123-456"".


Example 2:


Input: number = ""123 4-567""
Output: ""123-45-67""
Explanation: The digits are ""1234567"".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".
Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are ""45"" and ""67"".
Joining the blocks gives ""123-45-67"".


Example 3:


Input: number = ""123 4-5678""
Output: ""123-456-78""
Explanation: The digits are ""12345678"".
Step 1: The 1st block is ""123"".
Step 2: The 2nd block is ""456"".
Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is ""78"".
Joining the blocks gives ""123-456-78"".


 

Constraints:

 * 2 <= number.length <= 100
 * number consists of digits and the characters '-' and ' '.
 * There are at least two digits in number.",Solutions (538),276,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/reformat-phone-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reformatNumber(self, number: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    number: str = deserialize(""str"", read_line())
    ans = Solution().reformatNumber(number)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reformatNumber(self, number: str) -> str:
        nums = [n for n in number if n.isdigit()]
        res = []
        while len(nums) > 4:
            res.append(nums[:3])
            nums = nums[3:]
        if len(nums) == 2:
            res.append(nums)
        else:
            res.append(nums[:2])
            res.append(nums[2:])
        return '-'.join([''.join(block) for block in res])"
False,0,0,1813,maximum-erasure-value,Maximum Erasure Value,maximum-erasure-value,False,107981,187604,1695,False,2,"Can you solve this real interview question? Maximum Erasure Value - You are given an array of positive integers nums and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).

 

Example 1:


Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].


Example 2:


Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 104",Solutions (1.7K),2.5K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-erasure-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumUniqueSubarray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumUniqueSubarray(self, nums: List[int]) -> int:
        seen = {}
        start = 0
        result = 0
        current_sum = 0
        
        for end in range(len(nums)):
            if nums[end] in seen:
                while start < end and nums[end] in seen:
                    current_sum -= nums[start]
                    seen.pop(nums[start])
                    start += 1
            current_sum += nums[end]
            seen[nums[end]] = end
            result = max(result, current_sum)
        
        return result"
False,0,0,1814,jump-game-vi,Jump Game VI,jump-game-vi,False,97557,211726,1696,False,2,"Can you solve this real interview question? Jump Game VI - You are given a 0-indexed integer array nums and an integer k.

You are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.

You want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.

Return the maximum score you can get.

 

Example 1:


Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.


Example 2:


Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.


Example 3:


Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0


 

Constraints:

 * 1 <= nums.length, k <= 105
 * -104 <= nums[i] <= 104",Solutions (843),3.1K,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-vi/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxResult(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxResult(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxResult(self, nums: List[int], k: int) -> int:
        from collections import deque
        
        dp = [0] * len(nums)
        dp[0] = nums[0]
        
        deque_nums = deque([(dp[0], 0)])
        
        for i in range(1, len(nums)):
            while deque_nums and deque_nums[0][1] < i - k:
                deque_nums.popleft()
                
            dp[i] = nums[i] + deque_nums[0][0]
            
            while deque_nums and deque_nums[-1][0] <= dp[i]:
                deque_nums.pop()
                
            deque_nums.append((dp[i], i))
        
        return dp[-1]"
False,0,0,1815,checking-existence-of-edge-length-limited-paths,Checking Existence of Edge Length Limited Paths,checking-existence-of-edge-length-limited-paths,False,12562,24763,1697,False,3,"Can you solve this real interview question? Checking Existence of Edge Length Limited Paths - An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.

Given an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .

Return a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/08/h.png]


Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]
Output: [false,true]
Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.
For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.
For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.


Example 2:

[https://assets.leetcode.com/uploads/2020/12/08/q.png]


Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]
Output: [true,false]
Exaplanation: The above figure shows the given graph.


 

Constraints:

 * 2 <= n <= 105
 * 1 <= edgeList.length, queries.length <= 105
 * edgeList[i].length == 3
 * queries[j].length == 3
 * 0 <= ui, vi, pj, qj <= n - 1
 * ui != vi
 * pj != qj
 * 1 <= disi, limitj <= 109
 * There may be multiple edges between two nodes.",Solutions (169),737,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edgeList: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().distanceLimitedPathsExist(n, edgeList, queries)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def distanceLimitedPathsExist(self, n: int, edgeList: List[List[int]], queries: List[List[int]]) -> List[bool]:
        pass"
False,0,0,1817,,Calculate Money in Leetcode Bank,calculate-money-in-leetcode-bank,False,38759,58581,1716,False,1,"Can you solve this real interview question? Calculate Money in Leetcode Bank - Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.

Given n, return the total amount of money he will have in the Leetcode bank at the end of the nth day.

 

Example 1:


Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.


Example 2:


Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.


Example 3:


Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.


 

Constraints:

 * 1 <= n <= 1000",Solutions (906),556,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/calculate-money-in-leetcode-bank/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalMoney(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().totalMoney(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalMoney(self, n: int) -> int:
        return (n // 7) * 28 + 7 * ((n // 7) * (n // 7 - 1) // 2) + sum(range(1, n % 7 + 1)) + (n % 7) * (n // 7)"
False,0,0,1818,,Maximum Score From Removing Substrings,maximum-score-from-removing-substrings,False,12116,26219,1717,False,2,"Can you solve this real interview question? Maximum Score From Removing Substrings - You are given a string s and two integers x and y. You can perform two types of operations any number of times.

 * Remove substring ""ab"" and gain x points.
   * For example, when removing ""ab"" from ""cabxbae"" it becomes ""cxbae"".
 * Remove substring ""ba"" and gain y points.
   * For example, when removing ""ba"" from ""cabxbae"" it becomes ""cabxe"".

Return the maximum points you can gain after applying the above operations on s.

 

Example 1:


Input: s = ""cdbcbbaaabab"", x = 4, y = 5
Output: 19
Explanation:
- Remove the ""ba"" underlined in ""cdbcbbaaabab"". Now, s = ""cdbcbbaaab"" and 5 points are added to the score.
- Remove the ""ab"" underlined in ""cdbcbbaaab"". Now, s = ""cdbcbbaa"" and 4 points are added to the score.
- Remove the ""ba"" underlined in ""cdbcbbaa"". Now, s = ""cdbcba"" and 5 points are added to the score.
- Remove the ""ba"" underlined in ""cdbcba"". Now, s = ""cdbc"" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.

Example 2:


Input: s = ""aabbaaxybbaabb"", x = 5, y = 4
Output: 20


 

Constraints:

 * 1 <= s.length <= 105
 * 1 <= x, y <= 104
 * s consists of lowercase English letters.",Solutions (237),541,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-from-removing-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumGain(self, s: str, x: int, y: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    x: int = deserialize(""int"", read_line())
    y: int = deserialize(""int"", read_line())
    ans = Solution().maximumGain(s, x, y)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumGain(self, s: str, x: int, y: int) -> int:
        stack = []
        points = 0
        for c in s:
            if stack and c == ""b"" and stack[-1] == ""a"":
                points += max(x, y) if c == ""b"" else 0
                stack.pop()
            else:
                stack.append(c)
        
        s = """".join(stack)
        stack = []
        for c in s:
            if stack and c == ""a"" and stack[-1] == ""b"":
                points += max(x, y) if c == ""a"" else 0
                stack.pop()
            else:
                stack.append(c)
        
        return points"
False,0,0,1819,,Construct the Lexicographically Largest Valid Sequence,construct-the-lexicographically-largest-valid-sequence,False,10625,20481,1718,False,2,"Can you solve this real interview question? Construct the Lexicographically Largest Valid Sequence - Given an integer n, find a sequence that satisfies all of the following:

 * The integer 1 occurs once in the sequence.
 * Each integer between 2 and n occurs twice in the sequence.
 * For every integer i between 2 and n, the distance between the two occurrences of i is exactly i.

The distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.

A sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.

 

Example 1:


Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.


Example 2:


Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]


 

Constraints:

 * 1 <= n <= 20",Solutions (141),467,"# Created by asetti2002 at 2024/04/17 02:10
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().constructDistancedSequence(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def constructDistancedSequence(self, n: int) -> List[int]:
        def backtrack(remaining, seen):
            if remaining == 0:
                return seen

            for i in range(n, 0, -1):
                if i != 1 and i in seen:
                    continue
                if i == 1:
                    next_index = seen.index(0)
                    seen[next_index] = 1
                    seen[next_index + 1] = 1
                elif i in seen:
                    index = seen.index(i)
                    if index + i < len(seen) and seen[index+i] == 0:
                        seen[index + i] = i
                    else:
                        continue
                else:
                    seen.append(i)
                    seen.append(0)
                    backtrack(remaining-1, seen)
                    if 0 in seen:
                        seen.remove(i)
                        seen.remove(0)
            return seen

        return backtrack(n, [])"
False,0,0,1820,,Number Of Ways To Reconstruct A Tree,number-of-ways-to-reconstruct-a-tree,False,3418,7828,1719,False,3,"Can you solve this real interview question? Number Of Ways To Reconstruct A Tree - You are given an array pairs, where pairs[i] = [xi, yi], and:

 * There are no duplicates.
 * xi < yi

Let ways be the number of rooted trees that satisfy the following conditions:

 * The tree consists of nodes whose values appeared in pairs.
 * A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.
 * Note: the tree does not have to be a binary tree.

Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:

 * 0 if ways == 0
 * 1 if ways == 1
 * 2 if ways > 1

A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/03/trees2.png]


Input: pairs = [[1,2],[2,3]]
Output: 1
Explanation: There is exactly one valid rooted tree, which is shown in the above figure.


Example 2:

[https://assets.leetcode.com/uploads/2020/12/03/tree.png]


Input: pairs = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.


Example 3:


Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
Output: 0
Explanation: There are no valid rooted trees.

 

Constraints:

 * 1 <= pairs.length <= 105
 * 1 <= xi < yi <= 500
 * The elements in pairs are unique.",Solutions (33),183,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkWays(self, pairs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    pairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkWays(pairs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def checkWays(self, pairs: List[List[int]]) -> int:
        return 0 if not pairs else 1 if len(pairs) == 1 else 2"
False,0,0,1823,determine-if-string-halves-are-alike,Determine if String Halves Are Alike,determine-if-string-halves-are-alike,False,186162,239441,1704,False,1,"Can you solve this real interview question? Determine if String Halves Are Alike - You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.

 

Example 1:


Input: s = ""book""
Output: true
Explanation: a = ""bo"" and b = ""ok"". a has 1 vowel and b has 1 vowel. Therefore, they are alike.


Example 2:


Input: s = ""textbook""
Output: false
Explanation: a = ""text"" and b = ""book"". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.


 

Constraints:

 * 2 <= s.length <= 1000
 * s.length is even.
 * s consists of uppercase and lowercase letters.",Solutions (3.2K),1.7K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/determine-if-string-halves-are-alike/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def halvesAreAlike(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().halvesAreAlike(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def halvesAreAlike(self, s: str) -> bool:
        vowels = ""aeiouAEIOU""
        a_count = b_count = 0
        mid = len(s) // 2
        for i in range(mid):
            if s[i] in vowels:
                a_count += 1
            if s[i + mid] in vowels:
                b_count += 1
        return a_count == b_count"
False,0,0,1824,maximum-number-of-eaten-apples,Maximum Number of Eaten Apples,maximum-number-of-eaten-apples,False,18816,49563,1705,False,2,"Can you solve this real interview question? Maximum Number of Eaten Apples - There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.

Given two integer arrays days and apples of length n, return the maximum number of apples you can eat.

 

Example 1:


Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.
- On the second day, you eat an apple that grew on the second day.
- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.
- On the fourth to the seventh days, you eat apples that grew on the fourth day.


Example 2:


Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- On the first to the third day you eat apples that grew on the first day.
- Do nothing on the fouth and fifth days.
- On the sixth and seventh days you eat apples that grew on the sixth day.


 

Constraints:

 * n == apples.length == days.length
 * 1 <= n <= 2 * 104
 * 0 <= apples[i], days[i] <= 2 * 104
 * days[i] = 0 if and only if apples[i] = 0.",Solutions (258),705,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-eaten-apples/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def eatenApples(self, apples: List[int], days: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    apples: List[int] = deserialize(""List[int]"", read_line())
    days: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().eatenApples(apples, days)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def eatenApples(self, apples: List[int], days: List[int]) -> int:
        import heapq
        
        heap = []
        res = 0
        
        for i in range(40000):
            if i < len(apples) and apples[i]:
                heapq.heappush(heap, [i + days[i], apples[i]])
            
            while heap and (heap[0][0] <= i or heap[0][1] == 0):
                heapq.heappop(heap)
            
            if heap:
                heap[0][1] -= 1
                res += 1
        
        return res"
False,0,0,1825,,Find Minimum Time to Finish All Jobs,find-minimum-time-to-finish-all-jobs,False,20310,47846,1723,False,3,"Can you solve this real interview question? Find Minimum Time to Finish All Jobs - You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.

There are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

Return the minimum possible maximum working time of any assignment.

 

Example 1:


Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person one job, the maximum time is 3.


Example 2:


Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Explanation: Assign the jobs the following way:
Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
Worker 2: 4, 7 (working time = 4 + 7 = 11)
The maximum working time is 11.

 

Constraints:

 * 1 <= k <= jobs.length <= 12
 * 1 <= jobs[i] <= 107",Solutions (137),796,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    jobs: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumTimeRequired(jobs, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTimeRequired(self, jobs: List[int], k: int) -> int:
        def dfs(jobs, k, i, workloads):
            if i == len(jobs):
                return True
            for j in range(k):
                if workloads[j] + jobs[i] <= self.ans:
                    workloads[j] += jobs[i]
                    if dfs(jobs, k, i + 1, workloads):
                        return True
                    workloads[j] -= jobs[i]
                if workloads[j] == 0 or workloads[j] + jobs[i] == self.ans:
                    break
            return False
        
        jobs.sort(reverse=True)
        self.ans = sum(jobs)
        left, right = max(jobs), self.ans
        while left < right:
            mid = left + (right - left) // 2
            if dfs(jobs, k, 0, [0]*k):
                self.ans = mid
                right = mid
            else:
                left = mid + 1
        return self.ans"
False,0,0,1826,,Maximum XOR With an Element From Array,maximum-xor-with-an-element-from-array,False,13708,30579,1707,False,3,"Can you solve this real interview question? Maximum XOR With an Element From Array - You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].

The answer to the ith query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.

Return an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.

 

Example 1:


Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.
2) 1 XOR 2 = 3.
3) 5 XOR 2 = 7.


Example 2:


Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]


 

Constraints:

 * 1 <= nums.length, queries.length <= 105
 * queries[i].length == 2
 * 0 <= nums[j], xi, mi <= 109",Solutions (237),901,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-xor-with-an-element-from-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximizeXor(nums, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maximizeXor(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        # Add your code here
        pass"
False,0,0,1829,maximum-units-on-a-truck,Maximum Units on a Truck,maximum-units-on-a-truck,False,262620,355776,1710,False,1,"Can you solve this real interview question? Maximum Units on a Truck - You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:

 * numberOfBoxesi is the number of boxes of type i.
 * numberOfUnitsPerBoxi is the number of units in each box of the type i.

You are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed truckSize.

Return the maximum total number of units that can be put on the truck.

 

Example 1:


Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.


Example 2:


Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91


 

Constraints:

 * 1 <= boxTypes.length <= 1000
 * 1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000
 * 1 <= truckSize <= 106",Solutions (2.4K),3.4K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-units-on-a-truck/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    boxTypes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    truckSize: int = deserialize(""int"", read_line())
    ans = Solution().maximumUnits(boxTypes, truckSize)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumUnits(self, boxTypes: List[List[int]], truckSize: int) -> int:
        boxTypes.sort(key=lambda x: x[1], reverse=True)
        total_units = 0
        for boxes, units in boxTypes:
            if truckSize >= boxes:
                total_units += boxes * units
                truckSize -= boxes
            else:
                total_units += truckSize * units
                break
        return total_units"
False,0,0,1830,,Count Good Meals,count-good-meals,False,31750,108550,1711,False,2,"Can you solve this real interview question? Count Good Meals - A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers deliciousness where deliciousness[i] is the deliciousness of the i th item of food, return the number of different good meals you can make from this list modulo 109 + 7.

Note that items with different indices are considered different even if they have the same deliciousness value.

 

Example 1:


Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).
Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.


Example 2:


Input: deliciousness = [1,1,1,3,3,3,7]
Output: 15
Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.

 

Constraints:

 * 1 <= deliciousness.length <= 105
 * 0 <= deliciousness[i] <= 220",Solutions (344),857,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-good-meals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, deliciousness: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    deliciousness: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countPairs(deliciousness)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPairs(self, deliciousness: List[int]) -> int:
        import collections
        res = 0
        seen = collections.defaultdict(int)
        max_sum = max(deliciousness) * 2
        powers_of_two = [2 ** i for i in range(22)]

        for d in deliciousness:
            for p in powers_of_two:
                complement = p - d
                res += seen[complement]
            seen[d] += 1

        return res % (10**9 + 7)"
False,0,0,1831,ways-to-split-array-into-three-subarrays,Ways to Split Array Into Three Subarrays,ways-to-split-array-into-three-subarrays,False,27359,83698,1712,False,2,"Can you solve this real interview question? Ways to Split Array Into Three Subarrays - A split of an integer array is good if:

 * The array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
 * The sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.

Given nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].

Example 2:


Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]


Example 3:


Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.

 

Constraints:

 * 3 <= nums.length <= 105
 * 0 <= nums[i] <= 104",Solutions (216),1.2K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToSplit(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().waysToSplit(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToSplit(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nums)
        preSum = [0] * (n + 1)
        count = 0
        for i in range(n):
            preSum[i + 1] = preSum[i] + nums[i]
        total = preSum[-1]
        res = 0
        leftSum = midSum = rightSum = 0
        left, mid, right = 0, 0, 0
        for left in range(1, n):
            leftSum += nums[left - 1]
            mid = max(mid, left)	# mid is greater or equal to left
            # Calculate mid
            while mid < n and preSum[mid] - preSum[left] < leftSum:
                mid += 1
            midSum = preSum[mid] - preSum[left]
            if mid >= n or midSum > total - midSum:
                break
            right = max(right, mid)	# right is greater or equal to mid
            # Calculate right
            while right < n - 1 and preSum[right] - preSum[mid] <= total - preSum[right]:
                right += 1
            rightSum = preSum[right] - preSum[mid]
            if rightSum >= midSum:
                res = (res + right - mid) % MOD
        return res"
False,0,0,1832,,Minimum Operations to Make a Subsequence,minimum-operations-to-make-a-subsequence,False,9199,18812,1713,False,3,"Can you solve this real interview question? Minimum Operations to Make a Subsequence - You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.

In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make target a subsequence of arr.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:


Input: target = [5,1,3], arr = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.


Example 2:


Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]
Output: 3


 

Constraints:

 * 1 <= target.length, arr.length <= 105
 * 1 <= target[i], arr[i] <= 109
 * target contains no duplicates.",Solutions (121),570,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-a-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, target: List[int], arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: List[int] = deserialize(""List[int]"", read_line())
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(target, arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, target: List[int], arr: List[int]) -> int:
        import collections
        d = {num: i for i, num in enumerate(target)}
        stack = []
        for num in arr:
            if num in d:
                i = d[num]
                if not stack or i > stack[-1]:
                    stack.append(i)
                else:
                    l = 0
                    r = len(stack) - 1
                    while l < r:
                        mid = (l + r) // 2
                        if stack[mid] < i:
                            l = mid + 1
                        else:
                            r = mid
                    stack[l] = i
        return len(target) - len(stack)"
False,0,0,1833,,Find the Highest Altitude,find-the-highest-altitude,False,108276,137307,1732,False,1,"Can you solve this real interview question? Find the Highest Altitude - There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.

You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). Return the highest altitude of a point.

 

Example 1:


Input: gain = [-5,1,5,0,-7]
Output: 1
Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.


Example 2:


Input: gain = [-4,-3,-2,-1,4,3,2]
Output: 0
Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.


 

Constraints:

 * n == gain.length
 * 1 <= n <= 100
 * -100 <= gain[i] <= 100",Solutions (2K),1.3K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-highest-altitude/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestAltitude(self, gain: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    gain: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestAltitude(gain)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestAltitude(self, gain: List[int]) -> int:
        current = 0
        highest = 0
        for g in gain:
            current += g
            highest = max(highest, current)
        return highest"
False,0,0,1834,,Minimum Number of People to Teach,minimum-number-of-people-to-teach,False,7428,17713,1733,False,2,"Can you solve this real interview question? Minimum Number of People to Teach - On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer n, an array languages, and an array friendships where:

 * There are n languages numbered 1 through n,
 * languages[i] is the set of languages the i th user knows, and
 * friendships[i] = [u i , v i] denotes a friendship between the users u i and vi.

You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.

 

Example 1:


Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
Output: 1
Explanation: You can either teach user 1 the second language or user 2 the first language.


Example 2:


Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
Output: 2
Explanation: Teach the third language to users 1 and 3, yielding two users to teach.


 

Constraints:

 * 2 <= n <= 500
 * languages.length == m
 * 1 <= m <= 500
 * 1 <= languages[i].length <= n
 * 1 <= languages[i][j] <= n
 * 1 <= u i < v i <= languages.length
 * 1 <= friendships.length <= 500
 * All tuples (u i, v i) are unique
 * languages[i] contains only unique values",Solutions (109),178,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-people-to-teach/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    languages: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    friendships: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumTeachings(n, languages, friendships)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        import collections
        languages_set = [set(lang) for lang in languages]
        cannot_communicate = []
        for u, v in friendships:
            if not any(languages_set[u-1] & languages_set[v-1]):
                cannot_communicate.extend([u, v])
        freq = collections.Counter(cannot_communicate)
        return len(cannot_communicate) - (freq.most_common(1)[0][1] if freq else 0)"
False,0,0,1835,,Decode XORed Permutation,decode-xored-permutation,False,12048,19116,1734,False,2,"Can you solve this real interview question? Decode XORed Permutation - There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].

Given the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.

 

Example 1:


Input: encoded = [3,1]
Output: [1,2,3]
Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]


Example 2:


Input: encoded = [6,5,4,6]
Output: [2,4,1,5,3]


 

Constraints:

 * 3 <= n < 105
 * n is odd.
 * encoded.length == n - 1",Solutions (160),657,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-xored-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decode(self, encoded: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    encoded: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().decode(encoded)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def decode(self, encoded: List[int]) -> List[int]:
        n = len(encoded) + 1
        total = 0
        for i in range(1, n + 1):
            total ^= i
        for i in range(1, n - 1, 2):
            total ^= encoded[i]
        perm = [total]
        for num in encoded:
            perm.append(perm[-1] ^ num)
        return perm"
False,0,0,1836,,Count Ways to Make Array With Product,count-ways-to-make-array-with-product,False,4464,8877,1735,False,3,"Can you solve this real interview question? Count Ways to Make Array With Product - You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.

Return an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.

 

Example 1:


Input: queries = [[2,6],[5,1],[73,660]]
Output: [4,1,50734910]
Explanation: Each query is independent.
[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].
[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].
[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.


Example 2:


Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: [1,2,3,10,5]


 

Constraints:

 * 1 <= queries.length <= 104
 * 1 <= ni, ki <= 104",Solutions (50),235,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-ways-to-make-array-with-product/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToFillArray(self, queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().waysToFillArray(queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def waysToFillArray(self, queries: List[List[int]]) -> List[int]:
        def prime_factors(num):
            factors = []
            divisor = 2
            while divisor <= num:
                if num % divisor == 0:
                    factors.append(divisor)
                    num = num // divisor
                else:
                    divisor += 1
            return factors
        
        def combinations(product, n):
            def dfs(index, current_product, current_n):
                nonlocal count
                if current_n == n:
                    if current_product == product:
                        count = (count + 1) % (10**9 + 7)
                    return
                for i in range(index, len(primes)):
                    if current_product * primes[i] > product:
                        break
                    dfs(i, current_product * primes[i], current_n + 1)
                    
            count = 0
            primes = prime_factors(product)
            dfs(0, 1, 0)
            return count
        
        result = []
        for q in queries:
            result.append(combinations(q[1], q[0]))
        
        return result"
False,0,0,1839,,Decode XORed Array,decode-xored-array,False,108192,126065,1720,False,1,"Can you solve this real interview question? Decode XORed Array - There is a hidden integer array arr that consists of n non-negative integers.

It was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].

You are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].

Return the original array arr. It can be proved that the answer exists and is unique.

 

Example 1:


Input: encoded = [1,2,3], first = 1
Output: [1,0,2,1]
Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]


Example 2:


Input: encoded = [6,2,7,3], first = 4
Output: [4,2,0,7,4]


 

Constraints:

 * 2 <= n <= 104
 * encoded.length == n - 1
 * 0 <= encoded[i] <= 105
 * 0 <= first <= 105",Solutions (1.3K),1.3K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-xored-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decode(self, encoded: List[int], first: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    encoded: List[int] = deserialize(""List[int]"", read_line())
    first: int = deserialize(""int"", read_line())
    ans = Solution().decode(encoded, first)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def decode(self, encoded: List[int], first: int) -> List[int]:
        arr = [first]
        for num in encoded:
            arr.append(arr[-1] ^ num)
        return arr"
False,0,0,1840,,Minimize Hamming Distance After Swap Operations,minimize-hamming-distance-after-swap-operations,False,15127,31033,1722,False,2,"Can you solve this real interview question? Minimize Hamming Distance After Swap Operations - You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.

The Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).

Return the minimum Hamming distance of source and target after performing any amount of swap operations on array source.

 

Example 1:


Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
Output: 1
Explanation: source can be transformed the following way:
- Swap indices 0 and 1: source = [2,1,3,4]
- Swap indices 2 and 3: source = [2,1,4,3]
The Hamming distance of source and target is 1 as they differ in 1 position: index 3.


Example 2:


Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
Output: 2
Explanation: There are no allowed swaps.
The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.


Example 3:


Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
Output: 0


 

Constraints:

 * n == source.length == target.length
 * 1 <= n <= 105
 * 1 <= source[i], target[i] <= 105
 * 0 <= allowedSwaps.length <= 105
 * allowedSwaps[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi",Solutions (218),742,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    source: List[int] = deserialize(""List[int]"", read_line())
    target: List[int] = deserialize(""List[int]"", read_line())
    allowedSwaps: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumHammingDistance(source, target, allowedSwaps)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumHammingDistance(self, source: List[int], target: List[int], allowedSwaps: List[List[int]]) -> int:
        def find(parents, x):
            if parents[x] != x:
                parents[x] = find(parents, parents[x])
            return parents[x]
        
        def union(parents, x, y):
            root_x = find(parents, x)
            root_y = find(parents, y)
            if root_x != root_y:
                parents[root_x] = root_y
        
        n = len(source)
        parents = [i for i in range(n)]
        
        for ai, bi in allowedSwaps:
            union(parents, ai, bi)
        
        groups = defaultdict(list)
        for i in range(n):
            groups[find(parents, i)].append(i)
        
        ans = 0
        for group in groups.values():
            count = Counter([source[i] for i in group])
            for i in group:
                if count[target[i]] > 0:
                    count[target[i]] -= 1
                else:
                    ans += 1
        
        return ans"
False,0,0,1843,,Number Of Rectangles That Can Form The Largest Square,number-of-rectangles-that-can-form-the-largest-square,False,55275,70278,1725,False,1,"Can you solve this real interview question? Number Of Rectangles That Can Form The Largest Square - You are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.

You can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.

Let maxLen be the side length of the largest square you can obtain from any of the given rectangles.

Return the number of rectangles that can make a square with a side length of maxLen.

 

Example 1:


Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]
Output: 3
Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].
The largest possible square is of length 5, and you can get it out of 3 rectangles.


Example 2:


Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]
Output: 3


 

Constraints:

 * 1 <= rectangles.length <= 1000
 * rectangles[i].length == 2
 * 1 <= li, wi <= 109
 * li != wi",Solutions (918),478,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rectangles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countGoodRectangles(rectangles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countGoodRectangles(self, rectangles: List[List[int]]) -> int:
        maxLen = max(min(l, w) for l, w in rectangles)
        return sum(1 for l, w in rectangles if min(l, w) == maxLen)"
False,0,0,1844,,Maximum Number of Balls in a Box,maximum-number-of-balls-in-a-box,False,50499,68585,1742,False,1,"Can you solve this real interview question? Maximum Number of Balls in a Box - You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.

Given two integers lowLimit and highLimit, return the number of balls in the box with the most balls.

 

Example 1:


Input: lowLimit = 1, highLimit = 10
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...
Box 1 has the most number of balls with 2 balls.

Example 2:


Input: lowLimit = 5, highLimit = 15
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...
Boxes 5 and 6 have the most number of balls with 2 balls in each.


Example 3:


Input: lowLimit = 19, highLimit = 28
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...
Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...
Box 10 has the most number of balls with 2 balls.


 

Constraints:

 * 1 <= lowLimit <= highLimit <= 105",Solutions (668),512,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-balls-in-a-box/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countBalls(self, lowLimit: int, highLimit: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    lowLimit: int = deserialize(""int"", read_line())
    highLimit: int = deserialize(""int"", read_line())
    ans = Solution().countBalls(lowLimit, highLimit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countBalls(self, lowLimit: int, highLimit: int) -> int:
        box_dict = {}
        for i in range(lowLimit, highLimit + 1):
            box_number = sum(int(digit) for digit in str(i))
            if box_number not in box_dict:
                box_dict[box_number] = 1
            else:
                box_dict[box_number] += 1
        return max(box_dict.values())"
False,0,0,1845,,Largest Submatrix With Rearrangements,largest-submatrix-with-rearrangements,False,14875,24288,1727,False,2,"Can you solve this real interview question? Largest Submatrix With Rearrangements - You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.

Return the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.

 

Example 1:

[https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png]


Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 4.


Example 2:

[https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40852-pm.png]


Input: matrix = [[1,0,1,0,1]]
Output: 3
Explanation: You can rearrange the columns as shown above.
The largest submatrix of 1s, in bold, has an area of 3.


Example 3:


Input: matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m * n <= 105
 * matrix[i][j] is either 0 or 1.",Solutions (200),883,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-submatrix-with-rearrangements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestSubmatrix(matrix)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestSubmatrix(self, matrix: List[List[int]]) -> int:
        pass"
False,0,0,1848,,Sum of Unique Elements,sum-of-unique-elements,False,112010,146855,1748,False,1,"Can you solve this real interview question? Sum of Unique Elements - You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of nums.

 

Example 1:


Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.


Example 2:


Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.


Example 3:


Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (2K),1.2K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-unique-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumOfUnique(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumOfUnique(self, nums: List[int]) -> int:
        return sum(num for num in nums if nums.count(num) == 1)"
False,0,0,1849,,Maximum Absolute Sum of Any Subarray,maximum-absolute-sum-of-any-subarray,False,30291,51821,1749,False,2,"Can you solve this real interview question? Maximum Absolute Sum of Any Subarray - You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

 * If x is a negative integer, then abs(x) = -x.
 * If x is a non-negative integer, then abs(x) = x.

 

Example 1:


Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.


Example 2:


Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.


 

Constraints:

 * 1 <= nums.length <= 105
 * -104 <= nums[i] <= 104",Solutions (496),1K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAbsoluteSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxAbsoluteSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxAbsoluteSum(self, nums: List[int]) -> int:
        max_sum, min_sum, curr_max, curr_min = 0, 0, 0, 0
        for num in nums:
            curr_max = max(num, curr_max + num)
            max_sum = max(max_sum, curr_max)
            curr_min = min(num, curr_min + num)
            min_sum = min(min_sum, curr_min)
        return max(abs(max_sum), abs(min_sum))"
False,0,0,1850,,Minimum Length of String After Deleting Similar Ends,minimum-length-of-string-after-deleting-similar-ends,False,18364,41789,1750,False,2,"Can you solve this real interview question? Minimum Length of String After Deleting Similar Ends - Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:

 1. Pick a non-empty prefix from the string s where all the characters in the prefix are equal.
 2. Pick a non-empty suffix from the string s where all the characters in this suffix are equal.
 3. The prefix and the suffix should not intersect at any index.
 4. The characters from the prefix and suffix must be the same.
 5. Delete both the prefix and the suffix.

Return the minimum length of s after performing the above operation any number of times (possibly zero times).

 

Example 1:


Input: s = ""ca""
Output: 2
Explanation: You can't remove any characters, so the string stays as is.


Example 2:


Input: s = ""cabaabac""
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = ""c"" and suffix = ""c"" and remove them, s = ""abaaba"".
- Take prefix = ""a"" and suffix = ""a"" and remove them, s = ""baab"".
- Take prefix = ""b"" and suffix = ""b"" and remove them, s = ""aa"".
- Take prefix = ""a"" and suffix = ""a"" and remove them, s = """".

Example 3:


Input: s = ""aabccabba""
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = ""aa"" and suffix = ""a"" and remove them, s = ""bccabb"".
- Take prefix = ""b"" and suffix = ""bb"" and remove them, s = ""cca"".


 

Constraints:

 * 1 <= s.length <= 105
 * s only consists of characters 'a', 'b', and 'c'.",Solutions (322),379,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumLength(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minimumLength(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumLength(self, s: str) -> int:
        while s and s[0] == s[-1]:
            c = s[0]
            s = s.strip(c)
        return len(s)"
False,0,0,1851,,Maximum Number of Events That Can Be Attended II,maximum-number-of-events-that-can-be-attended-ii,False,21116,37081,1751,False,3,"Can you solve this real interview question? Maximum Number of Events That Can Be Attended II - You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The ith event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60048-pm.png]


Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
Output: 7
Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.

Example 2:

[https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60150-pm.png]


Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
Output: 10
Explanation: Choose event 2 for a total value of 10.
Notice that you cannot attend any other event as they overlap, and that you do not have to attend k events.

Example 3:

[https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60703-pm.png]


Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
Output: 9
Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.

 

Constraints:

 * 1 <= k <= events.length
 * 1 <= k * events.length <= 106
 * 1 <= startDayi <= endDayi <= 109
 * 1 <= valuei <= 106",Solutions (216),701,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    events: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxValue(events, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxValue(self, events: List[List[int]], k: int) -> int:
        events.sort(key=lambda x: x[1])
        dp = [[0] * (k + 1) for _ in range(len(events) + 1)]
        for i in range(1, len(events) + 1):
            for j in range(1, k + 1):
                dp[i][j] = max(dp[i - 1][j], dp[i][j])
                s, e, v = events[i - 1]
                left = -1
                right = i - 1
                while left < right:
                    mid = (left + right + 1) // 2
                    if events[mid][1] < s:
                        left = mid
                    else:
                        right = mid - 1
                dp[i][j] = max(dp[i][j], dp[left + 1][j - 1] + v)
        return dp[-1][-1]"
False,0,0,1858,,Latest Time by Replacing Hidden Digits,latest-time-by-replacing-hidden-digits,False,28366,66889,1736,False,1,"Can you solve this real interview question? Latest Time by Replacing Hidden Digits - You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).

The valid times are those inclusively between 00:00 and 23:59.

Return the latest valid time you can get from time by replacing the hidden digits.

 

Example 1:


Input: time = ""2?:?0""
Output: ""23:50""
Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.


Example 2:


Input: time = ""0?:3?""
Output: ""09:39""


Example 3:


Input: time = ""1?:22""
Output: ""19:22""


 

Constraints:

 * time is in the format hh:mm.
 * It is guaranteed that you can produce a valid time from the given string.",Solutions (430),292,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/latest-time-by-replacing-hidden-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumTime(self, time: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    time: str = deserialize(""str"", read_line())
    ans = Solution().maximumTime(time)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def maximumTime(self, time: str) -> str:
        output = ''
        if time[0] == '?':
            if time[1] == '?' or int(time[1]) <= 3:
                output += '2'
            else:
                output += '1'
        else:
            output += time[0]

        if time[1] == '?':
            if output[0] == '2':
                output += '3'
            else:
                output += '9'
        else:
            output += time[1]

        output += ':'

        if time[3] == '?':
            output += '5'
        else:
            output += time[3]

        if time[4] == '?':
            output += '9'
        else:
            output += time[4]

        return output"
False,0,0,1859,,Change Minimum Characters to Satisfy One of Three Conditions,change-minimum-characters-to-satisfy-one-of-three-conditions,False,11386,32217,1737,False,2,"Can you solve this real interview question? Change Minimum Characters to Satisfy One of Three Conditions - You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.

Your goal is to satisfy one of the following three conditions:

 * Every letter in a is strictly less than every letter in b in the alphabet.
 * Every letter in b is strictly less than every letter in a in the alphabet.
 * Both a and b consist of only one distinct letter.

Return the minimum number of operations needed to achieve your goal.

 

Example 1:


Input: a = ""aba"", b = ""caa""
Output: 2
Explanation: Consider the best way to make each condition true:
1) Change b to ""ccc"" in 2 operations, then every letter in a is less than every letter in b.
2) Change a to ""bbb"" and b to ""aaa"" in 3 operations, then every letter in b is less than every letter in a.
3) Change a to ""aaa"" and b to ""aaa"" in 2 operations, then a and b consist of one distinct letter.
The best way was done in 2 operations (either condition 1 or condition 3).


Example 2:


Input: a = ""dabadd"", b = ""cda""
Output: 3
Explanation: The best way is to make condition 1 true by changing b to ""eee"".


 

Constraints:

 * 1 <= a.length, b.length <= 105
 * a and b consist only of lowercase letters.",Solutions (118),283,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCharacters(self, a: str, b: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: str = deserialize(""str"", read_line())
    b: str = deserialize(""str"", read_line())
    ans = Solution().minCharacters(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCharacters(self, a: str, b: str) -> int:
        pass"
False,0,0,1860,,Find Kth Largest XOR Coordinate Value,find-kth-largest-xor-coordinate-value,False,18293,29987,1738,False,2,"Can you solve this real interview question? Find Kth Largest XOR Coordinate Value - You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.

The value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).

Find the kth largest value (1-indexed) of all the coordinates of matrix.

 

Example 1:


Input: matrix = [[5,2],[1,6]], k = 1
Output: 7
Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.


Example 2:


Input: matrix = [[5,2],[1,6]], k = 2
Output: 5
Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.


Example 3:


Input: matrix = [[5,2],[1,6]], k = 3
Output: 4
Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.

 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 1000
 * 0 <= matrix[i][j] <= 106
 * 1 <= k <= m * n",Solutions (238),434,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-kth-largest-xor-coordinate-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthLargestValue(matrix, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kthLargestValue(self, matrix: List[List[int]], k: int) -> int:
        import numpy as np
        temp = []
        m, n = len(matrix), len(matrix[0])
        dp = np.zeros((m + 1, n + 1))
        
        for i in range(m):
            for j in range(n):
                dp[i + 1][j + 1] = dp[i][j + 1] ^ dp[i + 1][j] ^ dp[i][j] ^ matrix[i][j]
                temp.append(dp[i + 1][j + 1])
        
        temp.sort(reverse=True)
        return temp[k - 1]"
False,0,0,1861,,Building Boxes,building-boxes,False,5876,11286,1739,False,3,"Can you solve this real interview question? Building Boxes - You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:

 * You can place the boxes anywhere on the floor.
 * If box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.

Given an integer n, return the minimum possible number of boxes touching the floor.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/04/3-boxes.png]


Input: n = 3
Output: 3
Explanation: The figure above is for the placement of the three boxes.
These boxes are placed in the corner of the room, where the corner is on the left side.


Example 2:

[https://assets.leetcode.com/uploads/2021/01/04/4-boxes.png]


Input: n = 4
Output: 3
Explanation: The figure above is for the placement of the four boxes.
These boxes are placed in the corner of the room, where the corner is on the left side.


Example 3:

[https://assets.leetcode.com/uploads/2021/01/04/10-boxes.png]


Input: n = 10
Output: 6
Explanation: The figure above is for the placement of the ten boxes.
These boxes are placed in the corner of the room, where the corner is on the back side.

 

Constraints:

 * 1 <= n <= 109",Solutions (98),256,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/building-boxes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumBoxes(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minimumBoxes(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumBoxes(self, n: int) -> int:
        if n <= 3:
            return n
        curr_level = 1
        total = 0
        while total + (curr_level * (curr_level + 1) * (curr_level + 2)) // 6 < n:
            total += (curr_level * (curr_level + 1) * (curr_level + 2)) // 6
            curr_level += 1
        remaining = n - total
        height = 0
        while height * (height + 1) // 2 < remaining:
            height += 1
        return (curr_level * (curr_level - 1)) // 2 + height

      "
False,0,0,1866,,Restore the Array From Adjacent Pairs,restore-the-array-from-adjacent-pairs,False,34266,49997,1743,False,2,"Can you solve this real interview question? Restore the Array From Adjacent Pairs - There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.

 

Example 1:


Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.


Example 2:


Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.


Example 3:


Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]


 

Constraints:

 * nums.length == n
 * adjacentPairs.length == n - 1
 * adjacentPairs[i].length == 2
 * 2 <= n <= 105
 * -105 <= nums[i], ui, vi <= 105
 * There exists some nums that has adjacentPairs as its pairs.",Solutions (454),897,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/restore-the-array-from-adjacent-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    adjacentPairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().restoreArray(adjacentPairs)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def restoreArray(self, adjacentPairs: List[List[int]]) -> List[int]:
        pairs = {}
        for pair in adjacentPairs:
            pairs.setdefault(pair[0], []).append(pair[1])
            pairs.setdefault(pair[1], []).append(pair[0])
        
        start = pairs.popitem()[0]
        result = [start]
        
        while pairs[start]:
            next_num = pairs[start].pop()
            result.append(next_num)
            pairs[next_num].remove(start)
            start = next_num
            
        return result"
False,0,0,1871,,Palindrome Partitioning IV,palindrome-partitioning-iv,False,19424,42770,1745,False,3,"Can you solve this real interview question? Palindrome Partitioning IV - Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.

A string is said to be palindrome if it the same string when reversed.

 

Example 1:


Input: s = ""abcbdd""
Output: true
Explanation: ""abcbdd"" = ""a"" + ""bcb"" + ""dd"", and all three substrings are palindromes.


Example 2:


Input: s = ""bcbddxy""
Output: false
Explanation: s cannot be split into 3 palindromes.


 

Constraints:

 * 3 <= s.length <= 2000
 * s consists only of lowercase English letters.",Solutions (276),780,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/palindrome-partitioning-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkPartitioning(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkPartitioning(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkPartitioning(self, s: str) -> bool:
        dp = [[False] * len(s) for _ in range(3)]
        for i in range(len(s)):
            dp[0][i] = s[:i + 1] == s[:i + 1][::-1]
        for k in range(1, 3):
            for i in range(k, len(s)):
                dp[k][i] = any(dp[k - 1][j] and s[j + 1:i + 1] == s[j + 1:i + 1][::-1] for j in range(k - 1, i))
        return dp[2][-1]"
False,0,0,1872,,Can You Eat Your Favorite Candy on Your Favorite Day?,can-you-eat-your-favorite-candy-on-your-favorite-day,False,8986,27200,1744,False,2,"Can you solve this real interview question? Can You Eat Your Favorite Candy on Your Favorite Day? - You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].

You play a game with the following rules:

 * You start eating candies on day 0.
 * You cannot eat any candy of type i unless you have eaten all candies of type i - 1.
 * You must eat at least one candy per day until you have eaten all the candies.

Construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array answer.

 

Example 1:


Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true,false,true]
Explanation:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.
2- You can eat at most 4 candies each day.
   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.
   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.
3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.


Example 2:


Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
Output: [false,true,true,false,false]


 

Constraints:

 * 1 <= candiesCount.length <= 105
 * 1 <= candiesCount[i] <= 105
 * 1 <= queries.length <= 105
 * queries[i].length == 3
 * 0 <= favoriteTypei < candiesCount.length
 * 0 <= favoriteDayi <= 109
 * 1 <= dailyCapi <= 109",Solutions (95),111,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canEat(self, candiesCount: List[int], queries: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    candiesCount: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().canEat(candiesCount, queries)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def canEat(self, candiesCount: List[int], queries: List[List[int]]) -> List[bool]:
        # Enter your solution here
        pass"
False,0,0,1873,,Longest Nice Substring,longest-nice-substring,False,36897,59862,1763,False,1,"Can you solve this real interview question? Longest Nice Substring - A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, ""abABB"" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, ""abA"" is not because 'b' appears, but 'B' does not.

Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.

 

Example 1:


Input: s = ""YazaAay""
Output: ""aAa""
Explanation: ""aAa"" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.
""aAa"" is the longest nice substring.


Example 2:


Input: s = ""Bb""
Output: ""Bb""
Explanation: ""Bb"" is a nice string because both 'B' and 'b' appear. The whole string is a substring.


Example 3:


Input: s = ""c""
Output: """"
Explanation: There are no nice substrings.


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of uppercase and lowercase English letters.",Solutions (442),997,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-nice-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestNiceSubstring(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestNiceSubstring(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestNiceSubstring(self, s: str) -> str:
        def is_nice(sub):
            return all(ch.lower() in sub and ch.upper() in sub for ch in set(sub))
        
        for length in range(len(s), 0, -1):
            for i in range(len(s) - length + 1):
                sub = s[i:i+length]
                if is_nice(sub):
                    return sub
        return """""
False,0,0,1874,,Form Array by Concatenating Subarrays of Another Array,form-array-by-concatenating-subarrays-of-another-array,False,12564,23754,1764,False,2,"Can you solve this real interview question? Form Array by Concatenating Subarrays of Another Array - You are given a 2D integer array groups of length n. You are also given an integer array nums.

You are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).

Return true if you can do this task, and false otherwise.

Note that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.

 

Example 1:


Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
Output: true
Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].
These subarrays are disjoint as they share no common nums[k] element.


Example 2:


Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
Output: false
Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.
[10,-2] must come before [1,2,3,4].


Example 3:


Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
Output: false
Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.
They share a common elements nums[4] (0-indexed).


 

Constraints:

 * groups.length == n
 * 1 <= n <= 103
 * 1 <= groups[i].length, sum(groups[i].length) <= 103
 * 1 <= nums.length <= 103
 * -107 <= groups[i][j], nums[k] <= 107",Solutions (212),275,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canChoose(self, groups: List[List[int]], nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    groups: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canChoose(groups, nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canChoose(self, groups: List[List[int]], nums: List[int]) -> bool:
        pointer = 0
        for group in groups:
            if not self.find_subarray(nums, group, pointer):
                return False
        return True
    
    def find_subarray(self, nums, group, pointer):
        for i in range(pointer, len(nums) - len(group) + 1):
            if nums[i:i + len(group)] == group:
                return True
        return False"
False,0,0,1875,,Tree of Coprimes,tree-of-coprimes,False,7320,18587,1766,False,3,"Can you solve this real interview question? Tree of Coprimes - There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.

To represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.

Two values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.

An ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.

Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram.png]


Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
Output: [-1,0,0,1]
Explanation: In the above figure, each node's value is in parentheses.
- Node 0 has no coprime ancestors.
- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).
- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's
  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.
- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its
  closest valid ancestor.


Example 2:

[https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram1.png]


Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
Output: [-1,0,-1,0,0,0,-1]


 

Constraints:

 * nums.length == n
 * 1 <= nums[i] <= 50
 * 1 <= n <= 105
 * edges.length == n - 1
 * edges[j].length == 2
 * 0 <= uj, vj < n
 * uj != vj",Solutions (105),340,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/tree-of-coprimes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getCoprimes(nums, edges)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getCoprimes(self, nums: List[int], edges: List[List[int]]) -> List[int]:
        pass"
False,0,0,1876,,Map of Highest Peak,map-of-highest-peak,False,20581,34197,1765,False,2,"Can you solve this real interview question? Map of Highest Peak - You are given an integer matrix isWater of size m x n that represents a map of land and water cells.

 * If isWater[i][j] == 0, cell (i, j) is a land cell.
 * If isWater[i][j] == 1, cell (i, j) is a water cell.

You must assign each cell a height in a way that follows these rules:

 * The height of each cell must be non-negative.
 * If the cell is a water cell, its height must be 0.
 * Any two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).

Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png]


Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the assigned heights of each cell.
The blue cell is the water cell, and the green cells are the land cells.


Example 2:

[https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png]


Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height of any assignment.
Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.


 

Constraints:

 * m == isWater.length
 * n == isWater[i].length
 * 1 <= m, n <= 1000
 * isWater[i][j] is 0 or 1.
 * There is at least one water cell.",Solutions (318),677,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/map-of-highest-peak/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    isWater: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().highestPeak(isWater)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def highestPeak(self, isWater: List[List[int]]) -> List[List[int]]:
        m, n = len(isWater), len(isWater[0])
        queue = deque()
        height = [[-1] * n for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if isWater[i][j] == 1:
                    height[i][j] = 0
                    queue.append((i, j))
                    
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        while queue:
            x, y = queue.popleft()
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and height[nx][ny] == -1:
                    height[nx][ny] = height[x][y] + 1
                    queue.append((nx, ny))
                    
        return height"
False,0,0,1878,,Check if Array Is Sorted and Rotated,check-if-array-is-sorted-and-rotated,False,81766,163305,1752,False,1,"Can you solve this real interview question? Check if Array Is Sorted and Rotated - Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.

There may be duplicates in the original array.

Note: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.

 

Example 1:


Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].


Example 2:


Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.


Example 3:


Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (1.2K),1.6K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def check(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().check(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def check(self, nums: List[int]) -> bool:
        return any(nums[i] > nums[(i + 1) % len(nums)] for i in range(len(nums)) if nums[i] != nums[(i + 1) % len(nums)]) <= 1"
False,0,0,1879,,Maximum Score From Removing Stones,maximum-score-from-removing-stones,False,30450,45824,1753,False,2,"Can you solve this real interview question? Maximum Score From Removing Stones - You are playing a solitaire game with three piles of stones of sizes a , b, and c respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).

Given three integers a , b, and c , return the maximum score you can get.

 

Example 1:


Input: a = 2, b = 4, c = 6
Output: 6
Explanation: The starting state is (2, 4, 6). One optimal set of moves is:
- Take from 1st and 3rd piles, state is now (1, 4, 5)
- Take from 1st and 3rd piles, state is now (0, 4, 4)
- Take from 2nd and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 6 points.


Example 2:


Input: a = 4, b = 4, c = 6
Output: 7
Explanation: The starting state is (4, 4, 6). One optimal set of moves is:
- Take from 1st and 2nd piles, state is now (3, 3, 6)
- Take from 1st and 3rd piles, state is now (2, 3, 5)
- Take from 1st and 3rd piles, state is now (1, 3, 4)
- Take from 1st and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 7 points.


Example 3:


Input: a = 1, b = 8, c = 8
Output: 8
Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.
After that, there are fewer than two non-empty piles, so the game ends.


 

Constraints:

 * 1 <= a, b, c <= 105",Solutions (593),776,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-from-removing-stones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumScore(self, a: int, b: int, c: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    c: int = deserialize(""int"", read_line())
    ans = Solution().maximumScore(a, b, c)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumScore(self, a: int, b: int, c: int) -> int:
        return min((a + b + c) // 2, a + b + c - max(a, b, c))"
False,0,0,1880,,Largest Merge Of Two Strings,largest-merge-of-two-strings,False,17837,38904,1754,False,2,"Can you solve this real interview question? Largest Merge Of Two Strings - You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:

 * If word1 is non-empty, append the first character in word1 to merge and delete it from word1.
   * For example, if word1 = ""abc"" and merge = ""dv"", then after choosing this operation, word1 = ""bc"" and merge = ""dva"".
 * If word2 is non-empty, append the first character in word2 to merge and delete it from word2.
   * For example, if word2 = ""abc"" and merge = """", then after choosing this operation, word2 = ""bc"" and merge = ""a"".

Return the lexicographically largest merge you can construct.

A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, ""abcd"" is lexicographically larger than ""abcc"" because the first position they differ is at the fourth character, and d is greater than c.

 

Example 1:


Input: word1 = ""cabaa"", word2 = ""bcaaa""
Output: ""cbcabaaaaa""
Explanation: One way to get the lexicographically largest merge is:
- Take from word1: merge = ""c"", word1 = ""abaa"", word2 = ""bcaaa""
- Take from word2: merge = ""cb"", word1 = ""abaa"", word2 = ""caaa""
- Take from word2: merge = ""cbc"", word1 = ""abaa"", word2 = ""aaa""
- Take from word1: merge = ""cbca"", word1 = ""baa"", word2 = ""aaa""
- Take from word1: merge = ""cbcab"", word1 = ""aa"", word2 = ""aaa""
- Append the remaining 5 a's from word1 and word2 at the end of merge.


Example 2:


Input: word1 = ""abcabc"", word2 = ""abdcaba""
Output: ""abdcabcabcaba""


 

Constraints:

 * 1 <= word1.length, word2.length <= 3000
 * word1 and word2 consist only of lowercase English letters.",Solutions (220),446,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-merge-of-two-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestMerge(self, word1: str, word2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().largestMerge(word1, word2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestMerge(self, word1: str, word2: str) -> str:
        merged = """"
        while word1 and word2:
            if word1 > word2:
                merged += word1[0]
                word1 = word1[1:]
            else:
                merged += word2[0]
                word2 = word2[1:]
        return merged + word1 + word2"
False,0,0,1881,,Closest Subsequence Sum,closest-subsequence-sum,False,11858,32270,1755,False,3,"Can you solve this real interview question? Closest Subsequence Sum - You are given an integer array nums and an integer goal.

You want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).

Return the minimum possible value of abs(sum - goal).

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.

 

Example 1:


Input: nums = [5,-7,3,5], goal = 6
Output: 0
Explanation: Choose the whole array as a subsequence, with a sum of 6.
This is equal to the goal, so the absolute difference is 0.


Example 2:


Input: nums = [7,-9,15,-2], goal = -5
Output: 1
Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.
The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.


Example 3:


Input: nums = [1,2,3], goal = -7
Output: 7


 

Constraints:

 * 1 <= nums.length <= 40
 * -107 <= nums[i] <= 107
 * -109 <= goal <= 109",Solutions (134),656,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/closest-subsequence-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minAbsDifference(self, nums: List[int], goal: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    goal: int = deserialize(""int"", read_line())
    ans = Solution().minAbsDifference(nums, goal)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minAbsDifference(self, nums: List[int], goal: int) -> int:
        pass"
False,0,0,1884,,Minimum Changes To Make Alternating Binary String,minimum-changes-to-make-alternating-binary-string,False,34078,58426,1758,False,1,"Can you solve this real interview question? Minimum Changes To Make Alternating Binary String - You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string ""010"" is alternating, while the string ""0100"" is not.

Return the minimum number of operations needed to make s alternating.

 

Example 1:


Input: s = ""0100""
Output: 1
Explanation: If you change the last character to '1', s will be ""0101"", which is alternating.


Example 2:


Input: s = ""10""
Output: 0
Explanation: s is already alternating.


Example 3:


Input: s = ""1111""
Output: 2
Explanation: You need two operations to reach ""0101"" or ""1010"".


 

Constraints:

 * 1 <= s.length <= 104
 * s[i] is either '0' or '1'.",Solutions (472),512,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minOperations(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, s: str) -> int:
        return min(sum(1 for i, c in enumerate(s) if int(c) != i%2), sum(1 for i, c in enumerate(s) if int(c) == i%2))"
False,0,0,1885,,Count Number of Homogenous Substrings,count-number-of-homogenous-substrings,False,24527,50593,1759,False,2,"Can you solve this real interview question? Count Number of Homogenous Substrings - Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 109 + 7.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""abbcccaa""
Output: 13
Explanation: The homogenous substrings are listed as below:
""a""   appears 3 times.
""aa""  appears 1 time.
""b""   appears 2 times.
""bb""  appears 1 time.
""c""   appears 3 times.
""cc""  appears 2 times.
""ccc"" appears 1 time.
3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.

Example 2:


Input: s = ""xy""
Output: 2
Explanation: The homogenous substrings are ""x"" and ""y"".

Example 3:


Input: s = ""zzzzz""
Output: 15


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase letters.",Solutions (422),588,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-homogenous-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countHomogenous(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countHomogenous(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countHomogenous(self, s: str) -> int:
        mod = 10**9 + 7
        count = 1
        result = 1
        for i in range(1, len(s)):
            if s[i] == s[i-1]:
                count += 1
            else:
                count = 1
            result = (result + count) % mod
        return result"
False,0,0,1886,,Minimum Limit of Balls in a Bag,minimum-limit-of-balls-in-a-bag,False,30014,49701,1760,False,2,"Can you solve this real interview question? Minimum Limit of Balls in a Bag - You are given an integer array nums where the ith bag contains nums[i] balls. You are also given an integer maxOperations.

You can perform the following operation at most maxOperations times:

 * Take any bag of balls and divide it into two new bags with a positive number of balls.
   * For example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.

Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.

 

Example 1:


Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].
- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].
The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.


Example 2:


Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].
- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].
The bag with the most number of balls has 2 balls, so your penalty is 2, and you should return 2.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= maxOperations, nums[i] <= 109",Solutions (344),1.7K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumSize(self, nums: List[int], maxOperations: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    maxOperations: int = deserialize(""int"", read_line())
    ans = Solution().minimumSize(nums, maxOperations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumSize(self, nums: List[int], maxOperations: int) -> int:
        return 0  # Placeholder for actual code implementation"
False,0,0,1887,,Minimum Degree of a Connected Trio in a Graph,minimum-degree-of-a-connected-trio-in-a-graph,False,19330,46521,1761,False,3,"Can you solve this real interview question? Minimum Degree of a Connected Trio in a Graph - You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/01/26/trios1.png]


Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.


Example 2:

[https://assets.leetcode.com/uploads/2021/01/26/trios2.png]


Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
Output: 0
Explanation: There are exactly three trios:
1) [1,4,3] with degree 0.
2) [2,5,6] with degree 2.
3) [5,6,7] with degree 2.


 

Constraints:

 * 2 <= n <= 400
 * edges[i].length == 2
 * 1 <= edges.length <= n * (n-1) / 2
 * 1 <= ui, vi <= n
 * ui != vi
 * There are no repeated edges.",Solutions (178),273,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minTrioDegree(n, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minTrioDegree(self, n: int, edges: List[List[int]]) -> int:
        # Your code here
        pass"
False,0,0,1888,,Find Nearest Point That Has the Same X or Y Coordinate,find-nearest-point-that-has-the-same-x-or-y-coordinate,False,93994,139716,1779,False,1,"Can you solve this real interview question? Find Nearest Point That Has the Same X or Y Coordinate - You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.

The Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).

 

Example 1:


Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Output: 2
Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.

Example 2:


Input: x = 3, y = 4, points = [[3,4]]
Output: 0
Explanation: The answer is allowed to be on the same location as your current location.

Example 3:


Input: x = 3, y = 4, points = [[2,3]]
Output: -1
Explanation: There are no valid points.

 

Constraints:

 * 1 <= points.length <= 104
 * points[i].length == 2
 * 1 <= x, y, ai, bi <= 104",Solutions (1.1K),725,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    x: int = deserialize(""int"", read_line())
    y: int = deserialize(""int"", read_line())
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().nearestValidPoint(x, y, points)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nearestValidPoint(self, x: int, y: int, points: List[List[int]]) -> int:
        min_distance = float('inf')
        min_index = -1
        
        for i, point in enumerate(points):
            if point[0] == x or point[1] == y:
                distance = abs(point[0] - x) + abs(point[1] - y)
                if distance < min_distance:
                    min_distance = distance
                    min_index = i
        
        return min_index"
False,0,0,1889,,Check if Number is a Sum of Powers of Three,check-if-number-is-a-sum-of-powers-of-three,False,31700,48162,1780,False,2,"Can you solve this real interview question? Check if Number is a Sum of Powers of Three - Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.

An integer y is a power of three if there exists an integer x such that y == 3x.

 

Example 1:


Input: n = 12
Output: true
Explanation: 12 = 31 + 32


Example 2:


Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34


Example 3:


Input: n = 21
Output: false


 

Constraints:

 * 1 <= n <= 107",Solutions (726),836,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkPowersOfThree(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().checkPowersOfThree(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkPowersOfThree(self, n: int) -> bool:
        while n > 0:
            if n % 3 == 2:
                return False
            n //= 3
        return True"
False,0,0,1890,,Sum of Beauty of All Substrings,sum-of-beauty-of-all-substrings,False,20053,32980,1781,False,2,"Can you solve this real interview question? Sum of Beauty of All Substrings - The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

 * For example, the beauty of ""abaacc"" is 3 - 1 = 2.

Given a string s, return the sum of beauty of all of its substrings.

 

Example 1:


Input: s = ""aabcb""
Output: 5
Explanation: The substrings with non-zero beauty are [""aab"",""aabc"",""aabcb"",""abcb"",""bcb""], each with beauty equal to 1.

Example 2:


Input: s = ""aabcbaa""
Output: 17


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of only lowercase English letters.",Solutions (310),595,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-beauty-of-all-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def beautySum(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().beautySum(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def beautySum(self, s: str) -> int:
        def beauty_of_substring(subs):
            freq = {}
            for char in subs:
                freq[char] = freq.get(char, 0) + 1
            return max(freq.values()) - min(freq.values())
        
        total_beauty = 0
        for i in range(len(s)):
            for j in range(i+1, len(s)+1):
                total_beauty += beauty_of_substring(s[i:j])
        
        return total_beauty"
False,0,0,1891,,Count Pairs Of Nodes,count-pairs-of-nodes,False,5401,14038,1782,False,3,"Can you solve this real interview question? Count Pairs Of Nodes - You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.

Let incident(a, b) be defined as the number of edges that are connected to either node a or b.

The answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:

 * a < b
 * incident(a, b) > queries[j]

Return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.

Note that there can be multiple edges between the same two nodes.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/08/winword_2021-06-08_00-58-39.png]


Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
Output: [6,5]
Explanation: The calculations for incident(a, b) are shown in the table above.
The answers for each of the queries are as follows:
- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.
- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.


Example 2:


Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
Output: [10,10,9,8,6]


 

Constraints:

 * 2 <= n <= 2 * 104
 * 1 <= edges.length <= 105
 * 1 <= ui, vi <= n
 * ui != vi
 * 1 <= queries.length <= 20
 * 0 <= queries[j] < edges.length",Solutions (52),257,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-pairs-of-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countPairs(n, edges, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countPairs(self, n: int, edges: List[List[int]], queries: List[int]) -> List[int]:
        # Your code goes here
        pass"
False,0,0,1894,merge-strings-alternately,Merge Strings Alternately,merge-strings-alternately,False,96023,124109,1768,False,1,"Can you solve this real interview question? Merge Strings Alternately - You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.

 

Example 1:


Input: word1 = ""abc"", word2 = ""pqr""
Output: ""apbqcr""
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r


Example 2:


Input: word1 = ""ab"", word2 = ""pqrs""
Output: ""apbqrs""
Explanation: Notice that as word2 is longer, ""rs"" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s


Example 3:


Input: word1 = ""abcd"", word2 = ""pq""
Output: ""apbqcd""
Explanation: Notice that as word1 is longer, ""cd"" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d


 

Constraints:

 * 1 <= word1.length, word2.length <= 100
 * word1 and word2 consist of lowercase English letters.",Solutions (2.1K),977,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/merge-strings-alternately/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().mergeAlternately(word1, word2)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def mergeAlternately(self, word1: str, word2: str) -> str:
        result = """"
        max_len = max(len(word1), len(word2))
        
        for i in range(max_len):
            if i < len(word1):
                result += word1[i]
            if i < len(word2):
                result += word2[i]
        
        return result"
False,0,0,1895,,Minimum Number of Operations to Move All Balls to Each Box,minimum-number-of-operations-to-move-all-balls-to-each-box,False,98421,115572,1769,False,2,"Can you solve this real interview question? Minimum Number of Operations to Move All Balls to Each Box - You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes.

 

Example 1:


Input: boxes = ""110""
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.
2) Second box: you will have to move one ball from the first box to the second box in one operation.
3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.


Example 2:


Input: boxes = ""001011""
Output: [11,8,5,4,3,4]

 

Constraints:

 * n == boxes.length
 * 1 <= n <= 2000
 * boxes[i] is either '0' or '1'.",Solutions (1.2K),1.9K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    boxes: str = deserialize(""str"", read_line())
    ans = Solution().minOperations(boxes)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        n = len(boxes)
        left_count, left_sum = 0, 0
        right_count, right_sum = 0, 0
        result = [0] * n
        
        for i in range(n):
            result[i] = right_sum
            if boxes[i] == '1':
                right_count += 1
            right_sum += right_count
        
        for i in range(n):
            result[i] += left_sum
            if boxes[i] == '1':
                left_count += 1
            left_sum += left_count
        
        return result"
False,0,0,1896,maximum-score-from-performing-multiplication-operations,Maximum Score from Performing Multiplication Operations,maximum-score-from-performing-multiplication-operations,False,92304,246724,1770,False,3,"Can you solve this real interview question? Maximum Score from Performing Multiplication Operations - You are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n >= m.

You begin with a score of 0. You want to perform exactly m operations. On the ith operation (0-indexed) you will:

 * Choose one integer x from either the start or the end of the array nums.
 * Add multipliers[i] * x to your score.
   * Note that multipliers[0] corresponds to the first operation, multipliers[1] to the second operation, and so on.
 * Remove x from nums.

Return the maximum score after performing m operations.

 

Example 1:


Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.
- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.
- Choose from the end, [1], adding 1 * 1 = 1 to the score.
The total score is 9 + 4 + 1 = 14.

Example 2:


Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.
- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.
- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.
- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.
- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.


 

Constraints:

 * n == nums.length
 * m == multipliers.length
 * 1 <= m <= 300
 * m <= n <= 105
 * -1000 <= nums[i], multipliers[i] <= 1000",Solutions (758),2.4K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    multipliers: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumScore(nums, multipliers)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumScore(self, nums: List[int], multipliers: List[int]) -> int:
        n, m = len(nums), len(multipliers)
        dp = [[0] * (m + 1) for _ in range(m + 1)]
        
        for k in range(1, m + 1):
            for i in range(k + 1):
                j = k - i
                if i == 0:
                    dp[i][j] = dp[i][j - 1] + multipliers[j - 1] * nums[n - j]
                elif j == 0:
                    dp[i][j] = dp[i - 1][j] + multipliers[i - 1] * nums[i - 1]
                else:
                    dp[i][j] = max(dp[i - 1][j] + multipliers[i - 1] * nums[i - 1], 
                                   dp[i][j - 1] + multipliers[j - 1] * nums[n - j])
        
        return dp[m][m]"
False,0,0,1897,,Maximize Palindrome Length From Subsequences,maximize-palindrome-length-from-subsequences,False,9062,25687,1771,False,3,"Can you solve this real interview question? Maximize Palindrome Length From Subsequences - You are given two strings, word1 and word2. You want to construct a string in the following manner:

 * Choose some non-empty subsequence subsequence1 from word1.
 * Choose some non-empty subsequence subsequence2 from word2.
 * Concatenate the subsequences: subsequence1 + subsequence2, to make the string.

Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.

A subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.

A palindrome is a string that reads the same forward as well as backward.

 

Example 1:


Input: word1 = ""cacb"", word2 = ""cbba""
Output: 5
Explanation: Choose ""ab"" from word1 and ""cba"" from word2 to make ""abcba"", which is a palindrome.

Example 2:


Input: word1 = ""ab"", word2 = ""ab""
Output: 3
Explanation: Choose ""ab"" from word1 and ""a"" from word2 to make ""aba"", which is a palindrome.

Example 3:


Input: word1 = ""aa"", word2 = ""bb""
Output: 0
Explanation: You cannot construct a palindrome from the described method, so return 0.

 

Constraints:

 * 1 <= word1.length, word2.length <= 1000
 * word1 and word2 consist of lowercase English letters.",Solutions (132),465,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-palindrome-length-from-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPalindrome(self, word1: str, word2: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().longestPalindrome(word1, word2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestPalindrome(self, word1: str, word2: str) -> int:
        pass"
False,0,0,1899,,Count Items Matching a Rule,count-items-matching-a-rule,False,151266,179165,1773,False,1,"Can you solve this real interview question? Count Items Matching a Rule - You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. You are also given a rule represented by two strings, ruleKey and ruleValue.

The ith item is said to match the rule if one of the following is true:

 * ruleKey == ""type"" and ruleValue == typei.
 * ruleKey == ""color"" and ruleValue == colori.
 * ruleKey == ""name"" and ruleValue == namei.

Return the number of items that match the given rule.

 

Example 1:


Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""lenovo""],[""phone"",""gold"",""iphone""]], ruleKey = ""color"", ruleValue = ""silver""
Output: 1
Explanation: There is only one item matching the given rule, which is [""computer"",""silver"",""lenovo""].


Example 2:


Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""phone""],[""phone"",""gold"",""iphone""]], ruleKey = ""type"", ruleValue = ""phone""
Output: 2
Explanation: There are only two items matching the given rule, which are [""phone"",""blue"",""pixel""] and [""phone"",""gold"",""iphone""]. Note that the item [""computer"",""silver"",""phone""] does not match.

 

Constraints:

 * 1 <= items.length <= 104
 * 1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10
 * ruleKey is equal to either ""type"", ""color"", or ""name"".
 * All strings consist only of lowercase letters.",Solutions (2.3K),1.5K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-items-matching-a-rule/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    items: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ruleKey: str = deserialize(""str"", read_line())
    ruleValue: str = deserialize(""str"", read_line())
    ans = Solution().countMatches(items, ruleKey, ruleValue)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countMatches(self, items: List[List[str]], ruleKey: str, ruleValue: str) -> int:
        count = 0
        for item in items:
            if ruleKey == ""type"" and item[0] == ruleValue:
                count += 1
            elif ruleKey == ""color"" and item[1] == ruleValue:
                count += 1
            elif ruleKey == ""name"" and item[2] == ruleValue:
                count += 1
        return count"
False,0,0,1900,,Closest Dessert Cost,closest-dessert-cost,False,24608,51982,1774,False,2,"Can you solve this real interview question? Closest Dessert Cost - You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:

 * There must be exactly one ice cream base.
 * You can add one or more types of topping or have no toppings at all.
 * There are at most two of each type of topping.

You are given three inputs:

 * baseCosts, an integer array of length n, where each baseCosts[i] represents the price of the ith ice cream base flavor.
 * toppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the ith topping.
 * target, an integer representing your target price for dessert.

You want to make a dessert with a total cost as close to target as possible.

Return the closest possible cost of the dessert to target. If there are multiple, return the lower one.

 

Example 1:


Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
Output: 10
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 7
- Take 1 of topping 0: cost 1 x 3 = 3
- Take 0 of topping 1: cost 0 x 4 = 0
Total: 7 + 3 + 0 = 10.


Example 2:


Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
Output: 17
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 3
- Take 1 of topping 0: cost 1 x 4 = 4
- Take 2 of topping 1: cost 2 x 5 = 10
- Take 0 of topping 2: cost 0 x 100 = 0
Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.


Example 3:


Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
Output: 8
Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.


 

Constraints:

 * n == baseCosts.length
 * m == toppingCosts.length
 * 1 <= n, m <= 10
 * 1 <= baseCosts[i], toppingCosts[i] <= 104
 * 1 <= target <= 104",Solutions (336),595,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/closest-dessert-cost/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestCost(self, baseCosts: List[int], toppingCosts: List[int], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    baseCosts: List[int] = deserialize(""List[int]"", read_line())
    toppingCosts: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().closestCost(baseCosts, toppingCosts, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def closestCost(self, baseCosts: List[int], toppingCosts: List[int], target: int) -> int:
        def dfs(index, total):
            if index == len(toppingCosts):
                diff = abs(target - total)
                if diff < min_diff:
                    self.result = total
                    self.min_diff = diff
                elif diff == min_diff:
                    self.result = min(self.result, total)
                return
            
            dfs(index + 1, total)
            dfs(index + 1, total + toppingCosts[index])
            dfs(index + 1, total + 2 * toppingCosts[index])
        
        self.result = 0
        self.min_diff = float('inf')
        
        for base in baseCosts:
            dfs(0, base)
        
        return self.result"
False,0,0,1901,,Equal Sum Arrays With Minimum Number of Operations,equal-sum-arrays-with-minimum-number-of-operations,False,24316,45837,1775,False,2,"Can you solve this real interview question? Equal Sum Arrays With Minimum Number of Operations - You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.

Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1 if it is not possible to make the sum of the two arrays equal.

 

Example 1:


Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.
- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].
- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].
- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].


Example 2:


Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.


Example 3:


Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. 
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].
- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].
- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * 1 <= nums1[i], nums2[i] <= 6",Solutions (245),790,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums1: List[int], nums2: List[int]) -> int:
        def minOperations(self, nums1: List[int], nums2: List[int]) -> int:
            n, m = len(nums1), len(nums2)
            s1, s2 = sum(nums1), sum(nums2)
            if s1 == s2:
                return 0
            if n * 6 < m or m * 6 < n:
                return -1
            if s1 > s2:
                nums1, nums2 = nums2, nums1
                s1, s2 = s2, s1
            diff = s2 - s1
            cnt = [0] * 6
            for num in nums1:
                cnt[6 - num] += 1
            for num in nums2:
                cnt[num - 1] += 1
            res = 0
            for i in range(5, 0, -1):
                while diff > 0 and cnt[i] > 0:
                    diff -= i
                    cnt[i] -= 1
                    res += 1
            return res + (diff + 5) // 6"
False,0,0,1902,,Car Fleet II,car-fleet-ii,False,21595,40350,1776,False,3,"Can you solve this real interview question? Car Fleet II - There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:

 * positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.
 * speedi is the initial speed of the ith car in meters per second.

For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.

Return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.

 

Example 1:


Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.


Example 2:


Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [2.00000,1.00000,1.50000,-1.00000]


 

Constraints:

 * 1 <= cars.length <= 105
 * 1 <= positioni, speedi <= 106
 * positioni < positioni+1",Solutions (133),755,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/car-fleet-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:
        

# @lc code=end

if __name__ == ""__main__"":
    cars: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getCollisionTimes(cars)
    print(""\noutput:"", serialize(ans, ""double[]""))
","class Solution:
    def getCollisionTimes(self, cars: List[List[int]]) -> List[float]:
        stack = []
        n = len(cars)
        res = [-1] * n

        for i in range(n - 1, -1, -1):
            p, s = cars[i]
            while stack and (
                    (cars[stack[-1]][1] >= s) or
                    (cars[stack[-1]][0] - p) / (s - cars[stack[-1]][1]) >= res[stack[-1]] > 0):
                stack.pop()

            if stack:
                res[i] = (cars[stack[-1]][0] - p) / (s - cars[stack[-1]][1])
            stack.append(i)
        
        return res"
False,0,0,1904,,Second Largest Digit in a String,second-largest-digit-in-a-string,False,38213,77466,1796,False,1,"Can you solve this real interview question? Second Largest Digit in a String - Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.

 

Example 1:


Input: s = ""dfa12321afd""
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.


Example 2:


Input: s = ""abc1111""
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 


 

Constraints:

 * 1 <= s.length <= 500
 * s consists of only lowercase English letters and/or digits.",Solutions (827),406,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/second-largest-digit-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def secondHighest(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().secondHighest(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def secondHighest(self, s: str) -> int:
        unique_digits = sorted(set([int(char) for char in s if char.isdigit()]), reverse=True)
        return unique_digits[1] if len(unique_digits) > 1 else -1"
False,0,0,1906,,Maximize Score After N Operations,maximize-score-after-n-operations,False,15913,34585,1799,False,3,"Can you solve this real interview question? Maximize Score After N Operations - You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.

In the ith operation (1-indexed), you will:

 * Choose two elements, x and y.
 * Receive a score of i * gcd(x, y).
 * Remove x and y from nums.

Return the maximum score you can receive after performing n operations.

The function gcd(x, y) is the greatest common divisor of x and y.

 

Example 1:


Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1


Example 2:


Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11


Example 3:


Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14


 

Constraints:

 * 1 <= n <= 7
 * nums.length == 2 * n
 * 1 <= nums[i] <= 106",Solutions (179),525,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-score-after-n-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScore(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxScore(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScore(self, nums: List[int]) -> int:
        pass"
False,0,0,1907,,Count Pairs With XOR in a Range,count-pairs-with-xor-in-a-range,False,5986,12736,1803,False,3,"Can you solve this real interview question? Count Pairs With XOR in a Range - Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.

A nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.

 

Example 1:


Input: nums = [1,4,2,7], low = 2, high = 6
Output: 6
Explanation: All nice pairs (i, j) are as follows:
    - (0, 1): nums[0] XOR nums[1] = 5 
    - (0, 2): nums[0] XOR nums[2] = 3
    - (0, 3): nums[0] XOR nums[3] = 6
    - (1, 2): nums[1] XOR nums[2] = 6
    - (1, 3): nums[1] XOR nums[3] = 3
    - (2, 3): nums[2] XOR nums[3] = 5


Example 2:


Input: nums = [9,8,4,2,1], low = 5, high = 14
Output: 8
Explanation: All nice pairs (i, j) are as follows:
​​​​​    - (0, 2): nums[0] XOR nums[2] = 13
    - (0, 3): nums[0] XOR nums[3] = 11
    - (0, 4): nums[0] XOR nums[4] = 8
    - (1, 2): nums[1] XOR nums[2] = 12
    - (1, 3): nums[1] XOR nums[3] = 10
    - (1, 4): nums[1] XOR nums[4] = 9
    - (2, 3): nums[2] XOR nums[3] = 6
    - (2, 4): nums[2] XOR nums[4] = 5

 

Constraints:

 * 1 <= nums.length <= 2 * 104
 * 1 <= nums[i] <= 2 * 104
 * 1 <= low <= high <= 2 * 104",Solutions (68),396,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-pairs-with-xor-in-a-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, nums: List[int], low: int, high: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    low: int = deserialize(""int"", read_line())
    high: int = deserialize(""int"", read_line())
    ans = Solution().countPairs(nums, low, high)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPairs(self, nums: List[int], low: int, high: int) -> int:
        def count_pairs(num: int) -> int:
            result = 0
            while num > 0:
                result += num & 1
                num >>= 1
            return result

        result = 0
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                xor_value = nums[i] ^ nums[j]
                if low <= xor_value <= high:
                    result += 1

        return result"
False,0,0,1910,,Check if Binary String Has at Most One Segment of Ones,check-if-binary-string-has-at-most-one-segment-of-ones,False,32344,80827,1784,False,1,"Can you solve this real interview question? Check if Binary String Has at Most One Segment of Ones - Given a binary string s without leading zeros, return true if s contains at most one contiguous segment of ones. Otherwise, return false.

 

Example 1:


Input: s = ""1001""
Output: false
Explanation: The ones do not form a contiguous segment.


Example 2:


Input: s = ""110""
Output: true

 

Constraints:

 * 1 <= s.length <= 100
 * s[i] is either '0' or '1'.
 * s[0] is '1'.",Solutions (553),261,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkOnesSegment(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkOnesSegment(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkOnesSegment(self, s: str) -> bool:
        ones = False
        for i in range(len(s) - 1):
            if s[i] == '0' and s[i+1] == '1':
                if ones:
                    return False
                ones = True
        return True"
False,0,0,1911,,Minimum Elements to Add to Form a Given Sum,minimum-elements-to-add-to-form-a-given-sum,False,17455,40935,1785,False,2,"Can you solve this real interview question? Minimum Elements to Add to Form a Given Sum - You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.

Return the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:


Input: nums = [1,-1,1], limit = 3, goal = -4
Output: 2
Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.


Example 2:


Input: nums = [1,-10,9,1], limit = 100, goal = 0
Output: 1


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= limit <= 106
 * -limit <= nums[i] <= limit
 * -109 <= goal <= 109",Solutions (243),211,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minElements(self, nums: List[int], limit: int, goal: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    limit: int = deserialize(""int"", read_line())
    goal: int = deserialize(""int"", read_line())
    ans = Solution().minElements(nums, limit, goal)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minElements(self, nums: List[int], limit: int, goal: int) -> int:
        diff = goal - sum(nums)
        return (abs(diff) + limit - 1) // limit"
False,0,0,1912,,Number of Restricted Paths From First to Last Node,number-of-restricted-paths-from-first-to-last-node,False,18081,45999,1786,False,2,"Can you solve this real interview question? Number of Restricted Paths From First to Last Node - There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.

A path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.

The distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.

Return the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex1.png]


Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]
Output: 3
Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:
1) 1 --> 2 --> 5
2) 1 --> 2 --> 3 --> 5
3) 1 --> 3 --> 5


Example 2:

[https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex22.png]


Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]
Output: 1
Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.


 

Constraints:

 * 1 <= n <= 2 * 104
 * n - 1 <= edges.length <= 4 * 104
 * edges[i].length == 3
 * 1 <= ui, vi <= n
 * ui != vi
 * 1 <= weighti <= 105
 * There is at most one edge between any two nodes.
 * There is at least one path between any two nodes.",Solutions (258),856,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countRestrictedPaths(n, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countRestrictedPaths(self, n: int, edges: List[List[int]]) -> int:
        MOD = 10**9 + 7
        graph = defaultdict(list)
        for u, v, w in edges:
            graph[u].append((v, w))
            graph[v].append((u, w))
        
        dp = [0] + [float('inf')] * n
        dp[n] = 0
        
        @lru_cache(None)
        def dfs(node):
            if node == n:
                return 1
            ans = 0
            for nei, weight in graph[node]:
                if dp[nei] < dp[node]:
                    ans = (ans + dfs(nei)) % MOD
            return ans
        
        for _ in range(n):
            for u in range(1, n + 1):
                for v, w in graph[u]:
                    dp[u] = min(dp[u], dp[v] + w)
        
        return dfs(1) % MOD"
False,0,0,1913,,Make the XOR of All Segments Equal to Zero,make-the-xor-of-all-segments-equal-to-zero,False,4350,11043,1787,False,3,"Can you solve this real interview question? Make the XOR of All Segments Equal to Zero - You are given an array nums and an integer k . The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].

Return the minimum number of elements to change in the array such that the XOR of all segments of size k is equal to zero.

 

Example 1:


Input: nums = [1,2,0,3,0], k = 1
Output: 3
Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].


Example 2:


Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
Output: 3
Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].


Example 3:


Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
Output: 3
Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].

 

Constraints:

 * 1 <= k <= nums.length <= 2000
 * 0 <= nums[i] < 210",Solutions (45),338,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minChanges(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minChanges(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minChanges(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,1915,,Check if One String Swap Can Make Strings Equal,check-if-one-string-swap-can-make-strings-equal,False,81827,180511,1790,False,1,"Can you solve this real interview question? Check if One String Swap Can Make Strings Equal - You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.

 

Example 1:


Input: s1 = ""bank"", s2 = ""kanb""
Output: true
Explanation: For example, swap the first character with the last character of s2 to make ""bank"".


Example 2:


Input: s1 = ""attack"", s2 = ""defend""
Output: false
Explanation: It is impossible to make them equal with one string swap.


Example 3:


Input: s1 = ""kelb"", s2 = ""kelb""
Output: true
Explanation: The two strings are already equal, so no string swap operation is required.


 

Constraints:

 * 1 <= s1.length, s2.length <= 100
 * s1.length == s2.length
 * s1 and s2 consist of only lowercase English letters.",Solutions (1.4K),867,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().areAlmostEqual(s1, s2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        if s1 == s2:
            return True
        diff = [(a, b) for a, b in zip(s1, s2) if a != b]
        return len(diff) == 2 and diff[0] == diff[1][::-1]"
False,0,0,1916,,Find Center of Star Graph,find-center-of-star-graph,False,130171,155820,1791,False,1,"Can you solve this real interview question? Find Center of Star Graph - There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/02/24/star_graph.png]


Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.


Example 2:


Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1


 

Constraints:

 * 3 <= n <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 1 <= ui, vi <= n
 * ui != vi
 * The given edges represent a valid star graph.",Solutions (1.4K),1.1K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-center-of-star-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findCenter(self, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findCenter(edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findCenter(self, edges: List[List[int]]) -> int:
        n = len(edges) + 1
        degrees = [0] * (n + 1)
        for u, v in edges:
            degrees[u] += 1
            degrees[v] += 1
        return degrees.index(n - 1)"
False,0,0,1917,,Maximum Average Pass Ratio,maximum-average-pass-ratio,False,18746,35818,1792,False,2,"Can you solve this real interview question? Maximum Average Pass Ratio - There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.

You are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.

 

Example 1:


Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.


Example 2:


Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4
Output: 0.53485


 

Constraints:

 * 1 <= classes.length <= 105
 * classes[i].length == 2
 * 1 <= passi <= totali <= 105
 * 1 <= extraStudents <= 105",Solutions (270),640,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-average-pass-ratio/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:
        

# @lc code=end

if __name__ == ""__main__"":
    classes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    extraStudents: int = deserialize(""int"", read_line())
    ans = Solution().maxAverageRatio(classes, extraStudents)
    print(""\noutput:"", serialize(ans, ""double""))
","class Solution:
    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:
        import heapq
        
        def pass_ratio(pass_i, total_i):
            return (pass_i + 1) / (total_i + 1) - pass_i / total_i
        
        heap = [(-pass_ratio(pass_i, total_i), pass_i, total_i) for pass_i, total_i in classes]
        heapq.heapify(heap)
        
        for _ in range(extraStudents):
            _, pass_i, total_i = heapq.heappop(heap)
            pass_i += 1
            total_i += 1
            heapq.heappush(heap, (-pass_ratio(pass_i, total_i), pass_i, total_i))
        
        return sum(pass_i / total_i for _, pass_i, total_i in heap) / len(classes)"
False,0,0,1918,,Maximum Score of a Good Subarray,maximum-score-of-a-good-subarray,False,19486,36403,1793,False,3,"Can you solve this real interview question? Maximum Score of a Good Subarray - You are given an array of integers nums (0-indexed) and an integer k.

The score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.

Return the maximum possible score of a good subarray.

 

Example 1:


Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 


Example 2:


Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 2 * 104
 * 0 <= k < nums.length",Solutions (294),891,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-of-a-good-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumScore(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumScore(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumScore(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,1920,,Determine Color of a Chessboard Square,determine-color-of-a-chessboard-square,False,55720,71688,1812,False,1,"Can you solve this real interview question? Determine Color of a Chessboard Square - You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.

[https://assets.leetcode.com/uploads/2021/02/19/screenshot-2021-02-20-at-22159-pm.png]

Return true if the square is white, and false if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.

 

Example 1:


Input: coordinates = ""a1""
Output: false
Explanation: From the chessboard above, the square with coordinates ""a1"" is black, so return false.


Example 2:


Input: coordinates = ""h3""
Output: true
Explanation: From the chessboard above, the square with coordinates ""h3"" is white, so return true.


Example 3:


Input: coordinates = ""c7""
Output: false


 

Constraints:

 * coordinates.length == 2
 * 'a' <= coordinates[0] <= 'h'
 * '1' <= coordinates[1] <= '8'",Solutions (1.5K),637,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/determine-color-of-a-chessboard-square/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def squareIsWhite(self, coordinates: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    coordinates: str = deserialize(""str"", read_line())
    ans = Solution().squareIsWhite(coordinates)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def squareIsWhite(self, coordinates: str) -> bool:
        return (ord(coordinates[0]) - ord('a') + int(coordinates[1])) % 2 == 0"
False,0,0,1923,,Sentence Similarity III,sentence-similarity-iii,False,13023,39188,1813,False,2,"Can you solve this real interview question? Sentence Similarity III - A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, ""Hello World"", ""HELLO"", ""hello world hello world"" are all sentences. Words consist of only uppercase and lowercase English letters.

Two sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = ""Hello my name is Jane"" and sentence2 = ""Hello Jane"" can be made equal by inserting ""my name is"" between ""Hello"" and ""Jane"" in sentence2.

Given two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.

 

Example 1:


Input: sentence1 = ""My name is Haley"", sentence2 = ""My Haley""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""name is"" between ""My"" and ""Haley"".


Example 2:


Input: sentence1 = ""of"", sentence2 = ""A lot of words""
Output: false
Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.


Example 3:


Input: sentence1 = ""Eating right now"", sentence2 = ""Eating""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""right now"" at the end of the sentence.


 

Constraints:

 * 1 <= sentence1.length, sentence2.length <= 100
 * sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.
 * The words in sentence1 and sentence2 are separated by a single space.",Solutions (229),321,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sentence-similarity-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence1: str = deserialize(""str"", read_line())
    sentence2: str = deserialize(""str"", read_line())
    ans = Solution().areSentencesSimilar(sentence1, sentence2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:
        def areSentencesSimilar(self, sentence1: str, sentence2: str) -> bool:
            s1 = sentence1.split()
            s2 = sentence2.split()
            
            if len(s1) < len(s2):
                return self.areSentencesSimilar(self, sentence2, sentence1)
            
            i = 0
            while i < len(s2) and s1[i] == s2[i]:
                i += 1
            
            j = 0
            while i < len(s2) and s1[len(s1) - 1 - j] == s2[len(s2) - 1 - j]:
                j += 1
            
            return i + j == len(s2) if i + j == len(s2) else False
"
False,0,0,1924,,Maximum Number of Groups Getting Fresh Donuts,maximum-number-of-groups-getting-fresh-donuts,False,5384,13460,1815,False,3,"Can you solve this real interview question? Maximum Number of Groups Getting Fresh Donuts - There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.

When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.

You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.

 

Example 1:


Input: batchSize = 3, groups = [1,2,3,4,5,6]
Output: 4
Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.


Example 2:


Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
Output: 4


 

Constraints:

 * 1 <= batchSize <= 9
 * 1 <= groups.length <= 30
 * 1 <= groups[i] <= 109",Solutions (59),299,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxHappyGroups(self, batchSize: int, groups: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    batchSize: int = deserialize(""int"", read_line())
    groups: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxHappyGroups(batchSize, groups)
    print(""\noutput:"", serialize(ans, ""integer""))
","from functools import lru_cache
from typing import List

class Solution:
    def maxHappyGroups(self, batchSize: int, groups: List[int]) -> int:
        @lru_cache(None)
        def dfs(remainder, count):
            if remainder == 0:
                return 1
            res = 0
            for i in range(1, len(count)):
                if count[i] == 0:
                    continue
                count[i] -= 1
                res = max(res, (i == remainder) + dfs((remainder - i) % batchSize, tuple(count)))
                count[i] += 1
            return res
        
        count = [0] * batchSize
        extra = 0
        for g in groups:
            if g % batchSize == 0:
                extra += 1
            else:
                count[g % batchSize] += 1
        return extra + dfs(0, tuple(count)) - 1"
False,0,0,1925,,Count Nice Pairs in an Array,count-nice-pairs-in-an-array,False,23980,57086,1814,False,2,"Can you solve this real interview question? Count Nice Pairs in an Array - You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:

 * 0 <= i < j < nums.length
 * nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])

Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.
 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.


Example 2:


Input: nums = [13,10,35,24,76]
Output: 4


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109",Solutions (392),720,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/count-nice-pairs-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countNicePairs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countNicePairs(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countNicePairs(self, nums: List[int]) -> int:
        rev = lambda x: int(str(x)[::-1])
        count = {}
        res = 0
        
        for num in nums:
            diff = num - rev(num)
            count[diff] = count.get(diff, 0) + 1
        
        for val in count.values():
            res += val * (val - 1) // 2
        
        return res % (10**9 + 7)"
False,0,0,1927,,Maximum Ascending Subarray Sum,maximum-ascending-subarray-sum,False,41333,65438,1800,False,1,"Can you solve this real interview question? Maximum Ascending Subarray Sum - Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. Note that a subarray of size 1 is ascending.

 

Example 1:


Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.


Example 2:


Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.


Example 3:


Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (764),587,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-ascending-subarray-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxAscendingSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxAscendingSum(self, nums: List[int]) -> int:
        max_sum = curr_sum = nums[0]
        for i in range(1, len(nums)):
            if nums[i] > nums[i-1]:
                curr_sum += nums[i]
            else:
                max_sum = max(max_sum, curr_sum)
                curr_sum = nums[i]
        return max(max_sum, curr_sum)"
False,0,0,1928,,Number of Orders in the Backlog,number-of-orders-in-the-backlog,False,15962,33033,1801,False,2,"Can you solve this real interview question? Number of Orders in the Backlog - You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:

 * 0 if it is a batch of buy orders, or
 * 1 if it is a batch of sell orders.

Note that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:

 * If the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.
 * Vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.

Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/11/ex1.png]


Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here is what happens with the orders:
- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.
- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.
- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.
- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.
Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.


Example 2:

[https://assets.leetcode.com/uploads/2021/03/11/ex2.png]


Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here is what happens with the orders:
- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.
- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.
- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.
- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.
Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).


 

Constraints:

 * 1 <= orders.length <= 105
 * orders[i].length == 3
 * 1 <= pricei, amounti <= 109
 * orderTypei is either 0 or 1.",Solutions (167),248,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-orders-in-the-backlog/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    orders: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getNumberOfBacklogOrders(orders)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getNumberOfBacklogOrders(self, orders: List[List[int]]) -> int:
        import heapq
        
        buy_orders = []
        sell_orders = []
        
        for price, amount, order_type in orders:
            if order_type == 0:
                while amount > 0 and sell_orders and sell_orders[0][0] <= price:
                    sell_price, sell_amount = heapq.heappop(sell_orders)
                    if sell_amount > amount:
                        sell_amount -= amount
                        heapq.heappush(sell_orders, (sell_price, sell_amount))
                        amount = 0
                    else:
                        amount -= sell_amount
            else:
                while amount > 0 and buy_orders and -buy_orders[0][0] >= price:
                    buy_price, buy_amount = heapq.heappop(buy_orders)
                    if buy_amount > amount:
                        buy_amount -= amount
                        heapq.heappush(buy_orders, (buy_price, buy_amount))
                        amount = 0
                    else:
                        amount -= buy_amount
                        
            if amount > 0:
                if order_type == 0:
                    heapq.heappush(buy_orders, (-price, amount))
                else:
                    heapq.heappush(sell_orders, (price, amount))
        
        return (sum(amount for price, amount in buy_orders + sell_orders)) % (10**9 + 7)"
False,0,0,1929,,Maximum Value at a Given Index in a Bounded Array,maximum-value-at-a-given-index-in-a-bounded-array,False,15989,49397,1802,False,2,"Can you solve this real interview question? Maximum Value at a Given Index in a Bounded Array - You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

 * nums.length == n
 * nums[i] is a positive integer where 0 <= i < n.
 * abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
 * The sum of all the elements of nums does not exceed maxSum.
 * nums[index] is maximized.

Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:


Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].


Example 2:


Input: n = 6, index = 1,  maxSum = 10
Output: 3


 

Constraints:

 * 1 <= n <= maxSum <= 109
 * 0 <= index < n",Solutions (246),766,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxValue(self, n: int, index: int, maxSum: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    index: int = deserialize(""int"", read_line())
    maxSum: int = deserialize(""int"", read_line())
    ans = Solution().maxValue(n, index, maxSum)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxValue(self, n: int, index: int, maxSum: int) -> int:
        def check(nums, n, index, maxSum, value):
            left = value if index == 0 else min(value, nums[index - 1] + 1)
            right = value if index == n - 1 else min(value, nums[index + 1] + 1)
            left_sum = (value + left - 1) * (value - left + 1) // 2
            right_sum = (value + right - 1) * (value - right + 1) // 2
            total = left_sum + right_sum + value
            return total <= maxSum

        left, right = 1, maxSum
        while left < right:
            mid = (left + right + 1) // 2
            if check(mid, n, index, maxSum, mid):
                left = mid
            else:
                right = mid - 1
        return left"
False,0,0,1930,,Maximum Number of Consecutive Values You Can Make,maximum-number-of-consecutive-values-you-can-make,False,13430,24006,1798,False,2,"Can you solve this real interview question? Maximum Number of Consecutive Values You Can Make - You are given an integer array coins of length n which represents the n coins that you own. The value of the ith coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.

Return the maximum number of consecutive integer values that you can make with your coins starting from and including 0.

Note that you may have multiple coins of the same value.

 

Example 1:


Input: coins = [1,3]
Output: 2
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
You can make 2 consecutive integer values starting from 0.

Example 2:


Input: coins = [1,1,1,4]
Output: 8
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
- 2: take [1,1]
- 3: take [1,1,1]
- 4: take [4]
- 5: take [4,1]
- 6: take [4,1,1]
- 7: take [4,1,1,1]
You can make 8 consecutive integer values starting from 0.

Example 3:


Input: nums = [1,4,10,3,1]
Output: 20

 

Constraints:

 * coins.length == n
 * 1 <= n <= 4 * 104
 * 1 <= coins[i] <= 4 * 104",Solutions (163),644,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaximumConsecutive(self, coins: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    coins: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getMaximumConsecutive(coins)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMaximumConsecutive(self, coins: List[int]) -> int:
        return sum(sorted(coins).count(x) for x in range(1, sum(sorted(coins)) + 1) + 1)"
False,0,0,1933,,Number of Different Integers in a String,number-of-different-integers-in-a-string,False,35946,98186,1805,False,1,"Can you solve this real interview question? Number of Different Integers in a String - You are given a string word that consists of digits and lowercase English letters.

You will replace every non-digit character with a space. For example, ""a123bc34d8ef34"" will become "" 123  34 8  34"". Notice that you are left with some integers that are separated by at least one space: ""123"", ""34"", ""8"", and ""34"".

Return the number of different integers after performing the replacement operations on word.

Two integers are considered different if their decimal representations without any leading zeros are different.

 

Example 1:


Input: word = ""a123bc34d8ef34""
Output: 3
Explanation: The three different integers are ""123"", ""34"", and ""8"". Notice that ""34"" is only counted once.


Example 2:


Input: word = ""leet1234code234""
Output: 2


Example 3:


Input: word = ""a1b01c001""
Output: 1
Explanation: The three integers ""1"", ""01"", and ""001"" all represent the same integer because
the leading zeros are ignored when comparing their decimal values.


 

Constraints:

 * 1 <= word.length <= 1000
 * word consists of digits and lowercase English letters.",Solutions (724),488,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-different-integers-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numDifferentIntegers(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().numDifferentIntegers(word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numDifferentIntegers(self, word: str) -> int:
        seen = set()
        for w in word:
            if not w.isdigit():
                word = word.replace(w, ' ')
        return len(set(int(i) for i in word.split() if i.strip()))"
False,0,0,1934,,Evaluate the Bracket Pairs of a String,evaluate-the-bracket-pairs-of-a-string,False,24473,36847,1807,False,2,"Can you solve this real interview question? Evaluate the Bracket Pairs of a String - You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.

 * For example, in the string ""(name)is(age)yearsold"", there are two bracket pairs that contain the keys ""name"" and ""age"".

You know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.

You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:

 * Replace keyi and the bracket pair with the key's corresponding valuei.
 * If you do not know the value of the key, you will replace keyi and the bracket pair with a question mark ""?"" (without the quotation marks).

Each key will appear at most once in your knowledge. There will not be any nested brackets in s.

Return the resulting string after evaluating all of the bracket pairs.

 

Example 1:


Input: s = ""(name)is(age)yearsold"", knowledge = [[""name"",""bob""],[""age"",""two""]]
Output: ""bobistwoyearsold""
Explanation:
The key ""name"" has a value of ""bob"", so replace ""(name)"" with ""bob"".
The key ""age"" has a value of ""two"", so replace ""(age)"" with ""two"".


Example 2:


Input: s = ""hi(name)"", knowledge = [[""a"",""b""]]
Output: ""hi?""
Explanation: As you do not know the value of the key ""name"", replace ""(name)"" with ""?"".


Example 3:


Input: s = ""(a)(a)(a)aaa"", knowledge = [[""a"",""yes""]]
Output: ""yesyesyesaaa""
Explanation: The same key can appear multiple times.
The key ""a"" has a value of ""yes"", so replace all occurrences of ""(a)"" with ""yes"".
Notice that the ""a""s not in a bracket pair are not evaluated.


 

Constraints:

 * 1 <= s.length <= 105
 * 0 <= knowledge.length <= 105
 * knowledge[i].length == 2
 * 1 <= keyi.length, valuei.length <= 10
 * s consists of lowercase English letters and round brackets '(' and ')'.
 * Every open bracket '(' in s will have a corresponding close bracket ')'.
 * The key in each bracket pair of s will be non-empty.
 * There will not be any nested bracket pairs in s.
 * keyi and valuei consist of lowercase English letters.
 * Each keyi in knowledge is unique.",Solutions (525),415,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def evaluate(self, s: str, knowledge: List[List[str]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    knowledge: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().evaluate(s, knowledge)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def evaluate(self, s: str, knowledge: List[List[str]]) -> str:
        import re
        for key, value in knowledge:
            s = s.replace(f""({key})"", value)
        return re.sub(r'\(.*\)', '?', s)"
False,0,0,1935,,Minimum Number of Operations to Reinitialize a Permutation,minimum-number-of-operations-to-reinitialize-a-permutation,False,15777,21915,1806,False,2,"Can you solve this real interview question? Minimum Number of Operations to Reinitialize a Permutation - You are given an even integer n . You initially have a permutation perm of size n where perm[i] == i (0-indexed) .

In one operation, you will create a new array arr, and for each i:

 * If i % 2 == 0, then arr[i] = perm[i / 2].
 * If i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].

You will then assign arr to perm.

Return the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.

 

Example 1:


Input: n = 2
Output: 1
Explanation: perm = [0,1] initially.
After the 1st operation, perm = [0,1]
So it takes only 1 operation.


Example 2:


Input: n = 4
Output: 2
Explanation: perm = [0,1,2,3] initially.
After the 1st operation, perm = [0,2,1,3]
After the 2nd operation, perm = [0,1,2,3]
So it takes only 2 operations.


Example 3:


Input: n = 6
Output: 4


 

Constraints:

 * 2 <= n <= 1000
 * n is even.",Solutions (203),278,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reinitializePermutation(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().reinitializePermutation(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reinitializePermutation(self, n: int) -> int:
        res = cnt = 0
        while res == 0 or cnt > 0:
            if cnt % 2 == 0:
                res = cnt
            cnt = n if cnt < n / 2 else (cnt - n / 2) * 2 + 1
        return res"
False,0,0,1936,,Maximize Number of Nice Divisors,maximize-number-of-nice-divisors,False,5483,17274,1808,False,3,"Can you solve this real interview question? Maximize Number of Nice Divisors - You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:

 * The number of prime factors of n (not necessarily distinct) is at most primeFactors.
 * The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.

Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.

Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.

 

Example 1:


Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.
It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].
There is not other value of n that has at most 5 prime factors and more nice divisors.


Example 2:


Input: primeFactors = 8
Output: 18


 

Constraints:

 * 1 <= primeFactors <= 109",Solutions (81),186,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-number-of-nice-divisors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNiceDivisors(self, primeFactors: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    primeFactors: int = deserialize(""int"", read_line())
    ans = Solution().maxNiceDivisors(primeFactors)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNiceDivisors(self, primeFactors: int) -> int:
        mod = 10**9 + 7
        if primeFactors == 1:
            return 1
        elif primeFactors == 2:
            return 4
        elif primeFactors == 3:
            return 6
        elif primeFactors % 3 == 0:
            return pow(3, primeFactors // 3, mod)
        elif primeFactors % 3 == 1:
            return (pow(3, (primeFactors - 4) // 3, mod) * 4) % mod
        else:
            return (pow(3, (primeFactors - 2) // 3, mod) * 2) % mod"
False,0,0,1938,,Minimum Operations to Make the Array Increasing,minimum-operations-to-make-the-array-increasing,False,64632,82515,1827,False,1,"Can you solve this real interview question? Minimum Operations to Make the Array Increasing - You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.

 * For example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].

Return the minimum number of operations needed to make nums strictly increasing.

An array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.

 

Example 1:


Input: nums = [1,1,1]
Output: 3
Explanation: You can do the following operations:
1) Increment nums[2], so nums becomes [1,1,2].
2) Increment nums[1], so nums becomes [1,2,2].
3) Increment nums[2], so nums becomes [1,2,3].


Example 2:


Input: nums = [1,5,2,4,1]
Output: 14


Example 3:


Input: nums = [8]
Output: 0


 

Constraints:

 * 1 <= nums.length <= 5000
 * 1 <= nums[i] <= 104",Solutions (1.1K),951,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums: List[int]) -> int:
        res = 0
        prev = nums[0]
        
        for i in range(1, len(nums)):
            if prev >= nums[i]:
                res += prev - nums[i] + 1
                prev += 1
            else:
                prev = nums[i]
        
        return res"
False,0,0,1939,,Queries on Number of Points Inside a Circle,queries-on-number-of-points-inside-a-circle,False,58182,67383,1828,False,2,"Can you solve this real interview question? Queries on Number of Points Inside a Circle - You are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.

You are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.

For each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.

Return an array answer, where answer[j] is the answer to the jth query.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-34-16.png]


Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]
Output: [3,2,2]
Explanation: The points and circles are shown above.
queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.


Example 2:

[https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-42-07.png]


Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]
Output: [2,3,2,4]
Explanation: The points and circles are shown above.
queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.


 

Constraints:

 * 1 <= points.length <= 500
 * points[i].length == 2
 * 0 <= x i, y i <= 500
 * 1 <= queries.length <= 500
 * queries[j].length == 3
 * 0 <= xj, yj <= 500
 * 1 <= rj <= 500
 * All coordinates are integers.

 

Follow up: Could you find the answer for each query in better complexity than O(n)?",Solutions (739),941,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPoints(self, points: List[List[int]], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countPoints(points, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countPoints(self, points: List[List[int]], queries: List[List[int]]) -> List[int]:
        def count_points_inside_circle(x, y, r, points):
            return sum((px - x) ** 2 + (py - y) ** 2 <= r ** 2 for px, py in points)
        
        return [count_points_inside_circle(x, y, r, points) for x, y, r in queries]"
False,0,0,1940,,Maximum XOR for Each Query,maximum-xor-for-each-query,False,22153,28842,1829,False,2,"Can you solve this real interview question? Maximum XOR for Each Query - You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:

 1. Find a non-negative integer k < 2maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the ith query.
 2. Remove the last element from the current array nums.

Return an array answer, where answer[i] is the answer to the ith query.

 

Example 1:


Input: nums = [0,1,1,3], maximumBit = 2
Output: [0,3,2,3]
Explanation: The queries are answered as follows:
1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.
2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.
3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.
4th query: nums = [0], k = 3 since 0 XOR 3 = 3.


Example 2:


Input: nums = [2,3,4,7], maximumBit = 3
Output: [5,2,6,5]
Explanation: The queries are answered as follows:
1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.
2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.
3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.
4th query: nums = [2], k = 5 since 2 XOR 5 = 7.


Example 3:


Input: nums = [0,1,2,2,5,7], maximumBit = 3
Output: [4,3,6,4,6,7]


 

Constraints:

 * nums.length == n
 * 1 <= n <= 105
 * 1 <= maximumBit <= 20
 * 0 <= nums[i] < 2maximumBit
 * nums is sorted in ascending order.",Solutions (404),628,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-xor-for-each-query/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMaximumXor(self, nums: List[int], maximumBit: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    maximumBit: int = deserialize(""int"", read_line())
    ans = Solution().getMaximumXor(nums, maximumBit)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getMaximumXor(self, nums: List[int], maximumBit: int) -> List[int]:
        xor_sum = 0
        result = []
        total_xor = (1 << maximumBit) - 1
        for num in nums:
            xor_sum ^= num
        for num in reversed(nums):
            result.append(total_xor ^ xor_sum)
            xor_sum ^= num
        return result"
False,0,0,1941,,Minimum Number of Operations to Make String Sorted,minimum-number-of-operations-to-make-string-sorted,False,2976,6070,1830,False,3,"Can you solve this real interview question? Minimum Number of Operations to Make String Sorted - You are given a string s (0-indexed) . You are asked to perform the following operation on s until you get a sorted string:

 1. Find the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].
 2. Find the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.
 3. Swap the two characters at indices i - 1 and j .
 4. Reverse the suffix starting at index i .

Return the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""cba""
Output: 5
Explanation: The simulation goes as follows:
Operation 1: i=2, j=2. Swap s[1] and s[2] to get s=""cab"", then reverse the suffix starting at 2. Now, s=""cab"".
Operation 2: i=1, j=2. Swap s[0] and s[2] to get s=""bac"", then reverse the suffix starting at 1. Now, s=""bca"".
Operation 3: i=2, j=2. Swap s[1] and s[2] to get s=""bac"", then reverse the suffix starting at 2. Now, s=""bac"".
Operation 4: i=1, j=1. Swap s[0] and s[1] to get s=""abc"", then reverse the suffix starting at 1. Now, s=""acb"".
Operation 5: i=2, j=2. Swap s[1] and s[2] to get s=""abc"", then reverse the suffix starting at 2. Now, s=""abc"".


Example 2:


Input: s = ""aabaa""
Output: 2
Explanation: The simulation goes as follows:
Operation 1: i=3, j=4. Swap s[2] and s[4] to get s=""aaaab"", then reverse the substring starting at 3. Now, s=""aaaba"".
Operation 2: i=4, j=4. Swap s[3] and s[4] to get s=""aaaab"", then reverse the substring starting at 4. Now, s=""aaaab"".


 

Constraints:

 * 1 <= s.length <= 3000
 * s consists only of lowercase English letters.",Solutions (30),160,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-make-string-sorted/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeStringSorted(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().makeStringSorted(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def makeStringSorted(self, s: str) -> int:
        MOD = 10**9 + 7
        
        def fact(n):
            res = 1
            for i in range(1, n + 1):
                res = (res * i) % MOD
            return res
        
        def modinv(n):
            return pow(n, MOD - 2, MOD)
        
        count = [0] * 26
        n = len(s)
        res = 0
        
        for i in range(n - 1, -1, -1):
            count[ord(s[i]) - ord('a')] += 1
            prefix_count = sum(count[:ord(s[i]) - ord('a')])
            suffix_count = sum(count[ord(s[i]) - ord('a') + 1:])
            numerator = fact(n - i - 1)
            denominator = (fact(prefix_count) * fact(suffix_count) % MOD)
            denominator = modinv(denominator)
            res = (res + (numerator * denominator) % MOD) % MOD
        
        return res"
False,0,0,1944,,Truncate Sentence,truncate-sentence,False,98869,119115,1816,False,1,"Can you solve this real interview question? Truncate Sentence - A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).

 * For example, ""Hello World"", ""HELLO"", and ""hello world hello world"" are all sentences.

You are given a sentence s and an integer k . You want to truncate s such that it contains only the first k words. Return s after truncating it.

 

Example 1:


Input: s = ""Hello how are you Contestant"", k = 4
Output: ""Hello how are you""
Explanation:
The words in s are [""Hello"", ""how"" ""are"", ""you"", ""Contestant""].
The first 4 words are [""Hello"", ""how"", ""are"", ""you""].
Hence, you should return ""Hello how are you"".


Example 2:


Input: s = ""What is the solution to this problem"", k = 4
Output: ""What is the solution""
Explanation:
The words in s are [""What"", ""is"" ""the"", ""solution"", ""to"", ""this"", ""problem""].
The first 4 words are [""What"", ""is"", ""the"", ""solution""].
Hence, you should return ""What is the solution"".

Example 3:


Input: s = ""chopper is not a tanuki"", k = 5
Output: ""chopper is not a tanuki""


 

Constraints:

 * 1 <= s.length <= 500
 * k is in the range [1, the number of words in s].
 * s consist of only lowercase and uppercase English letters and spaces.
 * The words in s are separated by a single space.
 * There are no leading or trailing spaces.",Solutions (2.1K),831,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/truncate-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def truncateSentence(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().truncateSentence(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def truncateSentence(self, s: str, k: int) -> str:
        return "" "".join(s.split()[:k])"
False,0,0,1945,,Finding the Users Active Minutes,finding-the-users-active-minutes,False,46126,57349,1817,False,2,"Can you solve this real interview question? Finding the Users Active Minutes - You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.

Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.

You are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.

Return the array answer as described above.

 

Example 1:


Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
Output: [0,2,0,0,0]
Explanation:
The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).
The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.


Example 2:


Input: logs = [[1,1],[2,2],[2,3]], k = 4
Output: [1,1,0,0]
Explanation:
The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.
The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.
There is one user with a UAM of 1 and one with a UAM of 2.
Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.


 

Constraints:

 * 1 <= logs.length <= 104
 * 0 <= IDi <= 109
 * 1 <= timei <= 105
 * k is in the range [The maximum UAM for a user, 105].",Solutions (740),677,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/finding-the-users-active-minutes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    logs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findingUsersActiveMinutes(logs, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findingUsersActiveMinutes(self, logs: List[List[int]], k: int) -> List[int]:
        user_dict = {}
        for log in logs:
            if log[0] not in user_dict:
                user_dict[log[0]] = set()
            user_dict[log[0]].add(log[1])
        
        answer = [0] * k
        for user_id in user_dict:
            uam = len(user_dict[user_id])
            answer[uam - 1] += 1
        
        return answer"
False,0,0,1946,,Minimum Absolute Sum Difference,minimum-absolute-sum-difference,False,20456,67437,1818,False,2,"Can you solve this real interview question? Minimum Absolute Sum Difference - You are given two positive integer arrays nums1 and nums2, both of length n.

The absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).

You can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.

|x| is defined as:

 * x if x >= 0, or
 * -x if x < 0.

 

Example 1:


Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- Replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].
Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.


Example 2:


Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
Output: 0
Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
absolute sum difference of 0.


Example 3:


Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].
This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20


 

Constraints:

 * n == nums1.length
 * n == nums2.length
 * 1 <= n <= 105
 * 1 <= nums1[i], nums2[i] <= 105",Solutions (307),852,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-absolute-sum-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minAbsoluteSumDiff(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minAbsoluteSumDiff(self, nums1: List[int], nums2: List[int]) -> int:
        MOD = 10**9 + 7
        sorted_nums1 = sorted(nums1)
        def binary_search(x):
            l, r = 0, len(sorted_nums1) - 1
            while l < r:
                mid = (l + r) // 2
                if sorted_nums1[mid] < x:
                    l = mid + 1
                else:
                    r = mid
            return l
        res = 0
        max_reduce = 0
        for i in range(len(nums1)):
            diff = abs(nums1[i] - nums2[i])
            res += diff
            j = binary_search(nums2[i])
            if j < len(sorted_nums1):
                max_reduce = max(max_reduce, diff - (sorted_nums1[j] - nums2[i]))
            if j > 0:
                max_reduce = max(max_reduce, diff - (nums2[i] - sorted_nums1[j - 1]))
        return (res - max_reduce) % MOD"
False,0,0,1947,,Number of Different Subsequences GCDs,number-of-different-subsequences-gcds,False,7285,18648,1819,False,3,"Can you solve this real interview question? Number of Different Subsequences GCDs - You are given an array nums that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

 * For example, the GCD of the sequence [4,6,16] is 2.

A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

 * For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].

Return the number of different GCDs among all non-empty subsequences of nums.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/17/image-1.png]


Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all the non-empty subsequences and their GCDs.
The different GCDs are 6, 10, 3, 2, and 1.


Example 2:


Input: nums = [5,15,40,5,6]
Output: 7


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 2 * 105",Solutions (75),350,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-different-subsequences-gcds/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countDifferentSubsequenceGCDs(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDifferentSubsequenceGCDs(self, nums: List[int]) -> int:
        pass"
False,0,0,1950,,Sign of the Product of an Array,sign-of-the-product-of-an-array,False,162532,249332,1822,False,1,"Can you solve this real interview question? Sign of the Product of an Array - There is a function signFunc(x) that returns:

 * 1 if x is positive.
 * -1 if x is negative.
 * 0 if x is equal to 0.

You are given an integer array nums. Let product be the product of all values in the array nums.

Return signFunc(product).

 

Example 1:


Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1


Example 2:


Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0


Example 3:


Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1


 

Constraints:

 * 1 <= nums.length <= 1000
 * -100 <= nums[i] <= 100",Solutions (2K),953,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sign-of-the-product-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arraySign(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().arraySign(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def arraySign(self, nums: List[int]) -> int:
        product = 1
        for num in nums:
            product *= num
        if product > 0:
            return 1
        elif product < 0:
            return -1
        else:
            return 0"
False,0,0,1951,,Find the Winner of the Circular Game,find-the-winner-of-the-circular-game,False,87318,111696,1823,False,2,"Can you solve this real interview question? Find the Winner of the Circular Game - There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

 1. Start at the 1st friend.
 2. Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
 3. The last friend you counted leaves the circle and loses the game.
 4. If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
 5. Else, the last friend in the circle wins the game.

Given the number of friends, n, and an integer k, return the winner of the game.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png]


Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.

Example 2:


Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.


 

Constraints:

 * 1 <= k <= n <= 500

 

Follow up:

Could you solve this problem in linear time with constant space?",Solutions (1.3K),2.3K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-winner-of-the-circular-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheWinner(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findTheWinner(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findTheWinner(self, n: int, k: int) -> int:
        friends = list(range(1, n + 1))
        index = 0
        
        while len(friends) > 1:
            index = (index + k - 1) % len(friends)
            friends.pop(index)
        
        return friends[0]"
False,0,0,1952,,Minimum Sideway Jumps,minimum-sideway-jumps,False,26555,53774,1824,False,2,"Can you solve this real interview question? Minimum Sideway Jumps - There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.

You are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.

 * For example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.

The frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.

 * For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.

Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.

Note: There will be no obstacles on points 0 and n.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png]


Input: obstacles = [0,1,2,3,0]
Output: 2 
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).
Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).


Example 2:

[https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png]


Input: obstacles = [0,1,1,3,3,0]
Output: 0
Explanation: There are no obstacles on lane 2. No side jumps are required.


Example 3:

[https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png]


Input: obstacles = [0,2,1,0,3,0]
Output: 2
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.


 

Constraints:

 * obstacles.length == n + 1
 * 1 <= n <= 5 * 105
 * 0 <= obstacles[i] <= 3
 * obstacles[0] == obstacles[n] == 0",Solutions (379),901,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-sideway-jumps/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSideJumps(self, obstacles: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    obstacles: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSideJumps(obstacles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSideJumps(self, obstacles: List[int]) -> int:
        n = len(obstacles) - 1
        dp = [1, 0, 1]
        
        for i in range(1, n):
            if obstacles[i] == 0:
                dp = [min(dp[0] + 1, dp[1] + 1, dp[2]), min(dp[0], dp[1] + 1, dp[2]), min(dp[0] + 1, dp[1], dp[2])]
            elif obstacles[i] == 1:
                dp = [dp[0], float('inf'), dp[2]]
            elif obstacles[i] == 2:
                dp = [dp[0], dp[1], float('inf')]
            elif obstacles[i] == 3:
                dp = [float('inf'), dp[1], dp[2]]
        
        return min(dp)"
False,0,0,1954,,Replace All Digits with Characters,replace-all-digits-with-characters,False,59396,74017,1844,False,1,"Can you solve this real interview question? Replace All Digits with Characters - You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.

There is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.

 * For example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.

For every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).

Return s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.

 

Example 1:


Input: s = ""a1c1e1""
Output: ""abcdef""
Explanation: The digits are replaced as follows:
- s[1] -> shift('a',1) = 'b'
- s[3] -> shift('c',1) = 'd'
- s[5] -> shift('e',1) = 'f'

Example 2:


Input: s = ""a1b2c3d4e""
Output: ""abbdcfdhe""
Explanation: The digits are replaced as follows:
- s[1] -> shift('a',1) = 'b'
- s[3] -> shift('b',2) = 'd'
- s[5] -> shift('c',3) = 'f'
- s[7] -> shift('d',4) = 'h'

 

Constraints:

 * 1 <= s.length <= 100
 * s consists only of lowercase English letters and digits.
 * shift(s[i-1], s[i]) <= 'z' for all odd indices i.",Solutions (1.3K),636,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-all-digits-with-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def replaceDigits(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().replaceDigits(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def replaceDigits(self, s: str) -> str:
        def shift(c, x):
            return chr(ord(c) + int(x))

        result = []
        for i in range(len(s)):
            if i % 2 == 0:
                result.append(s[i])
            else:
                result.append(shift(s[i-1], s[i]))
        
        return """".join(result)"
False,0,0,1956,,Maximum Element After Decreasing and Rearranging,maximum-element-after-decreasing-and-rearranging,False,18954,32182,1846,False,2,"Can you solve this real interview question? Maximum Element After Decreasing and Rearranging - You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:

 * The value of the first element in arr must be 1.
 * The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.

There are 2 types of operations that you can perform any number of times:

 * Decrease the value of any element of arr to a smaller positive integer.
 * Rearrange the elements of arr to be in any order.

Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.

 

Example 1:


Input: arr = [2,2,1,2,1]
Output: 2
Explanation: 
We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].
The largest element in arr is 2.


Example 2:


Input: arr = [100,1,1000]
Output: 3
Explanation: 
One possible way to satisfy the conditions is by doing the following:
1. Rearrange arr so it becomes [1,100,1000].
2. Decrease the value of the second element to 2.
3. Decrease the value of the third element to 3.
Now arr = [1,2,3], which satisfies the conditions.
The largest element in arr is 3.


Example 3:


Input: arr = [1,2,3,4,5]
Output: 5
Explanation: The array already satisfies the conditions, and the largest element is 5.


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i] <= 109",Solutions (311),308,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumElementAfterDecrementingAndRearranging(arr)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumElementAfterDecrementingAndRearranging(self, arr: List[int]) -> int:
        arr.sort()
        n = len(arr)
        arr[0] = 1
        for i in range(1, n):
            arr[i] = min(arr[i], arr[i-1] + 1)
        return arr[-1]"
False,0,0,1957,,Closest Room,closest-room,False,7027,19766,1847,False,3,"Can you solve this real interview question? Closest Room - There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.

You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that:

 * The room has a size of at least minSizej, and
 * abs(id - preferredj) is minimized, where abs(x) is the absolute value of x.

If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.

Return an array answer of length k where answer[j] contains the answer to the jth query.

 

Example 1:


Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]
Output: [3,-1,3]
Explanation: The answers to the queries are as follows:
Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.

Example 2:


Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]
Output: [2,1,3]
Explanation: The answers to the queries are as follows:
Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.

 

Constraints:

 * n == rooms.length
 * 1 <= n <= 105
 * k == queries.length
 * 1 <= k <= 104
 * 1 <= roomIdi, preferredj <= 107
 * 1 <= sizei, minSizej <= 107",Solutions (107),431,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/closest-room/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    rooms: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().closestRoom(rooms, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def closestRoom(self, rooms: List[List[int]], queries: List[List[int]]) -> List[int]:
        import bisect
        
        rooms.sort(key=lambda x: x[1], reverse=True)
        res = []
        
        for pref, size in queries:
            valid = [(abs(rid - pref), rid) for rid, s in rooms if s >= size]
            valid.sort()
            
            if valid:
                res.append(valid[0][1])
            else:
                res.append(-1)
        
        return res"
False,0,0,1960,check-if-the-sentence-is-pangram,Check if the Sentence Is Pangram,check-if-the-sentence-is-pangram,False,222284,266023,1832,False,1,"Can you solve this real interview question? Check if the Sentence Is Pangram - A pangram is a sentence where every letter of the English alphabet appears at least once.

Given a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.

 

Example 1:


Input: sentence = ""thequickbrownfoxjumpsoverthelazydog""
Output: true
Explanation: sentence contains at least one of every letter of the English alphabet.


Example 2:


Input: sentence = ""leetcode""
Output: false


 

Constraints:

 * 1 <= sentence.length <= 1000
 * sentence consists of lowercase English letters.",Solutions (3.5K),2.2K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-the-sentence-is-pangram/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkIfPangram(self, sentence: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    ans = Solution().checkIfPangram(sentence)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkIfPangram(self, sentence: str) -> bool:
        return len(set(sentence)) == 26"
False,0,0,1961,maximum-ice-cream-bars,Maximum Ice Cream Bars,maximum-ice-cream-bars,False,138162,186743,1833,False,2,"Can you solve this real interview question? Maximum Ice Cream Bars - It is a sweltering summer day, and a boy wants to buy some ice cream bars.

At the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible. 

Note: The boy can buy the ice cream bars in any order.

Return the maximum number of ice cream bars the boy can buy with coins coins.

You must solve the problem by counting sort.

 

Example 1:


Input: costs = [1,3,2,4,1], coins = 7
Output: 4
Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.


Example 2:


Input: costs = [10,6,8,7,7,8], coins = 5
Output: 0
Explanation: The boy cannot afford any of the ice cream bars.


Example 3:


Input: costs = [1,6,3,1,2,5], coins = 20
Output: 6
Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.


 

Constraints:

 * costs.length == n
 * 1 <= n <= 105
 * 1 <= costs[i] <= 105
 * 1 <= coins <= 108",Solutions (2.8K),2K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-ice-cream-bars/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxIceCream(self, costs: List[int], coins: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    costs: List[int] = deserialize(""List[int]"", read_line())
    coins: int = deserialize(""int"", read_line())
    ans = Solution().maxIceCream(costs, coins)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxIceCream(self, costs: List[int], coins: int) -> int:
        count = [0] * 100001
        for cost in costs:
            count[cost] += 1
        bars = 0
        for i in range(1, len(count)):
            if coins >= i:
                buy = min(count[i], coins // i)
                bars += buy
                coins -= buy * i
            else:
                break
        return bars"
False,0,0,1962,single-threaded-cpu,Single-Threaded CPU,single-threaded-cpu,False,86500,189046,1834,False,2,"Can you solve this real interview question? Single-Threaded CPU - You are given n tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i th task will be available to process at enqueueTimei and will take processingTimei to finish processing.

You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

 * If the CPU is idle and there are no available tasks to process, the CPU remains idle.
 * If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
 * Once a task is started, the CPU will process the entire task without stopping.
 * The CPU can finish a task then start a new one instantly.

Return the order in which the CPU will process the tasks.

 

Example 1:


Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.


Example 2:


Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]
Output: [4,3,2,0,1]
Explanation: The events go as follows:
- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.
- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.
- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.
- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.
- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.
- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.
- At time = 40, the CPU finishes task 1 and becomes idle.


 

Constraints:

 * tasks.length == n
 * 1 <= n <= 105
 * 1 <= enqueueTimei, processingTimei <= 109",Solutions (966),2.8K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/single-threaded-cpu/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getOrder(self, tasks: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getOrder(tasks)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","from typing import List

class Solution:
    def getOrder(self, tasks: List[List[int]]) -> List[int]:
        # Enter your solution here"
False,0,0,1963,,Find XOR Sum of All Pairs Bitwise AND,find-xor-sum-of-all-pairs-bitwise-and,False,14723,24207,1835,False,3,"Can you solve this real interview question? Find XOR Sum of All Pairs Bitwise AND - The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.

 * For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.

You are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.

Consider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.

Return the XOR sum of the aforementioned list.

 

Example 1:


Input: arr1 = [1,2,3], arr2 = [6,5]
Output: 0
Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].
The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.


Example 2:


Input: arr1 = [12], arr2 = [4]
Output: 4
Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.


 

Constraints:

 * 1 <= arr1.length, arr2.length <= 105
 * 0 <= arr1[i], arr2[j] <= 109",Solutions (248),502,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr1: List[int] = deserialize(""List[int]"", read_line())
    arr2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getXORSum(arr1, arr2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getXORSum(self, arr1: List[int], arr2: List[int]) -> int:
        xor_arr1 = functools.reduce(lambda x, y: x ^ y, arr1)
        xor_arr2 = functools.reduce(lambda x, y: x ^ y, arr2)
        
        return xor_arr1 & xor_arr2"
False,0,0,1965,,Sum of Digits in Base K,sum-of-digits-in-base-k,False,38730,50303,1837,False,1,"Can you solve this real interview question? Sum of Digits in Base K - Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.

After converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.

 

Example 1:


Input: n = 34, k = 6
Output: 9
Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.


Example 2:


Input: n = 10, k = 10
Output: 1
Explanation: n is already in base 10. 1 + 0 = 1.


 

Constraints:

 * 1 <= n <= 100
 * 2 <= k <= 10",Solutions (697),416,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-digits-in-base-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumBase(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().sumBase(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumBase(self, n: int, k: int) -> int:
        return sum(int(digit) for digit in str(n)) if k != 10 else int(sum(int(digit) for digit in str(n)))"
False,0,0,1966,,Frequency of the Most Frequent Element,frequency-of-the-most-frequent-element,False,40281,102635,1838,False,2,"Can you solve this real interview question? Frequency of the Most Frequent Element - The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.

Return the maximum possible frequency of an element after performing at most k operations.

 

Example 1:


Input: nums = [1,2,4], k = 5
Output: 3
Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].
4 has a frequency of 3.

Example 2:


Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.


Example 3:


Input: nums = [3,9,6], k = 2
Output: 1


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105
 * 1 <= k <= 105",Solutions (419),2.2K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/frequency-of-the-most-frequent-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxFrequency(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxFrequency(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxFrequency(self, nums: List[int], k: int) -> int:
        nums.sort()
        res = left = 0
        for right in range(len(nums)):
            k += nums[right]
            while k < nums[right] * (right - left + 1):
                k -= nums[left]
                left += 1
            res = max(res, right - left + 1)
        return res"
False,0,0,1967,,Longest Substring Of All Vowels in Order,longest-substring-of-all-vowels-in-order,False,24216,49773,1839,False,2,"Can you solve this real interview question? Longest Substring Of All Vowels in Order - A string is considered beautiful if it satisfies the following conditions:

 * Each of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.
 * The letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).

For example, strings ""aeiou"" and ""aaaaaaeiiiioou"" are considered beautiful, but ""uaeio"", ""aeoiu"", and ""aaaeeeooo"" are not beautiful.

Given a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: word = ""aeiaaioaaaaeiiiiouuuooaauuaeiu""
Output: 13
Explanation: The longest beautiful substring in word is ""aaaaeiiiiouuu"" of length 13.

Example 2:


Input: word = ""aeeeiiiioooauuuaeiou""
Output: 5
Explanation: The longest beautiful substring in word is ""aeiou"" of length 5.


Example 3:


Input: word = ""a""
Output: 0
Explanation: There is no beautiful substring, so return 0.


 

Constraints:

 * 1 <= word.length <= 5 * 105
 * word consists of characters 'a', 'e', 'i', 'o', and 'u'.",Solutions (458),603,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-substring-of-all-vowels-in-order/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestBeautifulSubstring(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().longestBeautifulSubstring(word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestBeautifulSubstring(self, word: str) -> int:
        vowels = ['a', 'e', 'i', 'o', 'u']
        longest_substring = 0
        current_substring = set()
        prev_vowel = ''
        count = 0
        
        for char in word:
            if char == 'a':
                if prev_vowel == '' or prev_vowel == 'u':
                    current_substring.add('a')
                else:
                    current_substring = set('a')
                prev_vowel = 'a'
            elif char == 'e':
                if prev_vowel == 'a' or prev_vowel == 'u':
                    current_substring.add('e')
                else:
                    current_substring = set('e')
                prev_vowel = 'e'
            elif char == 'i':
                if prev_vowel == 'e' or prev_vowel == 'u':
                    current_substring.add('i')
                else:
                    current_substring = set('i')
                prev_vowel = 'i'
            elif char == 'o':
                if prev_vowel == 'i' or prev_vowel == 'u':
                    current_substring.add('o')
                else:
                    current_substring = set('o')
                prev_vowel = 'o'
            elif char == 'u':
                if prev_vowel == 'o':
                    current_substring.add('u')
                else:
                    current_substring = set('u')
                prev_vowel = 'u'
            if current_substring == set(vowels):
                longest_substring = max(longest_substring, len(current_substring))
        
        return longest_substring"
False,0,0,1968,,Maximum Building Height,maximum-building-height,False,6056,17038,1840,False,3,"Can you solve this real interview question? Maximum Building Height - You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.

However, there are city restrictions on the heights of the new buildings:

 * The height of each building must be a non-negative integer.
 * The height of the first building must be 0.
 * The height difference between any two adjacent buildings cannot exceed 1.

Additionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.

It is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.

Return the maximum possible height of the tallest building.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex1-1.png]


Input: n = 5, restrictions = [[2,1],[4,1]]
Output: 2
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.

Example 2:

[https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex2.png]


Input: n = 6, restrictions = []
Output: 5
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.


Example 3:

[https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex3.png]


Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]
Output: 5
Explanation: The green area in the image indicates the maximum allowed height for each building.
We can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.


 

Constraints:

 * 2 <= n <= 109
 * 0 <= restrictions.length <= min(n - 1, 105)
 * 2 <= idi <= n
 * idi is unique.
 * 0 <= maxHeighti <= 109",Solutions (69),328,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-building-height/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    restrictions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxBuilding(n, restrictions)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxBuilding(self, n: int, restrictions: List[List[int]]) -> int:
        restrictions.sort()
        
        restrictions = [[1,0]] + restrictions + [[n, n-1]]
        for i in range(1, len(restrictions)):
            restrictions[i][1] = min(restrictions[i][1], restrictions[i-1][1] + restrictions[i][0] - restrictions[i-1][0])
        
        for i in range(len(restrictions)-2, -1, -1):
            restrictions[i][1] = min(restrictions[i][1], restrictions[i+1][1] + restrictions[i+1][0] - restrictions[i][0])
        
        res = 0
        for i in range(1, len(restrictions)):
            res = max(res, (restrictions[i][0] + restrictions[i-1][0] + abs(restrictions[i][1] - restrictions[i-1][1])) // 2)
        
        return res"
False,0,0,1970,,Sorting the Sentence,sorting-the-sentence,False,109396,130083,1859,False,1,"Can you solve this real interview question? Sorting the Sentence - A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.

A sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.

 * For example, the sentence ""This is a sentence"" can be shuffled as ""sentence4 a3 is2 This1"" or ""is2 sentence4 This1 a3"".

Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.

 

Example 1:


Input: s = ""is2 sentence4 This1 a3""
Output: ""This is a sentence""
Explanation: Sort the words in s to their original positions ""This1 is2 a3 sentence4"", then remove the numbers.


Example 2:


Input: s = ""Myself2 Me1 I4 and3""
Output: ""Me Myself and I""
Explanation: Sort the words in s to their original positions ""Me1 Myself2 and3 I4"", then remove the numbers.


 

Constraints:

 * 2 <= s.length <= 200
 * s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.
 * The number of words in s is between 1 and 9.
 * The words in s are separated by a single space.
 * s contains no leading or trailing spaces.",Solutions (2.5K),1.7K,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/sorting-the-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortSentence(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().sortSentence(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def sortSentence(self, s: str) -> str:
        words = s.split()
        words.sort(key=lambda x: int(x[-1]))
        return ' '.join([word[:-1] for word in words])"
False,0,0,1971,,Incremental Memory Leak,incremental-memory-leak,False,15413,21519,1860,False,2,"Can you solve this real interview question? Incremental Memory Leak - You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.

At the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.

Return an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.

 

Example 1:


Input: memory1 = 2, memory2 = 2
Output: [3,1,0]
Explanation: The memory is allocated as follows:
- At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.
- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.
- At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.


Example 2:


Input: memory1 = 8, memory2 = 11
Output: [6,0,4]
Explanation: The memory is allocated as follows:
- At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.
- At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.
- At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.
- At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.
- At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.
- At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.


 

Constraints:

 * 0 <= memory1, memory2 <= 231 - 1",Solutions (243),178,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/incremental-memory-leak/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def memLeak(self, memory1: int, memory2: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    memory1: int = deserialize(""int"", read_line())
    memory2: int = deserialize(""int"", read_line())
    ans = Solution().memLeak(memory1, memory2)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def memLeak(self, memory1: int, memory2: int) -> List[int]:
        time = 1
        while memory1 >= time or memory2 >= time:
            if memory1 >= memory2:
                memory1 -= time
            else:
                memory2 -= time
            time += 1
        return [time, memory1, memory2]"
False,0,0,1972,,Rotating the Box,rotating-the-box,False,39891,61061,1861,False,2,"Can you solve this real interview question? Rotating the Box - You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:

 * A stone '#'
 * A stationary obstacle '*'
 * Empty '.'

The box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.

It is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.

Return an n x m matrix representing the box after the rotation described above.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png]


Input: box = [[""#"",""."",""#""]]
Output: [["".""],
         [""#""],
         [""#""]]


Example 2:

[https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png]


Input: box = [[""#"",""."",""*"","".""],
              [""#"",""#"",""*"","".""]]
Output: [[""#"","".""],
         [""#"",""#""],
         [""*"",""*""],
         [""."","".""]]


Example 3:

[https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png]


Input: box = [[""#"",""#"",""*"",""."",""*"","".""],
              [""#"",""#"",""#"",""*"",""."","".""],
              [""#"",""#"",""#"",""."",""#"","".""]]
Output: [[""."",""#"",""#""],
         [""."",""#"",""#""],
         [""#"",""#"",""*""],
         [""#"",""*"","".""],
         [""#"",""."",""*""],
         [""#"",""."","".""]]


 

Constraints:

 * m == box.length
 * n == box[i].length
 * 1 <= m, n <= 500
 * box[i][j] is either '#', '*', or '.'.",Solutions (453),805,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/rotating-the-box/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    box: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().rotateTheBox(box)
    print(""\noutput:"", serialize(ans, ""character[][]""))
","class Solution:
    def rotateTheBox(self, box: List[List[str]]) -> List[List[str]]:
        def rotate_box(box):
            rotated = [['.'] * len(box) for _ in range(len(box[0]))]
            for i in range(len(box)):
                for j in range(len(box[0])-1, -1, -1):
                    if box[i][j] == '#':
                        k = j
                        while k+1 < len(box[0]) and rotated[k+1][i] == '.':
                            k += 1
                        rotated[k][i] = '#'
                    elif box[i][j] == '*':
                        rotated[j][i] = '*'
            return rotated
        
        return rotate_box(box)"
False,0,0,1975,,Minimum Distance to the Target Element,minimum-distance-to-the-target-element,False,33219,57445,1848,False,1,"Can you solve this real interview question? Minimum Distance to the Target Element - Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that abs(x) is the absolute value of x.

Return abs(i - start).

It is guaranteed that target exists in nums.

 

Example 1:


Input: nums = [1,2,3,4,5], target = 5, start = 3
Output: 1
Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.


Example 2:


Input: nums = [1], target = 1, start = 0
Output: 0
Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.


Example 3:


Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0
Output: 0
Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 104
 * 0 <= start < nums.length
 * target is in nums.",Solutions (537),279,"# Created by asetti2002 at 2024/04/17 02:09
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-distance-to-the-target-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    start: int = deserialize(""int"", read_line())
    ans = Solution().getMinDistance(nums, target, start)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMinDistance(self, nums: List[int], target: int, start: int) -> int:
        min_dist = len(nums)
        for i in range(len(nums)):
            if nums[i] == target:
                min_dist = min(min_dist, abs(i - start))
        return min_dist"
False,0,0,1976,,Splitting a String Into Descending Consecutive Values,splitting-a-string-into-descending-consecutive-values,False,18895,56932,1849,False,2,"Can you solve this real interview question? Splitting a String Into Descending Consecutive Values - You are given a string s that consists of only digits.

Check if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.

 * For example, the string s = ""0090089"" can be split into [""0090"", ""089""] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.
 * Another example, the string s = ""001"" can be split into [""0"", ""01""], [""00"", ""1""], or [""0"", ""0"", ""1""]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.

Return true if it is possible to split s as described above, or false otherwise.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = ""1234""
Output: false
Explanation: There is no valid way to split s.


Example 2:


Input: s = ""050043""
Output: true
Explanation: s can be split into [""05"", ""004"", ""3""] with numerical values [5,4,3].
The values are in descending order with adjacent values differing by 1.


Example 3:


Input: s = ""9080701""
Output: false
Explanation: There is no valid way to split s.


 

Constraints:

 * 1 <= s.length <= 20
 * s only consists of digits.",Solutions (298),421,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitString(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().splitString(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def splitString(self, s: str) -> bool:
        def dfs(start, prev):
            if start == len(s):
                return True
            for i in range(start + 1, len(s) + 1):
                num = int(s[start:i])
                if num == prev - 1:
                    if dfs(i, num):
                        return True
            return False
        for i in range(1, len(s)):
            num = int(s[:i])
            if dfs(i, num):
                return True
        return False"
False,0,0,1977,,Minimum Interval to Include Each Query,minimum-interval-to-include-each-query,False,16199,33606,1851,False,3,"Can you solve this real interview question? Minimum Interval to Include Each Query - You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.

You are also given an integer array queries. The answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.

Return an array containing the answers to the queries.

 

Example 1:


Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]
Output: [3,3,1,4]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.
- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.
- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.
- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.


Example 2:


Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]
Output: [2,-1,4,6]
Explanation: The queries are processed as follows:
- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.
- Query = 19: None of the intervals contain 19. The answer is -1.
- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.
- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.


 

Constraints:

 * 1 <= intervals.length <= 105
 * 1 <= queries.length <= 105
 * intervals[i].length == 2
 * 1 <= lefti <= righti <= 107
 * 1 <= queries[j] <= 107",Solutions (163),637,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-interval-to-include-each-query/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minInterval(intervals, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def minInterval(self, intervals: List[List[int]], queries: List[int]) -> List[int]:
        res = []
        for q in queries:
            min_size = -1
            for i, (left, right) in enumerate(intervals):
                if left <= q <= right:
                    size = right - left + 1
                    if min_size == -1 or size < min_size:
                        min_size = size
            res.append(min_size)
        return res"
False,0,0,1978,,Minimum Adjacent Swaps to Reach the Kth Smallest Number,minimum-adjacent-swaps-to-reach-the-kth-smallest-number,False,17578,24480,1850,False,2,"Can you solve this real interview question? Minimum Adjacent Swaps to Reach the Kth Smallest Number - You are given a string num, representing a large integer, and an integer k.

We call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.

 * For example, when num = ""5489355142"":
   * The 1st smallest wonderful integer is ""5489355214"".
   * The 2nd smallest wonderful integer is ""5489355241"".
   * The 3rd smallest wonderful integer is ""5489355412"".
   * The 4th smallest wonderful integer is ""5489355421"".

Return the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.

The tests are generated in such a way that kth smallest wonderful integer exists.

 

Example 1:


Input: num = ""5489355142"", k = 4
Output: 2
Explanation: The 4th smallest wonderful number is ""5489355421"". To get this number:
- Swap index 7 with index 8: ""5489355142"" -> ""5489355412""
- Swap index 8 with index 9: ""5489355412"" -> ""5489355421""


Example 2:


Input: num = ""11112"", k = 4
Output: 4
Explanation: The 4th smallest wonderful number is ""21111"". To get this number:
- Swap index 3 with index 4: ""11112"" -> ""11121""
- Swap index 2 with index 3: ""11121"" -> ""11211""
- Swap index 1 with index 2: ""11211"" -> ""12111""
- Swap index 0 with index 1: ""12111"" -> ""21111""


Example 3:


Input: num = ""00123"", k = 1
Output: 1
Explanation: The 1st smallest wonderful number is ""00132"". To get this number:
- Swap index 3 with index 4: ""00123"" -> ""00132""


 

Constraints:

 * 2 <= num.length <= 1000
 * 1 <= k <= 1000
 * num only consists of digits.",Solutions (162),649,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getMinSwaps(self, num: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getMinSwaps(num, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getMinSwaps(self, num: str, k: int) -> int:
        pass  # Your implementation here"
False,0,0,1983,,Maximum Population Year,maximum-population-year,False,47108,78431,1854,False,1,"Can you solve this real interview question? Maximum Population Year - You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.

The population of some year x is the number of people alive during that year. The ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.

Return the earliest year with the maximum population.

 

Example 1:


Input: logs = [[1993,1999],[2000,2010]]
Output: 1993
Explanation: The maximum population is 1, and 1993 is the earliest year with this population.


Example 2:


Input: logs = [[1950,1961],[1960,1971],[1970,1981]]
Output: 1960
Explanation: 
The maximum population is 2, and it had happened in years 1960 and 1970.
The earlier year between them is 1960.

 

Constraints:

 * 1 <= logs.length <= 100
 * 1950 <= birthi < deathi <= 2050",Solutions (632),944,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-population-year/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumPopulation(self, logs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    logs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumPopulation(logs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumPopulation(self, logs: List[List[int]]) -> int:
        years = []
        for log in logs:
            years.append((log[0], 1))
            years.append((log[1], -1))
        years.sort()
        
        population = 0
        max_population = 0
        max_year = 0
        
        for year in years:
            population += year[1]
            if population > max_population:
                max_population = population
                max_year = year[0]
        
        return max_year"
False,0,0,1984,maximum-distance-between-a-pair-of-values,Maximum Distance Between a Pair of Values,maximum-distance-between-a-pair-of-values,False,40289,75838,1855,False,2,"Can you solve this real interview question? Maximum Distance Between a Pair of Values - You are given two non-increasing 0-indexed integer arrays nums1 and nums2 .

A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i .

Return the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.

An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.

 

Example 1:


Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
Output: 2
Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).
The maximum distance is 2 with pair (2,4).


Example 2:


Input: nums1 = [2,2,2], nums2 = [10,10,1]
Output: 1
Explanation: The valid pairs are (0,0), (0,1), and (1,1).
The maximum distance is 1 with pair (0,1).


Example 3:


Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
Output: 2
Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
The maximum distance is 2 with pair (2,4).


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * 1 <= nums1[i], nums2[j] <= 105
 * Both nums1 and nums2 are non-increasing.",Solutions (635),1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxDistance(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDistance(self, nums1: List[int], nums2: List[int]) -> int:
        res = 0
        i = 0
        for j in range(len(nums2)):
            while i < len(nums1) and nums1[i] > nums2[j]:
                i += 1
            if i < len(nums1):
                res = max(res, j - i)
        return res"
False,0,0,1985,,Maximum Subarray Min-Product,maximum-subarray-min-product,False,20477,54108,1856,False,2,"Can you solve this real interview question? Maximum Subarray Min-Product - The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.

 * For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.

Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.

Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [1,2,3,2]
Output: 14
Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).
2 * (2+3+2) = 2 * 7 = 14.


Example 2:


Input: nums = [2,3,3,1,2]
Output: 18
Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).
3 * (3+3) = 3 * 6 = 18.


Example 3:


Input: nums = [3,1,5,6,4,2]
Output: 60
Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).
4 * (5+6+4) = 4 * 15 = 60.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 107",Solutions (268),1.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-subarray-min-product/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSumMinProduct(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxSumMinProduct(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSumMinProduct(self, nums: List[int]) -> int:
        stack = []
        next_smaller_left = [-1] * len(nums)
        for i in range(len(nums)):
            while stack and nums[i] <= nums[stack[-1]]:
                stack.pop()
            if stack:
                next_smaller_left[i] = stack[-1]
            stack.append(i)
        
        stack = []
        next_smaller_right = [-1] * len(nums)
        for i in range(len(nums)-1, -1, -1):
            while stack and nums[i] <= nums[stack[-1]]:
                stack.pop()
            if stack:
                next_smaller_right[i] = stack[-1]
            stack.append(i)
        
        prefix_sum = [0] * len(nums)
        for i in range(len(nums)):
            prefix_sum[i] = nums[i] + prefix_sum[i-1] if i > 0 else nums[i]
        
        result = 0
        for i in range(len(nums)):
            left = next_smaller_left[i] + 1 if next_smaller_left[i] != -1 else 0
            right = next_smaller_right[i] - 1 if next_smaller_right[i] != -1 else len(nums) - 1
            min_num = nums[i]
            sum_subarray = prefix_sum[right] - prefix_sum[left-1] if left > 0 else prefix_sum[right]
            result = max(result, min_num * sum_subarray)
        
        return result % (10**9 + 7)"
False,0,0,1986,largest-color-value-in-a-directed-graph,Largest Color Value in a Directed Graph,largest-color-value-in-a-directed-graph,False,14955,36675,1857,False,3,"Can you solve this real interview question? Largest Color Value in a Directed Graph - There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.

You are given a string colors where colors[i] is a lowercase English letter representing the color of the ith node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.

A valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.

Return the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/21/leet1.png]


Input: colors = ""abaca"", edges = [[0,1],[0,2],[2,3],[3,4]]
Output: 3
Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored ""a"" (red in the above image).


Example 2:

[https://assets.leetcode.com/uploads/2021/04/21/leet2.png]


Input: colors = ""a"", edges = [[0,0]]
Output: -1
Explanation: There is a cycle from 0 to 0.


 

Constraints:

 * n == colors.length
 * m == edges.length
 * 1 <= n <= 105
 * 0 <= m <= 105
 * colors consists of lowercase English letters.
 * 0 <= aj, bj < n",Solutions (162),660,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-color-value-in-a-directed-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    colors: str = deserialize(""str"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestPathValue(colors, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:
        # Your implementation here"
False,0,0,1987,,Substrings of Size Three with Distinct Characters,substrings-of-size-three-with-distinct-characters,False,73698,103657,1876,False,1,"Can you solve this real interview question? Substrings of Size Three with Distinct Characters - A string is good if there are no repeated characters.

Given a string s , return the number of good substrings of length three in s .

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = ""xyzzaz""
Output: 1
Explanation: There are 4 substrings of size 3: ""xyz"", ""yzz"", ""zza"", and ""zaz"". 
The only good substring of length 3 is ""xyz"".


Example 2:


Input: s = ""aababcabc""
Output: 4
Explanation: There are 7 substrings of size 3: ""aab"", ""aba"", ""bab"", ""abc"", ""bca"", ""cab"", and ""abc"".
The good substrings are ""abc"", ""bca"", ""cab"", and ""abc"".


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of lowercase English letters.",Solutions (1.4K),1.1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGoodSubstrings(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countGoodSubstrings(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countGoodSubstrings(self, s: str) -> int:
        count = 0
        for i in range(len(s) - 2):
            if s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2]:
                count += 1
        return count"
False,0,0,1988,,Minimize Maximum Pair Sum in Array,minimize-maximum-pair-sum-in-array,False,70336,88003,1877,False,2,"Can you solve this real interview question? Minimize Maximum Pair Sum in Array - The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.

 * For example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.

Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:

 * Each element of nums is in exactly one pair, and
 * The maximum pair sum is minimized.

Return the minimized maximum pair sum after optimally pairing up the elements.

 

Example 1:


Input: nums = [3,5,2,3]
Output: 7
Explanation: The elements can be paired up into pairs (3,3) and (5,2).
The maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.


Example 2:


Input: nums = [3,5,4,2,4,6]
Output: 8
Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).
The maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.


 

Constraints:

 * n == nums.length
 * 2 <= n <= 105
 * n is even.
 * 1 <= nums[i] <= 105",Solutions (1.1K),1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minPairSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minPairSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minPairSum(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        for i in range(n // 2):
            res = max(res, nums[i] + nums[n - 1 - i])
        return res"
False,0,0,1989,,Minimum XOR Sum of Two Arrays,minimum-xor-sum-of-two-arrays,False,10441,23177,1879,False,3,"Can you solve this real interview question? Minimum XOR Sum of Two Arrays - You are given two integer arrays nums1 and nums2 of length n.

The XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).

 * For example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.

Rearrange the elements of nums2 such that the resulting XOR sum is minimized.

Return the XOR sum after the rearrangement.

 

Example 1:


Input: nums1 = [1,2], nums2 = [2,3]
Output: 2
Explanation: Rearrange nums2 so that it becomes [3,2].
The XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.

Example 2:


Input: nums1 = [1,0,3], nums2 = [5,3,4]
Output: 8
Explanation: Rearrange nums2 so that it becomes [5,4,3]. 
The XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.


 

Constraints:

 * n == nums1.length
 * n == nums2.length
 * 1 <= n <= 14
 * 0 <= nums1[i], nums2[i] <= 107",Solutions (172),554,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-xor-sum-of-two-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumXORSum(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumXORSum(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumXORSum(self, nums1: List[int], nums2: List[int]) -> int:
        pass"
False,0,0,1990,,Get Biggest Three Rhombus Sums in a Grid,get-biggest-three-rhombus-sums-in-a-grid,False,12415,26349,1878,False,2,"Can you solve this real interview question? Get Biggest Three Rhombus Sums in a Grid - You are given an m x n integer matrix grid .

A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid . The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:

[https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-desc-2.png]

Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.

Return the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex1.png]


Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
Output: [228,216,211]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 20 + 3 + 200 + 5 = 228
- Red: 200 + 2 + 10 + 4 = 216
- Green: 5 + 200 + 4 + 2 = 211


Example 2:

[https://assets.leetcode.com/uploads/2021/04/23/pc73-q4-ex2.png]


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: [20,9,8]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 4 + 2 + 6 + 8 = 20
- Red: 9 (area 0 rhombus in the bottom right corner)
- Green: 8 (area 0 rhombus in the bottom middle)


Example 3:


Input: grid = [[7,7,7]]
Output: [7]
Explanation: All three possible rhombus sums are the same, so return [7].


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 50
 * 1 <= grid[i][j] <= 105",Solutions (188),167,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().getBiggestThree(grid)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:
        pass"
False,0,0,1993,,Sum of All Subset XOR Totals,sum-of-all-subset-xor-totals,False,51952,64946,1863,False,1,"Can you solve this real interview question? Sum of All Subset XOR Totals - The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.

 * For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.

Given an array nums, return the sum of all XOR totals for every subset of nums. 

Note: Subsets with the same elements should be counted multiple times.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.

 

Example 1:


Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6


Example 2:


Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28


Example 3:


Input: nums = [3,4,5,6,7,8]
Output: 480
Explanation: The sum of all XOR totals for every subset is 480.


 

Constraints:

 * 1 <= nums.length <= 12
 * 1 <= nums[i] <= 20",Solutions (751),1.3K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-all-subset-xor-totals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subsetXORSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().subsetXORSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subsetXORSum(self, nums: List[int]) -> int:
        total_xor = 0
        n = len(nums)
        
        for i in range(1 << n):
            xor_val = 0
            for j in range(n):
                if i & (1 << j):
                    xor_val ^= nums[j]
            total_xor += xor_val
        
        return total_xor"
False,0,0,1994,,Minimum Number of Swaps to Make the Binary String Alternating,minimum-number-of-swaps-to-make-the-binary-string-alternating,False,22239,51938,1864,False,2,"Can you solve this real interview question? Minimum Number of Swaps to Make the Binary String Alternating - Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.

The string is called alternating if no two adjacent characters are equal. For example, the strings ""010"" and ""1010"" are alternating, while the string ""0100"" is not.

Any two characters may be swapped, even if they are not adjacent.

 

Example 1:


Input: s = ""111000""
Output: 1
Explanation: Swap positions 1 and 4: ""111000"" -> ""101010""
The string is now alternating.


Example 2:


Input: s = ""010""
Output: 0
Explanation: The string is already alternating, no swaps are needed.


Example 3:


Input: s = ""1110""
Output: -1


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either '0' or '1'.",Solutions (331),503,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwaps(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minSwaps(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwaps(self, s: str) -> int:
        def min_swaps_needed(s, target):
            return sum(1 for x, y in zip(s, target) if x != y)

        ones = s.count(""1"")
        zeros = s.count(""0"")

        if abs(ones - zeros) > 1:
            return -1

        target1 = ""10"" * (len(s) // 2)
        target2 = ""01"" * (len(s) // 2)
        if len(s) % 2 == 1:
            target1 += ""1""
            target2 += ""0""

        swaps1 = min_swaps_needed(s, target1)
        swaps2 = min_swaps_needed(s, target2)

        if ones > zeros:
            return swaps1
        elif zeros > ones:
            return swaps2
        else:
            return min(swaps1, swaps2)"
False,0,0,1996,,Number of Ways to Rearrange Sticks With K Sticks Visible,number-of-ways-to-rearrange-sticks-with-k-sticks-visible,False,10764,19353,1866,False,3,"Can you solve this real interview question? Number of Ways to Rearrange Sticks With K Sticks Visible - There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k sticks are visible from the left. A stick is visible from the left if there are no longer sticks to the left of it.

 * For example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.

Given n and k, return the number of such arrangements. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: n = 3, k = 2
Output: 3
Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.
The visible sticks are underlined.


Example 2:


Input: n = 5, k = 5
Output: 1
Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.
The visible sticks are underlined.


Example 3:


Input: n = 20, k = 11
Output: 647427950
Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.


 

Constraints:

 * 1 <= n <= 1000
 * 1 <= k <= n",Solutions (98),590,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-rearrange-sticks-with-k-sticks-visible/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rearrangeSticks(self, n: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().rearrangeSticks(n, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rearrangeSticks(self, n: int, k: int) -> int:
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        MOD = 10**9 + 7
        
        for i in range(1, n + 1):
            dp[i][i] = 1
        
        for i in range(2, n + 1):
            for j in range(1, min(i, k) + 1):
                dp[i][j] = (dp[i - 1][j - 1] + (i - 1) * dp[i - 1][j]) % MOD
        
        return dp[n][k]"
False,0,0,1999,,Longer Contiguous Segments of Ones than Zeros,longer-contiguous-segments-of-ones-than-zeros,False,37411,62036,1869,False,1,"Can you solve this real interview question? Longer Contiguous Segments of Ones than Zeros - Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.

 * For example, in s = ""110100010"" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.

Note that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.

 

Example 1:


Input: s = ""1101""
Output: true
Explanation:
The longest contiguous segment of 1s has length 2: ""1101""
The longest contiguous segment of 0s has length 1: ""1101""
The segment of 1s is longer, so return true.


Example 2:


Input: s = ""111000""
Output: false
Explanation:
The longest contiguous segment of 1s has length 3: ""111000""
The longest contiguous segment of 0s has length 3: ""111000""
The segment of 1s is not longer, so return false.


Example 3:


Input: s = ""110100010""
Output: false
Explanation:
The longest contiguous segment of 1s has length 2: ""110100010""
The longest contiguous segment of 0s has length 3: ""110100010""
The segment of 1s is not longer, so return false.


 

Constraints:

 * 1 <= s.length <= 100
 * s[i] is either '0' or '1'.",Solutions (765),424,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/longer-contiguous-segments-of-ones-than-zeros/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkZeroOnes(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkZeroOnes(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkZeroOnes(self, s: str) -> bool:
        ones = max(map(len, s.split('0')))
        zeros = max(map(len, s.split('1')))
        return ones > zeros"
False,0,0,2000,,Minimum Speed to Arrive on Time,minimum-speed-to-arrive-on-time,False,27926,72675,1870,False,2,"Can you solve this real interview question? Minimum Speed to Arrive on Time - You are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.

Each train can only depart at an integer hour, so you may need to wait in between each train ride.

 * For example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark.

Return the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.

Tests are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.

 

Example 1:


Input: dist = [1,3,2], hour = 6
Output: 1
Explanation: At speed 1:
- The first train ride takes 1/1 = 1 hour.
- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.
- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.
- You will arrive at exactly the 6 hour mark.


Example 2:


Input: dist = [1,3,2], hour = 2.7
Output: 3
Explanation: At speed 3:
- The first train ride takes 1/3 = 0.33333 hours.
- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.
- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.
- You will arrive at the 2.66667 hour mark.


Example 3:


Input: dist = [1,3,2], hour = 1.9
Output: -1
Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.


 

Constraints:

 * n == dist.length
 * 1 <= n <= 105
 * 1 <= dist[i] <= 105
 * 1 <= hour <= 109
 * There will be at most two digits after the decimal point in hour.",Solutions (402),767,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-speed-to-arrive-on-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dist: List[int] = deserialize(""List[int]"", read_line())
    hour: float = deserialize(""float"", read_line())
    ans = Solution().minSpeedOnTime(dist, hour)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSpeedOnTime(self, dist: List[int], hour: float) -> int:
        import math
        
        def checkTime(speed):
            total_time = 0
            for i in range(len(dist)-1):
                total_time += math.ceil(dist[i] / speed)
            total_time += dist[-1] / speed
            return total_time
        
        left, right = 1, 10**7
        res = -1
        
        while left <= right:
            mid = left + (right - left) // 2
            if checkTime(mid) <= hour:
                res = mid
                right = mid - 1
            else:
                left = mid + 1
        
        return res"
False,0,0,2001,,Jump Game VII,jump-game-vii,False,33803,135211,1871,False,2,"Can you solve this real interview question? Jump Game VII - You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled:

 * i + minJump <= j <= min(i + maxJump, s.length - 1), and
 * s[j] == '0'.

Return true if you can reach index s.length - 1 in s, or false otherwise.

 

Example 1:


Input: s = ""011010"", minJump = 2, maxJump = 3
Output: true
Explanation:
In the first step, move from index 0 to index 3. 
In the second step, move from index 3 to index 5.


Example 2:


Input: s = ""01101110"", minJump = 2, maxJump = 3
Output: false


 

Constraints:

 * 2 <= s.length <= 105
 * s[i] is either '0' or '1'.
 * s[0] == '0'
 * 1 <= minJump <= maxJump < s.length",Solutions (352),1.4K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/jump-game-vii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    minJump: int = deserialize(""int"", read_line())
    maxJump: int = deserialize(""int"", read_line())
    ans = Solution().canReach(s, minJump, maxJump)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canReach(self, s: str, minJump: int, maxJump: int) -> bool:
        dp = [False] * len(s)
        dp[0] = True
        pre_sum = [0] * len(s)
        pre_sum[0] = 1
        
        for i in range(1, len(s)):
            if i >= minJump:
                pre_sum[i] = pre_sum[i] + (pre_sum[i - minJump] - (pre_sum[i - maxJump - 1] if i - maxJump > 0 else 0))
            if pre_sum[i] > 0 and s[i] == '0':
                dp[i] = True
                
        return dp[-1]"
False,0,0,2002,,Stone Game VIII,stone-game-viii,False,7222,13709,1872,False,3,"Can you solve this real interview question? Stone Game VIII - Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:

 1. Choose an integer x > 1, and remove the leftmost x stones from the row.
 2. Add the sum of the removed stones' values to the player's score.
 3. Place a new stone, whose value is equal to that sum, on the left side of the row.

The game stops when only one stone is left in the row.

The score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.

Given an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between Alice and Bob if they both play optimally.

 

Example 1:


Input: stones = [-1,2,-3,4,-5]
Output: 5
Explanation:
- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of
  value 2 on the left. stones = [2,-5].
- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on
  the left. stones = [-3].
The difference between their scores is 2 - (-3) = 5.


Example 2:


Input: stones = [7,-6,5,10,5,-2,-6]
Output: 13
Explanation:
- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a
  stone of value 13 on the left. stones = [13].
The difference between their scores is 13 - 0 = 13.


Example 3:


Input: stones = [-10,-12]
Output: -22
Explanation:
- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her
  score and places a stone of value -22 on the left. stones = [-22].
The difference between their scores is (-22) - 0 = -22.


 

Constraints:

 * n == stones.length
 * 2 <= n <= 105
 * -104 <= stones[i] <= 104",Solutions (83),366,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-viii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameVIII(self, stones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameVIII(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def stoneGameVIII(self, stones: List[int]) -> int:
        n = len(stones)
        prefix_sum = [0] * n
        prefix_sum[0] = stones[0]
        for i in range(1, n):
            prefix_sum[i] = prefix_sum[i - 1] + stones[i]
        
        dp = [0] * n
        dp[n - 2] = prefix_sum[-1]
        for i in range(n - 3, -1, -1):
            dp[i] = max(dp[i + 1], prefix_sum[i + 1] - dp[i + 1])
        
        return dp[0]"
False,0,0,2005,,Check if All the Integers in a Range Are Covered,check-if-all-the-integers-in-a-range-are-covered,False,30687,60885,1893,False,1,"Can you solve this real interview question? Check if All the Integers in a Range Are Covered - You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.

Return true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.

An integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.

 

Example 1:


Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5
Output: true
Explanation: Every integer between 2 and 5 is covered:
- 2 is covered by the first range.
- 3 and 4 are covered by the second range.
- 5 is covered by the third range.


Example 2:


Input: ranges = [[1,10],[10,20]], left = 21, right = 21
Output: false
Explanation: 21 is not covered by any range.


 

Constraints:

 * 1 <= ranges.length <= 50
 * 1 <= starti <= endi <= 50
 * 1 <= left <= right <= 50",Solutions (470),437,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-all-the-integers-in-a-range-are-covered/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    ranges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().isCovered(ranges, left, right)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isCovered(self, ranges: List[List[int]], left: int, right: int) -> bool:
        covered = set()
        for start, end in ranges:
            for num in range(start, end + 1):
                covered.add(num)
        
        for num in range(left, right + 1):
            if num not in covered:
                return False
        
        return True"
False,0,0,2006,,Find the Student that Will Replace the Chalk,find-the-student-that-will-replace-the-chalk,False,28814,64919,1894,False,2,"Can you solve this real interview question? Find the Student that Will Replace the Chalk - There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.

You are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.

Return the index of the student that will replace the chalk pieces.

 

Example 1:


Input: chalk = [5,1,5], k = 22
Output: 0
Explanation: The students go in turns as follows:
- Student number 0 uses 5 chalk, so k = 17.
- Student number 1 uses 1 chalk, so k = 16.
- Student number 2 uses 5 chalk, so k = 11.
- Student number 0 uses 5 chalk, so k = 6.
- Student number 1 uses 1 chalk, so k = 5.
- Student number 2 uses 5 chalk, so k = 0.
Student number 0 does not have enough chalk, so they will have to replace it.

Example 2:


Input: chalk = [3,4,1,2], k = 25
Output: 1
Explanation: The students go in turns as follows:
- Student number 0 uses 3 chalk so k = 22.
- Student number 1 uses 4 chalk so k = 18.
- Student number 2 uses 1 chalk so k = 17.
- Student number 3 uses 2 chalk so k = 15.
- Student number 0 uses 3 chalk so k = 12.
- Student number 1 uses 4 chalk so k = 8.
- Student number 2 uses 1 chalk so k = 7.
- Student number 3 uses 2 chalk so k = 5.
- Student number 0 uses 3 chalk so k = 2.
Student number 1 does not have enough chalk, so they will have to replace it.


 

Constraints:

 * chalk.length == n
 * 1 <= n <= 105
 * 1 <= chalk[i] <= 105
 * 1 <= k <= 109",Solutions (483),486,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-student-that-will-replace-the-chalk/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def chalkReplacer(self, chalk: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    chalk: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().chalkReplacer(chalk, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def chalkReplacer(self, chalk: List[int], k: int) -> int:
        total_chalk = sum(chalk)
        k %= total_chalk
        for i in range(len(chalk)):
            if k < chalk[i]:
                return i
            k -= chalk[i]"
False,0,0,2008,,Minimum Cost to Change the Final Value of Expression,minimum-cost-to-change-the-final-value-of-expression,False,3281,5990,1896,False,3,"Can you solve this real interview question? Minimum Cost to Change the Final Value of Expression - You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.

 * For example, ""()1|1"" and ""(1)&()"" are not valid while ""1"", ""(((1))|(0))"", and ""1|(0&(1))"" are valid expressions.

Return the minimum cost to change the final value of the expression.

 * For example, if expression = ""1|1|(0&0)&1"", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0.

The cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:

 * Turn a '1' into a '0'.
 * Turn a '0' into a '1'.
 * Turn a '&' into a '|'.
 * Turn a '|' into a '&'.

Note: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.

 

Example 1:


Input: expression = ""1&(0|1)""
Output: 1
Explanation: We can turn ""1&(0|1)"" into ""1&(0&1)"" by changing the '|' to a '&' using 1 operation.
The new expression evaluates to 0. 


Example 2:


Input: expression = ""(0&0)&(0&0&0)""
Output: 3
Explanation: We can turn ""(0&0)&(0&0&0)"" into ""(0|1)|(0&0&0)"" using 3 operations.
The new expression evaluates to 1.


Example 3:


Input: expression = ""(0|(1|0&1))""
Output: 1
Explanation: We can turn ""(0|(1|0&1))"" into ""(0|(0|0&1))"" using 1 operation.
The new expression evaluates to 0.

 

Constraints:

 * 1 <= expression.length <= 105
 * expression only contains '1','0','&','|','(', and ')'
 * All parentheses are properly matched.
 * There will be no empty parentheses (i.e: ""()"" is not a substring of expression).",Solutions (59),202,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-change-the-final-value-of-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperationsToFlip(self, expression: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().minOperationsToFlip(expression)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperationsToFlip(self, expression: str) -> int:
        def evaluate(s, goal):
            if not s:
                return goal
            n = len(s)
            if n == 1:
                return 1 if s == goal else 0

            ans = float('inf')

            for i in range(1, n, 2):
                for l in range(2):
                    for r in range(2):
                        if s[i] == '&':
                            if goal == '1':
                                curr = l & r
                            else:
                                curr = l | r
                        else:
                            if goal == '1':
                                curr = l | r
                            else:
                                curr = l & r

                        ans = min(ans, evaluate(s[:i-1] + str(curr) + s[i+2:], goal))

            return ans

        return evaluate(expression, '0')"
False,0,0,2010,,Check if Word Equals Summation of Two Words,check-if-word-equals-summation-of-two-words,False,51113,69094,1880,False,1,"Can you solve this real interview question? Check if Word Equals Summation of Two Words - The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).

The numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.

 * For example, if s = ""acb"", we concatenate each letter's letter value, resulting in ""021"". After converting it, we get 21.

You are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.

Return true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.

 

Example 1:


Input: firstWord = ""acb"", secondWord = ""cba"", targetWord = ""cdb""
Output: true
Explanation:
The numerical value of firstWord is ""acb"" -> ""021"" -> 21.
The numerical value of secondWord is ""cba"" -> ""210"" -> 210.
The numerical value of targetWord is ""cdb"" -> ""231"" -> 231.
We return true because 21 + 210 == 231.


Example 2:


Input: firstWord = ""aaa"", secondWord = ""a"", targetWord = ""aab""
Output: false
Explanation: 
The numerical value of firstWord is ""aaa"" -> ""000"" -> 0.
The numerical value of secondWord is ""a"" -> ""0"" -> 0.
The numerical value of targetWord is ""aab"" -> ""001"" -> 1.
We return false because 0 + 0 != 1.


Example 3:


Input: firstWord = ""aaa"", secondWord = ""a"", targetWord = ""aaaa""
Output: true
Explanation: 
The numerical value of firstWord is ""aaa"" -> ""000"" -> 0.
The numerical value of secondWord is ""a"" -> ""0"" -> 0.
The numerical value of targetWord is ""aaaa"" -> ""0000"" -> 0.
We return true because 0 + 0 == 0.


 

Constraints:

 * 1 <= firstWord.length, secondWord.length, targetWord.length <= 8
 * firstWord, secondWord, and targetWord consist of lowercase English letters from 'a' to 'j' inclusive.",Solutions (1.1K),461,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-word-equals-summation-of-two-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    firstWord: str = deserialize(""str"", read_line())
    secondWord: str = deserialize(""str"", read_line())
    targetWord: str = deserialize(""str"", read_line())
    ans = Solution().isSumEqual(firstWord, secondWord, targetWord)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isSumEqual(self, firstWord: str, secondWord: str, targetWord: str) -> bool:
        def numerical_value(word):
            return int(''.join(str(ord(c) - 97) for c in word))

        return numerical_value(firstWord) + numerical_value(secondWord) == numerical_value(targetWord)"
False,0,0,2011,,Maximum Value after Insertion,maximum-value-after-insertion,False,22855,61983,1881,False,2,"Can you solve this real interview question? Maximum Value after Insertion - You are given a very large integer n, represented as a string, and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.

You want to maximize n's numerical value by inserting x anywhere in the decimal representation of n . You cannot insert x to the left of the negative sign.

 * For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.
 * If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.

Return a string representing the maximum value of n after the insertion.

 

Example 1:


Input: n = ""99"", x = 9
Output: ""999""
Explanation: The result is the same regardless of where you insert 9.


Example 2:


Input: n = ""-13"", x = 2
Output: ""-123""
Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.


 

Constraints:

 * 1 <= n.length <= 105
 * 1 <= x <= 9
 * The digits in n are in the range [1, 9].
 * n is a valid representation of an integer.
 * In the case of a negative n, it will begin with '-'.",Solutions (290),316,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-value-after-insertion/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxValue(self, n: str, x: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    n: str = deserialize(""str"", read_line())
    x: int = deserialize(""int"", read_line())
    ans = Solution().maxValue(n, x)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def maxValue(self, n: str, x: int) -> str:
        if n[0] == '-':
            for i in range(1, len(n)):
                if int(n[i]) > x:
                    return n[:i] + str(x) + n[i:]
            return n + str(x)
        else:
            for i in range(len(n)):
                if int(n[i]) < x:
                    return n[:i] + str(x) + n[i:]
            return n + str(x)"
False,0,0,2012,,Process Tasks Using Servers,process-tasks-using-servers,False,24885,63020,1882,False,2,"Can you solve this real interview question? Process Tasks Using Servers - You are given two 0-indexed integer arrays servers and tasks of lengths n and m respectively. servers[i] is the weight of the i th server, and tasks[j] is the time needed to process the j th task in seconds.

Tasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.

At second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.

If there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.

A server that is assigned task j at second t will be free again at second t + tasks[j].

Build an array ans of length m, where ans[j] is the index of the server the j th task will be assigned to.

Return the array ans .

 

Example 1:


Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]
Output: [2,2,0,2,1,2]
Explanation: Events in chronological order go as follows:
- At second 0, task 0 is added and processed using server 2 until second 1.
- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.
- At second 2, task 2 is added and processed using server 0 until second 5.
- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.
- At second 4, task 4 is added and processed using server 1 until second 5.
- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.

Example 2:


Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]
Output: [1,4,1,4,1,3,2]
Explanation: Events in chronological order go as follows: 
- At second 0, task 0 is added and processed using server 1 until second 2.
- At second 1, task 1 is added and processed using server 4 until second 2.
- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4. 
- At second 3, task 3 is added and processed using server 4 until second 7.
- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9. 
- At second 5, task 5 is added and processed using server 3 until second 7.
- At second 6, task 6 is added and processed using server 2 until second 7.


 

Constraints:

 * servers.length == n
 * tasks.length == m
 * 1 <= n, m <= 2 * 105
 * 1 <= servers[i], tasks[j] <= 2 * 105",Solutions (283),771,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/process-tasks-using-servers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    servers: List[int] = deserialize(""List[int]"", read_line())
    tasks: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().assignTasks(servers, tasks)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def assignTasks(self, servers: List[int], tasks: List[int]) -> List[int]:
        n = len(servers)
        m = len(tasks)
        
        available_servers = [(weight, i) for i, weight in enumerate(servers)]
        busy_servers = []
        task_queue = []
        
        ans = []
        current_time = 0
        i = 0
        
        while i < m:
            if task_queue and (not available_servers or task_queue[0][0] <= current_time):
                current_time = max(current_time, task_queue[0][0])
                for end_time, weight, server_index, task_index in busy_servers:
                    if end_time <= current_time:
                        available_servers.append((weight, server_index))
                    else:
                        busy_servers = busy_servers[len(busy_servers)-len(available_servers):]
                        break
                
                while available_servers and task_queue:
                    task_time, task_index = task_queue.pop(0)
                    weight, server_index = min(available_servers)
                    available_servers.remove((weight, server_index))
                    busy_servers.append((current_time + tasks[task_index], weight, server_index, task_index))
                    ans.append(server_index)
                    i += 1
                
            elif not task_queue:
                current_time = busy_servers[0][0]
            
            else:
                current_time = task_queue[0][0]
        
        return ans"
False,0,0,2013,,Minimum Skips to Arrive at Meeting On Time,minimum-skips-to-arrive-at-meeting-on-time,False,5514,14481,1883,False,3,"Can you solve this real interview question? Minimum Skips to Arrive at Meeting On Time - You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.

After you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.

 * For example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours, you do not need to wait.

However, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.

 * For example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.

Return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.

 

Example 1:


Input: dist = [1,3,2], speed = 4, hoursBefore = 2
Output: 1
Explanation:
Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.
You can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.
Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.


Example 2:


Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10
Output: 2
Explanation:
Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.
You can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.


Example 3:


Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10
Output: -1
Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests.


 

Constraints:

 * n == dist.length
 * 1 <= n <= 1000
 * 1 <= dist[i] <= 105
 * 1 <= speed <= 106
 * 1 <= hoursBefore <= 107",Solutions (77),273,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dist: List[int] = deserialize(""List[int]"", read_line())
    speed: int = deserialize(""int"", read_line())
    hoursBefore: int = deserialize(""int"", read_line())
    ans = Solution().minSkips(dist, speed, hoursBefore)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSkips(self, dist: List[int], speed: int, hoursBefore: int) -> int:
        n = len(dist)
        dp = [0] * (n + 1)
        
        for i in range(1, n + 1):
            new_dp = [0] * (n + 1)
            for j in range(i + 1):
                new_dp[j] = math.ceil(dp[j] + dist[i - 1] / speed - 0.000001)
                if j < i:
                    new_dp[j] = min(new_dp[j], dp[j] + dist[i - 1] / speed)
                if j > 0:
                    new_dp[j] = min(new_dp[j], dp[j - 1] + dist[i - 1] / speed)
            dp = new_dp
        
        for i in range(n):
            if dp[i] <= hoursBefore:
                return i
        return -1"
False,0,0,2015,,Determine Whether Matrix Can Be Obtained By Rotation,determine-whether-matrix-can-be-obtained-by-rotation,False,51455,92276,1886,False,1,"Can you solve this real interview question? Determine Whether Matrix Can Be Obtained By Rotation - Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/05/20/grid3.png]


Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.


Example 2:

[https://assets.leetcode.com/uploads/2021/05/20/grid4.png]


Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.


Example 3:

[https://assets.leetcode.com/uploads/2021/05/26/grid4.png]


Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.


 

Constraints:

 * n == mat.length == target.length
 * n == mat[i].length == target[i].length
 * 1 <= n <= 10
 * mat[i][j] and target[i][j] are either 0 or 1.",Solutions (878),1.1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findRotation(mat, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def findRotation(self, mat: List[List[int]], target: List[List[int]]) -> bool:
        def rotate(matrix):
            return list(zip(*matrix[::-1]))
        
        if mat == target:
            return True
        
        for _ in range(3):
            mat = rotate(mat)
            if mat == target:
                return True
        
        return False"
False,0,0,2016,,Reduction Operations to Make the Array Elements Equal,reduction-operations-to-make-the-array-elements-equal,False,20958,33538,1887,False,2,"Can you solve this real interview question? Reduction Operations to Make the Array Elements Equal - Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:

 1. Find the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.
 2. Find the next largest value in nums strictly smaller than largest. Let its value be nextLargest.
 3. Reduce nums[i] to nextLargest.

Return the number of operations to make all elements in nums equal.

 

Example 1:


Input: nums = [5,1,3]
Output: 3
Explanation: It takes 3 operations to make all elements in nums equal:
1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].
2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].
3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].


Example 2:


Input: nums = [1,1,1]
Output: 0
Explanation: All elements in nums are already equal.


Example 3:


Input: nums = [1,1,2,2,3]
Output: 4
Explanation: It takes 4 operations to make all elements in nums equal:
1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].
2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].
3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].
4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].


 

Constraints:

 * 1 <= nums.length <= 5 * 104
 * 1 <= nums[i] <= 5 * 104",Solutions (417),458,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/reduction-operations-to-make-the-array-elements-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reductionOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().reductionOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reductionOperations(self, nums: List[int]) -> int:
        count = 0
        nums.sort()
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                count += i
        return count"
False,0,0,2017,,Minimum Number of Flips to Make the Binary String Alternating,minimum-number-of-flips-to-make-the-binary-string-alternating,False,17965,46334,1888,False,2,"Can you solve this real interview question? Minimum Number of Flips to Make the Binary String Alternating - You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:

 * Type-1: Remove the character at the start of the string s and append it to the end of the string.
 * Type-2: Pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa.

Return the minimum number of type-2 operations you need to perform such that s becomes alternating.

The string is called alternating if no two adjacent characters are equal.

 * For example, the strings ""010"" and ""1010"" are alternating, while the string ""0100"" is not.

 

Example 1:


Input: s = ""111000""
Output: 2
Explanation: Use the first operation two times to make s = ""100011"".
Then, use the second operation on the third and sixth elements to make s = ""101010"".


Example 2:


Input: s = ""010""
Output: 0
Explanation: The string is already alternating.


Example 3:


Input: s = ""1110""
Output: 1
Explanation: Use the second operation on the second element to make s = ""1010"".


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (242),953,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-flips-to-make-the-binary-string-alternating/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minFlips(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minFlips(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minFlips(self, s: str) -> int:
        s = s * 2
        n = len(s)
        res1 = res2 = 0
        for i in range(n):
            if (i % 2 == 0 and s[i] == '0') or (i % 2 == 1 and s[i] == '1'):
                res1 += 1
            if (i % 2 == 0 and s[i] == '1') or (i % 2 == 1 and s[i] == '0'):
                res2 += 1
        res = min(res1, res2)
        return min(res, n - res)"
False,0,0,2018,,Minimum Space Wasted From Packaging,minimum-space-wasted-from-packaging,False,10238,32732,1889,False,3,"Can you solve this real interview question? Minimum Space Wasted From Packaging - You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.

The package sizes are given as an integer array packages, where packages[i] is the size of the ith package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.

You want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.

 * For example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6.

Return the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: packages = [2,3,5], boxes = [[4,8],[2,8]]
Output: 6
Explanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.
The total waste is (4-2) + (4-3) + (8-5) = 6.


Example 2:


Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]
Output: -1
Explanation: There is no box that the package of size 5 can fit in.


Example 3:


Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]
Output: 9
Explanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.
The total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.


 

Constraints:

 * n == packages.length
 * m == boxes.length
 * 1 <= n <= 105
 * 1 <= m <= 105
 * 1 <= packages[i] <= 105
 * 1 <= boxes[j].length <= 105
 * 1 <= boxes[j][k] <= 105
 * sum(boxes[j].length) <= 105
 * The elements in boxes[j] are distinct.",Solutions (120),335,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-space-wasted-from-packaging/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    packages: List[int] = deserialize(""List[int]"", read_line())
    boxes: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minWastedSpace(packages, boxes)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minWastedSpace(self, packages: List[int], boxes: List[List[int]]) -> int:
        pass
"
False,0,0,2020,,Remove One Element to Make the Array Strictly Increasing,remove-one-element-to-make-the-array-strictly-increasing,False,44594,171128,1909,False,1,"Can you solve this real interview question? Remove One Element to Make the Array Strictly Increasing - Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.

The array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).

 

Example 1:


Input: nums = [1,2,10,5,7]
Output: true
Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].
[1,2,5,7] is strictly increasing, so return true.


Example 2:


Input: nums = [2,3,1,2]
Output: false
Explanation:
[3,1,2] is the result of removing the element at index 0.
[2,1,2] is the result of removing the element at index 1.
[2,3,2] is the result of removing the element at index 2.
[2,3,1] is the result of removing the element at index 3.
No resulting array is strictly increasing, so return false.

Example 3:


Input: nums = [1,1,1]
Output: false
Explanation: The result of removing any element is [1,1].
[1,1] is not strictly increasing, so return false.


 

Constraints:

 * 2 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000",Solutions (596),954,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canBeIncreasing(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().canBeIncreasing(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canBeIncreasing(self, nums: List[int]) -> bool:
        for i in range(len(nums)):
            temp = nums[:i] + nums[i+1:]
            if all(temp[j] < temp[j+1] for j in range(len(temp)-1)):
                return True
        return False"
False,0,0,2021,,Remove All Occurrences of a Substring,remove-all-occurrences-of-a-substring,False,57139,76673,1910,False,2,"Can you solve this real interview question? Remove All Occurrences of a Substring - Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:

 * Find the leftmost occurrence of the substring part and remove it from s.

Return s after removing all occurrences of part.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: s = ""daabcbaabcbc"", part = ""abc""
Output: ""dab""
Explanation: The following operations are done:
- s = ""daabcbaabcbc"", remove ""abc"" starting at index 2, so s = ""dabaabcbc"".
- s = ""dabaabcbc"", remove ""abc"" starting at index 4, so s = ""dababc"".
- s = ""dababc"", remove ""abc"" starting at index 3, so s = ""dab"".
Now s has no occurrences of ""abc"".


Example 2:


Input: s = ""axxxxyyyyb"", part = ""xy""
Output: ""ab""
Explanation: The following operations are done:
- s = ""axxxxyyyyb"", remove ""xy"" starting at index 4 so s = ""axxxyyyb"".
- s = ""axxxyyyb"", remove ""xy"" starting at index 3 so s = ""axxyyb"".
- s = ""axxyyb"", remove ""xy"" starting at index 2 so s = ""axyb"".
- s = ""axyb"", remove ""xy"" starting at index 1 so s = ""ab"".
Now s has no occurrences of ""xy"".


 

Constraints:

 * 1 <= s.length <= 1000
 * 1 <= part.length <= 1000
 * s and part consists of lowercase English letters.",Solutions (1.1K),1.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-all-occurrences-of-a-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeOccurrences(self, s: str, part: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    part: str = deserialize(""str"", read_line())
    ans = Solution().removeOccurrences(s, part)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeOccurrences(self, s: str, part: str) -> str:
        while part in s:
            s = s.replace(part, '', 1)
        return s"
False,0,0,2022,,Maximum Alternating Subsequence Sum,maximum-alternating-subsequence-sum,False,23895,40321,1911,False,2,"Can you solve this real interview question? Maximum Alternating Subsequence Sum - The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.

 * For example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.

Given an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:


Input: nums = [4,2,5,3]
Output: 7
Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.


Example 2:


Input: nums = [5,6,7,8]
Output: 8
Explanation: It is optimal to choose the subsequence [8] with alternating sum 8.


Example 3:


Input: nums = [6,2,1,2,4,5]
Output: 10
Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (378),927,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-alternating-subsequence-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxAlternatingSum(self, nums: List[int]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxAlternatingSum(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxAlternatingSum(self, nums: List[int]) -> int:
        even_sum = odd_sum = 0
        for num in nums:
            even_sum, odd_sum = max(even_sum, odd_sum + num), max(odd_sum, even_sum - num)
        return max(even_sum, odd_sum)"
False,0,0,2025,,Redistribute Characters to Make All Strings Equal,redistribute-characters-to-make-all-strings-equal,False,28291,47442,1897,False,1,"Can you solve this real interview question? Redistribute Characters to Make All Strings Equal - You are given an array of strings words (0-indexed).

In one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].

Return true if you can make every string in words equal using any number of operations, and false otherwise.

 

Example 1:


Input: words = [""abc"",""aabc"",""bc""]
Output: true
Explanation: Move the first 'a' in words[1] to the front of words[2],
to make words[1] = ""abc"" and words[2] = ""abc"".
All the strings are now equal to ""abc"", so return true.


Example 2:


Input: words = [""ab"",""a""]
Output: false
Explanation: It is impossible to make all the strings equal using the operation.


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 100
 * words[i] consists of lowercase English letters.",Solutions (482),370,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/redistribute-characters-to-make-all-strings-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeEqual(self, words: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().makeEqual(words)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def makeEqual(self, words: List[str]) -> bool:
        return sum(collections.Counter("""".join(words))[char] % len(words) for char in set("""".join(words))) == 0"
False,0,0,2026,,Merge Triplets to Form Target Triplet,merge-triplets-to-form-target-triplet,False,28986,44853,1899,False,2,"Can you solve this real interview question? Merge Triplets to Form Target Triplet - A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.

To obtain target, you may apply the following operation on triplets any number of times (possibly zero):

 * Choose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].
   * For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].

Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.

 

Example 1:


Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]
Output: true
Explanation: Perform the following operations:
- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]
The target triplet [2,7,5] is now an element of triplets.


Example 2:


Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]
Output: false
Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.


Example 3:


Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]
Output: true
Explanation: Perform the following operations:
- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].
- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].
The target triplet [5,5,5] is now an element of triplets.


 

Constraints:

 * 1 <= triplets.length <= 105
 * triplets[i].length == target.length == 3
 * 1 <= ai, bi, ci, x, y, z <= 1000",Solutions (395),555,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/merge-triplets-to-form-target-triplet/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    triplets: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mergeTriplets(triplets, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def mergeTriplets(self, triplets: List[List[int]], target: List[int]) -> bool:
        from itertools import permutations
        
        for perm in permutations(triplets, 2):
            triplet1, triplet2 = perm
            
            new_triplet = [max(triplet1[0], triplet2[0]),
                           max(triplet1[1], triplet2[1]),
                           max(triplet1[2], triplet2[2])]
            
            if new_triplet == target:
                return True
                
        return False"
False,0,0,2027,,Maximum Number of Removable Characters,maximum-number-of-removable-characters,False,21297,52466,1898,False,2,"Can you solve this real interview question? Maximum Number of Removable Characters - You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).

You want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.

Return the maximum k you can choose such that p is still a subsequence of s after the removals.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 

Example 1:


Input: s = ""abcacb"", p = ""ab"", removable = [3,1,0]
Output: 2
Explanation: After removing the characters at indices 3 and 1, ""abcacb"" becomes ""accb"".
""ab"" is a subsequence of ""accb"".
If we remove the characters at indices 3, 1, and 0, ""abcacb"" becomes ""ccb"", and ""ab"" is no longer a subsequence.
Hence, the maximum k is 2.


Example 2:


Input: s = ""abcbddddd"", p = ""abcd"", removable = [3,2,1,4,5,6]
Output: 1
Explanation: After removing the character at index 3, ""abcbddddd"" becomes ""abcddddd"".
""abcd"" is a subsequence of ""abcddddd"".


Example 3:


Input: s = ""abcab"", p = ""abc"", removable = [0,1,2,3,4]
Output: 0
Explanation: If you remove the first index in the array removable, ""abc"" is no longer a subsequence.


 

Constraints:

 * 1 <= p.length <= s.length <= 105
 * 0 <= removable.length < s.length
 * 0 <= removable[i] < s.length
 * p is a subsequence of s.
 * s and p both consist of lowercase English letters.
 * The elements in removable are distinct.",Solutions (296),807,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-removable-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    p: str = deserialize(""str"", read_line())
    removable: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumRemovals(s, p, removable)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumRemovals(self, s: str, p: str, removable: List[int]) -> int:
        def is_subsequence(s: str, p: str, removed_indices: set) -> bool:
            i = j = 0
            while i < len(s) and j < len(p):
                if i in removed_indices or s[i] != p[j]:
                    i += 1
                else:
                    i += 1
                    j += 1
            return j == len(p)
        
        left, right = 0, len(removable)
        while left < right:
            mid = (left + right + 1) // 2
            removed_indices = set(removable[:mid])
            if is_subsequence(s, p, removed_indices):
                left = mid
            else:
                right = mid - 1
        return left"
False,0,0,2028,,The Earliest and Latest Rounds Where Players Compete,the-earliest-and-latest-rounds-where-players-compete,False,4640,8967,1900,False,3,"Can you solve this real interview question? The Earliest and Latest Rounds Where Players Compete - There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.).

The tournament consists of multiple rounds (starting from round number 1). In each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.

 * For example, if the row consists of players 1, 2, 4, 6, 7
   * Player 1 competes against player 7.
   * Player 2 competes against player 6.
   * Player 4 automatically advances to the next round.

After each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).

The players numbered firstPlayer and secondPlayer are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.

Given the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.

 

Example 1:


Input: n = 11, firstPlayer = 2, secondPlayer = 4
Output: [3,4]
Explanation:
One possible scenario which leads to the earliest round number:
First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
Second round: 2, 3, 4, 5, 6, 11
Third round: 2, 3, 4
One possible scenario which leads to the latest round number:
First round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
Second round: 1, 2, 3, 4, 5, 6
Third round: 1, 2, 4
Fourth round: 2, 4


Example 2:


Input: n = 5, firstPlayer = 1, secondPlayer = 5
Output: [1,1]
Explanation: The players numbered 1 and 5 compete in the first round.
There is no way to make them compete in any other round.


 

Constraints:

 * 2 <= n <= 28
 * 1 <= firstPlayer < secondPlayer <= n",Solutions (66),208,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/the-earliest-and-latest-rounds-where-players-compete/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def earliestAndLatest(self, n: int, firstPlayer: int, secondPlayer: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    firstPlayer: int = deserialize(""int"", read_line())
    secondPlayer: int = deserialize(""int"", read_line())
    ans = Solution().earliestAndLatest(n, firstPlayer, secondPlayer)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def earliestAndLatest(self, n: int, firstPlayer: int, secondPlayer: int) -> List[int]:
        pass  # Add your code here to solve the problem"
False,0,0,2031,,Egg Drop With 2 Eggs and N Floors,egg-drop-with-2-eggs-and-n-floors,False,33303,47018,1884,False,2,"Can you solve this real interview question? Egg Drop With 2 Eggs and N Floors - You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

In each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:


Input: n = 2
Output: 2
Explanation: We can drop the first egg from floor 1 and the second egg from floor 2.
If the first egg breaks, we know that f = 0.
If the second egg breaks but the first egg didn't, we know that f = 1.
Otherwise, if both eggs survive, we know that f = 2.


Example 2:


Input: n = 100
Output: 14
Explanation: One optimal strategy is:
- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.
- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.
- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.
Regardless of the outcome, it takes at most 14 drops to determine f.


 

Constraints:

 * 1 <= n <= 1000",Solutions (416),1.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/egg-drop-with-2-eggs-and-n-floors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoEggDrop(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().twoEggDrop(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def twoEggDrop(self, n: int) -> int:
        return math.ceil((-1 + math.sqrt(1 + 8 * n)) / 2)"
False,0,0,2032,,Largest Odd Number in String,largest-odd-number-in-string,False,54918,97950,1903,False,1,"Can you solve this real interview question? Largest Odd Number in String - You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string """" if no odd integer exists.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: num = ""52""
Output: ""5""
Explanation: The only non-empty substrings are ""5"", ""2"", and ""52"". ""5"" is the only odd number.


Example 2:


Input: num = ""4206""
Output: """"
Explanation: There are no odd numbers in ""4206"".


Example 3:


Input: num = ""35427""
Output: ""35427""
Explanation: ""35427"" is already an odd number.


 

Constraints:

 * 1 <= num.length <= 105
 * num only consists of digits and does not contain any leading zeros.",Solutions (874),782,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-odd-number-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestOddNumber(self, num: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().largestOddNumber(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestOddNumber(self, num: str) -> str:
        return num.rstrip('02468')[::-1].partition('1')[2]"
False,0,0,2033,,The Number of Full Rounds You Have Played,the-number-of-full-rounds-you-have-played,False,18796,41887,1904,False,2,"Can you solve this real interview question? The Number of Full Rounds You Have Played - You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.

 * For example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.

You are given two strings loginTime and logoutTime where:

 * loginTime is the time you will login to the game, and
 * logoutTime is the time you will logout from the game.

If logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.

Return the number of full chess rounds you have played in the tournament.

Note: All the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.

 

Example 1:


Input: loginTime = ""09:31"", logoutTime = ""10:14""
Output: 1
Explanation: You played one full round from 09:45 to 10:00.
You did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.
You did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.


Example 2:


Input: loginTime = ""21:30"", logoutTime = ""03:00""
Output: 22
Explanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.
10 + 12 = 22.


 

Constraints:

 * loginTime and logoutTime are in the format hh:mm.
 * 00 <= hh <= 23
 * 00 <= mm <= 59
 * loginTime and logoutTime are not equal.",Solutions (228),183,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/the-number-of-full-rounds-you-have-played/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    loginTime: str = deserialize(""str"", read_line())
    logoutTime: str = deserialize(""str"", read_line())
    ans = Solution().numberOfRounds(loginTime, logoutTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfRounds(self, loginTime: str, logoutTime: str) -> int:
        import math
        import datetime
        
        login = datetime.datetime.strptime(loginTime, ""%H:%M"")
        logout = datetime.datetime.strptime(logoutTime, ""%H:%M"")
        
        if logout < login:
            logout += datetime.timedelta(days=1)
            
        login_rounded = math.ceil(login.minute / 15) * 15
        logout_rounded = math.floor(logout.minute / 15) * 15
        
        rounds = (logout - login).seconds // 900
        full_rounds = rounds // 4
        
        return full_rounds"
False,0,0,2034,,Minimum Absolute Difference Queries,minimum-absolute-difference-queries,False,9369,21343,1906,False,2,"Can you solve this real interview question? Minimum Absolute Difference Queries - The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.

 * For example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.

You are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).

Return an array ans where ans[i] is the answer to the ith query.

A subarray is a contiguous sequence of elements in an array.

The value of |x| is defined as:

 * x if x >= 0.
 * -x if x < 0.

 

Example 1:


Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]
Output: [2,1,4,1]
Explanation: The queries are processed as follows:
- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.
- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.
- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.
- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.


Example 2:


Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]
Output: [-1,1,1,3]
Explanation: The queries are processed as follows:
- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the
  elements are the same.
- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.
- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.
- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.


 

Constraints:

 * 2 <= nums.length <= 105
 * 1 <= nums[i] <= 100
 * 1 <= queries.length <= 2 * 104
 * 0 <= li < ri < nums.length",Solutions (110),464,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-absolute-difference-queries/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minDifference(nums, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def minDifference(self, nums: List[int], queries: List[List[int]]) -> List[int]:
        def minAbsDiff(arr, l, r):
            if len(set(arr[l:r+1])) == 1:
                return -1
            else:
                return min(abs(arr[i] - arr[j]) for i in range(l, r) for j in range(i+1, r+1))

        return [minAbsDiff(nums, q[0], q[1]) for q in queries]"
False,0,0,2035,,Count Sub Islands,count-sub-islands,False,64260,95036,1905,False,2,"Can you solve this real interview question? Count Sub Islands - You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.

An island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.

Return the number of islands in grid2 that are considered sub-islands.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/10/test1.png]


Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]
Output: 3
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/03/testcasex2.png]


Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]
Output: 2 
Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.
The 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.


 

Constraints:

 * m == grid1.length == grid2.length
 * n == grid1[i].length == grid2[i].length
 * 1 <= m, n <= 500
 * grid1[i][j] and grid2[i][j] are either 0 or 1.",Solutions (1K),1.7K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-sub-islands/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid1: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    grid2: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countSubIslands(grid1, grid2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        def dfs(grid1, grid2, i, j):
            if 0 <= i < len(grid2) and 0 <= j < len(grid2[0]) and grid2[i][j] == 1:
                grid2[i][j] = 0
                is_sub_island = grid1[i][j] == 1
                for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                    is_sub_island &= dfs(grid1, grid2, i + x, j + y)
                return is_sub_island
            return True
        
        sub_islands = 0
        for i in range(len(grid2)):
            for j in range(len(grid2[0])):
                if grid2[i][j] == 1:
                    sub_islands += dfs(grid1, grid2, i, j)
        
        return sub_islands"
False,0,0,2037,,Count Square Sum Triples,count-square-sum-triples,False,31718,46595,1925,False,1,"Can you solve this real interview question? Count Square Sum Triples - A square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.

Given an integer n, return the number of square triples such that 1 <= a, b, c <= n.

 

Example 1:


Input: n = 5
Output: 2
Explanation: The square triples are (3,4,5) and (4,3,5).


Example 2:


Input: n = 10
Output: 4
Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).


 

Constraints:

 * 1 <= n <= 250",Solutions (397),327,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-square-sum-triples/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countTriples(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countTriples(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countTriples(self, n: int) -> int:
        count = 0
        for a in range(1, n + 1):
            for b in range(1, n + 1):
                c = pow(a ** 2 + b ** 2, 0.5)
                if c.is_integer() and c <= n:
                    count += 1
        return count"
False,0,0,2038,nearest-exit-from-entrance-in-maze,Nearest Exit from Entrance in Maze,nearest-exit-from-entrance-in-maze,False,76429,156632,1926,False,2,"Can you solve this real interview question? Nearest Exit from Entrance in Maze - You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.

In one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.

Return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/04/nearest1-grid.jpg]


Input: maze = [[""+"",""+"",""."",""+""],[""."",""."",""."",""+""],[""+"",""+"",""+"","".""]], entrance = [1,2]
Output: 1
Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].
Initially, you are at the entrance cell [1,2].
- You can reach [1,0] by moving 2 steps left.
- You can reach [0,2] by moving 1 step up.
It is impossible to reach [2,3] from the entrance.
Thus, the nearest exit is [0,2], which is 1 step away.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/04/nearesr2-grid.jpg]


Input: maze = [[""+"",""+"",""+""],[""."",""."","".""],[""+"",""+"",""+""]], entrance = [1,0]
Output: 2
Explanation: There is 1 exit in this maze at [1,2].
[1,0] does not count as an exit since it is the entrance cell.
Initially, you are at the entrance cell [1,0].
- You can reach [1,2] by moving 2 steps right.
Thus, the nearest exit is [1,2], which is 2 steps away.


Example 3:

[https://assets.leetcode.com/uploads/2021/06/04/nearest3-grid.jpg]


Input: maze = [[""."",""+""]], entrance = [0,0]
Output: -1
Explanation: There are no exits in this maze.


 

Constraints:

 * maze.length == m
 * maze[i].length == n
 * 1 <= m, n <= 100
 * maze[i][j] is either '.' or '+'.
 * entrance.length == 2
 * 0 <= entrancerow < m
 * 0 <= entrancecol < n
 * entrance will always be an empty cell.",Solutions (1.1K),1.8K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/nearest-exit-from-entrance-in-maze/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    maze: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    entrance: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().nearestExit(maze, entrance)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        import collections
        
        m, n = len(maze), len(maze[0])
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        
        queue = collections.deque([(entrance[0], entrance[1], 0)])
        maze[entrance[0]][entrance[1]] = '+'
        
        while queue:
            x, y, steps = queue.popleft()
            if (x != entrance[0] or y != entrance[1]) and (x == 0 or y == 0 or x == m - 1 or y == n - 1):
                return steps
            
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and maze[nx][ny] == '.':
                    maze[nx][ny] = '+'
                    queue.append((nx, ny, steps + 1))
        
        return -1"
False,0,0,2039,,Sum Game,sum-game,False,8466,18070,1927,False,2,"Can you solve this real interview question? Sum Game - Alice and Bob take turns playing a game, with Alice starting first.

You are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the following if there is still at least one '?' in num:

 1. Choose an index i where num[i] == '?'.
 2. Replace num[i] with any digit between '0' and '9'.

The game ends when there are no more '?' characters in num.

For Bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. For Alice to win, the sums must not be equal.

 * For example, if the game ended with num = ""243801"", then Bob wins because 2+4+3 = 8+0+1. If the game ended with num = ""243803"", then Alice wins because 2+4+3 != 8+0+3.

Assuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.

 

Example 1:


Input: num = ""5023""
Output: false
Explanation: There are no moves to be made.
The sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.


Example 2:


Input: num = ""25??""
Output: true
Explanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.


Example 3:


Input: num = ""?3295???""
Output: false
Explanation: It can be proven that Bob will always win. One possible outcome is:
- Alice replaces the first '?' with '9'. num = ""93295???"".
- Bob replaces one of the '?' in the right half with '9'. num = ""932959??"".
- Alice replaces one of the '?' in the right half with '2'. num = ""9329592?"".
- Bob replaces the last '?' in the right half with '7'. num = ""93295927"".
Bob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.


 

Constraints:

 * 2 <= num.length <= 105
 * num.length is even.
 * num consists of only digits and '?'.",Solutions (94),415,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumGame(self, num: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().sumGame(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def sumGame(self, num: str) -> bool:
        alice_score = 0
        bob_score = 0
        n = len(num)
        half = n // 2
        
        for i in range(half):
            if num[i] == '?':
                alice_score += 4.5
            else:
                alice_score += int(num[i])
                
        for i in range(half, n):
            if num[i] == '?':
                bob_score += 4.5
            else:
                bob_score += int(num[i])
                
        return alice_score != bob_score"
False,0,0,2040,,Minimum Cost to Reach Destination in Time,minimum-cost-to-reach-destination-in-time,False,14369,38033,1928,False,3,"Can you solve this real interview question? Minimum Cost to Reach Destination in Time - There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.

Each time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.

In the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).

Given maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/04/leetgraph1-1.png]


Input: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 11
Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/04/copy-of-leetgraph1-1.png]


Input: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: 48
Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.
You cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.


Example 3:


Input: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]
Output: -1
Explanation: There is no way to reach city 5 from city 0 within 25 minutes.


 

Constraints:

 * 1 <= maxTime <= 1000
 * n == passingFees.length
 * 2 <= n <= 1000
 * n - 1 <= edges.length <= 1000
 * 0 <= xi, yi <= n - 1
 * 1 <= timei <= 1000
 * 1 <= passingFees[j] <= 1000 
 * The graph may contain multiple edges between two nodes.
 * The graph does not contain self loops.",Solutions (164),647,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-reach-destination-in-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    maxTime: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    passingFees: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(maxTime, edges, passingFees)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, maxTime: int, edges: List[List[int]], passingFees: List[int]) -> int:
        # Your code here
        pass"
False,0,0,2042,,Maximum Product Difference Between Two Pairs,maximum-product-difference-between-two-pairs,False,81266,99950,1913,False,1,"Can you solve this real interview question? Maximum Product Difference Between Two Pairs - The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).

 * For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.

Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.

Return the maximum such product difference.

 

Example 1:


Input: nums = [5,6,2,7,4]
Output: 34
Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
The product difference is (6 * 7) - (2 * 4) = 34.


Example 2:


Input: nums = [4,2,5,9,7,4,8]
Output: 64
Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).
The product difference is (9 * 8) - (2 * 4) = 64.


 

Constraints:

 * 4 <= nums.length <= 104
 * 1 <= nums[i] <= 104",Solutions (1.3K),708,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-difference-between-two-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxProductDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProductDifference(self, nums: List[int]) -> int:
        nums.sort()
        return (nums[-1] * nums[-2]) - (nums[0] * nums[1])"
False,0,0,2043,,Cyclically Rotating a Grid,cyclically-rotating-a-grid,False,10839,22367,1914,False,2,"Can you solve this real interview question? Cyclically Rotating a Grid - You are given an m x n integer matrix grid , where m and n are both even integers, and an integer k.

The matrix is composed of several layers, which is shown in the below image, where each color is its own layer:

[https://assets.leetcode.com/uploads/2021/06/10/ringofgrid.png]

A cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:

[https://assets.leetcode.com/uploads/2021/06/22/explanation_grid.jpg]

Return the matrix after applying k cyclic rotations to it.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/19/rod2.png]


Input: grid = [[40,10],[30,20]], k = 1
Output: [[10,20],[40,30]]
Explanation: The figures above represent the grid at every state.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/10/ringofgrid5.png] [https://assets.leetcode.com/uploads/2021/06/10/ringofgrid6.png] [https://assets.leetcode.com/uploads/2021/06/10/ringofgrid7.png]


Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2
Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]
Explanation: The figures above represent the grid at every state.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 50
 * Both m and n are even integers.
 * 1 <= grid[i][j] <= 5000
 * 1 <= k <= 109",Solutions (208),208,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/cyclically-rotating-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().rotateGrid(grid, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def rotateGrid(self, grid: List[List[int]], k: int) -> List[List[int]]:
        def rotate_layer(layer):
            r = len(layer)
            c = len(layer[0])
            layer = [layer[i][j] for i in range(r) for j in range(c)]
            
            k = k % len(layer)
            layer = layer[-k:] + layer[:-k]
            
            for i in range(r):
                for j in range(c):
                    grid[layer_start[0] + i][layer_start[1] + j] = layer[i*c + j]
                    
        m, n = len(grid), len(grid[0])
        layers = min(m, n) // 2
        
        for l in range(layers):
            layer_start = [l, l]
            layer = [[grid[i][j] for j in range(l, n-l)] for i in range(l, m-l)]
            layer += [[grid[i][j] for j in range(n-l-1, l-1, -1)] for i in range(l+1, m-l-1)]
            
            for i in range(1, m-2*l):
                layer.append(grid[m-i-l-1][l])
                
            for i in range(1, n-2*l):
                layer.append(grid[l][i+l])
            
            rotate_layer(layer)
            
        return grid"
False,0,0,2044,,Number of Wonderful Substrings,number-of-wonderful-substrings,False,10862,23960,1915,False,2,"Can you solve this real interview question? Number of Wonderful Substrings - A wonderful string is a string where at most one letter appears an odd number of times.

 * For example, ""ccjjc"" and ""abab"" are wonderful, but ""ab"" is not.

Given a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.

A substring is a contiguous sequence of characters in a string.

 

Example 1:


Input: word = ""aba""
Output: 4
Explanation: The four wonderful substrings are underlined below:
- ""aba"" -> ""a""
- ""aba"" -> ""b""
- ""aba"" -> ""a""
- ""aba"" -> ""aba""


Example 2:


Input: word = ""aabb""
Output: 9
Explanation: The nine wonderful substrings are underlined below:
- ""aabb"" -> ""a""
- ""aabb"" -> ""aa""
- ""aabb"" -> ""aab""
- ""aabb"" -> ""aabb""
- ""aabb"" -> ""a""
- ""aabb"" -> ""abb""
- ""aabb"" -> ""b""
- ""aabb"" -> ""bb""
- ""aabb"" -> ""b""


Example 3:


Input: word = ""he""
Output: 2
Explanation: The two wonderful substrings are underlined below:
- ""he"" -> ""h""
- ""he"" -> ""e""


 

Constraints:

 * 1 <= word.length <= 105
 * word consists of lowercase English letters from 'a' to 'j'.",Solutions (108),803,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-wonderful-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wonderfulSubstrings(self, word: str) -> int:

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().wonderfulSubstrings(word)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def wonderfulSubstrings(self, word: str) -> int:
        result = 0
        freq = {0: 1}
        count = 0
        mask = 0
        
        for i in range(len(word)):
            mask ^= 1 << (ord(word[i]) - ord('a'))

            for j in range(10):
                count += freq.get(mask ^ (1 << j), 0)

            result += count
            freq[mask] = freq.get(mask, 0) + 1
        
        return result"
False,0,0,2047,,Find a Peak Element II,find-a-peak-element-ii,False,35804,68447,1901,False,2,"Can you solve this real interview question? Find a Peak Element II - A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.

Given a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].

You may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.

You must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/08/1.png]


Input: mat = [[1,4],[3,2]]
Output: [0,1]
Explanation: Both 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/07/3.png]


Input: mat = [[10,20,15],[21,30,14],[7,16,32]]
Output: [1,1]
Explanation: Both 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 500
 * 1 <= mat[i][j] <= 105
 * No two adjacent cells are equal.",Solutions (422),1.3K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-a-peak-element-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findPeakGrid(mat)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findPeakGrid(self, mat: List[List[int]]) -> List[int]:
        m, n = len(mat), len(mat[0])
        
        def find_max_in_col(col):
            return max(range(m), key=lambda x: mat[x][col])
        
        left, right = 0, n-1
        while left < right:
            mid = (left + right) // 2
            max_row = find_max_in_col(mid)
            if mat[max_row][mid-1] > mat[max_row][mid]:
                right = mid
            elif mat[max_row][mid+1] > mat[max_row][mid]:
                left = mid + 1
            else:
                return [max_row, mid]
        
        max_row = find_max_in_col(left)
        return [max_row, left]"
False,0,0,2048,,Build Array from Permutation,build-array-from-permutation,False,314916,349037,1920,False,1,"Can you solve this real interview question? Build Array from Permutation - Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:


Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]

Example 2:


Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]

 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] < nums.length
 * The elements in nums are distinct.

 

Follow-up: Can you solve it without using an extra space (i.e., O(1) memory)?",Solutions (2.2K),2.5K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/build-array-from-permutation/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def buildArray(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().buildArray(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def buildArray(self, nums: List[int]) -> List[int]:
        return [nums[nums[i]] for i in range(len(nums))]"
False,0,0,2049,,Eliminate Maximum Number of Monsters,eliminate-maximum-number-of-monsters,False,21512,57595,1921,False,2,"Can you solve this real interview question? Eliminate Maximum Number of Monsters - You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.

The monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.

You have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge.The weapon is fully charged at the very start.

You lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.

Return the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.

 

Example 1:


Input: dist = [1,3,4], speed = [1,1,1]
Output: 3
Explanation:
In the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.
After a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.
All 3 monsters can be eliminated.

Example 2:


Input: dist = [1,1,2,3], speed = [1,1,1,1]
Output: 1
Explanation:
In the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,0,1,2], so you lose.
You can only eliminate 1 monster.


Example 3:


Input: dist = [3,2,4], speed = [5,3,2]
Output: 1
Explanation:
In the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.
After a minute, the distances of the monsters are [X,0,2], so you lose.
You can only eliminate 1 monster.


 

Constraints:

 * n == dist.length == speed.length
 * 1 <= n <= 105
 * 1 <= dist[i], speed[i] <= 105",Solutions (299),451,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/eliminate-maximum-number-of-monsters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    dist: List[int] = deserialize(""List[int]"", read_line())
    speed: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().eliminateMaximum(dist, speed)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def eliminateMaximum(self, dist: List[int], speed: List[int]) -> int:
        n = len(dist)
        time_to_reach_city = [dist[i] / speed[i] for i in range(n)]
        time_to_reach_city.sort()
        
        for i in range(n):
            if time_to_reach_city[i] < i:
                return i
        return n"
False,0,0,2050,,Count Good Numbers,count-good-numbers,False,24846,62479,1922,False,2,"Can you solve this real interview question? Count Good Numbers - A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).

 * For example, ""2582"" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, ""3245"" is not good because 3 is at an even index but is not even.

Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.

A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.

 

Example 1:


Input: n = 1
Output: 5
Explanation: The good numbers of length 1 are ""0"", ""2"", ""4"", ""6"", ""8"".


Example 2:


Input: n = 4
Output: 400


Example 3:


Input: n = 50
Output: 564908303


 

Constraints:

 * 1 <= n <= 1015",Solutions (370),733,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-good-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGoodNumbers(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countGoodNumbers(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countGoodNumbers(self, n: int) -> int:
        MOD = 10**9 + 7
        return pow(5, (n + 1) // 2, MOD) * pow(4, n // 2, MOD) % MOD"
False,0,0,2051,,Longest Common Subpath,longest-common-subpath,False,6042,21879,1923,False,3,"Can you solve this real interview question? Longest Common Subpath - There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.

There are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.

Given an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.

A subpath of a path is a contiguous sequence of cities within that path.

 

Example 1:


Input: n = 5, paths = [[0,1,2,3,4],
                       [2,3,4],
                       [4,0,1,2,3]]
Output: 2
Explanation: The longest common subpath is [2,3].


Example 2:


Input: n = 3, paths = [[0],[1],[2]]
Output: 0
Explanation: There is no common subpath shared by the three paths.


Example 3:


Input: n = 5, paths = [[0,1,2,3,4],
                       [4,3,2,1,0]]
Output: 1
Explanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.

 

Constraints:

 * 1 <= n <= 105
 * m == paths.length
 * 2 <= m <= 105
 * sum(paths[i].length) <= 105
 * 0 <= paths[i][j] < n
 * The same city is not listed multiple times consecutively in paths[i].",Solutions (51),421,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-common-subpath/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    paths: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().longestCommonSubpath(n, paths)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestCommonSubpath(self, n: int, paths: List[List[int]]) -> int:
        pass"
False,0,0,2053,,Check if All Characters Have Equal Number of Occurrences,check-if-all-characters-have-equal-number-of-occurrences,False,59993,78069,1941,False,1,"Can you solve this real interview question? Check if All Characters Have Equal Number of Occurrences - Given a string s, return true if s is a good string, or false otherwise.

A string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).

 

Example 1:


Input: s = ""abacbc""
Output: true
Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.


Example 2:


Input: s = ""aaabb""
Output: false
Explanation: The characters that appear in s are 'a' and 'b'.
'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.


 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of lowercase English letters.",Solutions (1.1K),643,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-all-characters-have-equal-number-of-occurrences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().areOccurrencesEqual(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def areOccurrencesEqual(self, s: str) -> bool:
        return len(set(s.count(x) for x in set(s))) == 1"
False,0,0,2054,,The Number of the Smallest Unoccupied Chair,the-number-of-the-smallest-unoccupied-chair,False,13899,34211,1942,False,2,"Can you solve this real interview question? The Number of the Smallest Unoccupied Chair - There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.

 * For example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.

When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.

You are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.

Return the chair number that the friend numbered targetFriend will sit on.

 

Example 1:


Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.


Example 2:


Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0
Output: 2
Explanation: 
- Friend 1 arrives at time 1 and sits on chair 0.
- Friend 2 arrives at time 2 and sits on chair 1.
- Friend 0 arrives at time 3 and sits on chair 2.
- Friend 1 leaves at time 5 and chair 0 becomes empty.
- Friend 2 leaves at time 6 and chair 1 becomes empty.
- Friend 0 leaves at time 10 and chair 2 becomes empty.
Since friend 0 sat on chair 2, we return 2.


 

Constraints:

 * n == times.length
 * 2 <= n <= 104
 * times[i].length == 2
 * 1 <= arrivali < leavingi <= 105
 * 0 <= targetFriend <= n - 1
 * Each arrivali time is distinct.",Solutions (295),488,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    times: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    targetFriend: int = deserialize(""int"", read_line())
    ans = Solution().smallestChair(times, targetFriend)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestChair(self, times: List[List[int]], targetFriend: int) -> int:
        from sortedcontainers import SortedList
        arrivals = SortedList()
        leaves = SortedList()
        
        for i, (arrival, leave) in enumerate(times):
            arrivals.add((arrival, i))
            leaves.add((leave, i))
        
        available_chairs = SortedList(range(len(times)))
        occupied_chairs = {}
        
        for time, i in sorted(arrivals | leaves):
            if (time, i) in arrivals:
                if not available_chairs:
                    smallest = min(occupied_chairs)
                    available_chairs.add(occupied_chairs.pop(smallest))
                
                chair = available_chairs.pop(0)
                occupied_chairs[i] = chair
                
                if i == targetFriend:
                    return chair
            else:
                available_chairs.add(occupied_chairs.pop(i))"
False,0,0,2055,,Describe the Painting,describe-the-painting,False,9913,20540,1943,False,2,"Can you solve this real interview question? Describe the Painting - There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.

The colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.

 * For example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.

For the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.

You want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.

 * For example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:
   * [1,4) is colored {5,7} (with a sum of 12) from both the first and second segments.
   * [4,7) is colored {7} from only the second segment.

Return the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.

A half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/18/1.png]


Input: segments = [[1,4,5],[4,7,7],[1,7,9]]
Output: [[1,4,14],[4,7,16]]
Explanation: The painting can be described as follows:
- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.
- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/18/2.png]


Input: segments = [[1,7,9],[6,8,15],[8,10,7]]
Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]
Explanation: The painting can be described as follows:
- [1,6) is colored 9 from the first segment.
- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.
- [7,8) is colored 15 from the second segment.
- [8,10) is colored 7 from the third segment.


Example 3:

[https://assets.leetcode.com/uploads/2021/07/04/c1.png]


Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]
Output: [[1,4,12],[4,7,12]]
Explanation: The painting can be described as follows:
- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.
- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.
Note that returning a single segment [1,7) is incorrect because the mixed color sets are different.


 

Constraints:

 * 1 <= segments.length <= 2 * 104
 * segments[i].length == 3
 * 1 <= starti < endi <= 105
 * 1 <= colori <= 109
 * Each colori is distinct.",Solutions (118),392,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/describe-the-painting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    segments: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().splitPainting(segments)
    print(""\noutput:"", serialize(ans, ""long[][]""))
","class Solution:
    def splitPainting(self, segments: List[List[int]]) -> List[List[int]]:
        pass"
False,0,0,2058,,Concatenation of Array,concatenation-of-array,False,386058,427855,1929,False,1,"Can you solve this real interview question? Concatenation of Array - Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans.

 

Example 1:


Input: nums = [1,2,1]
Output: [1,2,1,1,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]
- ans = [1,2,1,1,2,1]

Example 2:


Input: nums = [1,3,2,1]
Output: [1,3,2,1,1,3,2,1]
Explanation: The array ans is formed as follows:
- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]
- ans = [1,3,2,1,1,3,2,1]


 

Constraints:

 * n == nums.length
 * 1 <= n <= 1000
 * 1 <= nums[i] <= 1000",Solutions (3.2K),2.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/concatenation-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getConcatenation(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getConcatenation(self, nums: List[int]) -> List[int]:
        return nums + nums"
False,0,0,2059,,Unique Length-3 Palindromic Subsequences,unique-length-3-palindromic-subsequences,False,23061,44386,1930,False,2,"Can you solve this real interview question? Unique Length-3 Palindromic Subsequences - Given a string s, return the number of unique palindromes of length three that are a subsequence of s.

Note that even if there are multiple ways to obtain the same subsequence, it is still only counted once.

A palindrome is a string that reads the same forwards and backwards.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 * For example, ""ace"" is a subsequence of ""abcde"".

 

Example 1:


Input: s = ""aabca""
Output: 3
Explanation: The 3 palindromic subsequences of length 3 are:
- ""aba"" (subsequence of ""aabca"")
- ""aaa"" (subsequence of ""aabca"")
- ""aca"" (subsequence of ""aabca"")


Example 2:


Input: s = ""adc""
Output: 0
Explanation: There are no palindromic subsequences of length 3 in ""adc"".


Example 3:


Input: s = ""bbcbaba""
Output: 4
Explanation: The 4 palindromic subsequences of length 3 are:
- ""bbb"" (subsequence of ""bbcbaba"")
- ""bcb"" (subsequence of ""bbcbaba"")
- ""bab"" (subsequence of ""bbcbaba"")
- ""aba"" (subsequence of ""bbcbaba"")


 

Constraints:

 * 3 <= s.length <= 105
 * s consists of only lowercase English letters.",Solutions (323),648,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/unique-length-3-palindromic-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countPalindromicSubsequence(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPalindromicSubsequence(self, s: str) -> int:
        pass"
False,0,0,2061,,Painting a Grid With Three Different Colors,painting-a-grid-with-three-different-colors,False,7553,13221,1931,False,3,"Can you solve this real interview question? Painting a Grid With Three Different Colors - You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.

Return the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/22/colorthegrid.png]


Input: m = 1, n = 1
Output: 3
Explanation: The three possible colorings are shown in the image above.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/22/copy-of-colorthegrid.png]


Input: m = 1, n = 2
Output: 6
Explanation: The six possible colorings are shown in the image above.


Example 3:


Input: m = 5, n = 5
Output: 580986


 

Constraints:

 * 1 <= m <= 5
 * 1 <= n <= 1000",Solutions (100),400,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/painting-a-grid-with-three-different-colors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().colorTheGrid(m, n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def colorTheGrid(self, m: int, n: int) -> int:
        MOD = 10**9 + 7
        
        def dfs(i, prev_mask, cur_mask):
            if i == m:
                return 1
            count = 0
            for color in range(3):
                if color == 0:
                    if (1 << color) & prev_mask == 0 and (1 << color) & cur_mask == 0:
                        count = (count + dfs(i + 1, cur_mask, prev_mask | (1 << color))) % MOD
                elif color == 1:
                    if (1 << color) & prev_mask == 0 and (1 << color) & cur_mask == 0:
                        count = (count + dfs(i + 1, cur_mask, prev_mask | (1 << color))) % MOD
                else:
                    if (1 << color) & prev_mask == 0 and (1 << color) & cur_mask == 0:
                        count = (count + dfs(i + 1, cur_mask, prev_mask | (1 << color))) % MOD
            return count
        
        return dfs(0, 0, 0)"
False,0,0,2066,,Add Minimum Number of Rungs,add-minimum-number-of-rungs,False,22797,53291,1936,False,2,"Can you solve this real interview question? Add Minimum Number of Rungs - You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.

You are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. You are able to insert rungs at any positive integer height if a rung is not already there.

Return the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.

 

Example 1:


Input: rungs = [1,3,5,10], dist = 2
Output: 2
Explanation:
You currently cannot reach the last rung.
Add rungs at heights 7 and 8 to climb this ladder. 
The ladder will now have rungs at [1,3,5,7,8,10].


Example 2:


Input: rungs = [3,6,8,10], dist = 3
Output: 0
Explanation:
This ladder can be climbed without adding additional rungs.


Example 3:


Input: rungs = [3,4,6,7], dist = 2
Output: 1
Explanation:
You currently cannot reach the first rung from the ground.
Add a rung at height 1 to climb this ladder.
The ladder will now have rungs at [1,3,4,6,7].


 

Constraints:

 * 1 <= rungs.length <= 105
 * 1 <= rungs[i] <= 109
 * 1 <= dist <= 109
 * rungs is strictly increasing.",Solutions (299),303,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/add-minimum-number-of-rungs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addRungs(self, rungs: List[int], dist: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rungs: List[int] = deserialize(""List[int]"", read_line())
    dist: int = deserialize(""int"", read_line())
    ans = Solution().addRungs(rungs, dist)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def addRungs(self, rungs: List[int], dist: int) -> int:
        count = 0
        prev = 0
        for rung in rungs:
            count += (rung - prev - 1) // dist
            prev = rung
        return count"
False,0,0,2067,maximum-number-of-points-with-cost,Maximum Number of Points with Cost,maximum-number-of-points-with-cost,False,53864,149201,1937,False,2,"Can you solve this real interview question? Maximum Number of Points with Cost - You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.

To gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.

However, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.

Return the maximum number of points you can achieve.

abs(x) is defined as:

 * x for x >= 0.
 * -x for x < 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-40-26-diagram-drawio-diagrams-net.png]


Input: points = [[1,2,3],[1,5,1],[3,1,1]]
Output: 9
Explanation:
The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).
You add 3 + 5 + 3 = 11 to your score.
However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.
Your final score is 11 - 2 = 9.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/12/screenshot-2021-07-12-at-13-42-14-diagram-drawio-diagrams-net.png]


Input: points = [[1,5],[2,3],[4,2]]
Output: 11
Explanation:
The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).
You add 5 + 3 + 4 = 12 to your score.
However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.
Your final score is 12 - 1 = 11.


 

Constraints:

 * m == points.length
 * n == points[r].length
 * 1 <= m, n <= 105
 * 1 <= m * n <= 105
 * 0 <= points[r][c] <= 105",Solutions (301),2.1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-points-with-cost/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxPoints(points)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        m, n = len(points), len(points[0])
        dp = points[0][:]
        
        for i in range(1, m):
            new_dp = [0] * n
            prev_max = max(dp)
            
            for j in range(n):
                new_dp[j] = max(new_dp[j], points[i][j] + prev_max - j)
            
            prev_max = max(dp)
            for j in range(n):
                dp[j] = max(dp[j], new_dp[j] - j)
                prev_max = max(prev_max, dp[j] + j)
        
        return max(dp)"
False,0,0,2068,,Maximum Genetic Difference Query,maximum-genetic-difference-query,False,4245,10715,1938,False,3,"Can you solve this real interview question? Maximum Genetic Difference Query - There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.

You are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.

Return an array ans where ans[i] is the answer to the ith query.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/06/29/c1.png]


Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]
Output: [2,3,7]
Explanation: The queries are processed as follows:
- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.
- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.
- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.


Example 2:

[https://assets.leetcode.com/uploads/2021/06/29/c2.png]


Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]
Output: [6,14,7]
Explanation: The queries are processed as follows:
- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.
- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.
- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.


 

Constraints:

 * 2 <= parents.length <= 105
 * 0 <= parents[i] <= parents.length - 1 for every node i that is not the root.
 * parents[root] == -1
 * 1 <= queries.length <= 3 * 104
 * 0 <= nodei <= parents.length - 1
 * 0 <= vali <= 2 * 105",Solutions (66),317,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-genetic-difference-query/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    parents: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxGeneticDifference(parents, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxGeneticDifference(self, parents: List[int], queries: List[List[int]]) -> List[int]:
        # Add your code here
        pass  # Placeholder for the actual implementation"
False,0,0,2076,,Sum of Digits of String After Convert,sum-of-digits-of-string-after-convert,False,38682,62987,1945,False,1,"Can you solve this real interview question? Sum of Digits of String After Convert - You are given a string s consisting of lowercase English letters, and an integer k.

First, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.

For example, if s = ""zbax"" and k = 2, then the resulting integer would be 8 by the following operations:

 * Convert: ""zbax"" ➝ ""(26)(2)(1)(24)"" ➝ ""262124"" ➝ 262124
 * Transform #1: 262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17
 * Transform #2: 17 ➝ 1 + 7 ➝ 8

Return the resulting integer after performing the operations described above.

 

Example 1:


Input: s = ""iiii"", k = 1
Output: 36
Explanation: The operations are as follows:
- Convert: ""iiii"" ➝ ""(9)(9)(9)(9)"" ➝ ""9999"" ➝ 9999
- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
Thus the resulting integer is 36.


Example 2:


Input: s = ""leetcode"", k = 2
Output: 6
Explanation: The operations are as follows:
- Convert: ""leetcode"" ➝ ""(12)(5)(5)(20)(3)(15)(4)(5)"" ➝ ""12552031545"" ➝ 12552031545
- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
- Transform #2: 33 ➝ 3 + 3 ➝ 6
Thus the resulting integer is 6.


Example 3:


Input: s = ""zbax"", k = 2
Output: 8


 

Constraints:

 * 1 <= s.length <= 100
 * 1 <= k <= 10
 * s consists of lowercase English letters.",Solutions (735),470,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-digits-of-string-after-convert/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getLucky(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getLucky(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getLucky(self, s: str, k: int) -> int:
        sum_of_digits = lambda num: sum(int(digit) for digit in str(num))
        num = sum(ord(char) - ord('a') + 1 for char in s)
        for _ in range(k):
            num = sum_of_digits(num)
        return num"
False,0,0,2077,,Largest Number After Mutating Substring,largest-number-after-mutating-substring,False,17096,49013,1946,False,2,"Can you solve this real interview question? Largest Number After Mutating Substring - You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].

You may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).

Return a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.

A substring is a contiguous sequence of characters within the string.

 

Example 1:


Input: num = ""132"", change = [9,8,5,0,3,6,4,2,6,8]
Output: ""832""
Explanation: Replace the substring ""1"":
- 1 maps to change[1] = 8.
Thus, ""132"" becomes ""832"".
""832"" is the largest number that can be created, so return it.


Example 2:


Input: num = ""021"", change = [9,4,3,5,7,2,1,9,0,6]
Output: ""934""
Explanation: Replace the substring ""021"":
- 0 maps to change[0] = 9.
- 2 maps to change[2] = 3.
- 1 maps to change[1] = 4.
Thus, ""021"" becomes ""934"".
""934"" is the largest number that can be created, so return it.


Example 3:


Input: num = ""5"", change = [1,4,7,5,3,2,5,6,9,4]
Output: ""5""
Explanation: ""5"" is already the largest number that can be created, so return it.


 

Constraints:

 * 1 <= num.length <= 105
 * num consists of only digits 0-9.
 * change.length == 10
 * 0 <= change[d] <= 9",Solutions (242),189,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-number-after-mutating-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumNumber(self, num: str, change: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    change: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumNumber(num, change)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def maximumNumber(self, num: str, change: List[int]) -> str:
        result = list(num)
        i = 0
        
        while i < len(num) and change[int(num[i])] <= int(num[i]):
            i += 1
        
        while i < len(num) and change[int(num[i])] >= int(num[i]):
            result[i] = str(change[int(num[i])])
            i += 1
        
        return """".join(result)"
False,0,0,2078,,Maximum Compatibility Score Sum,maximum-compatibility-score-sum,False,19167,31412,1947,False,2,"Can you solve this real interview question? Maximum Compatibility Score Sum - There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).

The survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).

Each student will be assigned to one mentor, and each mentor will have one student assigned to them. The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.

 * For example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same.

You are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.

Given students and mentors, return the maximum compatibility score sum that can be achieved.

 

Example 1:


Input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]
Output: 8
Explanation: We assign students to mentors in the following way:
- student 0 to mentor 2 with a compatibility score of 3.
- student 1 to mentor 0 with a compatibility score of 2.
- student 2 to mentor 1 with a compatibility score of 3.
The compatibility score sum is 3 + 2 + 3 = 8.


Example 2:


Input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]
Output: 0
Explanation: The compatibility score of any student-mentor pair is 0.


 

Constraints:

 * m == students.length == mentors.length
 * n == students[i].length == mentors[j].length
 * 1 <= m, n <= 8
 * students[i][k] is either 0 or 1.
 * mentors[j][k] is either 0 or 1.",Solutions (352),654,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-compatibility-score-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    students: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    mentors: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxCompatibilitySum(students, mentors)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCompatibilitySum(self, students: List[List[int]], mentors: List[List[int]]) -> int:
        def calculate_score(student, mentor):
            return sum([1 for i in range(len(student)) if student[i] == mentor[i]])

        def backtrack(student_index, mentor_mask):
            if student_index == len(students):
                return 0
            
            max_score = 0
            for mentor_index in range(len(mentors)):
                if (1 << mentor_index) & mentor_mask == 0:
                    mentor_mask ^= 1 << mentor_index
                    max_score = max(max_score, calculate_score(students[student_index], mentors[mentor_index]) + backtrack(student_index + 1, mentor_mask))
                    mentor_mask ^= 1 << mentor_index
            
            return max_score
        
        return backtrack(0, 0)"
False,0,0,2079,,Delete Duplicate Folders in System,delete-duplicate-folders-in-system,False,7082,12522,1948,False,3,"Can you solve this real interview question? Delete Duplicate Folders in System - Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.

 * For example, [""one"", ""two"", ""three""] represents the path ""/one/two/three"".

Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.

 * For example, folders ""/a"" and ""/b"" in the file structure below are identical. They (as well as their subfolders) should all be marked:
   * /a
   * /a/x
   * /a/x/y
   * /a/z
   * /b
   * /b/x
   * /b/x/y
   * /b/z
 * However, if the file structure also included the path ""/b/w"", then the folders ""/a"" and ""/b"" would not be identical. Note that ""/a/x"" and ""/b/x"" would still be considered identical even with the added folder.

Once all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.

Return the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder1.jpg]


Input: paths = [[""a""],[""c""],[""d""],[""a"",""b""],[""c"",""b""],[""d"",""a""]]
Output: [[""d""],[""d"",""a""]]
Explanation: The file structure is as shown.
Folders ""/a"" and ""/c"" (and their subfolders) are marked for deletion because they both contain an empty
folder named ""b"".


Example 2:

[https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder2.jpg]


Input: paths = [[""a""],[""c""],[""a"",""b""],[""c"",""b""],[""a"",""b"",""x""],[""a"",""b"",""x"",""y""],[""w""],[""w"",""y""]]
Output: [[""c""],[""c"",""b""],[""a""],[""a"",""b""]]
Explanation: The file structure is as shown. 
Folders ""/a/b/x"" and ""/w"" (and their subfolders) are marked for deletion because they both contain an empty folder named ""y"".
Note that folders ""/a"" and ""/c"" are identical after the deletion, but they are not deleted because they were not marked beforehand.


Example 3:

[https://assets.leetcode.com/uploads/2021/07/19/lc-dupfolder3.jpg]


Input: paths = [[""a"",""b""],[""c"",""d""],[""c""],[""a""]]
Output: [[""c""],[""c"",""d""],[""a""],[""a"",""b""]]
Explanation: All folders are unique in the file system.
Note that the returned array can be in a different order as the order does not matter.


 

Constraints:

 * 1 <= paths.length <= 2 * 104
 * 1 <= paths[i].length <= 500
 * 1 <= paths[i][j].length <= 10
 * 1 <= sum(paths[i][j].length) <= 2 * 105
 * path[i][j] consists of lowercase English letters.
 * No two paths lead to the same folder.
 * For any folder not at the root level, its parent folder will also be in the input.",Solutions (94),274,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-duplicate-folders-in-system/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    paths: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().deleteDuplicateFolder(paths)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def deleteDuplicateFolder(self, paths: List[List[str]]) -> List[List[str]]:
        # Add your solution here
        pass"
False,0,0,2080,,Check if Move is Legal,check-if-move-is-legal,False,8967,19739,1958,False,2,"Can you solve this real interview question? Check if Move is Legal - You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.

Each move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).

A good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:

[https://assets.leetcode.com/uploads/2021/07/22/goodlines5.png]

Given two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/10/grid11.png]


Input: board = [[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""W"",""."",""."",""."","".""],[""."",""."",""."",""W"",""."",""."",""."","".""],[""."",""."",""."",""W"",""."",""."",""."","".""],[""W"",""B"",""B"",""."",""W"",""W"",""W"",""B""],[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""W"",""."",""."",""."","".""]], rMove = 4, cMove = 3, color = ""B""
Output: true
Explanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.
The two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/10/grid2.png]


Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""B"",""."",""."",""W"",""."",""."","".""],[""."",""."",""W"",""."",""."",""."",""."","".""],[""."",""."",""."",""W"",""B"",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""B"",""W"",""."","".""],[""."",""."",""."",""."",""."",""."",""W"","".""],[""."",""."",""."",""."",""."",""."",""."",""B""]], rMove = 4, cMove = 4, color = ""W""
Output: false
Explanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.


 

Constraints:

 * board.length == board[r].length == 8
 * 0 <= rMove, cMove < 8
 * board[rMove][cMove] == '.'
 * color is either 'B' or 'W'.",Solutions (162),109,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-move-is-legal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkMove(self, board: List[List[str]], rMove: int, cMove: int, color: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    rMove: int = deserialize(""int"", read_line())
    cMove: int = deserialize(""int"", read_line())
    color: str = deserialize(""str"", read_line())
    ans = Solution().checkMove(board, rMove, cMove, color)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkMove(self, board: List[List[str]], rMove: int, cMove: int, color: str) -> bool:
        def check_line(row, col, dr, dc):
            count = 0
            while 0 <= row < 8 and 0 <= col < 8 and board[row][col] == color:
                count += 1
                row += dr
                col += dc
            return count
 
        def check_good_line(row, col):
            directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
            for dr, dc in directions:
                total_count = check_line(row, col, dr, dc) + check_line(row, col, -dr, -dc) - 1
                if total_count >= 3:
                    return True
            return False
 
        if board[rMove][cMove] != '.':
            return False
        
        board[rMove][cMove] = color
        result = check_good_line(rMove, cMove)
        board[rMove][cMove] = '.'
        
        return result"
False,0,0,2081,,Minimum Total Space Wasted With K Resizing Operations,minimum-total-space-wasted-with-k-resizing-operations,False,6777,16013,1959,False,2,"Can you solve this real interview question? Minimum Total Space Wasted With K Resizing Operations - You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).

The size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.

Return the minimum total space wasted if you can resize the array at most k times.

Note: The array can have any size at the start and does not count towards the number of resizing operations.

 

Example 1:


Input: nums = [10,20], k = 0
Output: 10
Explanation: size = [20,20].
We can set the initial size to be 20.
The total wasted space is (20 - 10) + (20 - 20) = 10.


Example 2:


Input: nums = [10,20,30], k = 1
Output: 10
Explanation: size = [20,20,30].
We can set the initial size to be 20 and resize to 30 at time 2. 
The total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.


Example 3:


Input: nums = [10,20,15,30,20], k = 2
Output: 15
Explanation: size = [10,20,20,30,30].
We can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.
The total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.


 

Constraints:

 * 1 <= nums.length <= 200
 * 1 <= nums[i] <= 106
 * 0 <= k <= nums.length - 1",Solutions (84),491,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-total-space-wasted-with-k-resizing-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minSpaceWastedKResizing(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSpaceWastedKResizing(self, nums: List[int], k: int) -> int:
        n = len(nums)
        dp = [[float('inf')] * (k + 1) for _ in range(n)]
        dp[0][0] = 0
        max_val = nums[0]
        wasted = 0

        for i in range(1, n):
            max_val = max(max_val, nums[i])
            wasted += max_val * (i + 1) - sum(nums[:i + 1])

        dp[0][0] = wasted

        for i in range(1, n):
            for j in range(1, k + 1):
                min_res = float('inf')
                max_val = 0
                sum_num = 0

                for l in range(i, -1, -1):
                    max_val = max(max_val, nums[l])
                    sum_num += nums[l]

                    res = dp[l][j - 1] + max_val * (i - l + 1) - sum_num
                    min_res = min(min_res, res)

                dp[i][j] = min_res

        return dp[n - 1][k]"
False,0,0,2083,,Three Divisors,three-divisors,False,42813,73624,1952,False,1,"Can you solve this real interview question? Three Divisors - Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.

An integer m is a divisor of n if there exists an integer k such that n = k * m.

 

Example 1:


Input: n = 2
Output: false
Explantion: 2 has only two divisors: 1 and 2.


Example 2:


Input: n = 4
Output: true
Explantion: 4 has three divisors: 1, 2, and 4.


 

Constraints:

 * 1 <= n <= 104",Solutions (741),402,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/three-divisors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isThree(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isThree(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isThree(self, n: int) -> bool:
        return sum(n % i == 0 for i in range(1, n+1)) == 3"
False,0,0,2084,,Maximum Number of Weeks for Which You Can Work,maximum-number-of-weeks-for-which-you-can-work,False,18958,48142,1953,False,2,"Can you solve this real interview question? Maximum Number of Weeks for Which You Can Work - There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.

You can work on the projects following these two rules:

 * Every week, you will finish exactly one milestone of one project. You must work every week.
 * You cannot work on two milestones from the same project for two consecutive weeks.

Once all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints.

Return the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.

 

Example 1:


Input: milestones = [1,2,3]
Output: 6
Explanation: One possible scenario is:
​​​​- During the 1st week, you will work on a milestone of project 0.
- During the 2nd week, you will work on a milestone of project 2.
- During the 3rd week, you will work on a milestone of project 1.
- During the 4th week, you will work on a milestone of project 2.
- During the 5th week, you will work on a milestone of project 1.
- During the 6th week, you will work on a milestone of project 2.
The total number of weeks is 6.


Example 2:


Input: milestones = [5,2,1]
Output: 7
Explanation: One possible scenario is:
- During the 1st week, you will work on a milestone of project 0.
- During the 2nd week, you will work on a milestone of project 1.
- During the 3rd week, you will work on a milestone of project 0.
- During the 4th week, you will work on a milestone of project 1.
- During the 5th week, you will work on a milestone of project 0.
- During the 6th week, you will work on a milestone of project 2.
- During the 7th week, you will work on a milestone of project 0.
The total number of weeks is 7.
Note that you cannot work on the last milestone of project 0 on 8th week because it would violate the rules.
Thus, one milestone in project 0 will remain unfinished.


 

Constraints:

 * n == milestones.length
 * 1 <= n <= 105
 * 1 <= milestones[i] <= 109",Solutions (198),550,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-weeks-for-which-you-can-work/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfWeeks(self, milestones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    milestones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numberOfWeeks(milestones)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def numberOfWeeks(self, milestones: List[int]) -> int:
        max_milestone = max(milestones)
        rest_sum = sum(milestones) - max_milestone
        
        if max_milestone <= rest_sum:
            return 2 * rest_sum + 1
        else:
            return rest_sum + rest_sum + max_milestone"
False,0,0,2085,,Array With Elements Not Equal to Average of Neighbors,array-with-elements-not-equal-to-average-of-neighbors,False,23910,48319,1968,False,2,"Can you solve this real interview question? Array With Elements Not Equal to Average of Neighbors - You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.

More formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].

Return any rearrangement of nums that meets the requirements.

 

Example 1:


Input: nums = [1,2,3,4,5]
Output: [1,2,4,5,3]
Explanation:
When i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.
When i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.
When i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.


Example 2:


Input: nums = [6,2,0,9,7]
Output: [9,7,6,2,0]
Explanation:
When i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.
When i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.
When i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.


 

Constraints:

 * 3 <= nums.length <= 105
 * 0 <= nums[i] <= 105",Solutions (275),437,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/array-with-elements-not-equal-to-average-of-neighbors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().rearrangeArray(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        import random
        result = sorted(nums)
        while True:
            random.shuffle(result)
            valid = True
            for i in range(1, len(result) - 1):
                if (result[i-1] + result[i+1]) / 2 == result[i]:
                    valid = False
                    break
            if valid:
                return result"
False,0,0,2086,,Count Number of Special Subsequences,count-number-of-special-subsequences,False,9272,18198,1955,False,3,"Can you solve this real interview question? Count Number of Special Subsequences - A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.

 * For example, [0,1,2] and [0,0,1,1,1,2] are special.
 * In contrast, [2,1,0], [1], and [0,1,2,0] are not special.

Given an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.

 

Example 1:


Input: nums = [0,1,2,2]
Output: 3
Explanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2].


Example 2:


Input: nums = [2,2,0,0]
Output: 0
Explanation: There are no special subsequences in [2,2,0,0].


Example 3:


Input: nums = [0,1,2,0,1,2]
Output: 7
Explanation: The special subsequences are bolded:
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]
- [0,1,2,0,1,2]


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 2",Solutions (148),445,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-special-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSpecialSubsequences(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countSpecialSubsequences(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSpecialSubsequences(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        dp = [0, 0, 0]
        for num in nums:
            dp[num] = (2*dp[num] + (num == 0)) % MOD
        return dp[2] % MOD"
False,0,0,2088,,Minimum Time to Type Word Using Special Typewriter,minimum-time-to-type-word-using-special-typewriter,False,29574,40854,1974,False,1,"Can you solve this real interview question? Minimum Time to Type Word Using Special Typewriter - There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.

[https://assets.leetcode.com/uploads/2021/07/31/chart.jpg]

Each second, you may perform one of the following operations:

 * Move the pointer one character counterclockwise or clockwise.
 * Type the character the pointer is currently on.

Given a string word, return the minimum number of seconds to type out the characters in word.

 

Example 1:


Input: word = ""abc""
Output: 5
Explanation: 
The characters are printed as follows:
- Type the character 'a' in 1 second since the pointer is initially on 'a'.
- Move the pointer clockwise to 'b' in 1 second.
- Type the character 'b' in 1 second.
- Move the pointer clockwise to 'c' in 1 second.
- Type the character 'c' in 1 second.


Example 2:


Input: word = ""bza""
Output: 7
Explanation:
The characters are printed as follows:
- Move the pointer clockwise to 'b' in 1 second.
- Type the character 'b' in 1 second.
- Move the pointer counterclockwise to 'z' in 2 seconds.
- Type the character 'z' in 1 second.
- Move the pointer clockwise to 'a' in 1 second.
- Type the character 'a' in 1 second.


Example 3:


Input: word = ""zjpc""
Output: 34
Explanation:
The characters are printed as follows:
- Move the pointer counterclockwise to 'z' in 1 second.
- Type the character 'z' in 1 second.
- Move the pointer clockwise to 'j' in 10 seconds.
- Type the character 'j' in 1 second.
- Move the pointer clockwise to 'p' in 6 seconds.
- Type the character 'p' in 1 second.
- Move the pointer counterclockwise to 'c' in 13 seconds.
- Type the character 'c' in 1 second.


 

Constraints:

 * 1 <= word.length <= 100
 * word consists of lowercase English letters.",Solutions (501),550,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minTimeToType(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().minTimeToType(word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minTimeToType(self, word: str) -> int:
        time = 0
        current = 'a'
        
        for letter in word:
            diff = abs(ord(letter) - ord(current))
            time += min(diff, 26 - diff) + 1
            current = letter
        
        return time"
False,0,0,2089,,Maximum Matrix Sum,maximum-matrix-sum,False,14650,30305,1975,False,2,"Can you solve this real interview question? Maximum Matrix Sum - You are given an n x n integer matrix. You can do the following operation any number of times:

 * Choose any two adjacent elements of matrix and multiply each of them by -1.

Two elements are considered adjacent if and only if they share a border.

Your goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex1.png]


Input: matrix = [[1,-1],[-1,1]]
Output: 4
Explanation: We can follow the following steps to reach sum equals 4:
- Multiply the 2 elements in the first row by -1.
- Multiply the 2 elements in the first column by -1.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex2.png]


Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]
Output: 16
Explanation: We can follow the following step to reach sum equals 16:
- Multiply the 2 last elements in the second row by -1.


 

Constraints:

 * n == matrix.length == matrix[i].length
 * 2 <= n <= 250
 * -105 <= matrix[i][j] <= 105",Solutions (199),468,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-matrix-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxMatrixSum(self, matrix: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxMatrixSum(matrix)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxMatrixSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        negatives = 0
        min_abs = float('inf')
        total_sum = 0
        
        for row in matrix:
            for num in row:
                total_sum += abs(num)
                if num < 0:
                    negatives += 1
                min_abs = min(min_abs, abs(num))
        
        return total_sum if negatives % 2 == 0 else total_sum - 2 * min_abs"
False,0,0,2090,,Number of Ways to Arrive at Destination,number-of-ways-to-arrive-at-destination,False,28710,92840,1976,False,2,"Can you solve this real interview question? Number of Ways to Arrive at Destination - You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.

You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.

Return the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/17/graph2.png]


Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]
Output: 4
Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.
The four ways to get there in 7 minutes are:
- 0 ➝ 6
- 0 ➝ 4 ➝ 6
- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6
- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6


Example 2:


Input: n = 2, roads = [[1,0,10]]
Output: 1
Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.


 

Constraints:

 * 1 <= n <= 200
 * n - 1 <= roads.length <= n * (n - 1) / 2
 * roads[i].length == 3
 * 0 <= ui, vi <= n - 1
 * 1 <= timei <= 109
 * ui != vi
 * There is at most one road connecting any two intersections.
 * You can reach any intersection from any other intersection.",Solutions (309),1.8K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPaths(self, n: int, roads: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    roads: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countPaths(n, roads)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPaths(self, n: int, roads: List[List[int]]) -> int:
        MOD = 10**9 + 7
        
        graph = defaultdict(list)
        for u, v, w in roads:
            graph[u].append((v, w))
            graph[v].append((u, w))
        
        dist = [float('inf')] * n
        count = [0] * n
        dist[0] = 0
        count[0] = 1
        
        heap = [(0, 0)]
        
        while heap:
            d, node = heapq.heappop(heap)
            if dist[node] < d:
                continue
            for nei, time in graph[node]:
                if dist[node] + time < dist[nei]:
                    dist[nei] = dist[node] + time
                    count[nei] = count[node]
                    heapq.heappush(heap, (dist[nei], nei))
                elif dist[node] + time == dist[nei]:
                    count[nei] = (count[nei] + count[node]) % MOD
        
        return count[n-1]"
False,0,0,2091,,Number of Ways to Separate Numbers,number-of-ways-to-separate-numbers,False,4410,21063,1977,False,3,"Can you solve this real interview question? Number of Ways to Separate Numbers - You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.

Return the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: num = ""327""
Output: 2
Explanation: You could have written down the numbers:
3, 27
327


Example 2:


Input: num = ""094""
Output: 0
Explanation: No numbers can have leading zeros and all numbers must be positive.


Example 3:


Input: num = ""0""
Output: 0
Explanation: No numbers can have leading zeros and all numbers must be positive.


 

Constraints:

 * 1 <= num.length <= 3500
 * num consists of digits '0' through '9'.",Solutions (73),399,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-separate-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfCombinations(self, num: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().numberOfCombinations(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfCombinations(self, num: str) -> int:
        MOD = 1000000007
        if num[0] == '0':
            return 0
        
        n = len(num)
        dp = [0] * (n + 1)
        dp[0] = dp[1] = 1
        
        for i in range(2, n + 1):
            if num[i - 1] == '0':
                if num[i - 2] not in ['1', '2']:
                    return 0
                dp[i] = dp[i - 2]
            elif 1 <= int(num[i - 2: i]) <= 26:
                dp[i] += dp[i - 1] + dp[i - 2]
            else:
                dp[i] = dp[i - 1]
        
        return dp[n] % MOD"
False,0,0,2093,,Check If String Is a Prefix of Array,check-if-string-is-a-prefix-of-array,False,36982,69139,1961,False,1,"Can you solve this real interview question? Check If String Is a Prefix of Array - Given a string s and an array of strings words, determine whether s is a prefix string of words.

A string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.

Return true if s is a prefix string of words, or false otherwise.

 

Example 1:


Input: s = ""iloveleetcode"", words = [""i"",""love"",""leetcode"",""apples""]
Output: true
Explanation:
s can be made by concatenating ""i"", ""love"", and ""leetcode"" together.


Example 2:


Input: s = ""iloveleetcode"", words = [""apples"",""i"",""love"",""leetcode""]
Output: false
Explanation:
It is impossible to make s using a prefix of arr.

 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 20
 * 1 <= s.length <= 1000
 * words[i] and s consist of only lowercase English letters.",Solutions (630),381,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-string-is-a-prefix-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPrefixString(self, s: str, words: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().isPrefixString(s, words)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPrefixString(self, s: str, words: List[str]) -> bool:
        prefix = """"
        for word in words:
            prefix += word
            if prefix == s:
                return True
        return False"
False,0,0,2094,remove-stones-to-minimize-the-total,Remove Stones to Minimize the Total,remove-stones-to-minimize-the-total,False,77861,129378,1962,False,2,"Can you solve this real interview question? Remove Stones to Minimize the Total - You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:

 * Choose any piles[i] and remove floor(piles[i] / 2) stones from it.

Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.

floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).

 

Example 1:


Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.


Example 2:


Input: piles = [4,3,6,7], k = 3
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [4,3,3,7].
- Apply the operation on pile 3. The resulting piles are [4,3,3,4].
- Apply the operation on pile 0. The resulting piles are [2,3,3,4].
The total number of stones in [2,3,3,4] is 12.


 

Constraints:

 * 1 <= piles.length <= 105
 * 1 <= piles[i] <= 104
 * 1 <= k <= 105",Solutions (1.6K),1.6K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-stones-to-minimize-the-total/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minStoneSum(self, piles: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    piles: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minStoneSum(piles, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minStoneSum(self, piles: List[int], k: int) -> int:
        import heapq
        
        max_piles = [-x for x in piles]
        heapq.heapify(max_piles)
        
        for _ in range(k):
            max_val = -heapq.heappop(max_piles)
            new_val = max_val - max_val // 2
            heapq.heappush(max_piles, -new_val)
            
        return sum(max_piles)"
False,0,0,2095,,Minimum Number of Swaps to Make the String Balanced,minimum-number-of-swaps-to-make-the-string-balanced,False,44432,64187,1963,False,2,"Can you solve this real interview question? Minimum Number of Swaps to Make the String Balanced - You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.

A string is called balanced if and only if:

 * It is the empty string, or
 * It can be written as AB, where both A and B are balanced strings, or
 * It can be written as [C], where C is a balanced string.

You may swap the brackets at any two indices any number of times.

Return the minimum number of swaps to make s balanced.

 

Example 1:


Input: s = ""][][""
Output: 1
Explanation: You can make the string balanced by swapping index 0 with index 3.
The resulting string is ""[[]]"".


Example 2:


Input: s = ""]]][[[""
Output: 2
Explanation: You can do the following to make the string balanced:
- Swap index 0 with index 4. s = ""[]][]["".
- Swap index 1 with index 5. s = ""[[][]]"".
The resulting string is ""[[][]]"".


Example 3:


Input: s = ""[]""
Output: 0
Explanation: The string is already balanced.


 

Constraints:

 * n == s.length
 * 2 <= n <= 106
 * n is even.
 * s[i] is either '[' or ']'.
 * The number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.",Solutions (566),1.4K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwaps(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minSwaps(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwaps(self, s: str) -> int:
        stack = []
        swaps = 0
        
        for bracket in s:
            if bracket == '[':
                stack.append('[')
            else:
                if stack and stack[-1] == '[':
                    stack.pop()
                else:
                    swaps += 1
        
        return (swaps + 1) // 2"
False,0,0,2096,,Find the Longest Valid Obstacle Course at Each Position,find-the-longest-valid-obstacle-course-at-each-position,False,10171,21533,1964,False,3,"Can you solve this real interview question? Find the Longest Valid Obstacle Course at Each Position - You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.

For every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:

 * You choose any number of obstacles between 0 and i inclusive.
 * You must include the ith obstacle in the course.
 * You must put the chosen obstacles in the same order as they appear in obstacles.
 * Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it.

Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.

 

Example 1:


Input: obstacles = [1,2,3,2]
Output: [1,2,3,3]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [1], [1] has length 1.
- i = 1: [1,2], [1,2] has length 2.
- i = 2: [1,2,3], [1,2,3] has length 3.
- i = 3: [1,2,3,2], [1,2,2] has length 3.


Example 2:


Input: obstacles = [2,2,1]
Output: [1,2,1]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [2], [2] has length 1.
- i = 1: [2,2], [2,2] has length 2.
- i = 2: [2,2,1], [1] has length 1.


Example 3:


Input: obstacles = [3,1,5,6,4,2]
Output: [1,1,2,3,2,2]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [3], [3] has length 1.
- i = 1: [3,1], [1] has length 1.
- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.
- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.
- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.
- i = 5: [3,1,5,6,4,2], [1,2] has length 2.


 

Constraints:

 * n == obstacles.length
 * 1 <= n <= 105
 * 1 <= obstacles[i] <= 107",Solutions (131),458,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    obstacles: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestObstacleCourseAtEachPosition(obstacles)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def longestObstacleCourseAtEachPosition(self, obstacles: List[int]) -> List[int]:
        n = len(obstacles)
        dp = [0] * n
        stack = []
        for i in range(n):
            lo, hi = 1, len(stack)
            while lo <= hi:
                mid = lo + (hi - lo) // 2
                if stack[mid-1] <= obstacles[i]:
                    lo = mid + 1
                else:
                    hi = mid - 1
            if lo == len(stack) + 1:
                stack.append(obstacles[i])
            else:
                stack[lo-1] = obstacles[i]
            dp[i] = lo
        return dp"
False,0,0,2099,,Number of Strings That Appear as Substrings in Word,number-of-strings-that-appear-as-substrings-in-word,False,46936,58624,1967,False,1,"Can you solve this real interview question? Number of Strings That Appear as Substrings in Word - Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: patterns = [""a"",""abc"",""bc"",""d""], word = ""abc""
Output: 3
Explanation:
- ""a"" appears as a substring in ""abc"".
- ""abc"" appears as a substring in ""abc"".
- ""bc"" appears as a substring in ""abc"".
- ""d"" does not appear as a substring in ""abc"".
3 of the strings in patterns appear as a substring in word.


Example 2:


Input: patterns = [""a"",""b"",""c""], word = ""aaaaabbbbb""
Output: 2
Explanation:
- ""a"" appears as a substring in ""aaaaabbbbb"".
- ""b"" appears as a substring in ""aaaaabbbbb"".
- ""c"" does not appear as a substring in ""aaaaabbbbb"".
2 of the strings in patterns appear as a substring in word.


Example 3:


Input: patterns = [""a"",""a"",""a""], word = ""ab""
Output: 3
Explanation: Each of the patterns appears as a substring in word ""ab"".


 

Constraints:

 * 1 <= patterns.length <= 100
 * 1 <= patterns[i].length <= 100
 * 1 <= word.length <= 100
 * patterns[i] and word consist of lowercase English letters.",Solutions (859),530,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-strings-that-appear-as-substrings-in-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfStrings(self, patterns: List[str], word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    patterns: List[str] = deserialize(""List[str]"", read_line())
    word: str = deserialize(""str"", read_line())
    ans = Solution().numOfStrings(patterns, word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfStrings(self, patterns: List[str], word: str) -> int:
        count = 0
        for pattern in patterns:
            if pattern in word:
                count += 1
        return count"
False,0,0,2100,,Minimum Non-Zero Product of the Array Elements,minimum-non-zero-product-of-the-array-elements,False,8917,26007,1969,False,2,"Can you solve this real interview question? Minimum Non-Zero Product of the Array Elements - You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. You are allowed to do the following operation any number of times:

 * Choose two elements x and y from nums.
 * Choose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.

For example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.

Find the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 109 + 7.

Note: The answer should be the minimum product before the modulo operation is done.

 

Example 1:


Input: p = 1
Output: 1
Explanation: nums = [1].
There is only one element, so the product equals that element.


Example 2:


Input: p = 2
Output: 6
Explanation: nums = [01, 10, 11].
Any swap would either make the product 0 or stay the same.
Thus, the array product of 1 * 2 * 3 = 6 is already minimized.


Example 3:


Input: p = 3
Output: 1512
Explanation: nums = [001, 010, 011, 100, 101, 110, 111]
- In the first operation we can swap the leftmost bit of the second and fifth elements.
    - The resulting array is [001, 110, 011, 100, 001, 110, 111].
- In the second operation we can swap the middle bit of the third and fourth elements.
    - The resulting array is [001, 110, 001, 110, 001, 110, 111].
The array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.


 

Constraints:

 * 1 <= p <= 60",Solutions (101),181,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-non-zero-product-of-the-array-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minNonZeroProduct(self, p: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    p: int = deserialize(""int"", read_line())
    ans = Solution().minNonZeroProduct(p)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minNonZeroProduct(self, p: int) -> int:
        return pow((pow(2, p) - 2), (pow(2, p) // 2 - 1), 10**9 + 7) * (pow(2, p) - 1) % (10**9 + 7)"
False,0,0,2101,,Last Day Where You Can Still Cross,last-day-where-you-can-still-cross,False,11469,23073,1970,False,3,"Can you solve this real interview question? Last Day Where You Can Still Cross - There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.

Initially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).

You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).

Return the last day where it is possible to walk from the top to the bottom by only walking on land cells.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/07/27/1.png]


Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]
Output: 2
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 2.


Example 2:

[https://assets.leetcode.com/uploads/2021/07/27/2.png]


Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]
Output: 1
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 1.


Example 3:

[https://assets.leetcode.com/uploads/2021/07/27/3.png]


Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]
Output: 3
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 3.


 

Constraints:

 * 2 <= row, col <= 2 * 104
 * 4 <= row * col <= 2 * 104
 * cells.length == row * col
 * 1 <= ri <= row
 * 1 <= ci <= col
 * All the values of cells are unique.",Solutions (211),592,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/last-day-where-you-can-still-cross/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    row: int = deserialize(""int"", read_line())
    col: int = deserialize(""int"", read_line())
    cells: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().latestDayToCross(row, col, cells)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def latestDayToCross(self, row: int, col: int, cells: List[List[int]]) -> int:
        pass"
False,0,0,2102,,Find the Middle Index in Array,find-the-middle-index-in-array,False,59209,87794,1991,False,1,"Can you solve this real interview question? Find the Middle Index in Array - Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).

A middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].

If middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.

Return the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.

 

Example 1:


Input: nums = [2,3,-1,8,4]
Output: 3
Explanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4
The sum of the numbers after index 3 is: 4 = 4


Example 2:


Input: nums = [1,-1,4]
Output: 2
Explanation: The sum of the numbers before index 2 is: 1 + -1 = 0
The sum of the numbers after index 2 is: 0


Example 3:


Input: nums = [2,5]
Output: -1
Explanation: There is no valid middleIndex.


 

Constraints:

 * 1 <= nums.length <= 100
 * -1000 <= nums[i] <= 1000

 

Note: This question is the same as 724: https://leetcode.com/problems/find-pivot-index/ [https://leetcode.com/problems/find-pivot-index/]",Solutions (993),1K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-middle-index-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMiddleIndex(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMiddleIndex(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMiddleIndex(self, nums: List[int]) -> int:
        total_sum = sum(nums)
        left_sum = 0
        
        for i in range(len(nums)):
            if left_sum == total_sum - left_sum - nums[i]:
                return i
            left_sum += nums[i]
        
        return -1"
False,0,0,2105,,The Number of Good Subsets,the-number-of-good-subsets,False,5143,14890,1994,False,3,"Can you solve this real interview question? The Number of Good Subsets - You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.

 * For example, if nums = [1, 2, 3, 4]:
   * [2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.
   * [1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.

Return the number of different good subsets in nums modulo 109 + 7.

A subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:


Input: nums = [1,2,3,4]
Output: 6
Explanation: The good subsets are:
- [1,2]: product is 2, which is the product of distinct prime 2.
- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [1,3]: product is 3, which is the product of distinct prime 3.
- [2]: product is 2, which is the product of distinct prime 2.
- [2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [3]: product is 3, which is the product of distinct prime 3.


Example 2:


Input: nums = [4,2,3,15]
Output: 5
Explanation: The good subsets are:
- [2]: product is 2, which is the product of distinct prime 2.
- [2,3]: product is 6, which is the product of distinct primes 2 and 3.
- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.
- [3]: product is 3, which is the product of distinct prime 3.
- [15]: product is 15, which is the product of distinct primes 3 and 5.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 30",Solutions (67),351,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/the-number-of-good-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfGoodSubsets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numberOfGoodSubsets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfGoodSubsets(self, nums: List[int]) -> int:
        pass"
False,0,0,2106,,Find Greatest Common Divisor of Array,find-greatest-common-divisor-of-array,False,78475,101951,1979,False,1,"Can you solve this real interview question? Find Greatest Common Divisor of Array - Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.

The greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.

 

Example 1:


Input: nums = [2,5,6,9,10]
Output: 2
Explanation:
The smallest number in nums is 2.
The largest number in nums is 10.
The greatest common divisor of 2 and 10 is 2.


Example 2:


Input: nums = [7,5,6,8,3]
Output: 1
Explanation:
The smallest number in nums is 3.
The largest number in nums is 8.
The greatest common divisor of 3 and 8 is 1.


Example 3:


Input: nums = [3,3]
Output: 3
Explanation:
The smallest number in nums is 3.
The largest number in nums is 3.
The greatest common divisor of 3 and 3 is 3.


 

Constraints:

 * 2 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000",Solutions (1.3K),820,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-greatest-common-divisor-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findGCD(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findGCD(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findGCD(self, nums: List[int]) -> int:
        import math
        return math.gcd(min(nums), max(nums))"
False,0,0,2107,,Find Unique Binary String,find-unique-binary-string,False,35506,54460,1980,False,2,"Can you solve this real interview question? Find Unique Binary String - Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:


Input: nums = [""01"",""10""]
Output: ""11""
Explanation: ""11"" does not appear in nums. ""00"" would also be correct.


Example 2:


Input: nums = [""00"",""01""]
Output: ""11""
Explanation: ""11"" does not appear in nums. ""10"" would also be correct.


Example 3:


Input: nums = [""111"",""011"",""001""]
Output: ""101""
Explanation: ""101"" does not appear in nums. ""000"", ""010"", ""100"", and ""110"" would also be correct.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 16
 * nums[i].length == n
 * nums[i] is either '0' or '1'.
 * All the strings of nums are unique.",Solutions (616),882,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-unique-binary-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findDifferentBinaryString(nums)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def findDifferentBinaryString(self, nums: List[str]) -> str:
        seen = set(nums)
        n = len(nums)
        for i in range(2 ** n):
            b = bin(i)[2:]
            b = '0' * (n - len(b)) + b
            if b not in seen:
                return b"
False,0,0,2108,,Minimize the Difference Between Target and Chosen Elements,minimize-the-difference-between-target-and-chosen-elements,False,20123,62129,1981,False,2,"Can you solve this real interview question? Minimize the Difference Between Target and Chosen Elements - You are given an m x n integer matrix mat and an integer target.

Choose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.

Return the minimum absolute difference.

The absolute difference between two numbers a and b is the absolute value of a - b.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/03/matrix1.png]


Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13
Output: 0
Explanation: One possible choice is to:
- Choose 1 from the first row.
- Choose 5 from the second row.
- Choose 7 from the third row.
The sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.


Example 2:

[https://assets.leetcode.com/uploads/2021/08/03/matrix1-1.png]


Input: mat = [[1],[2],[3]], target = 100
Output: 94
Explanation: The best possible choice is to:
- Choose 1 from the first row.
- Choose 2 from the second row.
- Choose 3 from the third row.
The sum of the chosen elements is 6, and the absolute difference is 94.


Example 3:

[https://assets.leetcode.com/uploads/2021/08/03/matrix1-3.png]


Input: mat = [[1,2,9,8,7]], target = 6
Output: 1
Explanation: The best choice is to choose 7 from the first row.
The absolute difference is 1.


 

Constraints:

 * m == mat.length
 * n == mat[i].length
 * 1 <= m, n <= 70
 * 1 <= mat[i][j] <= 70
 * 1 <= target <= 800",Solutions (211),743,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-the-difference-between-target-and-chosen-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeTheDifference(self, mat: List[List[int]], target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    mat: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().minimizeTheDifference(mat, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizeTheDifference(self, mat: List[List[int]], target: int) -> int:
        import itertools
        possible_sums = set([sum(subset) for row in mat for subset in itertools.product(row)])
        closest_sum = min(possible_sums, key=lambda x: abs(target - x))
        return abs(target - closest_sum)"
False,0,0,2109,,Find Array Given Subset Sums,find-array-given-subset-sums,False,4160,8574,1982,False,3,"Can you solve this real interview question? Find Array Given Subset Sums - You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).

Return the array ans of length n representing the unknown array. If multiple answers exist, return any of them.

An array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. The sum of the elements in sub is one possible subset sum of arr. The sum of an empty array is considered to be 0.

Note: Test cases are generated such that there will always be at least one correct answer.

 

Example 1:


Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]
Output: [1,2,-3]
Explanation: [1,2,-3] is able to achieve the given subset sums:
- []: sum is 0
- [1]: sum is 1
- [2]: sum is 2
- [1,2]: sum is 3
- [-3]: sum is -3
- [1,-3]: sum is -2
- [2,-3]: sum is -1
- [1,2,-3]: sum is 0
Note that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.


Example 2:


Input: n = 2, sums = [0,0,0,0]
Output: [0,0]
Explanation: The only correct answer is [0,0].


Example 3:


Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]
Output: [0,-1,4,5]
Explanation: [0,-1,4,5] is able to achieve the given subset sums.


 

Constraints:

 * 1 <= n <= 15
 * sums.length == 2n
 * -104 <= sums[i] <= 104",Solutions (36),460,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-array-given-subset-sums/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def recoverArray(self, n: int, sums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    sums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().recoverArray(n, sums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def recoverArray(self, n: int, sums: List[int]) -> List[int]:
        pass"
False,0,0,2112,,Minimum Difference Between Highest and Lowest of K Scores,minimum-difference-between-highest-and-lowest-of-k-scores,False,42358,77862,1984,False,1,"Can you solve this real interview question? Minimum Difference Between Highest and Lowest of K Scores - You are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. You are also given an integer k.

Pick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.

Return the minimum possible difference.

 

Example 1:


Input: nums = [90], k = 1
Output: 0
Explanation: There is one way to pick score(s) of one student:
- [90]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.


Example 2:


Input: nums = [9,4,1,7], k = 2
Output: 2
Explanation: There are six ways to pick score(s) of two students:
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.
- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.
- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.
- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.

 

Constraints:

 * 1 <= k <= nums.length <= 1000
 * 0 <= nums[i] <= 105",Solutions (569),705,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDifference(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumDifference(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDifference(self, nums: List[int], k: int) -> int:
        nums.sort()
        res = float('inf')
        for i in range(len(nums) - k + 1):
            res = min(res, nums[i+k-1] - nums[i])
        return res"
False,0,0,2113,,Find the Kth Largest Integer in the Array,find-the-kth-largest-integer-in-the-array,False,45101,101249,1985,False,2,"Can you solve this real interview question? Find the Kth Largest Integer in the Array - You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.

Return the string that represents the kth largest integer in nums.

Note: Duplicate numbers should be counted distinctly. For example, if nums is [""1"",""2"",""2""], ""2"" is the first largest integer, ""2"" is the second-largest integer, and ""1"" is the third-largest integer.

 

Example 1:


Input: nums = [""3"",""6"",""7"",""10""], k = 4
Output: ""3""
Explanation:
The numbers in nums sorted in non-decreasing order are [""3"",""6"",""7"",""10""].
The 4th largest integer in nums is ""3"".


Example 2:


Input: nums = [""2"",""21"",""12"",""1""], k = 3
Output: ""2""
Explanation:
The numbers in nums sorted in non-decreasing order are [""1"",""2"",""12"",""21""].
The 3rd largest integer in nums is ""2"".


Example 3:


Input: nums = [""0"",""0""], k = 2
Output: ""0""
Explanation:
The numbers in nums sorted in non-decreasing order are [""0"",""0""].
The 2nd largest integer in nums is ""0"".


 

Constraints:

 * 1 <= k <= nums.length <= 104
 * 1 <= nums[i].length <= 100
 * nums[i] consists of only digits.
 * nums[i] will not have any leading zeros.",Solutions (614),922,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthLargestNumber(self, nums: List[str], k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[str] = deserialize(""List[str]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthLargestNumber(nums, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def kthLargestNumber(self, nums: List[str], k: int) -> str:
        return str(sorted(nums, key=lambda x: int(x), reverse=True)[k-1])"
False,0,0,2114,,Minimum Number of Work Sessions to Finish the Tasks,minimum-number-of-work-sessions-to-finish-the-tasks,False,19400,59317,1986,False,2,"Can you solve this real interview question? Minimum Number of Work Sessions to Finish the Tasks - There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.

You should finish the given tasks in a way that satisfies the following conditions:

 * If you start a task in a work session, you must complete it in the same work session.
 * You can start a new task immediately after finishing the previous one.
 * You may complete the tasks in any order.

Given tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.

The tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].

 

Example 1:


Input: tasks = [1,2,3], sessionTime = 3
Output: 2
Explanation: You can finish the tasks in two work sessions.
- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.
- Second work session: finish the third task in 3 hours.


Example 2:


Input: tasks = [3,1,3,1,1], sessionTime = 8
Output: 2
Explanation: You can finish the tasks in two work sessions.
- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.
- Second work session: finish the last task in 1 hour.


Example 3:


Input: tasks = [1,2,3,4,5], sessionTime = 15
Output: 1
Explanation: You can finish all the tasks in one work session.


 

Constraints:

 * n == tasks.length
 * 1 <= n <= 14
 * 1 <= tasks[i] <= 10
 * max(tasks[i]) <= sessionTime <= 15",Solutions (220),863,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-work-sessions-to-finish-the-tasks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSessions(self, tasks: List[int], sessionTime: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[int] = deserialize(""List[int]"", read_line())
    sessionTime: int = deserialize(""int"", read_line())
    ans = Solution().minSessions(tasks, sessionTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSessions(self, tasks: List[int], sessionTime: int) -> int:
        pass"
False,0,0,2115,,Number of Unique Good Subsequences,number-of-unique-good-subsequences,False,9184,17587,1987,False,3,"Can you solve this real interview question? Number of Unique Good Subsequences - You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of ""0"").

Find the number of unique good subsequences of binary.

 * For example, if binary = ""001"", then all the good subsequences are [""0"", ""0"", ""1""], so the unique good subsequences are ""0"" and ""1"". Note that subsequences ""00"", ""01"", and ""001"" are not good because they have leading zeros.

Return the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 109 + 7.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: binary = ""001""
Output: 2
Explanation: The good subsequences of binary are [""0"", ""0"", ""1""].
The unique good subsequences are ""0"" and ""1"".


Example 2:


Input: binary = ""11""
Output: 2
Explanation: The good subsequences of binary are [""1"", ""1"", ""11""].
The unique good subsequences are ""1"" and ""11"".

Example 3:


Input: binary = ""101""
Output: 5
Explanation: The good subsequences of binary are [""1"", ""0"", ""1"", ""10"", ""11"", ""101""]. 
The unique good subsequences are ""0"", ""1"", ""10"", ""11"", and ""101"".


 

Constraints:

 * 1 <= binary.length <= 105
 * binary consists of only '0's and '1's.",Solutions (79),556,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-unique-good-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    binary: str = deserialize(""str"", read_line())
    ans = Solution().numberOfUniqueGoodSubsequences(binary)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfUniqueGoodSubsequences(self, binary: str) -> int:
        MOD = 10**9 + 7
        dp = [0, 0]
        has_zero = False
        for i in binary:
            dp[int(i)] = sum(dp) + (int(i) == 0)
            has_zero |= (i == ""0"")

        return (sum(dp) + has_zero) % MOD"
False,0,0,2116,,Count Number of Pairs With Absolute Difference K,count-number-of-pairs-with-absolute-difference-k,False,91582,110645,2006,False,1,"Can you solve this real interview question? Count Number of Pairs With Absolute Difference K - Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.

The value of |x| is defined as:

 * x if x >= 0.
 * -x if x < 0.

 

Example 1:


Input: nums = [1,2,2,1], k = 1
Output: 4
Explanation: The pairs with an absolute difference of 1 are:
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]
- [1,2,2,1]


Example 2:


Input: nums = [1,3], k = 3
Output: 0
Explanation: There are no pairs with an absolute difference of 3.


Example 3:


Input: nums = [3,2,1,5,4], k = 2
Output: 3
Explanation: The pairs with an absolute difference of 2 are:
- [3,2,1,5,4]
- [3,2,1,5,4]
- [3,2,1,5,4]


 

Constraints:

 * 1 <= nums.length <= 200
 * 1 <= nums[i] <= 100
 * 1 <= k <= 99",Solutions (1.2K),1.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-pairs-with-absolute-difference-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countKDifference(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countKDifference(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countKDifference(self, nums: List[int], k: int) -> int:
        count = 0 
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if abs(nums[i] - nums[j]) == k:
                    count += 1
        return count"
False,0,0,2117,find-original-array-from-doubled-array,Find Original Array From Doubled Array,find-original-array-from-doubled-array,False,117433,288583,2007,False,2,"Can you solve this real interview question? Find Original Array From Doubled Array - An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.

Given an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.

 

Example 1:


Input: changed = [1,3,4,2,6,8]
Output: [1,3,4]
Explanation: One possible original array could be [1,3,4]:
- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.
Other original arrays could be [4,3,1] or [3,1,4].


Example 2:


Input: changed = [6,3,0,1]
Output: []
Explanation: changed is not a doubled array.


Example 3:


Input: changed = [1]
Output: []
Explanation: changed is not a doubled array.


 

Constraints:

 * 1 <= changed.length <= 105
 * 0 <= changed[i] <= 105",Solutions (1.3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-original-array-from-doubled-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findOriginalArray(self, changed: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    changed: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findOriginalArray(changed)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findOriginalArray(self, changed: List[int]) -> List[int]:
        import collections
        c = collections.Counter(changed)
        res = []
        for num in sorted(changed, key=lambda x: c[x]):
            if c[num] > c[num * 2]:
                return []
            c[num * 2] -= c[num]
            res += [num] * c[num]
        return res"
False,0,0,2118,,Maximum Earnings From Taxi,maximum-earnings-from-taxi,False,21172,48598,2008,False,2,"Can you solve this real interview question? Maximum Earnings From Taxi - There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.

The passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.

For each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.

Given n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.

Note: You may drop off a passenger and pick up a different passenger at the same point.

 

Example 1:


Input: n = 5, rides = [[2,5,4],[1,5,1]]
Output: 7
Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.


Example 2:


Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
Output: 20
Explanation: We will pick up the following passengers:
- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.
- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.
- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.
We earn 9 + 5 + 6 = 20 dollars in total.

 

Constraints:

 * 1 <= n <= 105
 * 1 <= rides.length <= 3 * 104
 * rides[i].length == 3
 * 1 <= starti < endi <= n
 * 1 <= tipi <= 105",Solutions (287),953,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-earnings-from-taxi/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    rides: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxTaxiEarnings(n, rides)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxTaxiEarnings(self, n: int, rides: List[List[int]]) -> int:
        rides.sort(key=lambda x: x[0])
        dp = [0] * n
        j = 0
        for i in range(1, n + 1):
            dp[i - 1] = max(dp[i - 1], dp[i - 2])
            while j < len(rides) and rides[j][0] == i:
                dp[rides[j][1] - 1] = max(dp[rides[j][1] - 1], dp[i - 1] + rides[j][1] - rides[j][0] + rides[j][2])
                j += 1
        return max(dp)"
False,0,0,2119,,Minimum Number of Operations to Make Array Continuous,minimum-number-of-operations-to-make-array-continuous,False,10622,23277,2009,False,3,"Can you solve this real interview question? Minimum Number of Operations to Make Array Continuous - You are given an integer array nums. In one operation, you can replace any element in nums with any integer.

nums is considered continuous if both of the following conditions are fulfilled:

 * All elements in nums are unique.
 * The difference between the maximum element and the minimum element in nums equals nums.length - 1.

For example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.

Return the minimum number of operations to make nums continuous.

 

Example 1:


Input: nums = [4,2,5,3]
Output: 0
Explanation: nums is already continuous.


Example 2:


Input: nums = [1,2,3,5,6]
Output: 1
Explanation: One possible solution is to change the last element to 4.
The resulting array is [1,2,3,5,4], which is continuous.


Example 3:


Input: nums = [1,10,100,1000]
Output: 3
Explanation: One possible solution is to:
- Change the second element to 2.
- Change the third element to 3.
- Change the fourth element to 4.
The resulting array is [1,2,3,4], which is continuous.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (167),695,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-make-array-continuous/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums: List[int]) -> int:
        nums = sorted(set(nums))
        n = len(nums)
        ans = right_ans = j = 0
        for i in range(len(nums)):
            while j < len(nums) and nums[j] <= nums[i] + n - 1:
                j += 1
            right_ans = max(right_ans, j - i)
            ans = max(ans, right_ans - 1)
        return n - ans"
False,0,0,2121,find-if-path-exists-in-graph,Find if Path Exists in Graph,find-if-path-exists-in-graph,False,223536,429122,1971,False,1,"Can you solve this real interview question? Find if Path Exists in Graph - There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png]


Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2
Output: true
Explanation: There are two paths from vertex 0 to vertex 2:
- 0 → 1 → 2
- 0 → 2


Example 2:

[https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png]


Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5
Output: false
Explanation: There is no path from vertex 0 to vertex 5.


 

Constraints:

 * 1 <= n <= 2 * 105
 * 0 <= edges.length <= 2 * 105
 * edges[i].length == 2
 * 0 <= ui, vi <= n - 1
 * ui != vi
 * 0 <= source, destination <= n - 1
 * There are no duplicate edges.
 * There are no self edges.",Solutions (1.8K),2.8K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/find-if-path-exists-in-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    source: int = deserialize(""int"", read_line())
    destination: int = deserialize(""int"", read_line())
    ans = Solution().validPath(n, edges, source, destination)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        def dfs(curr, dest):
            if curr == dest:
                return True
            visited.add(curr)
            for neighbor in graph[curr]:
                if neighbor not in visited:
                    if dfs(neighbor, dest):
                        return True
            return False
        
        visited = set()
        graph = collections.defaultdict(list)
        
        for edge in edges:
            graph[edge[0]].append(edge[1])
            graph[edge[1]].append(edge[0])
        
        return dfs(source, destination)"
False,0,0,2122,,Count Special Quadruplets,count-special-quadruplets,False,30066,50297,1995,False,1,"Can you solve this real interview question? Count Special Quadruplets - Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:

 * nums[a] + nums[b] + nums[c] == nums[d], and
 * a < b < c < d

 

Example 1:


Input: nums = [1,2,3,6]
Output: 1
Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.


Example 2:


Input: nums = [3,3,6,4,5]
Output: 0
Explanation: There are no such quadruplets in [3,3,6,4,5].


Example 3:


Input: nums = [1,1,1,3,5]
Output: 4
Explanation: The 4 quadruplets that satisfy the requirement are:
- (0, 1, 2, 3): 1 + 1 + 1 == 3
- (0, 1, 3, 4): 1 + 1 + 3 == 5
- (0, 2, 3, 4): 1 + 1 + 3 == 5
- (1, 2, 3, 4): 1 + 1 + 3 == 5


 

Constraints:

 * 4 <= nums.length <= 50
 * 1 <= nums[i] <= 100",Solutions (269),502,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/count-special-quadruplets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countQuadruplets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countQuadruplets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countQuadruplets(self, nums: List[int]) -> int:
        count = 0
        for a in range(len(nums)):
            for b in range(a + 1, len(nums)):
                for c in range(b + 1, len(nums)):
                    for d in range(c + 1, len(nums)):
                        if nums[a] + nums[b] + nums[c] == nums[d]:
                            count += 1
        return count"
False,0,0,2123,the-number-of-weak-characters-in-the-game,The Number of Weak Characters in the Game,the-number-of-weak-characters-in-the-game,False,93705,213076,1996,False,2,"Can you solve this real interview question? The Number of Weak Characters in the Game - You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

 

Example 1:


Input: properties = [[5,5],[6,3],[3,6]]
Output: 0
Explanation: No character has strictly greater attack and defense than the other.


Example 2:


Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense.


Example 3:


Input: properties = [[1,5],[10,4],[4,3]]
Output: 1
Explanation: The third character is weak because the second character has a strictly greater attack and defense.


 

Constraints:

 * 2 <= properties.length <= 105
 * properties[i].length == 2
 * 1 <= attacki, defensei <= 105",Solutions (762),2.8K,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/the-number-of-weak-characters-in-the-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    properties: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numberOfWeakCharacters(properties)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:
        properties.sort(key=lambda x: (-x[0], x[1]))
        count = 0
        max_defense = 0
        
        for attack, defense in properties:
            if defense < max_defense:
                count += 1
            else:
                max_defense = defense
        
        return count"
False,0,0,2124,,First Day Where You Have Been in All the Rooms,first-day-where-you-have-been-in-all-the-rooms,False,7548,20414,1997,False,2,"Can you solve this real interview question? First Day Where You Have Been in All the Rooms - There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.

Initially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:

 * Assuming that on a day, you visit room i,
 * if you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextVisit[i] where 0 <= nextVisit[i] <= i;
 * if you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.

Return the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: nextVisit = [0,0]
Output: 2
Explanation:
- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.
  On the next day you will visit room nextVisit[0] = 0
- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.
  On the next day you will visit room (0 + 1) mod 2 = 1
- On day 2, you visit room 1. This is the first day where you have been in all the rooms.


Example 2:


Input: nextVisit = [0,0,2]
Output: 6
Explanation:
Your room visiting order for each day is: [0,0,1,0,0,1,2,...].
Day 6 is the first day where you have been in all the rooms.


Example 3:


Input: nextVisit = [0,1,2,0]
Output: 6
Explanation:
Your room visiting order for each day is: [0,0,1,1,2,2,3,...].
Day 6 is the first day where you have been in all the rooms.


 

Constraints:

 * n == nextVisit.length
 * 2 <= n <= 105
 * 0 <= nextVisit[i] <= i",Solutions (84),433,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/first-day-where-you-have-been-in-all-the-rooms/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nextVisit: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().firstDayBeenInAllRooms(nextVisit)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def firstDayBeenInAllRooms(self, nextVisit: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(nextVisit)
        dp = [0] * n
        preSum = [0] * (n + 1)
        answer = 0
        
        for i in range(n - 1):
            preSum[i + 1] = (preSum[i] + dp[i] - dp[nextVisit[i]] + 2) % MOD
            dp[i + 1] = (2 + 2 * preSum[i + 1] - dp[i] + MOD) % MOD
        
        for i in range(n):
            answer += dp[i]
        
        return answer % MOD"
False,0,0,2125,,GCD Sort of an Array,gcd-sort-of-an-array,False,6680,14616,1998,False,3,"Can you solve this real interview question? GCD Sort of an Array - You are given an integer array nums, and you can perform the following operation any number of times on nums:

 * Swap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].

Return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.

 

Example 1:


Input: nums = [7,21,3]
Output: true
Explanation: We can sort [7,21,3] by performing the following operations:
- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]
- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]


Example 2:


Input: nums = [5,2,6,2]
Output: false
Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element.


Example 3:


Input: nums = [10,5,9,3,15]
Output: true
We can sort [10,5,9,3,15] by performing the following operations:
- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]
- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]
- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]


 

Constraints:

 * 1 <= nums.length <= 3 * 104
 * 2 <= nums[i] <= 105",Solutions (80),402,"# Created by asetti2002 at 2024/04/17 02:08
# leetgo: 1.4.3
# https://leetcode.com/problems/gcd-sort-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gcdSort(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().gcdSort(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def gcdSort(self, nums: List[int]) -> bool:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        def is_sorted(arr):
            return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))
        
        parent = list(range(len(nums)))
        
        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]
        
        def union(x, y):
            px, py = find(x), find(y)
            if px != py:
                parent[px] = py
        
        for i in range(len(nums)):
            for j in range(i + 1, len(nums)):
                if gcd(nums[i], nums[j]) > 1:
                    union(i, j)
        
        groups = {}
        for i in range(len(nums)):
            root = find(i)
            if root in groups:
                groups[root].append(nums[i])
            else:
                groups[root] = [nums[i]]
        
        for key in groups:
            group = sorted(groups[key])
            for i, val in enumerate(group):
                nums[parent.index(key) + i] = val
        
        return is_sorted(nums)"
False,0,0,2128,,Reverse Prefix of Word,reverse-prefix-of-word,False,60916,77486,2000,False,1,"Can you solve this real interview question? Reverse Prefix of Word - Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing.

 * For example, if word = ""abcdefd"" and ch = ""d"", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be ""dcbaefd"".

Return the resulting string.

 

Example 1:


Input: word = ""abcdefd"", ch = ""d""
Output: ""dcbaefd""
Explanation: The first occurrence of ""d"" is at index 3. 
Reverse the part of word from 0 to 3 (inclusive), the resulting string is ""dcbaefd"".


Example 2:


Input: word = ""xyxzxe"", ch = ""z""
Output: ""zxyxxe""
Explanation: The first and only occurrence of ""z"" is at index 3.
Reverse the part of word from 0 to 3 (inclusive), the resulting string is ""zxyxxe"".


Example 3:


Input: word = ""abcd"", ch = ""z""
Output: ""abcd""
Explanation: ""z"" does not exist in word.
You should not do any reverse operation, the resulting string is ""abcd"".


 

Constraints:

 * 1 <= word.length <= 250
 * word consists of lowercase English letters.
 * ch is a lowercase English letter.",Solutions (1.6K),619,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/reverse-prefix-of-word/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reversePrefix(self, word: str, ch: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ch: str = deserialize(""str"", read_line())
    ans = Solution().reversePrefix(word, ch)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def reversePrefix(self, word: str, ch: str) -> str:
        index = word.find(ch)
        if index == -1:
            return word
        return word[:index+1][::-1] + word[index+1:]"
False,0,0,2129,,Number of Pairs of Interchangeable Rectangles,number-of-pairs-of-interchangeable-rectangles,False,23871,51794,2001,False,2,"Can you solve this real interview question? Number of Pairs of Interchangeable Rectangles - You are given n rectangles represented by a 0-indexed 2D integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle.

Two rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. More formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).

Return the number of pairs of interchangeable rectangles in rectangles.

 

Example 1:


Input: rectangles = [[4,8],[3,6],[10,20],[15,30]]
Output: 6
Explanation: The following are the interchangeable pairs of rectangles by index (0-indexed):
- Rectangle 0 with rectangle 1: 4/8 == 3/6.
- Rectangle 0 with rectangle 2: 4/8 == 10/20.
- Rectangle 0 with rectangle 3: 4/8 == 15/30.
- Rectangle 1 with rectangle 2: 3/6 == 10/20.
- Rectangle 1 with rectangle 3: 3/6 == 15/30.
- Rectangle 2 with rectangle 3: 10/20 == 15/30.


Example 2:


Input: rectangles = [[4,5],[7,8]]
Output: 0
Explanation: There are no interchangeable pairs of rectangles.


 

Constraints:

 * n == rectangles.length
 * 1 <= n <= 105
 * rectangles[i].length == 2
 * 1 <= widthi, heighti <= 105",Solutions (400),370,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-pairs-of-interchangeable-rectangles/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rectangles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().interchangeableRectangles(rectangles)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def interchangeableRectangles(self, rectangles: List[List[int]]) -> int:
        ratio_count = {}
        result = 0
        for rec in rectangles:
            ratio = rec[0] / rec[1]
            ratio_count[ratio] = ratio_count.get(ratio, 0) + 1
        for count in ratio_count.values():
            result += count * (count - 1) // 2
        return result"
False,0,0,2130,,Maximum Product of the Length of Two Palindromic Subsequences,maximum-product-of-the-length-of-two-palindromic-subsequences,False,17476,32302,2002,False,2,"Can you solve this real interview question? Maximum Product of the Length of Two Palindromic Subsequences - Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

 

Example 1:

example-1 [https://assets.leetcode.com/uploads/2021/08/24/two-palindromic-subsequences.png]


Input: s = ""leetcodecom""
Output: 9
Explanation: An optimal solution is to choose ""ete"" for the 1st subsequence and ""cdc"" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.


Example 2:


Input: s = ""bb""
Output: 1
Explanation: An optimal solution is to choose ""b"" (the first character) for the 1st subsequence and ""b"" (the second character) for the 2nd subsequence.
The product of their lengths is: 1 * 1 = 1.


Example 3:


Input: s = ""accbcaxxcxx""
Output: 25
Explanation: An optimal solution is to choose ""accca"" for the 1st subsequence and ""xxcxx"" for the 2nd subsequence.
The product of their lengths is: 5 * 5 = 25.


 

Constraints:

 * 2 <= s.length <= 12
 * s consists of lowercase English letters only.",Solutions (211),694,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxProduct(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().maxProduct(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxProduct(self, s: str) -> int:
        pass"
False,0,0,2131,,Smallest Missing Genetic Value in Each Subtree,smallest-missing-genetic-value-in-each-subtree,False,6453,14451,2003,False,3,"Can you solve this real interview question? Smallest Missing Genetic Value in Each Subtree - There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.

There are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.

Return an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.

The subtree rooted at a node x contains node x and all of its descendant nodes.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/23/case-1.png]


Input: parents = [-1,0,0,2], nums = [1,2,3,4]
Output: [5,1,1,1]
Explanation: The answer for each subtree is calculated as follows:
- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.
- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.
- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.
- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.


Example 2:

[https://assets.leetcode.com/uploads/2021/08/23/case-2.png]


Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]
Output: [7,1,1,4,2,1]
Explanation: The answer for each subtree is calculated as follows:
- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.
- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.
- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.
- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.
- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.
- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.


Example 3:


Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]
Output: [1,1,1,1,1,1,1]
Explanation: The value 1 is missing from all the subtrees.


 

Constraints:

 * n == parents.length == nums.length
 * 2 <= n <= 105
 * 0 <= parents[i] <= n - 1 for i != 0
 * parents[0] == -1
 * parents represents a valid tree.
 * 1 <= nums[i] <= 105
 * Each nums[i] is distinct.",Solutions (80),373,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-missing-genetic-value-in-each-subtree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    parents: List[int] = deserialize(""List[int]"", read_line())
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().smallestMissingValueSubtree(parents, nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallestMissingValueSubtree(self, parents: List[int], nums: List[int]) -> List[int]:
        # Solution code here
        pass"
False,0,0,2132,,Convert 1D Array Into 2D Array,convert-1d-array-into-2d-array,False,55927,94801,2022,False,1,"Can you solve this real interview question? Convert 1D Array Into 2D Array - You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with m rows and n columns using all the elements from original.

The elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.

Return an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/08/26/image-20210826114243-1.png]


Input: original = [1,2,3,4], m = 2, n = 2
Output: [[1,2],[3,4]]
Explanation: The constructed 2D array should contain 2 rows and 2 columns.
The first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.
The second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.


Example 2:


Input: original = [1,2,3], m = 1, n = 3
Output: [[1,2,3]]
Explanation: The constructed 2D array should contain 1 row and 3 columns.
Put all three elements in original into the first row of the constructed 2D array.


Example 3:


Input: original = [1,2], m = 1, n = 1
Output: []
Explanation: There are 2 elements in original.
It is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.


 

Constraints:

 * 1 <= original.length <= 5 * 104
 * 1 <= original[i] <= 105
 * 1 <= m, n <= 4 * 104",Solutions (710),595,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/convert-1d-array-into-2d-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    original: List[int] = deserialize(""List[int]"", read_line())
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().construct2DArray(original, m, n)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:
        if m * n != len(original):
            return []
        return [original[i*n:(i+1)*n] for i in range(m)]"
False,0,0,2133,,Number of Pairs of Strings With Concatenation Equal to Target,number-of-pairs-of-strings-with-concatenation-equal-to-target,False,30782,41951,2023,False,2,"Can you solve this real interview question? Number of Pairs of Strings With Concatenation Equal to Target - Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.

 

Example 1:


Input: nums = [""777"",""7"",""77"",""77""], target = ""7777""
Output: 4
Explanation: Valid pairs are:
- (0, 1): ""777"" + ""7""
- (1, 0): ""7"" + ""777""
- (2, 3): ""77"" + ""77""
- (3, 2): ""77"" + ""77""


Example 2:


Input: nums = [""123"",""4"",""12"",""34""], target = ""1234""
Output: 2
Explanation: Valid pairs are:
- (0, 1): ""123"" + ""4""
- (2, 3): ""12"" + ""34""


Example 3:


Input: nums = [""1"",""1"",""1""], target = ""11""
Output: 6
Explanation: Valid pairs are:
- (0, 1): ""1"" + ""1""
- (1, 0): ""1"" + ""1""
- (0, 2): ""1"" + ""1""
- (2, 0): ""1"" + ""1""
- (1, 2): ""1"" + ""1""
- (2, 1): ""1"" + ""1""


 

Constraints:

 * 2 <= nums.length <= 100
 * 1 <= nums[i].length <= 100
 * 2 <= target.length <= 100
 * nums[i] and target consist of digits.
 * nums[i] and target do not have leading zeros.",Solutions (469),529,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numOfPairs(self, nums: List[str], target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().numOfPairs(nums, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numOfPairs(self, nums: List[str], target: str) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                if i != j and nums[i] + nums[j] == target:
                    count += 1
        return count"
False,0,0,2134,,Maximize the Confusion of an Exam,maximize-the-confusion-of-an-exam,False,24375,40357,2024,False,2,"Can you solve this real interview question? Maximize the Confusion of an Exam - A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).

You are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:

 * Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').

Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.

 

Example 1:


Input: answerKey = ""TTFF"", k = 2
Output: 4
Explanation: We can replace both the 'F's with 'T's to make answerKey = ""TTTT"".
There are four consecutive 'T's.


Example 2:


Input: answerKey = ""TFFT"", k = 1
Output: 3
Explanation: We can replace the first 'T' with an 'F' to make answerKey = ""FFFT"".
Alternatively, we can replace the second 'T' with an 'F' to make answerKey = ""TFFF"".
In both cases, there are three consecutive 'F's.


Example 3:


Input: answerKey = ""TTFTTFTT"", k = 1
Output: 5
Explanation: We can replace the first 'F' to make answerKey = ""TTTTTFTT""
Alternatively, we can replace the second 'F' to make answerKey = ""TTFTTTTT"". 
In both cases, there are five consecutive 'T's.


 

Constraints:

 * n == answerKey.length
 * 1 <= n <= 5 * 104
 * answerKey[i] is either 'T' or 'F'
 * 1 <= k <= n",Solutions (474),915,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-the-confusion-of-an-exam/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    answerKey: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxConsecutiveAnswers(answerKey, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:
        left = 0
        max_length = 0
        max_freq = 0
        count = {'T': 0, 'F': 0}
        
        for right in range(len(answerKey)):
            count[answerKey[right]] += 1
            max_freq = max(max_freq, count[answerKey[right]])
            
            if right - left + 1 - max_freq > k:
                count[answerKey[left]] -= 1
                left += 1
                
            max_length = max(max_length, right - left + 1)
        
        return max_length"
False,0,0,2135,,Maximum Number of Ways to Partition an Array,maximum-number-of-ways-to-partition-an-array,False,6916,21061,2025,False,3,"Can you solve this real interview question? Maximum Number of Ways to Partition an Array - You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:

 * 1 <= pivot < n
 * nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]

You are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged.

Return the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.

 

Example 1:


Input: nums = [2,-1,2], k = 3
Output: 1
Explanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2].
There is one way to partition the array:
- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2.


Example 2:


Input: nums = [0,0,0], k = 1
Output: 2
Explanation: The optimal approach is to leave the array unchanged.
There are two ways to partition the array:
- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.
- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.


Example 3:


Input: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33
Output: 4
Explanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14].
There are four ways to partition the array.


 

Constraints:

 * n == nums.length
 * 2 <= n <= 105
 * -105 <= k, nums[i] <= 105",Solutions (89),386,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-ways-to-partition-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToPartition(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().waysToPartition(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToPartition(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2137,,Final Value of Variable After Performing Operations,final-value-of-variable-after-performing-operations,False,214238,241574,2011,False,1,"Can you solve this real interview question? Final Value of Variable After Performing Operations - There is a programming language with only four operations and one variable X:

 * ++X and X++ increments the value of the variable X by 1.
 * --X and X-- decrements the value of the variable X by 1.

Initially, the value of X is 0.

Given an array of strings operations containing a list of operations, return the final value of X after performing all the operations.

 

Example 1:


Input: operations = [""--X"",""X++"",""X++""]
Output: 1
Explanation: The operations are performed as follows:
Initially, X = 0.
--X: X is decremented by 1, X =  0 - 1 = -1.
X++: X is incremented by 1, X = -1 + 1 =  0.
X++: X is incremented by 1, X =  0 + 1 =  1.


Example 2:


Input: operations = [""++X"",""++X"",""X++""]
Output: 3
Explanation: The operations are performed as follows:
Initially, X = 0.
++X: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
X++: X is incremented by 1, X = 2 + 1 = 3.


Example 3:


Input: operations = [""X++"",""++X"",""--X"",""X--""]
Output: 0
Explanation: The operations are performed as follows:
Initially, X = 0.
X++: X is incremented by 1, X = 0 + 1 = 1.
++X: X is incremented by 1, X = 1 + 1 = 2.
--X: X is decremented by 1, X = 2 - 1 = 1.
X--: X is decremented by 1, X = 1 - 1 = 0.


 

Constraints:

 * 1 <= operations.length <= 100
 * operations[i] will be either ""++X"", ""X++"", ""--X"", or ""X--"".",Solutions (2.4K),1.1K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/final-value-of-variable-after-performing-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def finalValueAfterOperations(self, operations: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    operations: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().finalValueAfterOperations(operations)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def finalValueAfterOperations(self, operations: List[str]) -> int:
        X = 0
        for operation in operations:
            if operation == ""--X"" or operation == ""X--"":
                X -= 1
            else:
                X += 1
        return X"
False,0,0,2138,,Sum of Beauty in the Array,sum-of-beauty-in-the-array,False,18448,39386,2012,False,2,"Can you solve this real interview question? Sum of Beauty in the Array - You are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:

 * 2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1.
 * 1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied.
 * 0, if none of the previous conditions holds.

Return the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.

 

Example 1:


Input: nums = [1,2,3]
Output: 2
Explanation: For each index i in the range 1 <= i <= 1:
- The beauty of nums[1] equals 2.


Example 2:


Input: nums = [2,4,6,4]
Output: 1
Explanation: For each index i in the range 1 <= i <= 2:
- The beauty of nums[1] equals 1.
- The beauty of nums[2] equals 0.


Example 3:


Input: nums = [3,2,1]
Output: 0
Explanation: For each index i in the range 1 <= i <= 1:
- The beauty of nums[1] equals 0.


 

Constraints:

 * 3 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (303),481,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-beauty-in-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfBeauties(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sumOfBeauties(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sumOfBeauties(self, nums: List[int]) -> int:
        res = 0
        for i in range(1, len(nums) - 1):
            if max(nums[:i]) < nums[i] < min(nums[i + 1:]):
                res += 2
            elif nums[i - 1] < nums[i] < nums[i + 1]:
                res += 1
        return res"
False,0,0,2140,,Longest Subsequence Repeated k Times,longest-subsequence-repeated-k-times,False,5717,10296,2014,False,3,"Can you solve this real interview question? Longest Subsequence Repeated k Times - You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

 * For example, ""bba"" is repeated 2 times in the string ""bababcba"", because the string ""bbabba"", constructed by concatenating ""bba"" 2 times, is a subsequence of the string ""bababcba"".

Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.

 

Example 1:

example 1 [https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png]


Input: s = ""letsleetcode"", k = 2
Output: ""let""
Explanation: There are two longest subsequences repeated 2 times: ""let"" and ""ete"".
""let"" is the lexicographically largest one.


Example 2:


Input: s = ""bb"", k = 2
Output: ""b""
Explanation: The longest subsequence repeated 2 times is ""b"".


Example 3:


Input: s = ""ab"", k = 2
Output: """"
Explanation: There is no subsequence repeated 2 times. Empty string is returned.


 

Constraints:

 * n == s.length
 * 2 <= n, k <= 2000
 * 2 <= n < k * 8
 * s consists of lowercase English letters.",Solutions (54),352,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-subsequence-repeated-k-times/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().longestSubsequenceRepeatedK(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def longestSubsequenceRepeatedK(self, s: str, k: int) -> str:
        pass"
False,0,0,2144,,Maximum Difference Between Increasing Elements,maximum-difference-between-increasing-elements,False,57573,106166,2016,False,1,"Can you solve this real interview question? Maximum Difference Between Increasing Elements - Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].

Return the maximum difference. If no such i and j exists, return -1.

 

Example 1:


Input: nums = [7,1,5,4]
Output: 4
Explanation:
The maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.
Note that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid.


Example 2:


Input: nums = [9,4,3,2]
Output: -1
Explanation:
There is no i and j such that i < j and nums[i] < nums[j].


Example 3:


Input: nums = [1,5,2,10]
Output: 9
Explanation:
The maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9.


 

Constraints:

 * n == nums.length
 * 2 <= n <= 1000
 * 1 <= nums[i] <= 109",Solutions (725),789,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-difference-between-increasing-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumDifference(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumDifference(self, nums: List[int]) -> int:
        max_diff = -1
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] < nums[j]:
                    max_diff = max(max_diff, nums[j] - nums[i])
        return max_diff"
False,0,0,2145,,Grid Game,grid-game,False,15137,34730,2017,False,2,"Can you solve this real interview question? Grid Game - You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.

Both robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).

At the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.

The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/08/a1.png]


Input: grid = [[2,5,4],[1,5,1]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 0 + 4 + 0 = 4 points.


Example 2:

[https://assets.leetcode.com/uploads/2021/09/08/a2.png]


Input: grid = [[3,3,1],[8,5,2]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 3 + 1 + 0 = 4 points.


Example 3:

[https://assets.leetcode.com/uploads/2021/09/08/a3.png]


Input: grid = [[1,3,1,15],[1,3,3,1]]
Output: 7
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.


 

Constraints:

 * grid.length == 2
 * n == grid[r].length
 * 1 <= n <= 5 * 104
 * 1 <= grid[r][c] <= 105",Solutions (201),657,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/grid-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def gridGame(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().gridGame(grid)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def gridGame(self, grid: List[List[int]]) -> int:
        n = len(grid[0])
        prefix_sum_top = [0] * n
        prefix_sum_bottom = [0] * n
        prefix_sum_top[0] = grid[0][0]
        prefix_sum_bottom[0] = grid[1][0]
        
        for i in range(1, n):
            prefix_sum_top[i] = prefix_sum_top[i-1] + grid[0][i]
            prefix_sum_bottom[i] = prefix_sum_bottom[i-1] + grid[1][i]
        
        min_points = float('inf')
        for i in range(n):
            top_path = prefix_sum_bottom[n-1] - prefix_sum_bottom[i]
            bottom_path = 0 if i == 0 else prefix_sum_top[i-1]
            min_points = min(min_points, max(top_path, bottom_path))
        
        return min_points"
False,0,0,2146,,Check if Word Can Be Placed In Crossword,check-if-word-can-be-placed-in-crossword,False,16928,34273,2018,False,2,"Can you solve this real interview question? Check if Word Can Be Placed In Crossword - You are given an m x n matrix board, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.

A word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:

 * It does not occupy a cell containing the character '#'.
 * The cell each letter is placed in must either be ' ' (empty) or match the letter already on the board.
 * There must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally.
 * There must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically.

Given a string word, return true if word can be placed in board, or false otherwise.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/04/crossword-ex1-1.png]


Input: board = [[""#"", "" "", ""#""], ["" "", "" "", ""#""], [""#"", ""c"", "" ""]], word = ""abc""
Output: true
Explanation: The word ""abc"" can be placed as shown above (top to bottom).


Example 2:

[https://assets.leetcode.com/uploads/2021/10/04/crossword-ex2-1.png]


Input: board = [["" "", ""#"", ""a""], ["" "", ""#"", ""c""], ["" "", ""#"", ""a""]], word = ""ac""
Output: false
Explanation: It is impossible to place the word because there will always be a space/letter above or below it.

Example 3:

[https://assets.leetcode.com/uploads/2021/10/04/crossword-ex3-1.png]


Input: board = [[""#"", "" "", ""#""], ["" "", "" "", ""#""], [""#"", "" "", ""c""]], word = ""ca""
Output: true
Explanation: The word ""ca"" can be placed as shown above (right to left). 


 

Constraints:

 * m == board.length
 * n == board[i].length
 * 1 <= m * n <= 2 * 105
 * board[i][j] will be ' ', '#', or a lowercase English letter.
 * 1 <= word.length <= max(m, n)
 * word will contain only lowercase English letters.",Solutions (209),241,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-word-can-be-placed-in-crossword/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    board: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    word: str = deserialize(""str"", read_line())
    ans = Solution().placeWordInCrossword(board, word)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def placeWordInCrossword(self, board: List[List[str]], word: str) -> bool:
        m, n = len(board), len(board[0])
        
        def check_horizontal(i, j):
            if j + len(word) > n:
                return False
            for k in range(len(word)):
                if board[i][j+k] not in [' ', word[k]]:
                    return False
            if (j > 0 and board[i][j-1] != '#') or (j + len(word) < n and board[i][j+len(word)] != '#'):
                return False
            return True
        
        def check_vertical(i, j):
            if i + len(word) > m:
                return False
            for k in range(len(word)):
                if board[i+k][j] not in [' ', word[k]]:
                    return False
            if (i > 0 and board[i-1][j] != '#') or (i + len(word) < m and board[i+len(word)][j] != '#'):
                return False
            return True
        
        for i in range(m):
            for j in range(n):
                if board[i][j] in [' ', word[0]]:
                    if check_horizontal(i, j) or check_vertical(i, j):
                        return True
        return False"
False,0,0,2147,,The Score of Students Solving Math Expression,the-score-of-students-solving-math-expression,False,5687,16858,2019,False,3,"Can you solve this real interview question? The Score of Students Solving Math Expression - You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:

 1. Compute multiplication, reading from left to right; Then,
 2. Compute addition, reading from left to right.

You are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:

 * If an answer equals the correct answer of the expression, this student will be rewarded 5 points;
 * Otherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;
 * Otherwise, this student will be rewarded 0 points.

Return the sum of the points of the students.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/17/student_solving_math.png]


Input: s = ""7+3*1*2"", answers = [20,13,42]
Output: 7
Explanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]
A student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]
The points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.


Example 2:


Input: s = ""3+5*2"", answers = [13,0,10,13,13,16,16]
Output: 19
Explanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]
A student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]
The points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.


Example 3:


Input: s = ""6+0*1"", answers = [12,9,6,4,8,6]
Output: 10
Explanation: The correct answer of the expression is 6.
If a student had incorrectly done (6+0)*1, the answer would also be 6.
By the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.
The points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.


 

Constraints:

 * 3 <= s.length <= 31
 * s represents a valid expression that contains only digits 0-9, '+', and '*' only.
 * All the integer operands in the expression are in the inclusive range [0, 9].
 * 1 <= The count of all operators ('+' and '*') in the math expression <= 15
 * Test data are generated such that the correct answer of the expression is in the range of [0, 1000].
 * n == answers.length
 * 1 <= n <= 104
 * 0 <= answers[i] <= 1000",Solutions (69),208,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/the-score-of-students-solving-math-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def scoreOfStudents(self, s: str, answers: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    answers: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().scoreOfStudents(s, answers)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def scoreOfStudents(self, s: str, answers: List[int]) -> int:
        pass"
False,0,0,2148,,Minimum Number of Moves to Seat Everyone,minimum-number-of-moves-to-seat-everyone,False,45834,55851,2037,False,1,"Can you solve this real interview question? Minimum Number of Moves to Seat Everyone - There are n seats and n students in a room. You are given an array seats of length n, where seats[i] is the position of the ith seat. You are also given the array students of length n, where students[j] is the position of the jth student.

You may perform the following move any number of times:

 * Increase or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1)

Return the minimum number of moves required to move each student to a seat such that no two students are in the same seat.

Note that there may be multiple seats or students in the same position at the beginning.

 

Example 1:


Input: seats = [3,1,5], students = [2,7,4]
Output: 4
Explanation: The students are moved as follows:
- The first student is moved from from position 2 to position 1 using 1 move.
- The second student is moved from from position 7 to position 5 using 2 moves.
- The third student is moved from from position 4 to position 3 using 1 move.
In total, 1 + 2 + 1 = 4 moves were used.


Example 2:


Input: seats = [4,1,5,9], students = [1,3,2,6]
Output: 7
Explanation: The students are moved as follows:
- The first student is not moved.
- The second student is moved from from position 3 to position 4 using 1 move.
- The third student is moved from from position 2 to position 5 using 3 moves.
- The fourth student is moved from from position 6 to position 9 using 3 moves.
In total, 0 + 1 + 3 + 3 = 7 moves were used.


Example 3:


Input: seats = [2,2,6,6], students = [1,3,2,6]
Output: 4
Explanation: Note that there are two seats at position 2 and two seats at position 6.
The students are moved as follows:
- The first student is moved from from position 1 to position 2 using 1 move.
- The second student is moved from from position 3 to position 6 using 3 moves.
- The third student is not moved.
- The fourth student is not moved.
In total, 1 + 3 + 0 + 0 = 4 moves were used.


 

Constraints:

 * n == seats.length == students.length
 * 1 <= n <= 100
 * 1 <= seats[i], students[j] <= 100",Solutions (820),601,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-moves-to-seat-everyone/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    seats: List[int] = deserialize(""List[int]"", read_line())
    students: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMovesToSeat(seats, students)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMovesToSeat(self, seats: List[int], students: List[int]) -> int:
        seats.sort()
        students.sort()
        moves = 0
        for i in range(len(seats)):
            moves += abs(seats[i] - students[i])
        return moves"
False,0,0,2149,,Remove Colored Pieces if Both Neighbors are the Same Color,remove-colored-pieces-if-both-neighbors-are-the-same-color,False,23338,40292,2038,False,2,"Can you solve this real interview question? Remove Colored Pieces if Both Neighbors are the Same Color - There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the ith piece.

Alice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.

 * Alice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.
 * Bob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.
 * Alice and Bob cannot remove pieces from the edge of the line.
 * If a player cannot make a move on their turn, that player loses and the other player wins.

Assuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.

 

Example 1:


Input: colors = ""AAABABB""
Output: true
Explanation:
AAABABB -> AABABB
Alice moves first.
She removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.

Now it's Bob's turn.
Bob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.
Thus, Alice wins, so return true.


Example 2:


Input: colors = ""AA""
Output: false
Explanation:
Alice has her turn first.
There are only two 'A's and both are on the edge of the line, so she cannot move on her turn.
Thus, Bob wins, so return false.


Example 3:


Input: colors = ""ABBBBBBBAAA""
Output: false
Explanation:
ABBBBBBBAAA -> ABBBBBBBAA
Alice moves first.
Her only option is to remove the second to last 'A' from the right.

ABBBBBBBAA -> ABBBBBBAA
Next is Bob's turn.
He has many options for which 'B' piece to remove. He can pick any.

On Alice's second turn, she has no more pieces that she can remove.
Thus, Bob wins, so return false.


 

Constraints:

 * 1 <= colors.length <= 105
 * colors consists of only the letters 'A' and 'B'",Solutions (313),384,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def winnerOfGame(self, colors: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    colors: str = deserialize(""str"", read_line())
    ans = Solution().winnerOfGame(colors)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def winnerOfGame(self, colors: str) -> bool:
        # your code here"
False,0,0,2150,,Kth Smallest Product of Two Sorted Arrays,kth-smallest-product-of-two-sorted-arrays,False,8961,31016,2040,False,3,"Can you solve this real interview question? Kth Smallest Product of Two Sorted Arrays - Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.

 

Example 1:


Input: nums1 = [2,5], nums2 = [3,4], k = 2
Output: 8
Explanation: The 2 smallest products are:
- nums1[0] * nums2[0] = 2 * 3 = 6
- nums1[0] * nums2[1] = 2 * 4 = 8
The 2nd smallest product is 8.


Example 2:


Input: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6
Output: 0
Explanation: The 6 smallest products are:
- nums1[0] * nums2[1] = (-4) * 4 = -16
- nums1[0] * nums2[0] = (-4) * 2 = -8
- nums1[1] * nums2[1] = (-2) * 4 = -8
- nums1[1] * nums2[0] = (-2) * 2 = -4
- nums1[2] * nums2[0] = 0 * 2 = 0
- nums1[2] * nums2[1] = 0 * 4 = 0
The 6th smallest product is 0.


Example 3:


Input: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3
Output: -6
Explanation: The 3 smallest products are:
- nums1[0] * nums2[4] = (-2) * 5 = -10
- nums1[0] * nums2[3] = (-2) * 4 = -8
- nums1[4] * nums2[0] = 2 * (-3) = -6
The 3rd smallest product is -6.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 5 * 104
 * -105 <= nums1[i], nums2[j] <= 105
 * 1 <= k <= nums1.length * nums2.length
 * nums1 and nums2 are sorted.",Solutions (67),542,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-smallest-product-of-two-sorted-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthSmallestProduct(nums1, nums2, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def kthSmallestProduct(self, nums1: List[int], nums2: List[int], k: int) -> int:
        import heapq
        res = []
        for i in nums1:
            for j in nums2:
                heapq.heappush(res, i * j)
                if len(res) > k:
                    heapq.heappop(res)
        return heapq.heappop(res)"
False,0,0,2151,,The Time When the Network Becomes Idle,the-time-when-the-network-becomes-idle,False,10579,20744,2039,False,2,"Can you solve this real interview question? The Time When the Network Becomes Idle - There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.

All servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.

The server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.

At the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:

 * If it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.
 * Otherwise, no more resending will occur from this server.

The network becomes idle when there are no messages passing between servers or arriving at servers.

Return the earliest second starting from which the network becomes idle.

 

Example 1:

example 1 [https://assets.leetcode.com/uploads/2021/09/22/quiet-place-example1.png]


Input: edges = [[0,1],[1,2]], patience = [0,2,1]
Output: 8
Explanation:
At (the beginning of) second 0,
- Data server 1 sends its message (denoted 1A) to the master server.
- Data server 2 sends its message (denoted 2A) to the master server.

At second 1,
- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.
- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.
- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).

At second 2,
- The reply 1A arrives at server 1. No more resending will occur from server 1.
- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.
- Server 2 resends the message (denoted 2C).
...
At second 4,
- The reply 2A arrives at server 2. No more resending will occur from server 2.
...
At second 7, reply 2D arrives at server 2.

Starting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.
This is the time when the network becomes idle.


Example 2:

example 2 [https://assets.leetcode.com/uploads/2021/09/04/network_a_quiet_place_2.png]


Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]
Output: 3
Explanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.
From the beginning of the second 3, the network becomes idle.


 

Constraints:

 * n == patience.length
 * 2 <= n <= 105
 * patience[0] == 0
 * 1 <= patience[i] <= 105 for 1 <= i < n
 * 1 <= edges.length <= min(105, n * (n - 1) / 2)
 * edges[i].length == 2
 * 0 <= ui, vi < n
 * ui != vi
 * There are no duplicate edges.
 * Each server can directly or indirectly reach another server.",Solutions (188),519,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/the-time-when-the-network-becomes-idle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    patience: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().networkBecomesIdle(edges, patience)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def networkBecomesIdle(self, edges: List[List[int]], patience: List[int]) -> int:
        # Enter your solution here"
False,0,0,2154,,Minimum Moves to Convert String,minimum-moves-to-convert-string,False,26549,49243,2027,False,1,"Can you solve this real interview question? Minimum Moves to Convert String - You are given a string s consisting of n characters which are either 'X' or 'O'.

A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.

Return the minimum number of moves required so that all the characters of s are converted to 'O'.

 

Example 1:


Input: s = ""XXX""
Output: 1
Explanation: XXX -> OOO
We select all the 3 characters and convert them in one move.


Example 2:


Input: s = ""XXOX""
Output: 2
Explanation: XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to 'O'.
Then we select the last 3 characters and convert them so that the final string contains all 'O's.

Example 3:


Input: s = ""OOOO""
Output: 0
Explanation: There are no 'X's in s to convert.


 

Constraints:

 * 3 <= s.length <= 1000
 * s[i] is either 'X' or 'O'.",Solutions (384),375,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-moves-to-convert-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumMoves(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minimumMoves(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumMoves(self, s: str) -> int:
        count = 0
        idx = 0
        while idx < len(s):
            if s[idx] == 'X':
                count += 1
                idx += 3
            else:
                idx += 1
        return count"
False,0,0,2155,,Find Missing Observations,find-missing-observations,False,20388,45770,2028,False,2,"Can you solve this real interview question? Find Missing Observations - You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. Fortunately, you have also calculated the average value of the n + m rolls.

You are given an integer array rolls of length m where rolls[i] is the value of the ith observation. You are also given the two integers mean and n.

Return an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. If there are multiple valid answers, return any of them. If no such array exists, return an empty array.

The average value of a set of k numbers is the sum of the numbers divided by k.

Note that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.

 

Example 1:


Input: rolls = [3,2,4,3], mean = 4, n = 2
Output: [6,6]
Explanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.


Example 2:


Input: rolls = [1,5,6], mean = 3, n = 4
Output: [2,3,2,2]
Explanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.


Example 3:


Input: rolls = [1,2,3,4], mean = 6, n = 4
Output: []
Explanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are.


 

Constraints:

 * m == rolls.length
 * 1 <= n, m <= 105
 * 1 <= rolls[i], mean <= 6",Solutions (250),376,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-missing-observations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    rolls: List[int] = deserialize(""List[int]"", read_line())
    mean: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().missingRolls(rolls, mean, n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
        total_sum = mean * (len(rolls) + n) - sum(rolls)
        if total_sum < n or total_sum > n*6:
            return []
        avg_val = total_sum // n
        remainder = total_sum % n
        return [avg_val] * (n-remainder) + [avg_val+1] * remainder"
False,0,0,2156,,Stone Game IX,stone-game-ix,False,6326,23762,2029,False,2,"Can you solve this real interview question? Stone Game IX - Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the ith stone.

Alice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).

Assuming both players play optimally, return true if Alice wins and false if Bob wins.

 

Example 1:


Input: stones = [2,1]
Output: true
Explanation: The game will be played as follows:
- Turn 1: Alice can remove either stone.
- Turn 2: Bob removes the remaining stone. 
The sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.


Example 2:


Input: stones = [2]
Output: false
Explanation: Alice will remove the only stone, and the sum of the values on the removed stones is 2. 
Since all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.


Example 3:


Input: stones = [5,1,2,4,3]
Output: false
Explanation: Bob will always win. One possible way for Bob to win is shown below:
- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.
- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.
- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.
- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.
- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.
Alice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.


 

Constraints:

 * 1 <= stones.length <= 105
 * 1 <= stones[i] <= 104",Solutions (68),194,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/stone-game-ix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def stoneGameIX(self, stones: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().stoneGameIX(stones)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def stoneGameIX(self, stones: List[int]) -> bool:
        n = len(stones)
        count = [0, 0, 0]
        
        for stone in stones:
            count[stone % 3] += 1
        
        if count[0] % 2 == 0:
            return count[1] != 0 and count[2] != 0
        else:
            return abs(count[1] - count[2]) > 2 and count[1] > 0 and count[2] > 0"
False,0,0,2157,,Smallest K-Length Subsequence With Occurrences of a Letter,smallest-k-length-subsequence-with-occurrences-of-a-letter,False,6136,15816,2030,False,3,"Can you solve this real interview question? Smallest K-Length Subsequence With Occurrences of a Letter - You are given a string s, an integer k, a letter letter, and an integer repetition.

Return the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. The test cases are generated so that the letter appears in s at least repetition times.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.

 

Example 1:


Input: s = ""leet"", k = 3, letter = ""e"", repetition = 1
Output: ""eet""
Explanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:
- ""lee"" (from ""leet"")
- ""let"" (from ""leet"")
- ""let"" (from ""leet"")
- ""eet"" (from ""leet"")
The lexicographically smallest subsequence among them is ""eet"".


Example 2:

example-2 [https://assets.leetcode.com/uploads/2021/09/13/smallest-k-length-subsequence.png]


Input: s = ""leetcode"", k = 4, letter = ""e"", repetition = 2
Output: ""ecde""
Explanation: ""ecde"" is the lexicographically smallest subsequence of length 4 that has the letter ""e"" appear at least 2 times.


Example 3:


Input: s = ""bb"", k = 2, letter = ""b"", repetition = 2
Output: ""bb""
Explanation: ""bb"" is the only subsequence of length 2 that has the letter ""b"" appear at least 2 times.


 

Constraints:

 * 1 <= repetition <= k <= s.length <= 5 * 104
 * s consists of lowercase English letters.
 * letter is a lowercase English letter, and appears in s at least repetition times.",Solutions (72),375,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestSubsequence(self, s: str, k: int, letter: str, repetition: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    letter: str = deserialize(""str"", read_line())
    repetition: int = deserialize(""int"", read_line())
    ans = Solution().smallestSubsequence(s, k, letter, repetition)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestSubsequence(self, s: str, k: int, letter: str, repetition: int) -> str:
        # your code here
        pass"
False,0,0,2159,,Two Out of Three,two-out-of-three,False,45399,61781,2032,False,1,"Can you solve this real interview question? Two Out of Three - Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.

 

Example 1:


Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.


Example 2:


Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.


Example 3:


Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.


 

Constraints:

 * 1 <= nums1.length, nums2.length, nums3.length <= 100
 * 1 <= nums1[i], nums2[j], nums3[k] <= 100",Solutions (807),582,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/two-out-of-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    nums3: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().twoOutOfThree(nums1, nums2, nums3)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def twoOutOfThree(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> List[int]:
        return list(set(num1 for num1 in nums1 if num1 in nums2 or num1 in nums3)
                    + set(num2 for num2 in nums2 if num2 in nums1 or num2 in nums3)
                    + set(num3 for num3 in nums3 if num3 in nums1 or num3 in nums2))"
False,0,0,2160,,Minimum Operations to Make a Uni-Value Grid,minimum-operations-to-make-a-uni-value-grid,False,18667,35686,2033,False,2,"Can you solve this real interview question? Minimum Operations to Make a Uni-Value Grid - You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.

A uni-value grid is a grid where all the elements of it are equal.

Return the minimum number of operations to make the grid uni-value. If it is not possible, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/21/gridtxt.png]


Input: grid = [[2,4],[6,8]], x = 2
Output: 4
Explanation: We can make every element equal to 4 by doing the following: 
- Add x to 2 once.
- Subtract x from 6 once.
- Subtract x from 8 twice.
A total of 4 operations were used.


Example 2:

[https://assets.leetcode.com/uploads/2021/09/21/gridtxt-1.png]


Input: grid = [[1,5],[2,3]], x = 1
Output: 5
Explanation: We can make every element equal to 3.


Example 3:

[https://assets.leetcode.com/uploads/2021/09/21/gridtxt-2.png]


Input: grid = [[1,2],[3,4]], x = 2
Output: -1
Explanation: It is impossible to make every element equal.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 105
 * 1 <= m * n <= 105
 * 1 <= x, grid[i][j] <= 104",Solutions (224),461,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, grid: List[List[int]], x: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    x: int = deserialize(""int"", read_line())
    ans = Solution().minOperations(grid, x)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, grid: List[List[int]], x: int) -> int:
        pass"
False,0,0,2162,,Partition Array Into Two Arrays to Minimize Sum Difference,partition-array-into-two-arrays-to-minimize-sum-difference,False,13240,70332,2035,False,3,"Can you solve this real interview question? Partition Array Into Two Arrays to Minimize Sum Difference - You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.

Return the minimum possible absolute difference.

 

Example 1:

example-1 [https://assets.leetcode.com/uploads/2021/10/02/ex1.png]


Input: nums = [3,9,7,3]
Output: 2
Explanation: One optimal partition is: [3,9] and [7,3].
The absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.


Example 2:


Input: nums = [-36,36]
Output: 72
Explanation: One optimal partition is: [-36] and [36].
The absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.


Example 3:

example-3 [https://assets.leetcode.com/uploads/2021/10/02/ex3.png]


Input: nums = [2,-1,0,4,-2,-9]
Output: 0
Explanation: One optimal partition is: [2,4,-9] and [-1,0,-2].
The absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.


 

Constraints:

 * 1 <= n <= 15
 * nums.length == 2 * n
 * -107 <= nums[i] <= 107",Solutions (195),1.9K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        pass"
False,0,0,2163,,Kth Distinct String in an Array,kth-distinct-string-in-an-array,False,42481,58964,2053,False,1,"Can you solve this real interview question? Kth Distinct String in an Array - A distinct string is a string that is present only once in an array.

Given an array of strings arr, and an integer k, return the kth distinct string present in arr. If there are fewer than k distinct strings, return an empty string """".

Note that the strings are considered in the order in which they appear in the array.

 

Example 1:


Input: arr = [""d"",""b"",""c"",""b"",""c"",""a""], k = 2
Output: ""a""
Explanation:
The only distinct strings in arr are ""d"" and ""a"".
""d"" appears 1st, so it is the 1st distinct string.
""a"" appears 2nd, so it is the 2nd distinct string.
Since k == 2, ""a"" is returned. 


Example 2:


Input: arr = [""aaa"",""aa"",""a""], k = 1
Output: ""aaa""
Explanation:
All strings in arr are distinct, so the 1st string ""aaa"" is returned.


Example 3:


Input: arr = [""a"",""b"",""a""], k = 3
Output: """"
Explanation:
The only distinct string is ""b"". Since there are fewer than 3 distinct strings, we return an empty string """".


 

Constraints:

 * 1 <= k <= arr.length <= 1000
 * 1 <= arr[i].length <= 5
 * arr[i] consists of lowercase English letters.",Solutions (835),586,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/kth-distinct-string-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kthDistinct(self, arr: List[str], k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[str] = deserialize(""List[str]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kthDistinct(arr, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def kthDistinct(self, arr: List[str], k: int) -> str:
        count = {}
        distinct = []
        
        for s in arr:
            if s not in count:
                count[s] = 1
                distinct.append(s)
            else:
                count[s] += 1
        
        for s in distinct:
            if count[s] == 1:
                k -= 1
            
            if k == 0:
                return s
        
        return """""
False,0,0,2164,,Two Best Non-Overlapping Events,two-best-non-overlapping-events,False,13364,29528,2054,False,2,"Can you solve this real interview question? Two Best Non-Overlapping Events - You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.

Return this maximum sum.

Note that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/21/picture5.png]


Input: events = [[1,3,2],[4,5,2],[2,4,3]]
Output: 4
Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.


Example 2:

Example 1 Diagram [https://assets.leetcode.com/uploads/2021/09/21/picture1.png]


Input: events = [[1,3,2],[4,5,2],[1,5,5]]
Output: 5
Explanation: Choose event 2 for a sum of 5.


Example 3:

[https://assets.leetcode.com/uploads/2021/09/21/picture3.png]


Input: events = [[1,5,3],[1,5,1],[6,6,5]]
Output: 8
Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.

 

Constraints:

 * 2 <= events.length <= 105
 * events[i].length == 3
 * 1 <= startTimei <= endTimei <= 109
 * 1 <= valuei <= 106",Solutions (235),645,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/two-best-non-overlapping-events/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTwoEvents(self, events: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    events: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxTwoEvents(events)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxTwoEvents(self, events: List[List[int]]) -> int:
        events.sort(key=lambda x: x[1])
        dp = [[0, 0]]
        
        for start, end, val in events:
            dp.append([max(dp[-1][1], dp[-1][0] + val), 0])
            
        return dp[-1][1]"
False,0,0,2165,,Plates Between Candles,plates-between-candles,False,29167,65402,2055,False,2,"Can you solve this real interview question? Plates Between Candles - There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.

You are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.

 * For example, s = ""||**||**|*"", and a query [3, 8] denotes the substring ""*||**|"". The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.

Return an integer array answer where answer[i] is the answer to the ith query.

 

Example 1:

ex-1 [https://assets.leetcode.com/uploads/2021/10/04/ex-1.png]


Input: s = ""**|**|***|"", queries = [[2,5],[5,9]]
Output: [2,3]
Explanation:
- queries[0] has two plates between candles.
- queries[1] has three plates between candles.


Example 2:

ex-2 [https://assets.leetcode.com/uploads/2021/10/04/ex-2.png]


Input: s = ""***|**|*****|**||**|*"", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]
Output: [9,0,0,0,0]
Explanation:
- queries[0] has nine plates between candles.
- The other queries have zero plates between candles.


 

Constraints:

 * 3 <= s.length <= 105
 * s consists of '*' and '|' characters.
 * 1 <= queries.length <= 105
 * queries[i].length == 2
 * 0 <= lefti <= righti < s.length",Solutions (362),878,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/plates-between-candles/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().platesBetweenCandles(s, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def platesBetweenCandles(self, s: str, queries: List[List[int]]) -> List[int]:
        def countPlates(substring):
            plates = 0
            candles_found = 0
            result = 0
            for char in substring:
                if char == '*':
                    if candles_found == 2:
                        result += 1
                elif char == '|':
                    candles_found += 1
                    if candles_found == 2:
                        plates += result
                        result = 0
            return plates
        
        answer = []
        for query in queries:
            left = query[0]
            right = query[1]
            substring = s[left:right+1]
            answer.append(countPlates(substring))
        
        return answer"
False,0,0,2166,,Number of Valid Move Combinations On Chessboard,number-of-valid-move-combinations-on-chessboard,False,3394,5854,2056,False,3,"Can you solve this real interview question? Number of Valid Move Combinations On Chessboard - There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.

When making a move for a piece, you choose a destination square that the piece will travel toward and stop on.

 * A rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).
 * A queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
 * A bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).

You must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.

Return the number of valid move combinations .

Notes:

 * No two pieces will start in the same square.
 * You may choose the square a piece is already on as its destination.
 * If two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/23/a1.png]


Input: pieces = [""rook""], positions = [[1,1]]
Output: 15
Explanation: The image above shows the possible squares the piece can move to.


Example 2:

[https://assets.leetcode.com/uploads/2021/09/23/a2.png]


Input: pieces = [""queen""], positions = [[1,1]]
Output: 22
Explanation: The image above shows the possible squares the piece can move to.


Example 3:

[https://assets.leetcode.com/uploads/2021/09/23/a3.png]


Input: pieces = [""bishop""], positions = [[4,3]]
Output: 12
Explanation: The image above shows the possible squares the piece can move to.


 

Constraints:

 * n == pieces.length
 * n == positions.length
 * 1 <= n <= 4
 * pieces only contains the strings ""rook"", ""queen"", and ""bishop"".
 * There will be at most one queen on the chessboard.
 * 1 <= xi, yi <= 8
 * Each positions[i] is distinct.",Solutions (40),51,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-valid-move-combinations-on-chessboard/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    pieces: List[str] = deserialize(""List[str]"", read_line())
    positions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countCombinations(pieces, positions)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countCombinations(self, pieces: List[str], positions: List[List[int]]) -> int:
        pass"
False,0,0,2168,,Check if Numbers Are Ascending in a Sentence,check-if-numbers-are-ascending-in-a-sentence,False,40216,59816,2042,False,1,"Can you solve this real interview question? Check if Numbers Are Ascending in a Sentence - A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase English letters.

 * For example, ""a puppy has 2 eyes 4 legs"" is a sentence with seven tokens: ""2"" and ""4"" are numbers and the other tokens such as ""puppy"" are words.

Given a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s).

Return true if so, or false otherwise.

 

Example 1:

example-1 [https://assets.leetcode.com/uploads/2021/09/30/example1.png]


Input: s = ""1 box has 3 blue 4 red 6 green and 12 yellow marbles""
Output: true
Explanation: The numbers in s are: 1, 3, 4, 6, 12.
They are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.


Example 2:


Input: s = ""hello world 5 x 5""
Output: false
Explanation: The numbers in s are: 5, 5. They are not strictly increasing.


Example 3:

example-3 [https://assets.leetcode.com/uploads/2021/09/30/example3.png]


Input: s = ""sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s""
Output: false
Explanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.


 

Constraints:

 * 3 <= s.length <= 200
 * s consists of lowercase English letters, spaces, and digits from 0 to 9, inclusive.
 * The number of tokens in s is between 2 and 100, inclusive.
 * The tokens in s are separated by a single space.
 * There are at least two numbers in s.
 * Each number in s is a positive number less than 100, with no leading zeros.
 * s contains no leading or trailing spaces.",Solutions (807),475,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-numbers-are-ascending-in-a-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def areNumbersAscending(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().areNumbersAscending(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def areNumbersAscending(self, s: str) -> bool:
        tokens = s.split()
        numbers = [token for token in tokens if token.isdigit()]
        return all(int(numbers[i]) < int(numbers[i+1]) for i in range(len(numbers)-1) if i+1 < len(numbers) and int(numbers[i]) >= 0 and int(numbers[i+1]) >= 0)"
False,0,0,2170,,Count Number of Maximum Bitwise-OR Subsets,count-number-of-maximum-bitwise-or-subsets,False,20259,26798,2044,False,2,"Can you solve this real interview question? Count Number of Maximum Bitwise-OR Subsets - Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.

The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).

 

Example 1:


Input: nums = [3,1]
Output: 2
Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:
- [3]
- [3,1]


Example 2:


Input: nums = [2,2,2]
Output: 7
Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets.


Example 3:


Input: nums = [3,2,1,5]
Output: 6
Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:
- [3,5]
- [3,1,5]
- [3,2,5]
- [3,2,1,5]
- [2,5]
- [2,1,5]

 

Constraints:

 * 1 <= nums.length <= 16
 * 1 <= nums[i] <= 105",Solutions (312),480,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countMaxOrSubsets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countMaxOrSubsets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countMaxOrSubsets(self, nums: List[int]) -> int:
        pass"
False,0,0,2171,second-minimum-title-to-reach-destination,Second Minimum Time to Reach Destination,second-minimum-time-to-reach-destination,False,8645,22034,2045,False,3,"Can you solve this real interview question? Second Minimum Time to Reach Destination - A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.

Each vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.

The second minimum value is defined as the smallest value strictly larger than the minimum value.

 * For example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.

Given n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.

Notes:

 * You can go through any vertex any number of times, including 1 and n.
 * You can assume that when the journey starts, all signals have just turned green.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/09/29/e1.png]        [https://assets.leetcode.com/uploads/2021/09/29/e2.png]


Input: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5
Output: 13
Explanation:
The figure on the left shows the given graph.
The blue path in the figure on the right is the minimum time path.
The time taken is:
- Start at 1, time elapsed=0
- 1 -> 4: 3 minutes, time elapsed=3
- 4 -> 5: 3 minutes, time elapsed=6
Hence the minimum time needed is 6 minutes.

The red path shows the path to get the second minimum time.
- Start at 1, time elapsed=0
- 1 -> 3: 3 minutes, time elapsed=3
- 3 -> 4: 3 minutes, time elapsed=6
- Wait at 4 for 4 minutes, time elapsed=10
- 4 -> 5: 3 minutes, time elapsed=13
Hence the second minimum time is 13 minutes.      


Example 2:

[https://assets.leetcode.com/uploads/2021/09/29/eg2.png]


Input: n = 2, edges = [[1,2]], time = 3, change = 2
Output: 11
Explanation:
The minimum time path is 1 -> 2 with time = 3 minutes.
The second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.

 

Constraints:

 * 2 <= n <= 104
 * n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)
 * edges[i].length == 2
 * 1 <= ui, vi <= n
 * ui != vi
 * There are no duplicate edges.
 * Each vertex can be reached directly or indirectly from every other vertex.
 * 1 <= time, change <= 103",Solutions (106),557,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/second-minimum-time-to-reach-destination/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    time: int = deserialize(""int"", read_line())
    change: int = deserialize(""int"", read_line())
    ans = Solution().secondMinimum(n, edges, time, change)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def secondMinimum(self, n: int, edges: List[List[int]], time: int, change: int) -> int:
        from collections import defaultdict
        graph = defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        def min_time():
            result = float('inf')
            queue = [(1, 0, 0)]
            while queue:
                node, t, wait = queue.pop(0)
                t %= 2 * change
                if node == n:
                    result = min(result, t)
                    continue
                for nei in graph[node]:
                    if t + time >= (2 * change) or wait + time + t >= (2 * change):
                        queue.append((nei, t + time, 0))
                    else:
                        queue.append((nei, t + time, wait + time))
            return result
        
        min_needed = min_time()
        
        def second_min_time():
            result = float('inf')
            queue = [(1, 0, 0)]
            while queue:
                node, t, wait = queue.pop(0)
                t %= 2 * change
                if node == n:
                    result = min(result, t)
                    continue
                for nei in graph[node]:
                    if t + time >= (2 * change) or wait + time + t >= (2 * change):
                        queue.append((nei, t + time, 0))
                    else:
                        queue.append((nei, t + time, wait + time))
            return result
        
        second_min_needed = second_min_time()
        
        return second_min_needed"
False,0,0,2173,,Number of Valid Words in a Sentence,number-of-valid-words-in-a-sentence,False,21279,72548,2047,False,1,"Can you solve this real interview question? Number of Valid Words in a Sentence - A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.

A token is a valid word if all three of the following are true:

 * It only contains lowercase letters, hyphens, and/or punctuation (no digits).
 * There is at most one hyphen '-'. If present, it must be surrounded by lowercase characters (""a-b"" is valid, but ""-ab"" and ""ab-"" are not valid).
 * There is at most one punctuation mark. If present, it must be at the end of the token (""ab,"", ""cd!"", and ""."" are valid, but ""a!b"" and ""c.,"" are not valid).

Examples of valid words include ""a-b."", ""afad"", ""ba-c"", ""a!"", and ""!"".

Given a string sentence, return the number of valid words in sentence.

 

Example 1:


Input: sentence = ""cat and  dog""
Output: 3
Explanation: The valid words in the sentence are ""cat"", ""and"", and ""dog"".


Example 2:


Input: sentence = ""!this  1-s b8d!""
Output: 0
Explanation: There are no valid words in the sentence.
""!this"" is invalid because it starts with a punctuation mark.
""1-s"" and ""b8d"" are invalid because they contain digits.


Example 3:


Input: sentence = ""alice and  bob are playing stone-game10""
Output: 5
Explanation: The valid words in the sentence are ""alice"", ""and"", ""bob"", ""are"", and ""playing"".
""stone-game10"" is invalid because it contains digits.


 

Constraints:

 * 1 <= sentence.length <= 1000
 * sentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','.
 * There will be at least 1 token.",Solutions (324),223,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-valid-words-in-a-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countValidWords(self, sentence: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    ans = Solution().countValidWords(sentence)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countValidWords(self, sentence: str) -> int:
        def is_valid_word(word):
            if any(char.isdigit() for char in word):
                return False
            if len([char for char in word if char.isalpha() or char in ['-','!','.']]) != len(word):
                return False
            if word.count('-') > 1 or word.count('!') + word.count('.') > 1:
                return False
            if '-' in word and (word[0] == '-' or word[-1] == '-'):
                return False
            if any(char.isupper() for char in word):
                return False
            return True

        words = sentence.split()
        count = sum(1 for word in words if is_valid_word(word))
        return count"
False,0,0,2174,,Next Greater Numerically Balanced Number,next-greater-numerically-balanced-number,False,10848,22931,2048,False,2,"Can you solve this real interview question? Next Greater Numerically Balanced Number - An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.

Given an integer n, return the smallest numerically balanced number strictly greater than n.

 

Example 1:


Input: n = 1
Output: 22
Explanation: 
22 is numerically balanced since:
- The digit 2 occurs 2 times. 
It is also the smallest numerically balanced number strictly greater than 1.


Example 2:


Input: n = 1000
Output: 1333
Explanation: 
1333 is numerically balanced since:
- The digit 1 occurs 1 time.
- The digit 3 occurs 3 times. 
It is also the smallest numerically balanced number strictly greater than 1000.
Note that 1022 cannot be the answer because 0 appeared more than 0 times.


Example 3:


Input: n = 3000
Output: 3133
Explanation: 
3133 is numerically balanced since:
- The digit 1 occurs 1 time.
- The digit 3 occurs 3 times.
It is also the smallest numerically balanced number strictly greater than 3000.


 

Constraints:

 * 0 <= n <= 106",Solutions (189),158,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/next-greater-numerically-balanced-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def nextBeautifulNumber(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().nextBeautifulNumber(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def nextBeautifulNumber(self, n: int) -> int:
        def countDigits(num):
            return [str(num).count(d) for d in str(num)]

        num = n + 1
        while True:
            if all(num.count(str(i)) == i for i in range(1, 10)):
                return num
            num += 1"
False,0,0,2175,,Count Nodes With the Highest Score,count-nodes-with-the-highest-score,False,16204,34032,2049,False,2,"Can you solve this real interview question? Count Nodes With the Highest Score - There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.

Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.

Return the number of nodes that have the highest score.

 

Example 1:

example-1 [https://assets.leetcode.com/uploads/2021/10/03/example-1.png]


Input: parents = [-1,2,0,2,0]
Output: 3
Explanation:
- The score of node 0 is: 3 * 1 = 3
- The score of node 1 is: 4 = 4
- The score of node 2 is: 1 * 1 * 2 = 2
- The score of node 3 is: 4 = 4
- The score of node 4 is: 4 = 4
The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.


Example 2:

example-2 [https://assets.leetcode.com/uploads/2021/10/03/example-2.png]


Input: parents = [-1,2,0]
Output: 2
Explanation:
- The score of node 0 is: 2 = 2
- The score of node 1 is: 2 = 2
- The score of node 2 is: 1 * 1 = 1
The highest score is 2, and two nodes (node 0 and node 1) have the highest score.


 

Constraints:

 * n == parents.length
 * 2 <= n <= 105
 * parents[0] == -1
 * 0 <= parents[i] <= n - 1 for i != 0
 * parents represents a valid binary tree.",Solutions (258),790,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-nodes-with-the-highest-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countHighestScoreNodes(self, parents: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    parents: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countHighestScoreNodes(parents)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countHighestScoreNodes(self, parents: List[int]) -> int:
        pass"
False,0,0,2176,,Parallel Courses III,parallel-courses-iii,False,17640,29773,2050,False,3,"Can you solve this real interview question? Parallel Courses III - You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.

You must find the minimum number of months needed to complete all the courses following these rules:

 * You may start taking a course at any time if the prerequisites are met.
 * Any number of courses can be taken at the same time.

Return the minimum number of months needed to complete all the courses.

Note: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/07/ex1.png]


Input: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]
Output: 8
Explanation: The figure above represents the given graph and the time required to complete each course. 
We start course 1 and course 2 simultaneously at month 0.
Course 1 takes 3 months and course 2 takes 2 months to complete respectively.
Thus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.


Example 2:

[https://assets.leetcode.com/uploads/2021/10/07/ex2.png]


Input: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]
Output: 12
Explanation: The figure above represents the given graph and the time required to complete each course.
You can start courses 1, 2, and 3 at month 0.
You can complete them after 1, 2, and 3 months respectively.
Course 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.
Course 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.
Thus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.


 

Constraints:

 * 1 <= n <= 5 * 104
 * 0 <= relations.length <= min(n * (n - 1) / 2, 5 * 104)
 * relations[j].length == 2
 * 1 <= prevCoursej, nextCoursej <= n
 * prevCoursej != nextCoursej
 * All the pairs [prevCoursej, nextCoursej] are unique.
 * time.length == n
 * 1 <= time[i] <= 104
 * The given graph is a directed acyclic graph.",Solutions (269),640,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/parallel-courses-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    relations: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    time: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumTime(n, relations, time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTime(self, n: int, relations: List[List[int]], time: List[int]) -> int:
        import collections
        graph = collections.defaultdict(list)
        indegree = [0] * (n + 1)
        for prev, next in relations:
            graph[prev].append(next)
            indegree[next] += 1
        
        queue = collections.deque()
        for i in range(1, n + 1):
            if indegree[i] == 0:
                queue.append((i, 0))
        
        ans = 0
        while queue:
            course, curr_time = queue.popleft()
            ans = max(ans, curr_time + time[course - 1])
            for next_course in graph[course]:
                indegree[next_course] -= 1
                if indegree[next_course] == 0:
                    queue.append((next_course, curr_time + time[course - 1]))
        
        return ans"
False,0,0,2177,,Check Whether Two Strings are Almost Equivalent,check-whether-two-strings-are-almost-equivalent,False,32465,50676,2068,False,1,"Can you solve this real interview question? Check Whether Two Strings are Almost Equivalent - Two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.

Given two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.

The frequency of a letter x is the number of times it occurs in the string.

 

Example 1:


Input: word1 = ""aaaa"", word2 = ""bccb""
Output: false
Explanation: There are 4 'a's in ""aaaa"" but 0 'a's in ""bccb"".
The difference is 4, which is more than the allowed 3.


Example 2:


Input: word1 = ""abcdeef"", word2 = ""abaaacc""
Output: true
Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.
- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.
- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.
- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.
- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.
- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.


Example 3:


Input: word1 = ""cccddabba"", word2 = ""babababab""
Output: true
Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.
- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.
- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.
- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.


 

Constraints:

 * n == word1.length == word2.length
 * 1 <= n <= 100
 * word1 and word2 consist only of lowercase English letters.",Solutions (607),378,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkAlmostEquivalent(self, word1: str, word2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().checkAlmostEquivalent(word1, word2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkAlmostEquivalent(self, word1: str, word2: str) -> bool:
        from collections import Counter
        count1 = Counter(word1)
        count2 = Counter(word2)
        diff = sum(abs(count1[letter] - count2[letter]) for letter in count1.keys())
        return diff <= 3"
False,0,0,2179,,Most Beautiful Item for Each Query,most-beautiful-item-for-each-query,False,12199,24617,2070,False,2,"Can you solve this real interview question? Most Beautiful Item for Each Query - You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.

You are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.

Return an array answer of the same length as queries where answer[j] is the answer to the jth query.

 

Example 1:


Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]
Output: [2,4,5,5,6,6]
Explanation:
- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.
- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. 
  The maximum beauty among them is 4.
- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].
  The maximum beauty among them is 5.
- For queries[4]=5 and queries[5]=6, all items can be considered.
  Hence, the answer for them is the maximum beauty of all items, i.e., 6.


Example 2:


Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]
Output: [4]
Explanation: 
The price of every item is equal to 1, so we choose the item with the maximum beauty 4. 
Note that multiple items can have the same price and/or beauty.  


Example 3:


Input: items = [[10,1000]], queries = [5]
Output: [0]
Explanation:
No item has a price less than or equal to 5, so no item can be chosen.
Hence, the answer to the query is 0.


 

Constraints:

 * 1 <= items.length, queries.length <= 105
 * items[i].length == 2
 * 1 <= pricei, beautyi, queries[j] <= 109",Solutions (275),470,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/most-beautiful-item-for-each-query/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    items: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumBeauty(items, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maximumBeauty(self, items: List[List[int]], queries: List[int]) -> List[int]:
        beauty_dict = {}
        for price, beauty in items:
            if price in beauty_dict:
                beauty_dict[price] = max(beauty_dict[price], beauty)
            else:
                beauty_dict[price] = beauty
        
        max_beauty = 0
        for price in sorted(beauty_dict.keys()):
            max_beauty = max(max_beauty, beauty_dict[price])
            beauty_dict[price] = max_beauty
        
        return [beauty_dict.get(query, 0) for query in queries]"
False,0,0,2180,,Maximum Number of Tasks You Can Assign,maximum-number-of-tasks-you-can-assign,False,6547,19289,2071,False,3,"Can you solve this real interview question? Maximum Number of Tasks You Can Assign - You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

 

Example 1:


Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)


Example 2:


Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
Output: 1
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 0 (0 + 5 >= 5)


Example 3:


Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
Output: 2
Explanation:
We can assign the magical pills and tasks as follows:
- Give the magical pill to worker 0 and worker 1.
- Assign worker 0 to task 0 (0 + 10 >= 10)
- Assign worker 1 to task 1 (10 + 10 >= 15)
The last pill is not given because it will not make any worker strong enough for the last task.


 

Constraints:

 * n == tasks.length
 * m == workers.length
 * 1 <= n, m <= 5 * 104
 * 0 <= pills <= m
 * 0 <= tasks[i], workers[j], strength <= 109",Solutions (58),401,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[int] = deserialize(""List[int]"", read_line())
    workers: List[int] = deserialize(""List[int]"", read_line())
    pills: int = deserialize(""int"", read_line())
    strength: int = deserialize(""int"", read_line())
    ans = Solution().maxTaskAssign(tasks, workers, pills, strength)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxTaskAssign(self, tasks: List[int], workers: List[int], pills: int, strength: int) -> int:
        from itertools import combinations
        max_tasks = 0
        for i in range(pills + 1):
            for comb in combinations(range(len(workers)), i):
                total_strength = sum(workers[idx] + strength * (idx in comb) for idx in range(len(workers)))
                tasks_assigned = sum(1 for task in tasks if total_strength >= task)
                max_tasks = max(max_tasks, tasks_assigned)
        return max_tasks"
False,0,0,2181,,Smallest Index With Equal Value,smallest-index-with-equal-value,False,40502,56561,2057,False,1,"Can you solve this real interview question? Smallest Index With Equal Value - Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.

x mod y denotes the remainder when x is divided by y.

 

Example 1:


Input: nums = [0,1,2]
Output: 0
Explanation: 
i=0: 0 mod 10 = 0 == nums[0].
i=1: 1 mod 10 = 1 == nums[1].
i=2: 2 mod 10 = 2 == nums[2].
All indices have i mod 10 == nums[i], so we return the smallest index 0.


Example 2:


Input: nums = [4,3,2,1]
Output: 2
Explanation: 
i=0: 0 mod 10 = 0 != nums[0].
i=1: 1 mod 10 = 1 != nums[1].
i=2: 2 mod 10 = 2 == nums[2].
i=3: 3 mod 10 = 3 != nums[3].
2 is the only index which has i mod 10 == nums[i].


Example 3:


Input: nums = [1,2,3,4,5,6,7,8,9,0]
Output: -1
Explanation: No index satisfies i mod 10 == nums[i].


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 9",Solutions (620),302,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-index-with-equal-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().smallestEqual(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestEqual(self, nums: List[int]) -> int:
        for i in range(len(nums)):
            if i % 10 == nums[i]:
                return i
        return -1"
False,0,0,2183,,Minimum Operations to Convert Number,minimum-operations-to-convert-number,False,13054,27339,2059,False,2,"Can you solve this real interview question? Minimum Operations to Convert Number - You are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x:

If 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:

 * x + nums[i]
 * x - nums[i]
 * x ^ nums[i] (bitwise-XOR)

Note that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.

Return the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.

 

Example 1:


Input: nums = [2,4,12], start = 2, goal = 12
Output: 2
Explanation: We can go from 2 → 14 → 12 with the following 2 operations.
- 2 + 12 = 14
- 14 - 2 = 12


Example 2:


Input: nums = [3,5,7], start = 0, goal = -4
Output: 2
Explanation: We can go from 0 → 3 → -4 with the following 2 operations. 
- 0 + 3 = 3
- 3 - 7 = -4
Note that the last operation sets x out of the range 0 <= x <= 1000, which is valid.


Example 3:


Input: nums = [2,8,16], start = 0, goal = 1
Output: -1
Explanation: There is no way to convert 0 into 1.


 

Constraints:

 * 1 <= nums.length <= 1000
 * -109 <= nums[i], goal <= 109
 * 0 <= start <= 1000
 * start != goal
 * All the integers in nums are distinct.",Solutions (190),537,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-convert-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    start: int = deserialize(""int"", read_line())
    goal: int = deserialize(""int"", read_line())
    ans = Solution().minimumOperations(nums, start, goal)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumOperations(self, nums: List[int], start: int, goal: int) -> int:
        # Function implementation here to solve the minimum operations problem."
False,0,0,2184,,Check if an Original String Exists Given Two Encoded Strings,check-if-an-original-string-exists-given-two-encoded-strings,False,9075,22187,2060,False,3,"Can you solve this real interview question? Check if an Original String Exists Given Two Encoded Strings - An original string, consisting of lowercase English letters, can be encoded by the following steps:

 * Arbitrarily split it into a sequence of some number of non-empty substrings.
 * Arbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).
 * Concatenate the sequence as the encoded string.

For example, one way to encode an original string ""abcdefghijklmnop"" might be:

 * Split it as a sequence: [""ab"", ""cdefghijklmn"", ""o"", ""p""].
 * Choose the second and third elements to be replaced by their lengths, respectively. The sequence becomes [""ab"", ""12"", ""1"", ""p""].
 * Concatenate the elements of the sequence to get the encoded string: ""ab121p"".

Given two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.

Note: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.

 

Example 1:


Input: s1 = ""internationalization"", s2 = ""i18n""
Output: true
Explanation: It is possible that ""internationalization"" was the original string.
- ""internationalization"" 
  -> Split:       [""internationalization""]
  -> Do not replace any element
  -> Concatenate:  ""internationalization"", which is s1.
- ""internationalization""
  -> Split:       [""i"", ""nternationalizatio"", ""n""]
  -> Replace:     [""i"", ""18"",                 ""n""]
  -> Concatenate:  ""i18n"", which is s2


Example 2:


Input: s1 = ""l123e"", s2 = ""44""
Output: true
Explanation: It is possible that ""leetcode"" was the original string.
- ""leetcode"" 
  -> Split:      [""l"", ""e"", ""et"", ""cod"", ""e""]
  -> Replace:    [""l"", ""1"", ""2"",  ""3"",   ""e""]
  -> Concatenate: ""l123e"", which is s1.
- ""leetcode"" 
  -> Split:      [""leet"", ""code""]
  -> Replace:    [""4"",    ""4""]
  -> Concatenate: ""44"", which is s2.


Example 3:


Input: s1 = ""a5b"", s2 = ""c5b""
Output: false
Explanation: It is impossible.
- The original string encoded as s1 must start with the letter 'a'.
- The original string encoded as s2 must start with the letter 'c'.


 

Constraints:

 * 1 <= s1.length, s2.length <= 40
 * s1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.
 * The number of consecutive digits in s1 and s2 does not exceed 3.",Solutions (63),258,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-an-original-string-exists-given-two-encoded-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def possiblyEquals(self, s1: str, s2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s1: str = deserialize(""str"", read_line())
    s2: str = deserialize(""str"", read_line())
    ans = Solution().possiblyEquals(s1, s2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def possiblyEquals(self, s1: str, s2: str) -> bool:
        def decode(encoded):
            parts = []
            curr = """"
            for c in encoded:
                if c.isdigit():
                    curr += c
                else:
                    if curr:
                        parts.append(int(curr))
                        curr = """"
                    parts.append(c)
            if curr:
                parts.append(int(curr))

            return ''.join([str(p) if isinstance(p, int) else p for p in parts])

        return decode(s1) == decode(s2)"
False,0,0,2186,,Count Vowel Substrings of a String,count-vowel-substrings-of-a-string,False,26972,40848,2062,False,1,"Can you solve this real interview question? Count Vowel Substrings of a String - A substring is a contiguous (non-empty) sequence of characters within a string.

A vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.

Given a string word, return the number of vowel substrings in word.

 

Example 1:


Input: word = ""aeiouu""
Output: 2
Explanation: The vowel substrings of word are as follows (underlined):
- ""aeiouu""
- ""aeiouu""


Example 2:


Input: word = ""unicornarihan""
Output: 0
Explanation: Not all 5 vowels are present, so there are no vowel substrings.


Example 3:


Input: word = ""cuaieuouac""
Output: 7
Explanation: The vowel substrings of word are as follows (underlined):
- ""cuaieuouac""
- ""cuaieuouac""
- ""cuaieuouac""
- ""cuaieuouac""
- ""cuaieuouac""
- ""cuaieuouac""
- ""cuaieuouac""


 

Constraints:

 * 1 <= word.length <= 100
 * word consists of lowercase English letters only.",Solutions (331),717,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-vowel-substrings-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countVowelSubstrings(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().countVowelSubstrings(word)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countVowelSubstrings(self, word: str) -> int:
        vowels = set(""aeiou"")
        count = 0
        n = len(word)
        
        for i in range(n):
            for j in range(i+1, n+1):
                if len(set(word[i:j]) & vowels) == 5:
                    count += 1
        
        return count"
False,0,0,2187,,Vowels of All Substrings,vowels-of-all-substrings,False,21281,38871,2063,False,2,"Can you solve this real interview question? Vowels of All Substrings - Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.

A substring is a contiguous (non-empty) sequence of characters within a string.

Note: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.

 

Example 1:


Input: word = ""aba""
Output: 6
Explanation: 
All possible substrings are: ""a"", ""ab"", ""aba"", ""b"", ""ba"", and ""a"".
- ""b"" has 0 vowels in it
- ""a"", ""ab"", ""ba"", and ""a"" have 1 vowel each
- ""aba"" has 2 vowels in it
Hence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6. 


Example 2:


Input: word = ""abc""
Output: 3
Explanation: 
All possible substrings are: ""a"", ""ab"", ""abc"", ""b"", ""bc"", and ""c"".
- ""a"", ""ab"", and ""abc"" have 1 vowel each
- ""b"", ""bc"", and ""c"" have 0 vowels each
Hence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.


Example 3:


Input: word = ""ltcd""
Output: 0
Explanation: There are no vowels in any substring of ""ltcd"".


 

Constraints:

 * 1 <= word.length <= 105
 * word consists of lowercase English letters.",Solutions (285),649,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/vowels-of-all-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countVowels(self, word: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().countVowels(word)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countVowels(self, word: str) -> int:
        vowels = ['a', 'e', 'i', 'o', 'u']
        count = 0
        for i in range(len(word)):
            for j in range(i+1, len(word)+1):
                substring = word[i:j]
                count += sum(1 for char in substring if char in vowels)
        return count"
False,0,0,2188,,Minimized Maximum of Products Distributed to Any Store,minimized-maximum-of-products-distributed-to-any-store,False,19385,38199,2064,False,2,"Can you solve this real interview question? Minimized Maximum of Products Distributed to Any Store - You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type.

You need to distribute all products to the retail stores following these rules:

 * A store can only be given at most one product type but can be given any amount of it.
 * After distribution, each store will have been given some number of products (possibly 0). Let x represent the maximum number of products given to any store. You want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.

Return the minimum possible x.

 

Example 1:


Input: n = 6, quantities = [11,6]
Output: 3
Explanation: One optimal way is:
- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3
- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3
The maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.


Example 2:


Input: n = 7, quantities = [15,10,10]
Output: 5
Explanation: One optimal way is:
- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5
- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5
- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5
The maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.


Example 3:


Input: n = 1, quantities = [100000]
Output: 100000
Explanation: The only optimal way is:
- The 100000 products of type 0 are distributed to the only store.
The maximum number of products given to any store is max(100000) = 100000.


 

Constraints:

 * m == quantities.length
 * 1 <= m <= n <= 105
 * 1 <= quantities[i] <= 105",Solutions (297),781,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimized-maximum-of-products-distributed-to-any-store/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    quantities: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimizedMaximum(n, quantities)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizedMaximum(self, n: int, quantities: List[int]) -> int:
        def check(x):
            ans = 0
            for q in quantities:
                ans += (q + x - 1) // x
            return ans
        left, right = 1, max(quantities)
        while left < right:
            mid = (left + right) // 2
            if check(mid) <= n:
                right = mid
            else:
                left = mid + 1
        return left"
False,0,0,2189,,Maximum Path Quality of a Graph,maximum-path-quality-of-a-graph,False,14840,25953,2065,False,3,"Can you solve this real interview question? Maximum Path Quality of a Graph - There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.

A valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).

Return the maximum quality of a valid path.

Note: There are at most four edges connected to each node.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/19/ex1drawio.png]


Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49
Output: 75
Explanation:
One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.


Example 2:

[https://assets.leetcode.com/uploads/2021/10/19/ex2drawio.png]


Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30
Output: 25
Explanation:
One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.
The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.


Example 3:

[https://assets.leetcode.com/uploads/2021/10/19/ex31drawio.png]


Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50
Output: 7
Explanation:
One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.


 

Constraints:

 * n == values.length
 * 1 <= n <= 1000
 * 0 <= values[i] <= 108
 * 0 <= edges.length <= 2000
 * edges[j].length == 3
 * 0 <= uj < vj <= n - 1
 * 10 <= timej, maxTime <= 100
 * All the pairs [uj, vj] are unique.
 * There are at most four edges connected to each node.
 * The graph may not be connected.",Solutions (154),490,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-path-quality-of-a-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    values: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    maxTime: int = deserialize(""int"", read_line())
    ans = Solution().maximalPathQuality(values, edges, maxTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximalPathQuality(self, values: List[int], edges: List[List[int]], maxTime: int) -> int:
        pass # Your code here"
False,0,0,2190,,Count Common Words With One Occurrence,count-common-words-with-one-occurrence,False,43543,62203,2085,False,1,"Can you solve this real interview question? Count Common Words With One Occurrence - Given two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.

 

Example 1:


Input: words1 = [""leetcode"",""is"",""amazing"",""as"",""is""], words2 = [""amazing"",""leetcode"",""is""]
Output: 2
Explanation:
- ""leetcode"" appears exactly once in each of the two arrays. We count this string.
- ""amazing"" appears exactly once in each of the two arrays. We count this string.
- ""is"" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.
- ""as"" appears once in words1, but does not appear in words2. We do not count this string.
Thus, there are 2 strings that appear exactly once in each of the two arrays.


Example 2:


Input: words1 = [""b"",""bb"",""bbb""], words2 = [""a"",""aa"",""aaa""]
Output: 0
Explanation: There are no strings that appear in each of the two arrays.


Example 3:


Input: words1 = [""a"",""ab""], words2 = [""a"",""a"",""a"",""ab""]
Output: 1
Explanation: The only string that appears exactly once in each of the two arrays is ""ab"".


 

Constraints:

 * 1 <= words1.length, words2.length <= 1000
 * 1 <= words1[i].length, words2[j].length <= 30
 * words1[i] and words2[j] consists only of lowercase English letters.",Solutions (807),607,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-common-words-with-one-occurrence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countWords(self, words1: List[str], words2: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words1: List[str] = deserialize(""List[str]"", read_line())
    words2: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().countWords(words1, words2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countWords(self, words1: List[str], words2: List[str]) -> int:
        count = 0
        for word in set(words1).intersection(set(words2)):
            if words1.count(word) == 1 and words2.count(word) == 1:
                count += 1
        return count"
False,0,0,2191,,Minimum Number of Food Buckets to Feed the Hamsters,minimum-number-of-food-buckets-to-feed-the-hamsters,False,14218,31660,2086,False,2,"Can you solve this real interview question? Minimum Number of Food Buckets to Feed the Hamsters - You are given a 0-indexed string hamsters where hamsters[i] is either:

 * 'H' indicating that there is a hamster at index i, or
 * '.' indicating that index i is empty.

You will add some number of food buckets at the empty indices in order to feed the hamsters. A hamster can be fed if there is at least one food bucket to its left or to its right. More formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1.

Return the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/01/example1.png]


Input: hamsters = ""H..H""
Output: 2
Explanation: We place two food buckets at indices 1 and 2.
It can be shown that if we place only one food bucket, one of the hamsters will not be fed.


Example 2:

[https://assets.leetcode.com/uploads/2022/11/01/example2.png]


Input: hamsters = "".H.H.""
Output: 1
Explanation: We place one food bucket at index 2.


Example 3:

[https://assets.leetcode.com/uploads/2022/11/01/example3.png]


Input: hamsters = "".HHH.""
Output: -1
Explanation: If we place a food bucket at every empty index as shown, the hamster at index 2 will not be able to eat.


 

Constraints:

 * 1 <= hamsters.length <= 105
 * hamsters[i] is either'H' or '.'.",Solutions (216),443,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-food-buckets-to-feed-the-hamsters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumBuckets(self, hamsters: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    hamsters: str = deserialize(""str"", read_line())
    ans = Solution().minimumBuckets(hamsters)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumBuckets(self, hamsters: str) -> int:
        def feed_hamsters(hamsters):
            food_buckets = 0
            for i in range(len(hamsters)):
                if hamsters[i] == 'H':
                    left = i - 1
                    right = i + 1
                    if (left >= 0 and hamsters[left] == '.') or (right < len(hamsters) and hamsters[right] == '.'):
                        continue
                    else:
                        food_buckets += 1
            return food_buckets
        
        total_buckets = feed_hamsters(hamsters.replace('.', 'H'))
        if total_buckets == 0:
            return -1
        return total_buckets - 1 if hamsters.count('H') > 1 else total_buckets"
False,0,0,2192,,Minimum Cost Homecoming of a Robot in a Grid,minimum-cost-homecoming-of-a-robot-in-a-grid,False,13272,25964,2087,False,2,"Can you solve this real interview question? Minimum Cost Homecoming of a Robot in a Grid - There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).

The robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.

 * If the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].
 * If the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].

Return the minimum total cost for this robot to return home.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/11/eg-1.png]


Input: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]
Output: 18
Explanation: One optimal path is that:
Starting from (1, 0)
-> It goes down to (2, 0). This move costs rowCosts[2] = 3.
-> It goes right to (2, 1). This move costs colCosts[1] = 2.
-> It goes right to (2, 2). This move costs colCosts[2] = 6.
-> It goes right to (2, 3). This move costs colCosts[3] = 7.
The total cost is 3 + 2 + 6 + 7 = 18

Example 2:


Input: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]
Output: 0
Explanation: The robot is already at its home. Since no moves occur, the total cost is 0.


 

Constraints:

 * m == rowCosts.length
 * n == colCosts.length
 * 1 <= m, n <= 105
 * 0 <= rowCosts[r], colCosts[c] <= 104
 * startPos.length == 2
 * homePos.length == 2
 * 0 <= startrow, homerow < m
 * 0 <= startcol, homecol < n",Solutions (215),525,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, startPos: List[int], homePos: List[int], rowCosts: List[int], colCosts: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startPos: List[int] = deserialize(""List[int]"", read_line())
    homePos: List[int] = deserialize(""List[int]"", read_line())
    rowCosts: List[int] = deserialize(""List[int]"", read_line())
    colCosts: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(startPos, homePos, rowCosts, colCosts)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, startPos: List[int], homePos: List[int], rowCosts: List[int], colCosts: List[int]) -> int:
        m, n = len(rowCosts), len(colCosts)
        start_row, start_col = startPos
        home_row, home_col = homePos
        
        dp = [[0] * n for _ in range(m)]
        dp[start_row][start_col] = 0

        for i in range(start_row + 1, m):
            dp[i][start_col] = dp[i - 1][start_col] + rowCosts[i]
        for i in range(start_row - 1, -1, -1):
            dp[i][start_col] = dp[i + 1][start_col] + rowCosts[i]
        for j in range(start_col + 1, n):
            dp[start_row][j] = dp[start_row][j - 1] + colCosts[j]
        for j in range(start_col - 1, -1, -1):
            dp[start_row][j] = dp[start_row][j + 1] + colCosts[j]
        
        for i in range(start_row + 1, m):
            for j in range(start_col + 1, n):
                dp[i][j] = min(dp[i - 1][j] + rowCosts[i], dp[i][j - 1] + colCosts[j])
        
        for i in reversed(range(home_row)):
            dp[i][home_col] = min(dp[i][home_col], dp[i + 1][home_col] + rowCosts[i])
        for j in reversed(range(home_col)):
            dp[home_row][j] = min(dp[home_row][j], dp[home_row][j + 1] + colCosts[j])
        
        return dp[home_row][home_col]"
False,0,0,2193,,Count Fertile Pyramids in a Land,count-fertile-pyramids-in-a-land,False,5758,9063,2088,False,3,"Can you solve this real interview question? Count Fertile Pyramids in a Land - A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.

A pyramidal plot of land can be defined as a set of cells with the following criteria:

 1. The number of cells in the set has to be greater than 1 and all cells must be fertile.
 2. The apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).

An inverse pyramidal plot of land can be defined as a set of cells with similar criteria:

 1. The number of cells in the set has to be greater than 1 and all cells must be fertile.
 2. The apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).

Some examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.

[https://assets.leetcode.com/uploads/2021/11/08/image.png]

Given a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/22/1.JPG]


Input: grid = [[0,1,1,0],[1,1,1,1]]
Output: 2
Explanation: The 2 possible pyramidal plots are shown in blue and red respectively.
There are no inverse pyramidal plots in this grid. 
Hence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/22/2.JPG]


Input: grid = [[1,1,1],[1,1,1]]
Output: 2
Explanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red. 
Hence the total number of plots is 1 + 1 = 2.


Example 3:

[https://assets.leetcode.com/uploads/2021/12/22/3.JPG]


Input: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]
Output: 13
Explanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.
There are 6 inverse pyramidal plots, 2 of which are shown in the last figure.
The total number of plots is 7 + 6 = 13.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 1000
 * 1 <= m * n <= 105
 * grid[i][j] is either 0 or 1.",Solutions (120),277,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-fertile-pyramids-in-a-land/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPyramids(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countPyramids(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPyramids(self, grid: List[List[int]]) -> int:
        def isValid(i, j, h, r, c):
            return 0 <= i < len(grid) and 0 <= j < len(grid[0]) and r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r)
        
        def countPlots(r, c, h, isPyramidal):
            count = 0
            for i in range(r, r + h):
                isPlotValid = True
                for j in range(c - (i - r), c + (i - r) + 1):
                    if not isValid(i, j, h, r, c) or grid[i][j] == 0:
                        isPlotValid = False
                        break
                if isPlotValid:
                    count += 1
            return count
        
        total_plots = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                for h in range(2, len(grid) + 1):
                    if i + h <= len(grid) and j - h + 1 >= 0 and j + h - 1 < len(grid[0]):
                        total_plots += countPlots(i, j, h, True)
                    
                    if i - h + 1 >= 0 and j - h + 1 >= 0 and j + h - 1 < len(grid[0]):
                        total_plots += countPlots(i, j, h, False)
        
        return total_plots"
False,0,0,2195,,Time Needed to Buy Tickets,time-needed-to-buy-tickets,False,39465,63302,2073,False,1,"Can you solve this real interview question? Time Needed to Buy Tickets - There are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.

You are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].

Each person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.

Return the time taken for the person at position k (0-indexed) to finish buying tickets.

 

Example 1:


Input: tickets = [2,3,2], k = 2
Output: 6
Explanation: 
- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].
- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.


Example 2:


Input: tickets = [5,1,1,1], k = 0
Output: 8
Explanation:
- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].
- In the next 4 passes, only the person in position 0 is buying tickets.
The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.


 

Constraints:

 * n == tickets.length
 * 1 <= n <= 100
 * 1 <= tickets[i] <= 100
 * 0 <= k < n",Solutions (689),668,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/time-needed-to-buy-tickets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tickets: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().timeRequiredToBuy(tickets, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def timeRequiredToBuy(self, tickets: List[int], k: int) -> int:
        time = 0
        while tickets[k] > 0:
            for i in range(len(tickets)):
                if tickets[i] > 0:
                    tickets[i] -= 1
                    time += 1
                    if i == k:
                        break
        return time"
False,0,0,2197,,Decode the Slanted Ciphertext,decode-the-slanted-ciphertext,False,10844,21571,2075,False,2,"Can you solve this real interview question? Decode the Slanted Ciphertext - A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.

originalText is placed first in a top-left to bottom-right manner.

[https://assets.leetcode.com/uploads/2021/11/07/exa11.png]

The blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.

encodedText is then formed by appending all characters of the matrix in a row-wise fashion.

[https://assets.leetcode.com/uploads/2021/11/07/exa12.png]

The characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.

For example, if originalText = ""cipher"" and rows = 3, then we encode it in the following manner:

[https://assets.leetcode.com/uploads/2021/10/25/desc2.png]

The blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = ""ch ie pr"".

Given the encoded string encodedText and number of rows rows, return the original string originalText.

Note: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.

 

Example 1:


Input: encodedText = ""ch   ie   pr"", rows = 3
Output: ""cipher""
Explanation: This is the same example described in the problem description.


Example 2:

[https://assets.leetcode.com/uploads/2021/10/26/exam1.png]


Input: encodedText = ""iveo    eed   l te   olc"", rows = 4
Output: ""i love leetcode""
Explanation: The figure above denotes the matrix that was used to encode originalText. 
The blue arrows show how we can find originalText from encodedText.


Example 3:

[https://assets.leetcode.com/uploads/2021/10/26/eg2.png]


Input: encodedText = ""coding"", rows = 1
Output: ""coding""
Explanation: Since there is only 1 row, both originalText and encodedText are the same.


 

Constraints:

 * 0 <= encodedText.length <= 106
 * encodedText consists of lowercase English letters and ' ' only.
 * encodedText is a valid encoding of some originalText that does not have trailing spaces.
 * 1 <= rows <= 1000
 * The testcases are generated such that there is only one possible originalText.",Solutions (182),214,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-the-slanted-ciphertext/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decodeCiphertext(self, encodedText: str, rows: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    encodedText: str = deserialize(""str"", read_line())
    rows: int = deserialize(""int"", read_line())
    ans = Solution().decodeCiphertext(encodedText, rows)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def decodeCiphertext(self, encodedText: str, rows: int) -> str:
        numRows = rows
        if numRows == 1:
            return encodedText.replace("" "", """")
        
        L = len(encodedText)
        cycleLen = 2 * numRows - 2
        originalText = """"
        
        for i in range(numRows):
            j = i
            while j < L:
                originalText += encodedText[j]
                if i != 0 and i != numRows - 1:
                    index = j + cycleLen - 2 * i
                    if index < L:
                        originalText += encodedText[index]
                j += cycleLen
        
        return originalText"
False,0,0,2198,,Process Restricted Friend Requests,process-restricted-friend-requests,False,13424,25230,2076,False,3,"Can you solve this real interview question? Process Restricted Friend Requests - You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.

You are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.

Initially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.

A friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.

Return a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.

Note: If uj and vj are already direct friends, the request is still successful.

 

Example 1:


Input: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]
Output: [true,false]
Explanation:
Request 0: Person 0 and person 2 can be friends, so they become direct friends. 
Request 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).


Example 2:


Input: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]
Output: [true,false]
Explanation:
Request 0: Person 1 and person 2 can be friends, so they become direct friends.
Request 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).


Example 3:


Input: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]
Output: [true,false,true,false]
Explanation:
Request 0: Person 0 and person 4 can be friends, so they become direct friends.
Request 1: Person 1 and person 2 cannot be friends since they are directly restricted.
Request 2: Person 3 and person 1 can be friends, so they become direct friends.
Request 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).


 

Constraints:

 * 2 <= n <= 1000
 * 0 <= restrictions.length <= 1000
 * restrictions[i].length == 2
 * 0 <= xi, yi <= n - 1
 * xi != yi
 * 1 <= requests.length <= 1000
 * requests[j].length == 2
 * 0 <= uj, vj <= n - 1
 * uj != vj",Solutions (172),508,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/process-restricted-friend-requests/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    restrictions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    requests: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().friendRequests(n, restrictions, requests)
    print(""\noutput:"", serialize(ans, ""boolean[]""))
","class Solution:
    def friendRequests(self, n: int, restrictions: List[List[int]], requests: List[List[int]]) -> List[bool]:
        # Your code here
        pass"
False,0,0,2199,,Two Furthest Houses With Different Colors,two-furthest-houses-with-different-colors,False,39963,59608,2078,False,1,"Can you solve this real interview question? Two Furthest Houses With Different Colors - There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house.

Return the maximum distance between two houses with different colors.

The distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/10/31/eg1.png]


Input: colors = [1,1,1,6,1,1,1]
Output: 3
Explanation: In the above image, color 1 is blue, and color 6 is red.
The furthest two houses with different colors are house 0 and house 3.
House 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.
Note that houses 3 and 6 can also produce the optimal answer.


Example 2:

[https://assets.leetcode.com/uploads/2021/10/31/eg2.png]


Input: colors = [1,8,3,8,3]
Output: 4
Explanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.
The furthest two houses with different colors are house 0 and house 4.
House 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.


Example 3:


Input: colors = [0,1]
Output: 1
Explanation: The furthest two houses with different colors are house 0 and house 1.
House 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.


 

Constraints:

 * n == colors.length
 * 2 <= n <= 100
 * 0 <= colors[i] <= 100
 * Test data are generated such that at least two houses have different colors.",Solutions (536),729,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/two-furthest-houses-with-different-colors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxDistance(self, colors: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    colors: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxDistance(colors)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxDistance(self, colors: List[int]) -> int:
        max_dist = 0
        color_index_map = {}

        for i, color in enumerate(colors):
            if color in color_index_map:
                max_dist = max(max_dist, i - color_index_map[color])
            else:
                color_index_map[color] = i

        return max_dist"
False,0,0,2200,,Stamping the Grid,stamping-the-grid,False,5580,17620,2132,False,3,"Can you solve this real interview question? Stamping the Grid - You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).

You are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:

 1. Cover all the empty cells.
 2. Do not cover any of the occupied cells.
 3. We can put as many stamps as we want.
 4. Stamps can overlap with each other.
 5. Stamps are not allowed to be rotated.
 6. Stamps must stay completely inside the grid.

Return true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/03/ex1.png]


Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3
Output: true
Explanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.


Example 2:

[https://assets.leetcode.com/uploads/2021/11/03/ex2.png]


Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 
Output: false 
Explanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.


 

Constraints:

 * m == grid.length
 * n == grid[r].length
 * 1 <= m, n <= 105
 * 1 <= m * n <= 2 * 105
 * grid[r][c] is either 0 or 1.
 * 1 <= stampHeight, stampWidth <= 105",Solutions (67),328,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/stamping-the-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def possibleToStamp(self, grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    stampHeight: int = deserialize(""int"", read_line())
    stampWidth: int = deserialize(""int"", read_line())
    ans = Solution().possibleToStamp(grid, stampHeight, stampWidth)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def possibleToStamp(self, grid: List[List[int]], stampHeight: int, stampWidth: int) -> bool:
        pass"
False,0,0,2201,,Valid Arrangement of Pairs,valid-arrangement-of-pairs,False,6994,16969,2097,False,3,"Can you solve this real interview question? Valid Arrangement of Pairs - You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.

Return any valid arrangement of pairs.

Note: The inputs will be generated such that there exists a valid arrangement of pairs.

 

Example 1:


Input: pairs = [[5,1],[4,5],[11,9],[9,4]]
Output: [[11,9],[9,4],[4,5],[5,1]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 9 == 9 = start1 
end1 = 4 == 4 = start2
end2 = 5 == 5 = start3


Example 2:


Input: pairs = [[1,3],[3,2],[2,1]]
Output: [[1,3],[3,2],[2,1]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 3 == 3 = start1
end1 = 2 == 2 = start2
The arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.


Example 3:


Input: pairs = [[1,2],[1,3],[2,1]]
Output: [[1,2],[2,1],[1,3]]
Explanation:
This is a valid arrangement since endi-1 always equals starti.
end0 = 2 == 2 = start1
end1 = 1 == 1 = start2


 

Constraints:

 * 1 <= pairs.length <= 105
 * pairs[i].length == 2
 * 0 <= starti, endi <= 109
 * starti != endi
 * No two pairs are exactly the same.
 * There exists a valid arrangement of pairs.",Solutions (74),393,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/valid-arrangement-of-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    pairs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().validArrangement(pairs)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def validArrangement(self, pairs: List[List[int]]) -> List[List[int]]:
        pairs.sort(key=lambda x: x[1])
        return pairs"
False,0,0,2202,,Sum of k-Mirror Numbers,sum-of-k-mirror-numbers,False,6300,14997,2081,False,3,"Can you solve this real interview question? Sum of k-Mirror Numbers - A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.

 * For example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
 * On the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.

Given the base k and the number n, return the sum of the n smallest k-mirror numbers.

 

Example 1:


Input: k = 2, n = 5
Output: 25
Explanation:
The 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:
  base-10    base-2
    1          1
    3          11
    5          101
    7          111
    9          1001
Their sum = 1 + 3 + 5 + 7 + 9 = 25. 


Example 2:


Input: k = 3, n = 7
Output: 499
Explanation:
The 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:
  base-10    base-3
    1          1
    2          2
    4          11
    8          22
    121        11111
    151        12121
    212        21212
Their sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.


Example 3:


Input: k = 7, n = 17
Output: 20379000
Explanation: The 17 smallest 7-mirror numbers are:
1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596


 

Constraints:

 * 2 <= k <= 9
 * 1 <= n <= 30",Solutions (67),107,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-k-mirror-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kMirror(self, k: int, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    k: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    ans = Solution().kMirror(k, n)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def kMirror(self, k: int, n: int) -> int:
        def is_k_mirror(num, k):
            base_10 = str(num)
            base_k = """"
            while num > 0:
                base_k += str(num % k)
                num //= k
            return base_10 == base_10[::-1] and base_k == base_k[::-1]

        result = 0
        num = 1
        while n > 0:
            if is_k_mirror(num, k):
                result += num
                n -= 1
            num += 1
        return result"
False,0,0,2204,,Find Subsequence of Length K With the Largest Sum,find-subsequence-of-length-k-with-the-largest-sum,False,32225,75141,2099,False,1,"Can you solve this real interview question? Find Subsequence of Length K With the Largest Sum - You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [2,1,3,3], k = 2
Output: [3,3]
Explanation:
The subsequence has the largest sum of 3 + 3 = 6.

Example 2:


Input: nums = [-1,-2,3,4], k = 3
Output: [-1,3,4]
Explanation: 
The subsequence has the largest sum of -1 + 3 + 4 = 6.


Example 3:


Input: nums = [3,4,3,3], k = 2
Output: [3,4]
Explanation:
The subsequence has the largest sum of 3 + 4 = 7. 
Another possible subsequence is [4, 3].


 

Constraints:

 * 1 <= nums.length <= 1000
 * -105 <= nums[i] <= 105
 * 1 <= k <= nums.length",Solutions (586),926,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxSubsequence(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        max_sum = float('-inf')
        start = 0
        for i in range(n - k + 1):
            current_sum = sum(nums[i:i+k])
            if current_sum > max_sum:
                max_sum = current_sum
                start = i
        return nums[start:start+k]"
False,0,0,2205,,Find Good Days to Rob the Bank,find-good-days-to-rob-the-bank,False,20062,40768,2100,False,2,"Can you solve this real interview question? Find Good Days to Rob the Bank - You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time.

The ith day is a good day to rob the bank if:

 * There are at least time days before and after the ith day,
 * The number of guards at the bank for the time days before i are non-increasing, and
 * The number of guards at the bank for the time days after i are non-decreasing.

More formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].

Return a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.

 

Example 1:


Input: security = [5,3,3,3,5,6,2], time = 2
Output: [2,3]
Explanation:
On day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].
On day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].
No other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.


Example 2:


Input: security = [1,1,1,1,1], time = 0
Output: [0,1,2,3,4]
Explanation:
Since time equals 0, every day is a good day to rob the bank, so return every day.


Example 3:


Input: security = [1,2,3,4,5,6], time = 2
Output: []
Explanation:
No day has 2 days before it that have a non-increasing number of guards.
Thus, no day is a good day to rob the bank, so return an empty list.


 

Constraints:

 * 1 <= security.length <= 105
 * 0 <= security[i], time <= 105",Solutions (308),699,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-good-days-to-rob-the-bank/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    security: List[int] = deserialize(""List[int]"", read_line())
    time: int = deserialize(""int"", read_line())
    ans = Solution().goodDaysToRobBank(security, time)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def goodDaysToRobBank(self, security: List[int], time: int) -> List[int]:
        result = []
        for i in range(time, len(security) - time):
            if all(security[i - time] >= x >= security[i] for x in security[i - time:i]) and \
               all(security[i] <= x <= security[i + time] for x in security[i+1:i+time+1]):
                result.append(i)
        return result"
False,0,0,2206,,Detonate the Maximum Bombs,detonate-the-maximum-bombs,False,28818,68626,2101,False,2,"Can you solve this real interview question? Detonate the Maximum Bombs - You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.

The bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.

You may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.

Given the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/06/desmos-eg-3.png]


Input: bombs = [[2,1,3],[6,1,4]]
Output: 2
Explanation:
The above figure shows the positions and ranges of the 2 bombs.
If we detonate the left bomb, the right bomb will not be affected.
But if we detonate the right bomb, both bombs will be detonated.
So the maximum bombs that can be detonated is max(1, 2) = 2.


Example 2:

[https://assets.leetcode.com/uploads/2021/11/06/desmos-eg-2.png]


Input: bombs = [[1,1,5],[10,10,5]]
Output: 1
Explanation:
Detonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.


Example 3:

[https://assets.leetcode.com/uploads/2021/11/07/desmos-eg1.png]


Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]
Output: 5
Explanation:
The best bomb to detonate is bomb 0 because:
- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.
- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.
- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.
Thus all 5 bombs are detonated.


 

Constraints:

 * 1 <= bombs.length <= 100
 * bombs[i].length == 3
 * 1 <= xi, yi, ri <= 105",Solutions (387),1K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/detonate-the-maximum-bombs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumDetonation(self, bombs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    bombs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumDetonation(bombs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumDetonation(self, bombs: List[List[int]]) -> int:
        pass"
False,0,0,2210,,Find Target Indices After Sorting Array,find-target-indices-after-sorting-array,False,110515,144729,2089,False,1,"Can you solve this real interview question? Find Target Indices After Sorting Array - You are given a 0-indexed integer array nums and a target element target.

A target index is an index i such that nums[i] == target.

Return a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.

 

Example 1:


Input: nums = [1,2,5,2,3], target = 2
Output: [1,2]
Explanation: After sorting, nums is [1,2,2,3,5].
The indices where nums[i] == 2 are 1 and 2.


Example 2:


Input: nums = [1,2,5,2,3], target = 3
Output: [3]
Explanation: After sorting, nums is [1,2,2,3,5].
The index where nums[i] == 3 is 3.


Example 3:


Input: nums = [1,2,5,2,3], target = 5
Output: [4]
Explanation: After sorting, nums is [1,2,2,3,5].
The index where nums[i] == 5 is 4.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i], target <= 100",Solutions (1.6K),1.3K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-target-indices-after-sorting-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def targetIndices(self, nums: List[int], target: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().targetIndices(nums, target)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def targetIndices(self, nums: List[int], target: int) -> List[int]:
        sorted_nums = sorted(nums)
        indices = [i for i, num in enumerate(sorted_nums) if num == target]
        
        return indices"
False,0,0,2211,,K Radius Subarray Averages,k-radius-subarray-averages,False,22934,53744,2090,False,2,"Can you solve this real interview question? K Radius Subarray Averages - You are given a 0-indexed array nums of n integers, and an integer k.

The k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.

Build and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.

The average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.

 * For example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/07/eg1.png]


Input: nums = [7,4,3,9,1,8,5,2,6], k = 3
Output: [-1,-1,-1,5,4,4,-1,-1,-1]
Explanation:
- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.
- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.
  Using integer division, avg[3] = 37 / 7 = 5.
- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.
- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.
- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index.


Example 2:


Input: nums = [100000], k = 0
Output: [100000]
Explanation:
- The sum of the subarray centered at index 0 with radius 0 is: 100000.
  avg[0] = 100000 / 1 = 100000.


Example 3:


Input: nums = [8], k = 100000
Output: [-1]
Explanation: 
- avg[0] is -1 because there are less than k elements before and after index 0.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 0 <= nums[i], k <= 105",Solutions (361),483,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/k-radius-subarray-averages/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getAverages(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().getAverages(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def getAverages(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        avgs = []
        
        for i in range(n):
            left = max(0, i - k)
            right = min(n - 1, i + k)
            
            if right - left + 1 < 2 * k + 1:
                avgs.append(-1)
            else:
                total = sum(nums[left:right + 1])
                avgs.append(total // (2 * k + 1))
        
        return avgs"
False,0,0,2212,,Removing Minimum and Maximum From Array,removing-minimum-and-maximum-from-array,False,28821,51592,2091,False,2,"Can you solve this real interview question? Removing Minimum and Maximum From Array - You are given a 0-indexed array of distinct integers nums.

There is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.

A deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.

Return the minimum number of deletions it would take to remove both the minimum and maximum element from the array.

 

Example 1:


Input: nums = [2,10,7,5,4,1,8,6]
Output: 5
Explanation: 
The minimum element in the array is nums[5], which is 1.
The maximum element in the array is nums[1], which is 10.
We can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.
This results in 2 + 3 = 5 deletions, which is the minimum number possible.


Example 2:


Input: nums = [0,-4,19,1,8,-2,-3,5]
Output: 3
Explanation: 
The minimum element in the array is nums[1], which is -4.
The maximum element in the array is nums[2], which is 19.
We can remove both the minimum and maximum by removing 3 elements from the front.
This results in only 3 deletions, which is the minimum number possible.


Example 3:


Input: nums = [101]
Output: 1
Explanation:  
There is only one element in the array, which makes it both the minimum and maximum element.
We can remove it with 1 deletion.


 

Constraints:

 * 1 <= nums.length <= 105
 * -105 <= nums[i] <= 105
 * The integers in nums are distinct.",Solutions (586),711,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/removing-minimum-and-maximum-from-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDeletions(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumDeletions(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumDeletions(self, nums: List[int]) -> int:
        nums.sort()
        min_index = nums.index(min(nums))
        max_index = nums.index(max(nums))
        
        return min(min_index, len(nums) - max_index - 1) + max_index"
False,0,0,2213,,Find All People With Secret,find-all-people-with-secret,False,20466,59844,2092,False,3,"Can you solve this real interview question? Find All People With Secret - You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.

Person 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.

The secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.

Return a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.

 

Example 1:


Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1
Output: [0,1,2,3,5]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 5, person 1 shares the secret with person 2.
At time 8, person 2 shares the secret with person 3.
At time 10, person 1 shares the secret with person 5.​​​​
Thus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.


Example 2:


Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3
Output: [0,1,3]
Explanation:
At time 0, person 0 shares the secret with person 3.
At time 2, neither person 1 nor person 2 know the secret.
At time 3, person 3 shares the secret with person 0 and person 1.
Thus, people 0, 1, and 3 know the secret after all the meetings.


Example 3:


Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1
Output: [0,1,2,3,4]
Explanation:
At time 0, person 0 shares the secret with person 1.
At time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.
Note that person 2 can share the secret at the same time as receiving it.
At time 2, person 3 shares the secret with person 4.
Thus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.


 

Constraints:

 * 2 <= n <= 105
 * 1 <= meetings.length <= 105
 * meetings[i].length == 3
 * 0 <= xi, yi <= n - 1
 * xi != yi
 * 1 <= timei <= 105
 * 1 <= firstPerson <= n - 1",Solutions (276),688,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-people-with-secret/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    meetings: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    firstPerson: int = deserialize(""int"", read_line())
    ans = Solution().findAllPeople(n, meetings, firstPerson)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findAllPeople(self, n: int, meetings: List[List[int]], firstPerson: int) -> List[int]:
        graph = {i: [] for i in range(n)}
        for meet in meetings:
            x, y, time = meet
            graph[x].append((y, time))
            graph[y].append((x, time))

        secrets = set([firstPerson])
        queue = deque([(firstPerson, 0)])

        while queue:
            person, time = queue.popleft()
            if time in secrets:
                for next_person, next_time in graph[person]:
                    if next_time not in secrets:
                        secrets.add(next_time)
                        queue.append((next_person, next_time))

        return sorted(secrets)"
False,0,0,2215,,Finding 3-Digit Even Numbers,finding-3-digit-even-numbers,False,22479,38896,2094,False,1,"Can you solve this real interview question? Finding 3-Digit Even Numbers - You are given an integer array digits, where each element is a digit. The array may contain duplicates.

You need to find all the unique integers that follow the given requirements:

 * The integer consists of the concatenation of three elements from digits in any arbitrary order.
 * The integer does not have leading zeros.
 * The integer is even.

For example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.

Return a sorted array of the unique integers.

 

Example 1:


Input: digits = [2,1,3,0]
Output: [102,120,130,132,210,230,302,310,312,320]
Explanation: All the possible integers that follow the requirements are in the output array. 
Notice that there are no odd integers or integers with leading zeros.


Example 2:


Input: digits = [2,2,8,8,2]
Output: [222,228,282,288,822,828,882]
Explanation: The same digit can be used as many times as it appears in digits. 
In this example, the digit 8 is used twice each time in 288, 828, and 882. 


Example 3:


Input: digits = [3,7,5]
Output: []
Explanation: No even integers can be formed using the given digits.


 

Constraints:

 * 3 <= digits.length <= 100
 * 0 <= digits[i] <= 9",Solutions (330),407,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/finding-3-digit-even-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findEvenNumbers(self, digits: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    digits: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findEvenNumbers(digits)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findEvenNumbers(self, digits: List[int]) -> List[int]:
        from itertools import permutations
        ans = set()
        for p in permutations(digits, 3):
            num = int(''.join(map(str, p)))
            if num % 2 == 0:
                ans.add(num)
        return sorted(ans)"
False,0,0,2219,,Maximum Number of Words Found in Sentences,maximum-number-of-words-found-in-sentences,False,170876,195938,2114,False,1,"Can you solve this real interview question? Maximum Number of Words Found in Sentences - A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

You are given an array of strings sentences, where each sentences[i] represents a single sentence.

Return the maximum number of words that appear in a single sentence.

 

Example 1:


Input: sentences = [""alice and bob love leetcode"", ""i think so too"", ""this is great thanks very much""]
Output: 6
Explanation: 
- The first sentence, ""alice and bob love leetcode"", has 5 words in total.
- The second sentence, ""i think so too"", has 4 words in total.
- The third sentence, ""this is great thanks very much"", has 6 words in total.
Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.


Example 2:


Input: sentences = [""please wait"", ""continue to fight"", ""continue to win""]
Output: 3
Explanation: It is possible that multiple sentences contain the same number of words. 
In this example, the second and third sentences (underlined) have the same number of words.


 

Constraints:

 * 1 <= sentences.length <= 100
 * 1 <= sentences[i].length <= 100
 * sentences[i] consists only of lowercase English letters and ' ' only.
 * sentences[i] does not have leading or trailing spaces.
 * All the words in sentences[i] are separated by a single space.",Solutions (2.4K),1.3K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostWordsFound(self, sentences: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    sentences: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().mostWordsFound(sentences)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mostWordsFound(self, sentences: List[str]) -> int:
        return max(len(sentence.split()) for sentence in sentences)"
False,0,0,2220,,Find All Possible Recipes from Given Supplies,find-all-possible-recipes-from-given-supplies,False,64206,132565,2115,False,2,"Can you solve this real interview question? Find All Possible Recipes from Given Supplies - You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.

You are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.

Return a list of all the recipes that you can create. You may return the answer in any order.

Note that two recipes may contain each other in their ingredients.

 

Example 1:


Input: recipes = [""bread""], ingredients = [[""yeast"",""flour""]], supplies = [""yeast"",""flour"",""corn""]
Output: [""bread""]
Explanation:
We can create ""bread"" since we have the ingredients ""yeast"" and ""flour"".


Example 2:


Input: recipes = [""bread"",""sandwich""], ingredients = [[""yeast"",""flour""],[""bread"",""meat""]], supplies = [""yeast"",""flour"",""meat""]
Output: [""bread"",""sandwich""]
Explanation:
We can create ""bread"" since we have the ingredients ""yeast"" and ""flour"".
We can create ""sandwich"" since we have the ingredient ""meat"" and can create the ingredient ""bread"".


Example 3:


Input: recipes = [""bread"",""sandwich"",""burger""], ingredients = [[""yeast"",""flour""],[""bread"",""meat""],[""sandwich"",""meat"",""bread""]], supplies = [""yeast"",""flour"",""meat""]
Output: [""bread"",""sandwich"",""burger""]
Explanation:
We can create ""bread"" since we have the ingredients ""yeast"" and ""flour"".
We can create ""sandwich"" since we have the ingredient ""meat"" and can create the ingredient ""bread"".
We can create ""burger"" since we have the ingredient ""meat"" and can create the ingredients ""bread"" and ""sandwich"".


 

Constraints:

 * n == recipes.length == ingredients.length
 * 1 <= n <= 100
 * 1 <= ingredients[i].length, supplies.length <= 100
 * 1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10
 * recipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.
 * All the values of recipes and supplies combined are unique.
 * Each ingredients[i] does not contain any duplicate values.",Solutions (668),1.4K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    recipes: List[str] = deserialize(""List[str]"", read_line())
    ingredients: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    supplies: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().findAllRecipes(recipes, ingredients, supplies)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        def can_create(recipe):
            if recipe in supplies:
                return True
            for ingredient_list in ingredients:
                if recipe in ingredient_list:
                    if all(can_create(ingredient) for ingredient in ingredient_list):
                        return True
            return False
        
        result = []
        for recipe in recipes:
            if can_create(recipe):
                result.append(recipe)
        
        return result"
False,0,0,2221,,Check if a Parentheses String Can Be Valid,check-if-a-parentheses-string-can-be-valid,False,15083,48574,2116,False,2,"Can you solve this real interview question? Check if a Parentheses String Can Be Valid - A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

 * It is ().
 * It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
 * It can be written as (A), where A is a valid parentheses string.

You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,

 * If locked[i] is '1', you cannot change s[i].
 * But if locked[i] is '0', you can change s[i] to either '(' or ')'.

Return true if you can make s a valid parentheses string. Otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/06/eg1.png]


Input: s = ""))()))"", locked = ""010100""
Output: true
Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].
We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.

Example 2:


Input: s = ""()()"", locked = ""0000""
Output: true
Explanation: We do not need to make any changes because s is already valid.


Example 3:


Input: s = "")"", locked = ""0""
Output: false
Explanation: locked permits us to change s[0]. 
Changing s[0] to either '(' or ')' will not make s valid.


 

Constraints:

 * n == s.length == locked.length
 * 1 <= n <= 105
 * s[i] is either '(' or ')'.
 * locked[i] is either '0' or '1'.",Solutions (175),863,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    locked: str = deserialize(""str"", read_line())
    ans = Solution().canBeValid(s, locked)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canBeValid(self, s: str, locked: str) -> bool:
        def check_valid(s):
            stack = []
            for char in s:
                if char == '(':
                    stack.append(char)
                else:
                    if not stack:
                        return False
                    stack.pop()
            return len(stack) == 0
        
        count = 0
        for i in range(len(s)):
            if s[i] == ')' and locked[i] == '0':
                count += 1
        return check_valid(s[:count])"
False,0,0,2222,,Abbreviating the Product of a Range,abbreviating-the-product-of-a-range,False,2627,9699,2117,False,3,"Can you solve this real interview question? Abbreviating the Product of a Range - You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].

Since the product may be very large, you will abbreviate it following these steps:

 1. Count all trailing zeros in the product and remove them. Let us denote this count as C.
    * For example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.
 2. Denote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged.
    * For example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.
 3. Finally, represent the product as a string ""<pre>...<suf>eC"".
    * For example, 12345678987600000 will be represented as ""12345...89876e5"".

Return a string denoting the abbreviated product of all integers in the inclusive range [left, right].

 

Example 1:


Input: left = 1, right = 4
Output: ""24e0""
Explanation: The product is 1 × 2 × 3 × 4 = 24.
There are no trailing zeros, so 24 remains the same. The abbreviation will end with ""e0"".
Since the number of digits is 2, which is less than 10, we do not have to abbreviate it further.
Thus, the final representation is ""24e0"".


Example 2:


Input: left = 2, right = 11
Output: ""399168e2""
Explanation: The product is 39916800.
There are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with ""e2"".
The number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.
Hence, the abbreviated product is ""399168e2"".


Example 3:


Input: left = 371, right = 375
Output: ""7219856259e3""
Explanation: The product is 7219856259000.


 

Constraints:

 * 1 <= left <= right <= 104",Solutions (47),76,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/abbreviating-the-product-of-a-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def abbreviateProduct(self, left: int, right: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().abbreviateProduct(left, right)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def abbreviateProduct(self, left: int, right: int) -> str:
        product = 1
        for num in range(left, right+1):
            product *= num
            
        num_zeros = 0
        while product % 10 == 0:
            num_zeros += 1
            product /= 10
            
        product_str = str(product)
        if len(product_str) > 10:
            abbreviation = product_str[:5] + ""..."" + product_str[-5:]
        else:
            abbreviation = product_str
            
        return f""{abbreviation}e{num_zeros}"""
False,0,0,2226,,Rings and Rods,rings-and-rods,False,51833,63782,2103,False,1,"Can you solve this real interview question? Rings and Rods - There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.

You are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:

 * The first character of the ith pair denotes the ith ring's color ('R', 'G', 'B').
 * The second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').

For example, ""R3G2B1"" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.

Return the number of rods that have all three colors of rings on them.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/23/ex1final.png]


Input: rings = ""B0B6G0R6R0R6G9""
Output: 1
Explanation: 
- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.
- The rod labeled 6 holds 3 rings, but it only has red and blue.
- The rod labeled 9 holds only a green ring.
Thus, the number of rods with all three colors is 1.


Example 2:

[https://assets.leetcode.com/uploads/2021/11/23/ex2final.png]


Input: rings = ""B0R0G0R9R0B0G0""
Output: 1
Explanation: 
- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.
- The rod labeled 9 holds only a red ring.
Thus, the number of rods with all three colors is 1.


Example 3:


Input: rings = ""G4""
Output: 0
Explanation: 
Only one ring is given. Thus, no rods have all three colors.


 

Constraints:

 * rings.length == 2 * n
 * 1 <= n <= 100
 * rings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).
 * rings[i] where i is odd is a digit from '0' to '9' (0-indexed).",Solutions (1.1K),732,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/rings-and-rods/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPoints(self, rings: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rings: str = deserialize(""str"", read_line())
    ans = Solution().countPoints(rings)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPoints(self, rings: str) -> int:
        rods = [[] for _ in range(10)]
        for i in range(0, len(rings), 2):
            color, rod = rings[i], int(rings[i+1])
            rods[rod].append(color)
        
        count = 0
        for rod in rods:
            if len(set(rod)) == 3:
                count += 1
        
        return count"
False,0,0,2227,sum-of-subarray-ranges,Sum of Subarray Ranges,sum-of-subarray-ranges,False,67098,111268,2104,False,2,"Can you solve this real interview question? Sum of Subarray Ranges - You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.

Return the sum of all subarray ranges of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,2,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0 
[2], range = 2 - 2 = 0
[3], range = 3 - 3 = 0
[1,2], range = 2 - 1 = 1
[2,3], range = 3 - 2 = 1
[1,2,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.

Example 2:


Input: nums = [1,3,3]
Output: 4
Explanation: The 6 subarrays of nums are the following:
[1], range = largest - smallest = 1 - 1 = 0
[3], range = 3 - 3 = 0
[3], range = 3 - 3 = 0
[1,3], range = 3 - 1 = 2
[3,3], range = 3 - 3 = 0
[1,3,3], range = 3 - 1 = 2
So the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.


Example 3:


Input: nums = [4,-2,-3,4,1]
Output: 59
Explanation: The sum of all subarray ranges of nums is 59.


 

Constraints:

 * 1 <= nums.length <= 1000
 * -109 <= nums[i] <= 109

 

Follow-up: Could you find a solution with O(n) time complexity?",Solutions (416),1.7K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-subarray-ranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subArrayRanges(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().subArrayRanges(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def subArrayRanges(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                result += max(nums[i:j+1]) - min(nums[i:j+1])
        return result"
False,0,0,2228,,Watering Plants II,watering-plants-ii,False,15255,30856,2105,False,2,"Can you solve this real interview question? Watering Plants II - Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i.

Each plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:

 * Alice waters the plants in order from left to right, starting from the 0th plant. Bob waters the plants in order from right to left, starting from the (n - 1)th plant. They begin watering the plants simultaneously.
 * It takes the same amount of time to water each plant regardless of how much water it needs.
 * Alice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant.
 * In case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.

Given a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.

 

Example 1:


Input: plants = [2,2,3,3], capacityA = 5, capacityB = 5
Output: 1
Explanation:
- Initially, Alice and Bob have 5 units of water each in their watering cans.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 3 units and 2 units of water respectively.
- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.
So, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.


Example 2:


Input: plants = [2,2,3,3], capacityA = 3, capacityB = 4
Output: 2
Explanation:
- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.
- Alice waters plant 0, Bob waters plant 3.
- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.
- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.
So, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.


Example 3:


Input: plants = [5], capacityA = 10, capacityB = 8
Output: 0
Explanation:
- There is only one plant.
- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.
So, the total number of times they have to refill is 0.


 

Constraints:

 * n == plants.length
 * 1 <= n <= 105
 * 1 <= plants[i] <= 106
 * max(plants[i]) <= capacityA, capacityB <= 109",Solutions (274),217,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/watering-plants-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    plants: List[int] = deserialize(""List[int]"", read_line())
    capacityA: int = deserialize(""int"", read_line())
    capacityB: int = deserialize(""int"", read_line())
    ans = Solution().minimumRefill(plants, capacityA, capacityB)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumRefill(self, plants: List[int], capacityA: int, capacityB: int) -> int:
        refill_count = 0
        a_water = capacityA
        b_water = capacityB
        left, right = 0, len(plants) - 1
        
        while left <= right:
            if a_water < plants[left]:
                a_water = capacityA
                refill_count += 1
            if b_water < plants[right]:
                b_water = capacityB
                refill_count += 1
            
            if a_water >= b_water:
                a_water -= plants[left]
                left += 1
            else:
                b_water -= plants[right]
                right -= 1
        
        return refill_count"
False,0,0,2229,,Maximum Fruits Harvested After at Most K Steps,maximum-fruits-harvested-after-at-most-k-steps,False,8489,24262,2106,False,3,"Can you solve this real interview question? Maximum Fruits Harvested After at Most K Steps - Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.

You are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.

Return the maximum total number of fruits you can harvest.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/11/21/1.png]


Input: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4
Output: 9
Explanation: 
The optimal way is to:
- Move right to position 6 and harvest 3 fruits
- Move right to position 8 and harvest 6 fruits
You moved 3 steps and harvested 3 + 6 = 9 fruits in total.


Example 2:

[https://assets.leetcode.com/uploads/2021/11/21/2.png]


Input: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4
Output: 14
Explanation: 
You can move at most k = 4 steps, so you cannot reach position 0 nor 10.
The optimal way is to:
- Harvest the 7 fruits at the starting position 5
- Move left to position 4 and harvest 1 fruit
- Move right to position 6 and harvest 2 fruits
- Move right to position 7 and harvest 4 fruits
You moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.


Example 3:

[https://assets.leetcode.com/uploads/2021/11/21/3.png]


Input: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2
Output: 0
Explanation:
You can move at most k = 2 steps and cannot reach any position with fruits.


 

Constraints:

 * 1 <= fruits.length <= 105
 * fruits[i].length == 2
 * 0 <= startPos, positioni <= 2 * 105
 * positioni-1 < positioni for any i > 0 (0-indexed)
 * 1 <= amounti <= 104
 * 0 <= k <= 2 * 105",Solutions (125),437,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-fruits-harvested-after-at-most-k-steps/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    fruits: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    startPos: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxTotalFruits(fruits, startPos, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxTotalFruits(self, fruits: List[List[int]], startPos: int, k: int) -> int:
        n = len(fruits)
        dp = [[-1] * (n+1) for _ in range(k+1)]
        dp[0][0] = 0
        
        for i in range(1, k+1):
            for j in range(1, n+1):
                dp[i][j] = dp[i][j-1]
                dist = abs(fruits[j-1][0] - startPos)
                if i >= dist:
                    dp[i][j] = max(dp[i][j], dp[i-dist][j-1] + fruits[j-1][1])
        
        return max(dp[k])"
False,0,0,2231,,Find First Palindromic String in the Array,find-first-palindromic-string-in-the-array,False,81684,103783,2108,False,1,"Can you solve this real interview question? Find First Palindromic String in the Array - Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string """".

A string is palindromic if it reads the same forward and backward.

 

Example 1:


Input: words = [""abc"",""car"",""ada"",""racecar"",""cool""]
Output: ""ada""
Explanation: The first string that is palindromic is ""ada"".
Note that ""racecar"" is also palindromic, but it is not the first.


Example 2:


Input: words = [""notapalindrome"",""racecar""]
Output: ""racecar""
Explanation: The first and only string that is palindromic is ""racecar"".


Example 3:


Input: words = [""def"",""ghi""]
Output: """"
Explanation: There are no palindromic strings, so the empty string is returned.


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 100
 * words[i] consists only of lowercase English letters.",Solutions (1.3K),776,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/find-first-palindromic-string-in-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def firstPalindrome(self, words: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().firstPalindrome(words)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def firstPalindrome(self, words: List[str]) -> str:
        for word in words:
            if word == word[::-1]:
                return word
        return """""
False,0,0,2232,,Adding Spaces to a String,adding-spaces-to-a-string,False,30469,53937,2109,False,2,"Can you solve this real interview question? Adding Spaces to a String - You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.

 * For example, given s = ""EnjoyYourCoffee"" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain ""Enjoy Your Coffee"".

Return the modified string after the spaces have been added.

 

Example 1:


Input: s = ""LeetcodeHelpsMeLearn"", spaces = [8,13,15]
Output: ""Leetcode Helps Me Learn""
Explanation: 
The indices 8, 13, and 15 correspond to the underlined characters in ""LeetcodeHelpsMeLearn"".
We then place spaces before those characters.


Example 2:


Input: s = ""icodeinpython"", spaces = [1,5,7,9]
Output: ""i code in py thon""
Explanation:
The indices 1, 5, 7, and 9 correspond to the underlined characters in ""icodeinpython"".
We then place spaces before those characters.


Example 3:


Input: s = ""spacing"", spaces = [0,1,2,3,4,5,6]
Output: "" s p a c i n g""
Explanation:
We are also able to place spaces before the first character of the string.


 

Constraints:

 * 1 <= s.length <= 3 * 105
 * s consists only of lowercase and uppercase English letters.
 * 1 <= spaces.length <= 3 * 105
 * 0 <= spaces[i] <= s.length - 1
 * All the values of spaces are strictly increasing.",Solutions (511),433,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/adding-spaces-to-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def addSpaces(self, s: str, spaces: List[int]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    spaces: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().addSpaces(s, spaces)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def addSpaces(self, s: str, spaces: List[int]) -> str:
        result = """"
        index = 0
        for i in range(len(s)):
            if index < len(spaces) and i == spaces[index]:
                result += "" ""
                index += 1
            result += s[i]
        return result"
False,0,0,2233,,Number of Smooth Descent Periods of a Stock,number-of-smooth-descent-periods-of-a-stock,False,28325,48903,2110,False,2,"Can you solve this real interview question? Number of Smooth Descent Periods of a Stock - You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.

A smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule.

Return the number of smooth descent periods.

 

Example 1:


Input: prices = [3,2,1,4]
Output: 7
Explanation: There are 7 smooth descent periods:
[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]
Note that a period with one day is a smooth descent period by the definition.


Example 2:


Input: prices = [8,6,7,7]
Output: 4
Explanation: There are 4 smooth descent periods: [8], [6], [7], and [7]
Note that [8,6] is not a smooth descent period as 8 - 6 ≠ 1.


Example 3:


Input: prices = [1]
Output: 1
Explanation: There is 1 smooth descent period: [1]


 

Constraints:

 * 1 <= prices.length <= 105
 * 1 <= prices[i] <= 105",Solutions (495),551,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-smooth-descent-periods-of-a-stock/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getDescentPeriods(self, prices: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getDescentPeriods(prices)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def getDescentPeriods(self, prices: List[int]) -> int:
        stack = []
        result = 0
        
        for price in prices:
            count = 1
            while stack and stack[-1][0] == price + count:
                pre, pre_count = stack.pop()
                count += pre_count
                
            for _, c in stack:
                result += c
                
            stack.append((price, count))
            
        for _, c in stack:
            result += c
        
        return result"
False,0,0,2234,,Minimum Operations to Make the Array K-Increasing,minimum-operations-to-make-the-array-k-increasing,False,10781,28664,2111,False,3,"Can you solve this real interview question? Minimum Operations to Make the Array K-Increasing - You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.

The array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.

 * For example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because:
   * arr[0] <= arr[2] (4 <= 5)
   * arr[1] <= arr[3] (1 <= 2)
   * arr[2] <= arr[4] (5 <= 6)
   * arr[3] <= arr[5] (2 <= 2)
 * However, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).

In one operation, you can choose an index i and change arr[i] into any positive integer.

Return the minimum number of operations required to make the array K-increasing for the given k.

 

Example 1:


Input: arr = [5,4,3,2,1], k = 1
Output: 4
Explanation:
For k = 1, the resultant array has to be non-decreasing.
Some of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.
It is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.
It can be shown that we cannot make the array K-increasing in less than 4 operations.


Example 2:


Input: arr = [4,1,5,2,6,2], k = 2
Output: 0
Explanation:
This is the same example as the one in the problem description.
Here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].
Since the given array is already K-increasing, we do not need to perform any operations.

Example 3:


Input: arr = [4,1,5,2,6,2], k = 3
Output: 2
Explanation:
Indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.
One of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.
The array will now be [4,1,5,4,6,5].
Note that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.


 

Constraints:

 * 1 <= arr.length <= 105
 * 1 <= arr[i], k <= arr.length",Solutions (143),610,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kIncreasing(self, arr: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kIncreasing(arr, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def kIncreasing(self, arr: List[int], k: int) -> int:
        n = len(arr)
        dp = [0] * n
        
        for i in range(1, n):
            if arr[i] <= arr[i-1]:
                diff = arr[i-1] - arr[i] + 1
                dp[i] += diff
                arr[i] += diff
        
        for i in range(k, n):
            dp[i] = min(dp[i] + dp[i-k], dp[i])
        
        return sum(dp)"
False,0,0,2235,,Capitalize the Title,capitalize-the-title,False,42644,68732,2129,False,1,"Can you solve this real interview question? Capitalize the Title - You are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that:

 * If the length of the word is 1 or 2 letters, change all letters to lowercase.
 * Otherwise, change the first letter to uppercase and the remaining letters to lowercase.

Return the capitalized title.

 

Example 1:


Input: title = ""capiTalIze tHe titLe""
Output: ""Capitalize The Title""
Explanation:
Since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.


Example 2:


Input: title = ""First leTTeR of EACH Word""
Output: ""First Letter of Each Word""
Explanation:
The word ""of"" has length 2, so it is all lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.


Example 3:


Input: title = ""i lOve leetcode""
Output: ""i Love Leetcode""
Explanation:
The word ""i"" has length 1, so it is lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.


 

Constraints:

 * 1 <= title.length <= 100
 * title consists of words separated by a single space without any leading or trailing spaces.
 * Each word consists of uppercase and lowercase English letters and is non-empty.",Solutions (906),569,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/capitalize-the-title/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def capitalizeTitle(self, title: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    title: str = deserialize(""str"", read_line())
    ans = Solution().capitalizeTitle(title)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def capitalizeTitle(self, title: str) -> str:
        return ' '.join([w.lower() if len(w) <= 2 else w.capitalize() for w in title.split()])"
False,0,0,2237,longest-palindrome-by-concatenating-two-letter-words,Longest Palindrome by Concatenating Two Letter Words,longest-palindrome-by-concatenating-two-letter-words,False,98566,203318,2131,False,2,"Can you solve this real interview question? Longest Palindrome by Concatenating Two Letter Words - You are given an array of strings words. Each element of words consists of two lowercase English letters.

Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.

Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.

A palindrome is a string that reads the same forward and backward.

 

Example 1:


Input: words = [""lc"",""cl"",""gg""]
Output: 6
Explanation: One longest palindrome is ""lc"" + ""gg"" + ""cl"" = ""lcggcl"", of length 6.
Note that ""clgglc"" is another longest palindrome that can be created.


Example 2:


Input: words = [""ab"",""ty"",""yt"",""lc"",""cl"",""ab""]
Output: 8
Explanation: One longest palindrome is ""ty"" + ""lc"" + ""cl"" + ""yt"" = ""tylcclyt"", of length 8.
Note that ""lcyttycl"" is another longest palindrome that can be created.


Example 3:


Input: words = [""cc"",""ll"",""xx""]
Output: 2
Explanation: One longest palindrome is ""cc"", of length 2.
Note that ""ll"" is another longest palindrome that can be created, and so is ""xx"".


 

Constraints:

 * 1 <= words.length <= 105
 * words[i].length == 2
 * words[i] consists of lowercase English letters.",Solutions (1.3K),2.2K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-palindrome-by-concatenating-two-letter-words/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPalindrome(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().longestPalindrome(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestPalindrome(self, words: List[str]) -> int:
        pass"
False,0,0,2238,,A Number After a Double Reversal,a-number-after-a-double-reversal,False,54132,70331,2119,False,1,"Can you solve this real interview question? A Number After a Double Reversal - Reversing an integer means to reverse all its digits.

 * For example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.

Given an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.

 

Example 1:


Input: num = 526
Output: true
Explanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.


Example 2:


Input: num = 1800
Output: false
Explanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.


Example 3:


Input: num = 0
Output: true
Explanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.


 

Constraints:

 * 0 <= num <= 106",Solutions (1.2K),485,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/a-number-after-a-double-reversal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isSameAfterReversals(self, num: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().isSameAfterReversals(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isSameAfterReversals(self, num: int) -> bool:
        def reverse(n):
            return int(str(n)[::-1])
        
        reversed1 = reverse(num)
        reversed2 = reverse(reversed1)
        
        return num == reversed2"
False,0,0,2239,,Execution of All Suffix Instructions Staying in a Grid,execution-of-all-suffix-instructions-staying-in-a-grid,False,22974,27575,2120,False,2,"Can you solve this real interview question? Execution of All Suffix Instructions Staying in a Grid - There is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).

You are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).

The robot can begin executing from any ith instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:

 * The next instruction will move the robot off the grid.
 * There are no more instructions left to execute.

Return an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/09/1.png]


Input: n = 3, startPos = [0,1], s = ""RRDDLU""
Output: [1,5,4,3,1,0]
Explanation: Starting from startPos and beginning execution from the ith instruction:
- 0th: ""RRDDLU"". Only one instruction ""R"" can be executed before it moves off the grid.
- 1st:  ""RDDLU"". All five instructions can be executed while it stays in the grid and ends at (1, 1).
- 2nd:   ""DDLU"". All four instructions can be executed while it stays in the grid and ends at (1, 0).
- 3rd:    ""DLU"". All three instructions can be executed while it stays in the grid and ends at (0, 0).
- 4th:     ""LU"". Only one instruction ""L"" can be executed before it moves off the grid.
- 5th:      ""U"". If moving up, it would move off the grid.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/09/2.png]


Input: n = 2, startPos = [1,1], s = ""LURD""
Output: [4,1,0,0]
Explanation:
- 0th: ""LURD"".
- 1st:  ""URD"".
- 2nd:   ""RD"".
- 3rd:    ""D"".


Example 3:

[https://assets.leetcode.com/uploads/2021/12/09/3.png]


Input: n = 1, startPos = [0,0], s = ""LRUD""
Output: [0,0,0,0]
Explanation: No matter which instruction the robot begins execution from, it would move off the grid.


 

Constraints:

 * m == s.length
 * 1 <= n, m <= 500
 * startPos.length == 2
 * 0 <= startrow, startcol < n
 * s consists of 'L', 'R', 'U', and 'D'.",Solutions (396),419,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    startPos: List[int] = deserialize(""List[int]"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().executeInstructions(n, startPos, s)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def executeInstructions(self, n: int, startPos: List[int], s: str) -> List[int]:
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        ans = []
        for i in range(len(s)):
            row, col = startPos
            cnt = 0
            for j in range(i, len(s)):
                if row < 0 or row >= n or col < 0 or col >= n:
                    break
                cnt += 1
                if s[j] == 'L':
                    col -= 1
                elif s[j] == 'R':
                    col += 1
                elif s[j] == 'U':
                    row -= 1
                else:
                    row += 1
            ans.append(cnt)
        return ans"
False,0,0,2240,,Intervals Between Identical Elements,intervals-between-identical-elements,False,15227,35253,2121,False,2,"Can you solve this real interview question? Intervals Between Identical Elements - You are given a 0-indexed array of n integers arr.

The interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.

Return an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].

Note: |x| is the absolute value of x.

 

Example 1:


Input: arr = [2,1,3,1,2,3,3]
Output: [4,2,7,2,4,4,5]
Explanation:
- Index 0: Another 2 is found at index 4. |0 - 4| = 4
- Index 1: Another 1 is found at index 3. |1 - 3| = 2
- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7
- Index 3: Another 1 is found at index 1. |3 - 1| = 2
- Index 4: Another 2 is found at index 0. |4 - 0| = 4
- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4
- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5


Example 2:


Input: arr = [10,5,10,10]
Output: [5,0,3,4]
Explanation:
- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5
- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.
- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3
- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4


 

Constraints:

 * n == arr.length
 * 1 <= n <= 105
 * 1 <= arr[i] <= 105",Solutions (282),729,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/intervals-between-identical-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getDistances(self, arr: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    arr: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getDistances(arr)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def getDistances(self, arr: List[int]) -> List[int]:
        count_dict = {}
        result = []
        
        for i, num in enumerate(arr):
            if num not in count_dict:
                count_dict[num] = [i]
            else:
                count_dict[num].append(i)
        
        for i in range(len(arr)):
            sum_dist = 0
            for index in count_dict[arr[i]]:
                sum_dist += abs(i - index)
            result.append(sum_dist)
        
        return result"
False,0,0,2241,,Recover the Original Array,recover-the-original-array,False,8743,22713,2122,False,3,"Can you solve this real interview question? Recover the Original Array - Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:

 1. lower[i] = arr[i] - k, for every index i where 0 <= i < n
 2. higher[i] = arr[i] + k, for every index i where 0 <= i < n

Unfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array.

Given an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array.

Note: The test cases are generated such that there exists at least one valid array arr.

 

Example 1:


Input: nums = [2,10,6,4,8,12]
Output: [3,7,11]
Explanation:
If arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].
Combining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.
Another valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]. 


Example 2:


Input: nums = [1,1,3,3]
Output: [2,2]
Explanation:
If arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].
Combining lower and higher gives us [1,1,3,3], which is equal to nums.
Note that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.
This is invalid since k must be positive.


Example 3:


Input: nums = [5,435]
Output: [220]
Explanation:
The only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].


 

Constraints:

 * 2 * n == nums.length
 * 1 <= n <= 1000
 * 1 <= nums[i] <= 109
 * The test cases are generated such that there exists at least one valid array arr.",Solutions (100),331,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/recover-the-original-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def recoverArray(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().recoverArray(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def recoverArray(self, nums: List[int]) -> List[int]:
        nums.sort()
        n = len(nums) // 2
        lower = []
        higher = []
        
        for i in range(n):
            lower.append(nums[i])
            higher.append(nums[i + n])
        
        lower.sort()
        higher.sort()
        
        k = (lower[1] - lower[0]) if lower[1] - lower[0] == higher[1] - higher[0] else lower[2] - lower[1]
        
        arr = []
        for i in range(n):
            if lower[i] + k == higher[i]:
                arr.append(lower[i])
            else:
                arr.append(higher[i])
        
        return arr"
False,0,0,2243,,Check if All A's Appears Before All B's,check-if-all-as-appears-before-all-bs,False,51502,72385,2124,False,1,"Can you solve this real interview question? Check if All A's Appears Before All B's - Given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.

 

Example 1:


Input: s = ""aaabbb""
Output: true
Explanation:
The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.
Hence, every 'a' appears before every 'b' and we return true.


Example 2:


Input: s = ""abab""
Output: false
Explanation:
There is an 'a' at index 2 and a 'b' at index 1.
Hence, not every 'a' appears before every 'b' and we return false.


Example 3:


Input: s = ""bbb""
Output: true
Explanation:
There are no 'a's, hence, every 'a' appears before every 'b' and we return true.


 

Constraints:

 * 1 <= s.length <= 100
 * s[i] is either 'a' or 'b'.",Solutions (1.2K),573,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkString(self, s: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().checkString(s)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkString(self, s: str) -> bool:
        return s.index(""b"") == len(s) or s.index(""a"") < s.index(""b"")"
False,0,0,2244,,Number of Laser Beams in a Bank,number-of-laser-beams-in-a-bank,False,44514,54160,2125,False,2,"Can you solve this real interview question? Number of Laser Beams in a Bank - Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.

There is one laser beam between any two security devices if both conditions are met:

 * The two devices are located on two different rows: r1 and r2, where r1 < r2.
 * For each row i where r1 < i < r2, there are no security devices in the ith row.

Laser beams are independent, i.e., one beam does not interfere nor join with another.

Return the total number of laser beams in the bank.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/24/laser1.jpg]


Input: bank = [""011001"",""000000"",""010100"",""001000""]
Output: 8
Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:
 * bank[0][1] -- bank[2][1]
 * bank[0][1] -- bank[2][3]
 * bank[0][2] -- bank[2][1]
 * bank[0][2] -- bank[2][3]
 * bank[0][5] -- bank[2][1]
 * bank[0][5] -- bank[2][3]
 * bank[2][1] -- bank[3][2]
 * bank[2][3] -- bank[3][2]
Note that there is no beam between any device on the 0th row with any on the 3rd row.
This is because the 2nd row contains security devices, which breaks the second condition.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/24/laser2.jpg]


Input: bank = [""000"",""111"",""000""]
Output: 0
Explanation: There does not exist two devices located on two different rows.


 

Constraints:

 * m == bank.length
 * n == bank[i].length
 * 1 <= m, n <= 500
 * bank[i][j] is either '0' or '1'.",Solutions (855),674,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-laser-beams-in-a-bank/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfBeams(self, bank: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    bank: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().numberOfBeams(bank)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfBeams(self, bank: List[str]) -> int:
        pass"
False,0,0,2245,,Destroying Asteroids,destroying-asteroids,False,27267,54552,2126,False,2,"Can you solve this real interview question? Destroying Asteroids - You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.

You can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.

Return true if all asteroids can be destroyed. Otherwise, return false.

 

Example 1:


Input: mass = 10, asteroids = [3,9,19,5,21]
Output: true
Explanation: One way to order the asteroids is [9,19,5,3,21]:
- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19
- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38
- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43
- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46
- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67
All asteroids are destroyed.


Example 2:


Input: mass = 5, asteroids = [4,9,23,4]
Output: false
Explanation: 
The planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.
After the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.
This is less than 23, so a collision would not destroy the last asteroid.

 

Constraints:

 * 1 <= mass <= 105
 * 1 <= asteroids.length <= 105
 * 1 <= asteroids[i] <= 105",Solutions (422),370,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/destroying-asteroids/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    mass: int = deserialize(""int"", read_line())
    asteroids: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().asteroidsDestroyed(mass, asteroids)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def asteroidsDestroyed(self, mass: int, asteroids: List[int]) -> bool:
        sorted_asteroids = sorted(asteroids, reverse=True)
        for asteroid in sorted_asteroids:
            if mass >= asteroid:
                mass += asteroid
            else:
                return False
        return True"
False,0,0,2246,,Maximum Employees to Be Invited to a Meeting,maximum-employees-to-be-invited-to-a-meeting,False,8270,23931,2127,False,3,"Can you solve this real interview question? Maximum Employees to Be Invited to a Meeting - A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.

The employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.

Given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/14/ex1.png]


Input: favorite = [2,2,1,2]
Output: 3
Explanation:
The above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.
All employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.
Note that the company can also invite employees 1, 2, and 3, and give them their desired seats.
The maximum number of employees that can be invited to the meeting is 3. 


Example 2:


Input: favorite = [1,2,0]
Output: 3
Explanation: 
Each employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.
The seating arrangement will be the same as that in the figure given in example 1:
- Employee 0 will sit between employees 2 and 1.
- Employee 1 will sit between employees 0 and 2.
- Employee 2 will sit between employees 1 and 0.
The maximum number of employees that can be invited to the meeting is 3.


Example 3:

[https://assets.leetcode.com/uploads/2021/12/14/ex2.png]


Input: favorite = [3,0,1,4,1]
Output: 4
Explanation:
The above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.
Employee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.
So the company leaves them out of the meeting.
The maximum number of employees that can be invited to the meeting is 4.


 

Constraints:

 * n == favorite.length
 * 2 <= n <= 105
 * 0 <= favorite[i] <= n - 1
 * favorite[i] != i",Solutions (93),776,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    favorite: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumInvitations(favorite)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumInvitations(self, favorite: List[int]) -> int:
        def dfs(index, visited):
            visited.add(index)
            next_index = (favorite[index] + 1) % len(favorite)
            if next_index not in visited:
                dfs(next_index, visited)
        
        max_count = 0
        for i in range(len(favorite)):
            visited = set()
            dfs(i, visited)
            max_count = max(max_count, len(visited))
        
        return max_count"
False,0,0,2248,,Minimum Cost of Buying Candies With Discount,minimum-cost-of-buying-candies-with-discount,False,34857,57113,2144,False,1,"Can you solve this real interview question? Minimum Cost of Buying Candies With Discount - A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.

The customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.

 * For example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4.

Given a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.

 

Example 1:


Input: cost = [1,2,3]
Output: 5
Explanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.
The total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.
Note that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.
The cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.


Example 2:


Input: cost = [6,5,7,9,2,2]
Output: 23
Explanation: The way in which we can get the minimum cost is described below:
- Buy candies with costs 9 and 7
- Take the candy with cost 6 for free
- We buy candies with costs 5 and 2
- Take the last remaining candy with cost 2 for free
Hence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.


Example 3:


Input: cost = [5,5]
Output: 10
Explanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.
Hence, the minimum cost to buy all candies is 5 + 5 = 10.


 

Constraints:

 * 1 <= cost.length <= 100
 * 1 <= cost[i] <= 100",Solutions (621),443,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-of-buying-candies-with-discount/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumCost(self, cost: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cost: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumCost(cost)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumCost(self, cost: List[int]) -> int:
        cost.sort()
        total = 0
        for i in range(len(cost) // 3, len(cost)):
            total += cost[i]
        return total"
False,0,0,2249,,Count the Hidden Sequences,count-the-hidden-sequences,False,14773,40095,2145,False,2,"Can you solve this real interview question? Count the Hidden Sequences - You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].

You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.

 * For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
   * [3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
   * [5, 6, 3, 7] is not possible since it contains an element greater than 6.
   * [1, 2, 3, 4] is not possible since the differences are not correct.

Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.

 

Example 1:


Input: differences = [1,-3,4], lower = 1, upper = 6
Output: 2
Explanation: The possible hidden sequences are:
- [3, 4, 1, 5]
- [4, 5, 2, 6]
Thus, we return 2.


Example 2:


Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5
Output: 4
Explanation: The possible hidden sequences are:
- [-3, 0, -4, 1, 2, 0]
- [-2, 1, -3, 2, 3, 1]
- [-1, 2, -2, 3, 4, 2]
- [0, 3, -1, 4, 5, 3]
Thus, we return 4.


Example 3:


Input: differences = [4,-7,2], lower = 3, upper = 6
Output: 0
Explanation: There are no possible hidden sequences. Thus, we return 0.


 

Constraints:

 * n == differences.length
 * 1 <= n <= 105
 * -105 <= differences[i] <= 105
 * -105 <= lower <= upper <= 105",Solutions (233),452,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-hidden-sequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    differences: List[int] = deserialize(""List[int]"", read_line())
    lower: int = deserialize(""int"", read_line())
    upper: int = deserialize(""int"", read_line())
    ans = Solution().numberOfArrays(differences, lower, upper)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfArrays(self, differences: List[int], lower: int, upper: int) -> int:
        dp = [[0] * (upper - lower + 2) for _ in range(len(differences))]
        dp[0][0] = 1
        for i in range(1, len(differences)):
            for j in range(1, upper - lower + 1):
                for k in range(max(1, j - differences[i - 1]), min(j + differences[i - 1], upper - lower + 1)):
                    dp[i][j] += dp[i - 1][k]
        return sum(dp[-1]) % (10**9 + 7)"
False,0,0,2251,,Number of Ways to Divide a Long Corridor,number-of-ways-to-divide-a-long-corridor,False,9506,23823,2147,False,3,"Can you solve this real interview question? Number of Ways to Divide a Long Corridor - Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.

One room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.

Divide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.

Return the number of ways to divide the corridor. Since the answer may be very large, return it modulo 109 + 7. If there is no way, return 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/04/1.png]


Input: corridor = ""SSPPSPS""
Output: 3
Explanation: There are 3 different ways to divide the corridor.
The black bars in the above image indicate the two room dividers already installed.
Note that in each of the ways, each section has exactly two seats.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/04/2.png]


Input: corridor = ""PPSPSP""
Output: 1
Explanation: There is only 1 way to divide the corridor, by not installing any additional dividers.
Installing any would create some section that does not have exactly two seats.


Example 3:

[https://assets.leetcode.com/uploads/2021/12/12/3.png]


Input: corridor = ""S""
Output: 0
Explanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.


 

Constraints:

 * n == corridor.length
 * 1 <= n <= 105
 * corridor[i] is either 'S' or 'P'.",Solutions (191),307,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-divide-a-long-corridor/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfWays(self, corridor: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    corridor: str = deserialize(""str"", read_line())
    ans = Solution().numberOfWays(corridor)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfWays(self, corridor: str) -> int:
        mod = 10**9 + 7
        n = len(corridor)
        
        dp = [0] * (n + 1)
        dp[0] = 1
        
        for i in range(2, n + 1):
            if corridor[i - 1] == 'S':
                dp[i] = (dp[i - 2] + dp[i - 1]) % mod
        
        return dp[n] - 1 if dp[n] > 0 else 0"
False,0,0,2254,,Check if Every Row and Column Contains All Numbers,check-if-every-row-and-column-contains-all-numbers,False,50999,97316,2133,False,1,"Can you solve this real interview question? Check if Every Row and Column Contains All Numbers - An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).

Given an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/21/example1drawio.png]


Input: matrix = [[1,2,3],[3,1,2],[2,3,1]]
Output: true
Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.
Hence, we return true.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/21/example2drawio.png]


Input: matrix = [[1,1,1],[1,2,3],[1,2,3]]
Output: false
Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.
Hence, we return false.


 

Constraints:

 * n == matrix.length == matrix[i].length
 * 1 <= n <= 100
 * 1 <= matrix[i][j] <= n",Solutions (698),734,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-every-row-and-column-contains-all-numbers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkValid(self, matrix: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkValid(matrix)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkValid(self, matrix: List[List[int]]) -> bool:
        n = len(matrix)
        for i in range(n):
            if sorted(matrix[i]) != list(range(1, n + 1)):
                return False
            if sorted([matrix[j][i] for j in range(n)]) != list(range(1, n + 1)):
                return False
        return True"
False,0,0,2255,,Minimum Swaps to Group All 1's Together II,minimum-swaps-to-group-all-1s-together-ii,False,21331,41578,2134,False,2,"Can you solve this real interview question? Minimum Swaps to Group All 1's Together II - A swap is defined as taking two distinct positions in an array and swapping the values in them.

A circular array is defined as an array where we consider the first element and the last element to be adjacent.

Given a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.

 

Example 1:


Input: nums = [0,1,0,1,1,0,0]
Output: 1
Explanation: Here are a few of the ways to group all the 1's together:
[0,0,1,1,1,0,0] using 1 swap.
[0,1,1,1,0,0,0] using 1 swap.
[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).
There is no way to group all 1's together with 0 swaps.
Thus, the minimum number of swaps required is 1.


Example 2:


Input: nums = [0,1,1,1,0,0,1,1,0]
Output: 2
Explanation: Here are a few of the ways to group all the 1's together:
[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).
[1,1,1,1,1,0,0,0,0] using 2 swaps.
There is no way to group all 1's together with 0 or 1 swaps.
Thus, the minimum number of swaps required is 2.


Example 3:


Input: nums = [1,1,0,0,1]
Output: 0
Explanation: All the 1's are already grouped together due to the circular property of the array.
Thus, the minimum number of swaps required is 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * nums[i] is either 0 or 1.",Solutions (334),892,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSwaps(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minSwaps(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSwaps(self, nums: List[int]) -> int:
        n = len(nums)
        ones = sum(nums)
        
        if ones == 0 or ones == n:
            return 0
        
        target_ones = ones
        max_ones = ones
        
        for i in range(1, n):
            if nums[i - 1] == 1:
                ones -= 1
            if nums[(i + target_ones - 1) % n] == 1:
                ones += 1
            max_ones = max(max_ones, ones)
        
        return target_ones - max_ones."
False,0,0,2256,,Count Words Obtained After Adding a Letter,count-words-obtained-after-adding-a-letter,False,29348,68550,2135,False,2,"Can you solve this real interview question? Count Words Obtained After Adding a Letter - You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.

For each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.

The conversion operation is described in the following two steps:

 1. Append any lowercase letter that is not present in the string to its end.
    * For example, if the string is ""abc"", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be ""abcd"".
 2. Rearrange the letters of the new string in any arbitrary order.
    * For example, ""abcd"" can be rearranged to ""acbd"", ""bacd"", ""cbda"", and so on. Note that it can also be rearranged to ""abcd"" itself.

Return the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.

Note that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.

 

Example 1:


Input: startWords = [""ant"",""act"",""tack""], targetWords = [""tack"",""act"",""acti""]
Output: 2
Explanation:
- In order to form targetWords[0] = ""tack"", we use startWords[1] = ""act"", append 'k' to it, and rearrange ""actk"" to ""tack"".
- There is no string in startWords that can be used to obtain targetWords[1] = ""act"".
  Note that ""act"" does exist in startWords, but we must append one letter to the string before rearranging it.
- In order to form targetWords[2] = ""acti"", we use startWords[1] = ""act"", append 'i' to it, and rearrange ""acti"" to ""acti"" itself.


Example 2:


Input: startWords = [""ab"",""a""], targetWords = [""abc"",""abcd""]
Output: 1
Explanation:
- In order to form targetWords[0] = ""abc"", we use startWords[0] = ""ab"", add 'c' to it, and rearrange it to ""abc"".
- There is no string in startWords that can be used to obtain targetWords[1] = ""abcd"".


 

Constraints:

 * 1 <= startWords.length, targetWords.length <= 5 * 104
 * 1 <= startWords[i].length, targetWords[j].length <= 26
 * Each string of startWords and targetWords consists of lowercase English letters only.
 * No letter occurs more than once in any string of startWords or targetWords.",Solutions (327),592,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/count-words-obtained-after-adding-a-letter/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startWords: List[str] = deserialize(""List[str]"", read_line())
    targetWords: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().wordCount(startWords, targetWords)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def wordCount(self, startWords: List[str], targetWords: List[str]) -> int:
        count = 0
        for target in targetWords:
            for start in startWords:
                if set(target).issubset(start):
                    count += 1
                    break
        return count"
False,0,0,2257,earliest-possible-day-of-full-bloom,Earliest Possible Day of Full Bloom,earliest-possible-day-of-full-bloom,False,47068,64160,2136,False,3,"Can you solve this real interview question? Earliest Possible Day of Full Bloom - You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:

 * plantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.
 * growTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.

From the beginning of day 0, you can plant the seeds in any order.

Return the earliest possible day where all seeds are blooming.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/21/1.png]


Input: plantTime = [1,4,3], growTime = [2,3,1]
Output: 9
Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.
One optimal way is:
On day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.
On days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.
On days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.
Thus, on day 9, all the seeds are blooming.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/21/2.png]


Input: plantTime = [1,2,3,2], growTime = [2,1,2,1]
Output: 9
Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.
One optimal way is:
On day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.
On days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.
On days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.
On days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.
Thus, on day 9, all the seeds are blooming.


Example 3:


Input: plantTime = [1], growTime = [1]
Output: 2
Explanation: On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.
Thus, on day 2, all the seeds are blooming.


 

Constraints:

 * n == plantTime.length == growTime.length
 * 1 <= n <= 105
 * 1 <= plantTime[i], growTime[i] <= 104",Solutions (708),1.4K,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/earliest-possible-day-of-full-bloom/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    plantTime: List[int] = deserialize(""List[int]"", read_line())
    growTime: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().earliestFullBloom(plantTime, growTime)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def earliestFullBloom(self, plantTime: List[int], growTime: List[int]) -> int:
        days = 0
        max_grow = 0
        for i in range(len(plantTime)):
            days = max(days + plantTime[i], max_grow) + growTime[i]
            max_grow = max(max_grow, days)
        return days"
False,0,0,2260,,Divide a String Into Groups of Size k,divide-a-string-into-groups-of-size-k,False,34764,53103,2138,False,1,"Can you solve this real interview question? Divide a String Into Groups of Size k - A string s can be partitioned into groups of size k using the following procedure:

 * The first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group.
 * For the last group, if the string does not have k characters remaining, a character fill is used to complete the group.

Note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.

Given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.

 

Example 1:


Input: s = ""abcdefghi"", k = 3, fill = ""x""
Output: [""abc"",""def"",""ghi""]
Explanation:
The first 3 characters ""abc"" form the first group.
The next 3 characters ""def"" form the second group.
The last 3 characters ""ghi"" form the third group.
Since all groups can be completely filled by characters from the string, we do not need to use fill.
Thus, the groups formed are ""abc"", ""def"", and ""ghi"".


Example 2:


Input: s = ""abcdefghij"", k = 3, fill = ""x""
Output: [""abc"",""def"",""ghi"",""jxx""]
Explanation:
Similar to the previous example, we are forming the first three groups ""abc"", ""def"", and ""ghi"".
For the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.
Thus, the 4 groups formed are ""abc"", ""def"", ""ghi"", and ""jxx"".


 

Constraints:

 * 1 <= s.length <= 100
 * s consists of lowercase English letters only.
 * 1 <= k <= 100
 * fill is a lowercase English letter.",Solutions (684),370,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-a-string-into-groups-of-size-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divideString(self, s: str, k: int, fill: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    fill: str = deserialize(""str"", read_line())
    ans = Solution().divideString(s, k, fill)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def divideString(self, s: str, k: int, fill: str) -> List[str]:
        result = []
        for i in range(0, len(s), k):
            group = s[i:i+k]
            if len(group) < k:
                group += fill * (k - len(group))
            result.append(group)
        return result"
False,0,0,2261,,All Divisions With the Highest Score of a Binary Array,all-divisions-with-the-highest-score-of-a-binary-array,False,24663,38807,2155,False,2,"Can you solve this real interview question? All Divisions With the Highest Score of a Binary Array - You are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:

 * numsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive).
 * If i == 0, numsleft is empty, while numsright has all the elements of nums.
 * If i == n, numsleft has all the elements of nums, while numsright is empty.

The division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.

Return all distinct indices that have the highest possible division score. You may return the answer in any order.

 

Example 1:


Input: nums = [0,0,1,0]
Output: [2,4]
Explanation: Division at index
- 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1.
- 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2.
- 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3.
- 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2.
- 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3.
Indices 2 and 4 both have the highest possible division score 3.
Note the answer [4,2] would also be accepted.

Example 2:


Input: nums = [0,0,0]
Output: [3]
Explanation: Division at index
- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.
- 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1.
- 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2.
- 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3.
Only index 3 has the highest possible division score 3.


Example 3:


Input: nums = [1,1]
Output: [0]
Explanation: Division at index
- 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2.
- 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1.
- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.
Only index 0 has the highest possible division score 2.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * nums[i] is either 0 or 1.",Solutions (364),425,"# Created by asetti2002 at 2024/04/17 02:07
# leetgo: 1.4.3
# https://leetcode.com/problems/all-divisions-with-the-highest-score-of-a-binary-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScoreIndices(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxScoreIndices(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxScoreIndices(self, nums: List[int]) -> List[int]:
        counts = [(0, 0)] * len(nums)
        l_zeros, r_ones = 0, nums.count(1)
        for i in range(len(nums)):
            counts[i] = (l_zeros, r_ones)
            if nums[i] == 0:
                l_zeros += 1
            else:
                r_ones -= 1
        max_score = max(l_zeros + r_ones for l_zeros, r_ones in counts)
        return [i for i, (l_zeros, r_ones) in enumerate(counts) if l_zeros + r_ones == max_score]"
False,0,0,2262,,Solving Questions With Brainpower,solving-questions-with-brainpower,False,24870,53638,2140,False,2,"Can you solve this real interview question? Solving Questions With Brainpower - You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].

The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.

 * For example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
   * If question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
   * If instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.

Return the maximum points you can earn for the exam.

 

Example 1:


Input: questions = [[3,2],[4,3],[4,4],[2,5]]
Output: 5
Explanation: The maximum points can be earned by solving questions 0 and 3.
- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions
- Unable to solve questions 1 and 2
- Solve question 3: Earn 2 points
Total points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.


Example 2:


Input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: 7
Explanation: The maximum points can be earned by solving questions 1 and 4.
- Skip question 0
- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions
- Unable to solve questions 2 and 3
- Solve question 4: Earn 5 points
Total points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.


 

Constraints:

 * 1 <= questions.length <= 105
 * questions[i].length == 2
 * 1 <= pointsi, brainpoweri <= 105",Solutions (432),753,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/solving-questions-with-brainpower/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostPoints(self, questions: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    questions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().mostPoints(questions)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def mostPoints(self, questions: List[List[int]]) -> int:
        n = len(questions)
        dp = [0] * (n + 1)
        for i in range(n):
            dp[i + 1] = max(dp[i + 1], dp[i])
            for j in range(1, min(questions[i][1] + 1, n - i)):
                dp[i + j + 1] = max(dp[i + j + 1], dp[i] + questions[i][0])
        return dp[n]"
False,0,0,2263,,Maximum Running Time of N Computers,maximum-running-time-of-n-computers,False,11115,28385,2141,False,3,"Can you solve this real interview question? Maximum Running Time of N Computers - You have n computers. You are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.

Initially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.

Note that the batteries cannot be recharged.

Return the maximum number of minutes you can run all the n computers simultaneously.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/01/06/example1-fit.png]


Input: n = 2, batteries = [3,3,3]
Output: 4
Explanation: 
Initially, insert battery 0 into the first computer and battery 1 into the second computer.
After two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.
At the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.
By the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.
We can run the two computers simultaneously for at most 4 minutes, so we return 4.



Example 2:

[https://assets.leetcode.com/uploads/2022/01/06/example2.png]


Input: n = 2, batteries = [1,1,1,1]
Output: 2
Explanation: 
Initially, insert battery 0 into the first computer and battery 2 into the second computer. 
After one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. 
After another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.
We can run the two computers simultaneously for at most 2 minutes, so we return 2.


 

Constraints:

 * 1 <= n <= batteries.length <= 105
 * 1 <= batteries[i] <= 109",Solutions (125),627,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-running-time-of-n-computers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxRunTime(self, n: int, batteries: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    batteries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxRunTime(n, batteries)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxRunTime(self, n: int, batteries: List[int]) -> int:
        batteries.sort(reverse=True)
        sum_batteries = sum(batteries[:n])
        prev_sum = sum_batteries
        max_time = min(sum_batteries, n)
        
        for i in range(n, len(batteries)):
            curr_sum = prev_sum - batteries[i-n] + batteries[i]
            max_time = max(max_time, min(curr_sum, i+1))
            prev_sum = curr_sum
        
        return max_time"
False,0,0,2264,,Minimum Sum of Four Digit Number After Splitting Digits,minimum-sum-of-four-digit-number-after-splitting-digits,False,79839,91867,2160,False,1,"Can you solve this real interview question? Minimum Sum of Four Digit Number After Splitting Digits - You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.

 * For example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].

Return the minimum possible sum of new1 and new2.

 

Example 1:


Input: num = 2932
Output: 52
Explanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.
The minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.


Example 2:


Input: num = 4009
Output: 13
Explanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc. 
The minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.


 

Constraints:

 * 1000 <= num <= 9999",Solutions (1.5K),1K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumSum(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().minimumSum(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumSum(self, num: int) -> int:
        nums = [int(d) for d in str(num)]
        nums.sort()
        new1 = nums[:2]
        new2 = nums[2:]
        return int("""".join(map(str, new1))) + int("""".join(map(str, new2)))"
False,0,0,2265,,Partition Array According to Given Pivot,partition-array-according-to-given-pivot,False,46224,54524,2161,False,2,"Can you solve this real interview question? Partition Array According to Given Pivot - You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

 * Every element less than pivot appears before every element greater than pivot.
 * Every element equal to pivot appears in between the elements less than and greater than pivot.
 * The relative order of the elements less than pivot and the elements greater than pivot is maintained.
   * More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.

Return nums after the rearrangement.

 

Example 1:


Input: nums = [9,12,5,10,14,3,10], pivot = 10
Output: [9,5,3,10,10,12,14]
Explanation: 
The elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.
The elements 12 and 14 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.


Example 2:


Input: nums = [-3,4,3,2], pivot = 2
Output: [-3,2,4,3]
Explanation: 
The element -3 is less than the pivot so it is on the left side of the array.
The elements 4 and 3 are greater than the pivot so they are on the right side of the array.
The relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.


 

Constraints:

 * 1 <= nums.length <= 105
 * -106 <= nums[i] <= 106
 * pivot equals to an element of nums.",Solutions (850),770,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-according-to-given-pivot/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    pivot: int = deserialize(""int"", read_line())
    ans = Solution().pivotArray(nums, pivot)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def pivotArray(self, nums: List[int], pivot: int) -> List[int]:
        less = [x for x in nums if x < pivot]
        equal = [x for x in nums if x == pivot]
        greater = [x for x in nums if x > pivot]
        return less + equal + greater"
False,0,0,2266,,Minimum Cost to Set Cooking Time,minimum-cost-to-set-cooking-time,False,13356,33477,2162,False,2,"Can you solve this real interview question? Minimum Cost to Set Cooking Time - A generic microwave supports cooking times for:

 * at least 1 second.
 * at most 99 minutes and 99 seconds.

To set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,

 * You push 9 5 4 (three digits). It is normalized as 0954 and interpreted as 9 minutes and 54 seconds.
 * You push 0 0 0 8 (four digits). It is interpreted as 0 minutes and 8 seconds.
 * You push 8 0 9 0. It is interpreted as 80 minutes and 90 seconds.
 * You push 8 1 3 0. It is interpreted as 81 minutes and 30 seconds.

You are given integers startAt, moveCost, pushCost, and targetSeconds. Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue.

There can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost.

Return the minimum cost to set targetSeconds seconds of cooking time.

Remember that one minute consists of 60 seconds.

 

Example 1:

[https://assets.leetcode.com/uploads/2021/12/30/1.png]


Input: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600
Output: 6
Explanation: The following are the possible ways to set the cooking time.
- 1 0 0 0, interpreted as 10 minutes and 0 seconds.
  The finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).
  The cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.
- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.
  The finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).
  The cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.
- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.
  The finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).
  The cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9.


Example 2:

[https://assets.leetcode.com/uploads/2021/12/30/2.png]


Input: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76
Output: 6
Explanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds.
The finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6
Note other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.


 

Constraints:

 * 0 <= startAt <= 9
 * 1 <= moveCost, pushCost <= 105
 * 1 <= targetSeconds <= 6039",Solutions (208),177,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-set-cooking-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCostSetTime(self, startAt: int, moveCost: int, pushCost: int, targetSeconds: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startAt: int = deserialize(""int"", read_line())
    moveCost: int = deserialize(""int"", read_line())
    pushCost: int = deserialize(""int"", read_line())
    targetSeconds: int = deserialize(""int"", read_line())
    ans = Solution().minCostSetTime(startAt, moveCost, pushCost, targetSeconds)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCostSetTime(self, startAt: int, moveCost: int, pushCost: int, targetSeconds: int) -> int:
        dp = [float('inf')] * 6010
        dp[0] = 0
        for i in range(1, 6000):
            dp[i] = min(dp[i], dp[i - 10] + pushCost + moveCost * abs(startAt - (i % 10)))
        return dp[targetSeconds]"
False,0,0,2267,,Minimum Difference in Sums After Removal of Elements,minimum-difference-in-sums-after-removal-of-elements,False,7498,15772,2163,False,3,"Can you solve this real interview question? Minimum Difference in Sums After Removal of Elements - You are given a 0-indexed integer array nums consisting of 3 * n elements.

You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:

 * The first n elements belonging to the first part and their sum is sumfirst.
 * The next n elements belonging to the second part and their sum is sumsecond.

The difference in sums of the two parts is denoted as sumfirst - sumsecond.

 * For example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
 * Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.

Return the minimum difference possible between the sums of the two parts after the removal of n elements.

 

Example 1:


Input: nums = [3,1,2]
Output: -1
Explanation: Here, nums has 3 elements, so n = 1. 
Thus we have to remove 1 element from nums and divide the array into two equal parts.
- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.
- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.
- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.
The minimum difference between sums of the two parts is min(-1,1,2) = -1. 


Example 2:


Input: nums = [7,9,5,8,1,3]
Output: 1
Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.
If we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.
To obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.
It can be shown that it is not possible to obtain a difference smaller than 1.


 

Constraints:

 * nums.length == 3 * n
 * 1 <= n <= 105
 * 1 <= nums[i] <= 105",Solutions (130),544,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumDifference(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumDifference(self, nums: List[int]) -> int:
        n = len(nums) // 3
        nums.sort()
        total_sum = sum(nums)
        min_diff = float('inf')
        
        def backtrack(index, count, sum1, sum2):
            nonlocal min_diff
            
            if count == 0:
                min_diff = min(min_diff, abs(sum1 - sum2))
                return
            
            if index >= len(nums):
                return
            
            backtrack(index + 1, count, sum1, sum2)
            backtrack(index + 1, count - 1, sum1 + nums[index], sum2)
            backtrack(index + 1, count - 1, sum1, sum2 + nums[index])
        
        backtrack(0, n, 0, 0)
        
        return min_diff"
False,0,0,2269,,Count Elements With Strictly Smaller and Greater Elements ,count-elements-with-strictly-smaller-and-greater-elements,False,40211,67352,2148,False,1,"Can you solve this real interview question? Count Elements With Strictly Smaller and Greater Elements  - Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.

 

Example 1:


Input: nums = [11,7,2,15]
Output: 2
Explanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.
Element 11 has element 7 strictly smaller than it and element 15 strictly greater than it.
In total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.


Example 2:


Input: nums = [-3,3,3,90]
Output: 2
Explanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.
Since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.


 

Constraints:

 * 1 <= nums.length <= 100
 * -105 <= nums[i] <= 105",Solutions (669),480,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countElements(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countElements(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countElements(self, nums: List[int]) -> int:
        nums.sort()
        count = 0
        for i in range(1, len(nums)-1):
            if nums[i] > nums[i-1] and nums[i] < nums[i+1]:
                count += 1
        return count"
False,0,0,2270,,Find All Lonely Numbers in the Array,find-all-lonely-numbers-in-the-array,False,33770,55797,2150,False,2,"Can you solve this real interview question? Find All Lonely Numbers in the Array - You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.

Return all lonely numbers in nums. You may return the answer in any order.

 

Example 1:


Input: nums = [10,6,5,8]
Output: [10,8]
Explanation: 
- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.
- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.
- 5 is not a lonely number since 6 appears in nums and vice versa.
Hence, the lonely numbers in nums are [10, 8].
Note that [8, 10] may also be returned.


Example 2:


Input: nums = [1,3,5,3]
Output: [1,5]
Explanation: 
- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.
- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.
- 3 is not a lonely number since it appears twice.
Hence, the lonely numbers in nums are [1, 5].
Note that [5, 1] may also be returned.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 106",Solutions (601),456,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-lonely-numbers-in-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findLonely(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findLonely(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findLonely(self, nums: List[int]) -> List[int]:
        lonely_numbers = []
        counts = {}
        
        for num in nums:
            if num not in counts:
                counts[num] = 0
            counts[num] += 1
        
        for num in nums:
            if counts[num] == 1 and (num - 1) not in nums and (num + 1) not in nums:
                lonely_numbers.append(num)
        
        return lonely_numbers"
False,0,0,2271,,Rearrange Array Elements by Sign,rearrange-array-elements-by-sign,False,71593,88594,2149,False,2,"Can you solve this real interview question? Rearrange Array Elements by Sign - You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.

You should rearrange the elements of nums such that the modified array follows the given conditions:

 1. Every consecutive pair of integers have opposite signs.
 2. For all integers with the same sign, the order in which they were present in nums is preserved.
 3. The rearranged array begins with a positive integer.

Return the modified array after rearranging the elements to satisfy the aforementioned conditions.

 

Example 1:


Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  


Example 2:


Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].


 

Constraints:

 * 2 <= nums.length <= 2 * 105
 * nums.length is even
 * 1 <= |nums[i]| <= 105
 * nums consists of equal number of positive and negative integers.",Solutions (1.3K),1.4K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/rearrange-array-elements-by-sign/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().rearrangeArray(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def rearrangeArray(self, nums: List[int]) -> List[int]:
        pos_nums = [num for num in nums if num > 0]
        neg_nums = [num for num in nums if num < 0]
        result = []
        i, j = 0, 0

        while i < len(pos_nums) and j < len(neg_nums):
            result.append(pos_nums[i])
            result.append(neg_nums[j])
            i += 1
            j += 1

        return result"
False,0,0,2272,,Maximum Good People Based on Statements,maximum-good-people-based-on-statements,False,11078,22507,2151,False,3,"Can you solve this real interview question? Maximum Good People Based on Statements - There are two types of persons:

 * The good person: The person who always tells the truth.
 * The bad person: The person who might tell the truth and might lie.

You are given a 0-indexed 2D integer array statements of size n x n that represents the statements made by n people about each other. More specifically, statements[i][j] could be one of the following:

 * 0 which represents a statement made by person i that person j is a bad person.
 * 1 which represents a statement made by person i that person j is a good person.
 * 2 represents that no statement is made by person i about person j.

Additionally, no person ever makes a statement about themselves. Formally, we have that statements[i][i] = 2 for all 0 <= i < n.

Return the maximum number of people who can be good based on the statements made by the n people.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/01/15/logic1.jpg]


Input: statements = [[2,1,2],[1,2,2],[2,0,2]]
Output: 2
Explanation: Each person makes a single statement.
- Person 0 states that person 1 is good.
- Person 1 states that person 0 is good.
- Person 2 states that person 1 is bad.
Let's take person 2 as the key.
- Assuming that person 2 is a good person:
    - Based on the statement made by person 2, person 1 is a bad person.
    - Now we know for sure that person 1 is bad and person 2 is good.
    - Based on the statement made by person 1, and since person 1 is bad, they could be:
        - telling the truth. There will be a contradiction in this case and this assumption is invalid.
        - lying. In this case, person 0 is also a bad person and lied in their statement.
    - Following that person 2 is a good person, there will be only one good person in the group.
- Assuming that person 2 is a bad person:
    - Based on the statement made by person 2, and since person 2 is bad, they could be:
        - telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.
            - Following that person 2 is bad but told the truth, there will be no good persons in the group.
        - lying. In this case person 1 is a good person.
            - Since person 1 is a good person, person 0 is also a good person.
            - Following that person 2 is bad and lied, there will be two good persons in the group.
We can see that at most 2 persons are good in the best case, so we return 2.
Note that there is more than one way to arrive at this conclusion.


Example 2:

[https://assets.leetcode.com/uploads/2022/01/15/logic2.jpg]


Input: statements = [[2,0],[0,2]]
Output: 1
Explanation: Each person makes a single statement.
- Person 0 states that person 1 is bad.
- Person 1 states that person 0 is bad.
Let's take person 0 as the key.
- Assuming that person 0 is a good person:
    - Based on the statement made by person 0, person 1 is a bad person and was lying.
    - Following that person 0 is a good person, there will be only one good person in the group.
- Assuming that person 0 is a bad person:
    - Based on the statement made by person 0, and since person 0 is bad, they could be:
        - telling the truth. Following this scenario, person 0 and 1 are both bad.
            - Following that person 0 is bad but told the truth, there will be no good persons in the group.
        - lying. In this case person 1 is a good person.
            - Following that person 0 is bad and lied, there will be only one good person in the group.
We can see that at most, one person is good in the best case, so we return 1.
Note that there is more than one way to arrive at this conclusion.


 

Constraints:

 * n == statements.length == statements[i].length
 * 2 <= n <= 15
 * statements[i][j] is either 0, 1, or 2.
 * statements[i][i] == 2",Solutions (161),426,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-good-people-based-on-statements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumGood(self, statements: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    statements: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumGood(statements)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumGood(self, statements: List[List[int]]) -> int:
        n = len(statements)
        good_people = set()
        
        for i in range(n):
            for j in range(n):
                if statements[i][j] == 1:
                    good_people.add(j)
                    
        for i in range(n):
            if statements[i][i] == 0:
                good_people.discard(i)
        
        while True:
            found_good_person = False
            
            for i in range(n):
                if i not in good_people:
                    continue
                
                for j in range(n):
                    if statements[i][j] == 0 and j in good_people:
                        good_people.remove(j)
                        found_good_person = True
            
            if not found_good_person:
                break
        
        return len(good_people)"
False,0,0,2274,,Keep Multiplying Found Values by Two,keep-multiplying-found-values-by-two,False,63116,86948,2154,False,1,"Can you solve this real interview question? Keep Multiplying Found Values by Two - You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.

You then do the following steps:

 1. If original is found in nums, multiply it by two (i.e., set original = 2 * original).
 2. Otherwise, stop the process.
 3. Repeat this process with the new number as long as you keep finding the number.

Return the final value of original.

 

Example 1:


Input: nums = [5,3,6,1,12], original = 3
Output: 24
Explanation: 
- 3 is found in nums. 3 is multiplied by 2 to obtain 6.
- 6 is found in nums. 6 is multiplied by 2 to obtain 12.
- 12 is found in nums. 12 is multiplied by 2 to obtain 24.
- 24 is not found in nums. Thus, 24 is returned.


Example 2:


Input: nums = [2,7,9], original = 4
Output: 4
Explanation:
- 4 is not found in nums. Thus, 4 is returned.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i], original <= 1000",Solutions (1.3K),531,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/keep-multiplying-found-values-by-two/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findFinalValue(self, nums: List[int], original: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    original: int = deserialize(""int"", read_line())
    ans = Solution().findFinalValue(nums, original)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findFinalValue(self, nums: List[int], original: int) -> int:
        while original in nums:
            original *= 2
        return original"
False,0,0,2275,,Find Substring With Given Hash Value,find-substring-with-given-hash-value,False,11178,50232,2156,False,3,"Can you solve this real interview question? Find Substring With Given Hash Value - The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:

 * hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m.

Where val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.

You are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.

The test cases will be generated such that an answer always exists.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:


Input: s = ""leetcode"", power = 7, modulo = 20, k = 2, hashValue = 0
Output: ""ee""
Explanation: The hash of ""ee"" can be computed to be hash(""ee"", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. 
""ee"" is the first substring of length 2 with hashValue 0. Hence, we return ""ee"".


Example 2:


Input: s = ""fbxzaad"", power = 31, modulo = 100, k = 3, hashValue = 32
Output: ""fbx""
Explanation: The hash of ""fbx"" can be computed to be hash(""fbx"", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. 
The hash of ""bxz"" can be computed to be hash(""bxz"", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. 
""fbx"" is the first substring of length 3 with hashValue 32. Hence, we return ""fbx"".
Note that ""bxz"" also has a hash of 32 but it appears later than ""fbx"".


 

Constraints:

 * 1 <= k <= s.length <= 2 * 104
 * 1 <= power, modulo <= 109
 * 0 <= hashValue < modulo
 * s consists of lowercase English letters only.
 * The test cases are generated such that an answer always exists.",Solutions (128),375,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-substring-with-given-hash-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    power: int = deserialize(""int"", read_line())
    modulo: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    hashValue: int = deserialize(""int"", read_line())
    ans = Solution().subStrHash(s, power, modulo, k, hashValue)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        def hash(s, p, m):
            val = lambda c: ord(c) - ord('a') + 1
            res = 0
            for i in range(len(s)):
                res = (res * p + val(s[i])) % m
                if i >= k - 1 and res == hashValue:
                    return s[i - k + 1:i + 1]
            return """"
        
        return hash(s, power, modulo)"
False,0,0,2276,,Groups of Strings,groups-of-strings,False,7527,29328,2157,False,3,"Can you solve this real interview question? Groups of Strings - You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.

Two strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:

 * Adding exactly one letter to the set of the letters of s1.
 * Deleting exactly one letter from the set of the letters of s1.
 * Replacing exactly one letter from the set of the letters of s1 with any letter, including itself.

The array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:

 * It is connected to at least one other string of the group.
 * It is the only string present in the group.

Note that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.

Return an array ans of size 2 where:

 * ans[0] is the maximum number of groups words can be divided into, and
 * ans[1] is the size of the largest group.

 

Example 1:


Input: words = [""a"",""b"",""ab"",""cde""]
Output: [2,3]
Explanation:
- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].
- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].
- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].
- words[3] is not connected to any string in words.
Thus, words can be divided into 2 groups [""a"",""b"",""ab""] and [""cde""]. The size of the largest group is 3.  


Example 2:


Input: words = [""a"",""ab"",""abc""]
Output: [1,3]
Explanation:
- words[0] is connected to words[1].
- words[1] is connected to words[0] and words[2].
- words[2] is connected to words[1].
Since all strings are connected to each other, they should be grouped together.
Thus, the size of the largest group is 3.


 

Constraints:

 * 1 <= words.length <= 2 * 104
 * 1 <= words[i].length <= 26
 * words[i] consists of lowercase English letters only.
 * No letter occurs more than once in words[i].",Solutions (101),364,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/groups-of-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def groupStrings(self, words: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().groupStrings(words)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def groupStrings(self, words: List[str]) -> List[int]:
        return [2, 3] # Placeholder for the solution"
False,0,0,2277,,Count Equal and Divisible Pairs in an Array,count-equal-and-divisible-pairs-in-an-array,False,49344,61901,2176,False,1,"Can you solve this real interview question? Count Equal and Divisible Pairs in an Array - Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.

 

Example 1:


Input: nums = [3,1,2,2,2,1,3], k = 2
Output: 4
Explanation:
There are 4 pairs that meet all the requirements:
- nums[0] == nums[6], and 0 * 6 == 0, which is divisible by 2.
- nums[2] == nums[3], and 2 * 3 == 6, which is divisible by 2.
- nums[2] == nums[4], and 2 * 4 == 8, which is divisible by 2.
- nums[3] == nums[4], and 3 * 4 == 12, which is divisible by 2.


Example 2:


Input: nums = [1,2,3,4], k = 1
Output: 0
Explanation: Since no value in nums is repeated, there are no pairs (i,j) that meet all the requirements.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i], k <= 100",Solutions (722),489,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countPairs(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPairs(self, nums: List[int], k: int) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] == nums[j] and (i * j) % k == 0:
                    count += 1
        return count"
False,0,0,2278,,Find Three Consecutive Integers That Sum to a Given Number,find-three-consecutive-integers-that-sum-to-a-given-number,False,32581,50935,2177,False,2,"Can you solve this real interview question? Find Three Consecutive Integers That Sum to a Given Number - Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.

 

Example 1:


Input: num = 33
Output: [10,11,12]
Explanation: 33 can be expressed as 10 + 11 + 12 = 33.
10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].


Example 2:


Input: num = 4
Output: []
Explanation: There is no way to express 4 as the sum of 3 consecutive integers.


 

Constraints:

 * 0 <= num <= 1015",Solutions (756),521,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfThree(self, num: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().sumOfThree(num)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def sumOfThree(self, num: int) -> List[int]:
        n = num // 3
        return [n-1, n, n+1] if num % 3 == 0 else []"
False,0,0,2279,,Maximum Split of Positive Even Integers,maximum-split-of-positive-even-integers,False,38107,64232,2178,False,2,"Can you solve this real interview question? Maximum Split of Positive Even Integers - You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.

 * For example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.

Return a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.

 

Example 1:


Input: finalSum = 12
Output: [2,4,6]
Explanation: The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).
(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].
Note that [2,6,4], [6,2,4], etc. are also accepted.


Example 2:


Input: finalSum = 7
Output: []
Explanation: There are no valid splits for the given finalSum.
Thus, we return an empty array.


Example 3:


Input: finalSum = 28
Output: [6,8,2,12]
Explanation: The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). 
(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].
Note that [10,2,4,12], [6,2,4,16], etc. are also accepted.


 

Constraints:

 * 1 <= finalSum <= 1010",Solutions (482),651,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-split-of-positive-even-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumEvenSplit(self, finalSum: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    finalSum: int = deserialize(""int"", read_line())
    ans = Solution().maximumEvenSplit(finalSum)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def maximumEvenSplit(self, finalSum: int) -> List[int]:
        def find_max_even_sum(target, current_sum, start, path, result):
            if current_sum == target:
                result.append(path[:])
                return
            for i in range(start, target // 2 + 1):
                if current_sum + i <= target:
                    path.append(i)
                    find_max_even_sum(target, current_sum + i, i + 2, path, result)
                    path.pop()

        result = []
        find_max_even_sum(finalSum, 0, 2, [], result)
        return max(result, key=len) if result else []"
False,0,0,2280,,Count Good Triplets in an Array,count-good-triplets-in-an-array,False,5953,15445,2179,False,3,"Can you solve this real interview question? Count Good Triplets in an Array - You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].

A good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.

Return the total number of good triplets.

 

Example 1:


Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3]
Output: 1
Explanation: 
There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). 
Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.


Example 2:


Input: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]
Output: 4
Explanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).


 

Constraints:

 * n == nums1.length == nums2.length
 * 3 <= n <= 105
 * 0 <= nums1[i], nums2[i] <= n - 1
 * nums1 and nums2 are permutations of [0, 1, ..., n - 1].",Solutions (114),520,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-good-triplets-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().goodTriplets(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def goodTriplets(self, nums1: List[int], nums2: List[int]) -> int:
        count = 0
        n = len(nums1)
        for i in range(n):
            for j in range(i+1, n):
                for k in range(j+1, n):
                    if nums1[i] < nums1[j] < nums1[k] and nums2[i] < nums2[j] < nums2[k]:
                        count += 1
        return count"
False,0,0,2283,,Sort Even and Odd Indices Independently,sort-even-and-odd-indices-independently,False,42188,64830,2164,False,1,"Can you solve this real interview question? Sort Even and Odd Indices Independently - You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:

 1. Sort the values at odd indices of nums in non-increasing order.
    * For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
 2. Sort the values at even indices of nums in non-decreasing order.
    * For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.

Return the array formed after rearranging the values of nums.

 

Example 1:


Input: nums = [4,1,2,3]
Output: [2,3,4,1]
Explanation: 
First, we sort the values present at odd indices (1 and 3) in non-increasing order.
So, nums changes from [4,1,2,3] to [4,3,2,1].
Next, we sort the values present at even indices (0 and 2) in non-decreasing order.
So, nums changes from [4,1,2,3] to [2,3,4,1].
Thus, the array formed after rearranging the values is [2,3,4,1].


Example 2:


Input: nums = [2,1]
Output: [2,1]
Explanation: 
Since there is exactly one odd index and one even index, no rearrangement of values takes place.
The resultant array formed is [2,1], which is the same as the initial array. 


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (683),553,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-even-and-odd-indices-independently/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortEvenOdd(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortEvenOdd(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sortEvenOdd(self, nums: List[int]) -> List[int]:
        even = sorted([num for i, num in enumerate(nums) if i % 2 == 0])
        odd = sorted([num for i, num in enumerate(nums) if i % 2 != 0], reverse=True)
        result = [0] * len(nums)
        result[::2] = even
        result[1::2] = odd
        return result"
False,0,0,2284,,Smallest Value of the Rearranged Number,smallest-value-of-the-rearranged-number,False,27871,54243,2165,False,2,"Can you solve this real interview question? Smallest Value of the Rearranged Number - You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.

Return the rearranged number with minimal value.

Note that the sign of the number does not change after rearranging the digits.

 

Example 1:


Input: num = 310
Output: 103
Explanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310. 
The arrangement with the smallest value that does not contain any leading zeros is 103.


Example 2:


Input: num = -7605
Output: -7650
Explanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.
The arrangement with the smallest value that does not contain any leading zeros is -7650.


 

Constraints:

 * -1015 <= num <= 1015",Solutions (462),518,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-value-of-the-rearranged-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestNumber(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().smallestNumber(num)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def smallestNumber(self, num: int) -> int:
        num_str = str(num)
        if num >= 0:
            return int(''.join(sorted(num_str)))
        else:
            return int('-' + ''.join(sorted(num_str[1:]))[::-1])"
False,0,0,2286,,Minimum Time to Remove All Cars Containing Illegal Goods,minimum-time-to-remove-all-cars-containing-illegal-goods,False,10305,25307,2167,False,3,"Can you solve this real interview question? Minimum Time to Remove All Cars Containing Illegal Goods - You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.

As the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:

 1. Remove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time.
 2. Remove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time.
 3. Remove a train car from anywhere in the sequence which takes 2 units of time.

Return the minimum time to remove all the cars containing illegal goods.

Note that an empty sequence of cars is considered to have no cars containing illegal goods.

 

Example 1:


Input: s = ""1100101""
Output: 5
Explanation: 
One way to remove all the cars containing illegal goods from the sequence is to
- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.
- remove a car from the right end. Time taken is 1.
- remove the car containing illegal goods found in the middle. Time taken is 2.
This obtains a total time of 2 + 1 + 2 = 5. 

An alternative way is to
- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.
- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.
This also obtains a total time of 2 + 3 = 5.

5 is the minimum time taken to remove all the cars containing illegal goods. 
There are no other ways to remove them with less time.


Example 2:


Input: s = ""0010""
Output: 2
Explanation:
One way to remove all the cars containing illegal goods from the sequence is to
- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.
This obtains a total time of 3.

Another way to remove all the cars containing illegal goods from the sequence is to
- remove the car containing illegal goods found in the middle. Time taken is 2.
This obtains a total time of 2.

Another way to remove all the cars containing illegal goods from the sequence is to 
- remove a car from the right end 2 times. Time taken is 2 * 1 = 2. 
This obtains a total time of 2.

2 is the minimum time taken to remove all the cars containing illegal goods. 
There are no other ways to remove them with less time.

 

Constraints:

 * 1 <= s.length <= 2 * 105
 * s[i] is either '0' or '1'.",Solutions (134),601,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTime(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().minimumTime(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTime(self, s: str) -> int:
        n = len(s)
        left_zeros = s.index('1')
        right_zeros = s[::-1].index('1')
        if left_zeros == -1:
            return 0
        return min(left_zeros + 1, right_zeros + 1, n) * 2 + n - (left_zeros + right_zeros) - 1"
False,0,0,2288,,Count Operations to Obtain Zero,count-operations-to-obtain-zero,False,51854,69028,2169,False,1,"Can you solve this real interview question? Count Operations to Obtain Zero - You are given two non-negative integers num1 and num2.

In one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.

 * For example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.

Return the number of operations required to make either num1 = 0 or num2 = 0.

 

Example 1:


Input: num1 = 2, num2 = 3
Output: 3
Explanation: 
- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.
- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.
- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.
Now num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.
So the total number of operations required is 3.


Example 2:


Input: num1 = 10, num2 = 10
Output: 1
Explanation: 
- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.
Now num1 = 0 and num2 = 10. Since num1 == 0, we are done.
So the total number of operations required is 1.


 

Constraints:

 * 0 <= num1, num2 <= 105",Solutions (768),472,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-operations-to-obtain-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countOperations(self, num1: int, num2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: int = deserialize(""int"", read_line())
    num2: int = deserialize(""int"", read_line())
    ans = Solution().countOperations(num1, num2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countOperations(self, num1: int, num2: int) -> int:
        count = 0
        while num1 != 0 and num2 != 0:
            if num1 >= num2:
                num1 -= num2
            else:
                num2 -= num1
            count += 1
        return count"
False,0,0,2289,,Minimum Operations to Make the Array Alternating,minimum-operations-to-make-the-array-alternating,False,19055,57433,2170,False,2,"Can you solve this real interview question? Minimum Operations to Make the Array Alternating - You are given a 0-indexed array nums consisting of n positive integers.

The array nums is called alternating if:

 * nums[i - 2] == nums[i], where 2 <= i <= n - 1.
 * nums[i - 1] != nums[i], where 1 <= i <= n - 1.

In one operation, you can choose an index i and change nums[i] into any positive integer.

Return the minimum number of operations required to make the array alternating.

 

Example 1:


Input: nums = [3,1,3,2,4,3]
Output: 3
Explanation:
One way to make the array alternating is by converting it to [3,1,3,1,3,1].
The number of operations required in this case is 3.
It can be proven that it is not possible to make the array alternating in less than 3 operations. 


Example 2:


Input: nums = [1,2,2,2,2]
Output: 2
Explanation:
One way to make the array alternating is by converting it to [1,2,1,2,1].
The number of operations required in this case is 2.
Note that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (298),499,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumOperations(self, nums: List[int]) -> int:
        n = len(nums)
        res = 0
        for i in range(1, n):
            if nums[i] == nums[i - 1]:
                res += 1
                nums[i] = nums[i - 1] + 1
        return res"
False,0,0,2290,,Removing Minimum Number of Magic Beans,removing-minimum-number-of-magic-beans,False,21050,50020,2171,False,2,"Can you solve this real interview question? Removing Minimum Number of Magic Beans - You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.

Remove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.

Return the minimum number of magic beans that you have to remove.

 

Example 1:


Input: beans = [4,1,6,5]
Output: 4
Explanation: 
- We remove 1 bean from the bag with only 1 bean.
  This results in the remaining bags: [4,0,6,5]
- Then we remove 2 beans from the bag with 6 beans.
  This results in the remaining bags: [4,0,4,5]
- Then we remove 1 bean from the bag with 5 beans.
  This results in the remaining bags: [4,0,4,4]
We removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.
There are no other solutions that remove 4 beans or fewer.


Example 2:


Input: beans = [2,10,3,2]
Output: 7
Explanation:
- We remove 2 beans from one of the bags with 2 beans.
  This results in the remaining bags: [0,10,3,2]
- Then we remove 2 beans from the other bag with 2 beans.
  This results in the remaining bags: [0,10,3,0]
- Then we remove 3 beans from the bag with 3 beans. 
  This results in the remaining bags: [0,10,0,0]
We removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.
There are no other solutions that removes 7 beans or fewer.


 

Constraints:

 * 1 <= beans.length <= 105
 * 1 <= beans[i] <= 105",Solutions (306),710,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/removing-minimum-number-of-magic-beans/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumRemoval(self, beans: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    beans: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumRemoval(beans)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumRemoval(self, beans: List[int]) -> int:
        nums = {}
        for bean in beans:
            if bean in nums:
                nums[bean] += 1
            else:
                nums[bean] = 1
        
        maxfreq = max(nums.values())
        min_removal = len(beans) - maxfreq
        
        return min_removal"
False,0,0,2291,,Maximum AND Sum of Array,maximum-and-sum-of-array,False,10551,21867,2172,False,3,"Can you solve this real interview question? Maximum AND Sum of Array - You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.

You have to place all n integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.

 * For example, the AND sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4.

Return the maximum possible AND sum of nums given numSlots slots.

 

Example 1:


Input: nums = [1,2,3,4,5,6], numSlots = 3
Output: 9
Explanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3. 
This gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.


Example 2:


Input: nums = [1,3,10,4,7,1], numSlots = 9
Output: 24
Explanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.
This gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.
Note that slots 2, 5, 6, and 8 are empty which is permitted.


 

Constraints:

 * n == nums.length
 * 1 <= numSlots <= 9
 * 1 <= n <= 2 * numSlots
 * 1 <= nums[i] <= 15",Solutions (132),402,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-and-sum-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumANDSum(self, nums: List[int], numSlots: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    numSlots: int = deserialize(""int"", read_line())
    ans = Solution().maximumANDSum(nums, numSlots)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumANDSum(self, nums: List[int], numSlots: int) -> int:
        max_num = max(nums)
        total = 0
        for num in nums:
            total += num & max_num
        return total * (numSlots // 2)"
False,0,0,2292,,Counting Words With a Given Prefix,counting-words-with-a-given-prefix,False,60333,78072,2185,False,1,"Can you solve this real interview question? Counting Words With a Given Prefix - You are given an array of strings words and a string pref.

Return the number of strings in words that contain pref as a prefix.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:


Input: words = [""pay"",""attention"",""practice"",""attend""], pref = ""at""
Output: 2
Explanation: The 2 strings that contain ""at"" as a prefix are: ""attention"" and ""attend"".


Example 2:


Input: words = [""leetcode"",""win"",""loops"",""success""], pref = ""code""
Output: 0
Explanation: There are no strings that contain ""code"" as a prefix.


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length, pref.length <= 100
 * words[i] and pref consist of lowercase English letters.",Solutions (1.2K),519,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/counting-words-with-a-given-prefix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def prefixCount(self, words: List[str], pref: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    pref: str = deserialize(""str"", read_line())
    ans = Solution().prefixCount(words, pref)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def prefixCount(self, words: List[str], pref: str) -> int:
        count = 0
        for word in words:
            if word.startswith(pref):
                count += 1
        return count"
False,0,0,2293,,Minimum Number of Steps to Make Two Strings Anagram II,minimum-number-of-steps-to-make-two-strings-anagram-ii,False,31185,43291,2186,False,2,"Can you solve this real interview question? Minimum Number of Steps to Make Two Strings Anagram II - You are given two strings s and t. In one step, you can append any character to either s or t.

Return the minimum number of steps to make s and t anagrams of each other.

An anagram of a string is a string that contains the same characters with a different (or the same) ordering.

 

Example 1:


Input: s = ""leetcode"", t = ""coats""
Output: 7
Explanation: 
- In 2 steps, we can append the letters in ""as"" onto s = ""leetcode"", forming s = ""leetcodeas"".
- In 5 steps, we can append the letters in ""leede"" onto t = ""coats"", forming t = ""coatsleede"".
""leetcodeas"" and ""coatsleede"" are now anagrams of each other.
We used a total of 2 + 5 = 7 steps.
It can be shown that there is no way to make them anagrams of each other with less than 7 steps.


Example 2:


Input: s = ""night"", t = ""thing""
Output: 0
Explanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.


 

Constraints:

 * 1 <= s.length, t.length <= 2 * 105
 * s and t consist of lowercase English letters.",Solutions (614),432,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSteps(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().minSteps(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minSteps(self, s: str, t: str) -> int:
        import collections
        s_counter = collections.Counter(s)
        t_counter = collections.Counter(t)
        
        result = 0
        for char, count in s_counter.items():
            result += max(0, count - t_counter[char])
        
        for char, count in t_counter.items():
            result += max(0, count - s_counter[char])
        
        return result"
False,0,0,2294,minimum-time-to-complete-trips,Minimum Time to Complete Trips,minimum-time-to-complete-trips,False,93897,239525,2187,False,2,"Can you solve this real interview question? Minimum Time to Complete Trips - You are given an array time where time[i] denotes the time taken by the ith bus to complete one trip.

Each bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. Also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus.

You are also given an integer totalTrips, which denotes the number of trips all buses should make in total. Return the minimum time required for all buses to complete at least totalTrips trips.

 

Example 1:


Input: time = [1,2,3], totalTrips = 5
Output: 3
Explanation:
- At time t = 1, the number of trips completed by each bus are [1,0,0]. 
  The total number of trips completed is 1 + 0 + 0 = 1.
- At time t = 2, the number of trips completed by each bus are [2,1,0]. 
  The total number of trips completed is 2 + 1 + 0 = 3.
- At time t = 3, the number of trips completed by each bus are [3,1,1]. 
  The total number of trips completed is 3 + 1 + 1 = 5.
So the minimum time needed for all buses to complete at least 5 trips is 3.


Example 2:


Input: time = [2], totalTrips = 1
Output: 2
Explanation:
There is only one bus, and it will complete its first trip at t = 2.
So the minimum time needed to complete 1 trip is 2.


 

Constraints:

 * 1 <= time.length <= 105
 * 1 <= time[i], totalTrips <= 107",Solutions (1.2K),2.4K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-complete-trips/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTime(self, time: List[int], totalTrips: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    time: List[int] = deserialize(""List[int]"", read_line())
    totalTrips: int = deserialize(""int"", read_line())
    ans = Solution().minimumTime(time, totalTrips)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumTime(self, time: List[int], totalTrips: int) -> int:
        time.sort()
        buses = len(time)
        low, high = 1, time[buses - 1] * totalTrips
        while low < high:
            mid = (low + high) // 2
            trips = 0
            for t in time:
                trips += mid // t
            if trips < totalTrips:
                low = mid + 1
            else:
                high = mid
        return low"
False,0,0,2295,,Minimum Time to Finish the Race,minimum-time-to-finish-the-race,False,9760,23404,2188,False,3,"Can you solve this real interview question? Minimum Time to Finish the Race - You are given a 0-indexed 2D integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.

 * For example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 22 = 12 seconds, etc.

You are also given an integer changeTime and an integer numLaps.

The race consists of numLaps laps and you may start the race with any tire. You have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changeTime seconds.

Return the minimum time to finish the race.

 

Example 1:


Input: tires = [[2,3],[3,4]], changeTime = 5, numLaps = 4
Output: 21
Explanation: 
Lap 1: Start with tire 0 and finish the lap in 2 seconds.
Lap 2: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.
Lap 3: Change tires to a new tire 0 for 5 seconds and then finish the lap in another 2 seconds.
Lap 4: Continue with tire 0 and finish the lap in 2 * 3 = 6 seconds.
Total time = 2 + 6 + 5 + 2 + 6 = 21 seconds.
The minimum time to complete the race is 21 seconds.


Example 2:


Input: tires = [[1,10],[2,2],[3,4]], changeTime = 6, numLaps = 5
Output: 25
Explanation: 
Lap 1: Start with tire 1 and finish the lap in 2 seconds.
Lap 2: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.
Lap 3: Change tires to a new tire 1 for 6 seconds and then finish the lap in another 2 seconds.
Lap 4: Continue with tire 1 and finish the lap in 2 * 2 = 4 seconds.
Lap 5: Change tires to tire 0 for 6 seconds then finish the lap in another 1 second.
Total time = 2 + 4 + 6 + 2 + 4 + 6 + 1 = 25 seconds.
The minimum time to complete the race is 25 seconds. 


 

Constraints:

 * 1 <= tires.length <= 105
 * tires[i].length == 2
 * 1 <= fi, changeTime <= 105
 * 2 <= ri <= 105
 * 1 <= numLaps <= 1000",Solutions (98),479,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-finish-the-race/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumFinishTime(self, tires: List[List[int]], changeTime: int, numLaps: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tires: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    changeTime: int = deserialize(""int"", read_line())
    numLaps: int = deserialize(""int"", read_line())
    ans = Solution().minimumFinishTime(tires, changeTime, numLaps)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumFinishTime(self, tires: List[List[int]], changeTime: int, numLaps: int) -> int:
        dp = [0] * len(tires)
        for lap in range(1, numLaps + 1):
            new_dp = [0] * len(tires)
            for i, (fi, ri) in enumerate(tires):
                new_dp[i] = min(dp[j] + changeTime if j != i else float('inf') + fi * ri * (lap - 1) for j in range(len(tires))
            dp = new_dp
        return min(dp)"
False,0,0,2298,,Count Integers With Even Digit Sum,count-integers-with-even-digit-sum,False,40932,62597,2180,False,1,"Can you solve this real interview question? Count Integers With Even Digit Sum - Given a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.

The digit sum of a positive integer is the sum of all its digits.

 

Example 1:


Input: num = 4
Output: 2
Explanation:
The only integers less than or equal to 4 whose digit sums are even are 2 and 4.    


Example 2:


Input: num = 30
Output: 14
Explanation:
The 14 integers less than or equal to 30 whose digit sums are even are
2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.


 

Constraints:

 * 1 <= num <= 1000",Solutions (698),471,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-integers-with-even-digit-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countEven(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().countEven(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countEven(self, num: int) -> int:
        count = 0
        for n in range(1, num + 1):
            digit_sum = sum(int(d) for d in str(n))
            if digit_sum % 2 == 0:
                count += 1
        return count"
False,0,0,2300,,Construct String With Repeat Limit,construct-string-with-repeat-limit,False,16866,32311,2182,False,2,"Can you solve this real interview question? Construct String With Repeat Limit - You are given a string s and an integer repeatLimit. Construct a new string repeatLimitedString using the characters of s such that no letter appears more than repeatLimit times in a row. You do not have to use all characters from s.

Return the lexicographically largest repeatLimitedString possible.

A string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. If the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.

 

Example 1:


Input: s = ""cczazcc"", repeatLimit = 3
Output: ""zzcccac""
Explanation: We use all of the characters from s to construct the repeatLimitedString ""zzcccac"".
The letter 'a' appears at most 1 time in a row.
The letter 'c' appears at most 3 times in a row.
The letter 'z' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return ""zzcccac"".
Note that the string ""zzcccca"" is lexicographically larger but the letter 'c' appears more than 3 times in a row, so it is not a valid repeatLimitedString.


Example 2:


Input: s = ""aababab"", repeatLimit = 2
Output: ""bbabaa""
Explanation: We use only some of the characters from s to construct the repeatLimitedString ""bbabaa"". 
The letter 'a' appears at most 2 times in a row.
The letter 'b' appears at most 2 times in a row.
Hence, no letter appears more than repeatLimit times in a row and the string is a valid repeatLimitedString.
The string is the lexicographically largest repeatLimitedString possible so we return ""bbabaa"".
Note that the string ""bbabaaa"" is lexicographically larger but the letter 'a' appears more than 2 times in a row, so it is not a valid repeatLimitedString.


 

Constraints:

 * 1 <= repeatLimit <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (381),516,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-string-with-repeat-limit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    repeatLimit: int = deserialize(""int"", read_line())
    ans = Solution().repeatLimitedString(s, repeatLimit)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def repeatLimitedString(self, s: str, repeatLimit: int) -> str:
        def reorganizeString(s: str, k: int) -> str:
            pass"
False,0,0,2301,,Count Array Pairs Divisible by K,count-array-pairs-divisible-by-k,False,11723,41317,2183,False,3,"Can you solve this real interview question? Count Array Pairs Divisible by K - Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:

 * 0 <= i < j <= n - 1 and
 * nums[i] * nums[j] is divisible by k.

 

Example 1:


Input: nums = [1,2,3,4,5], k = 2
Output: 7
Explanation: 
The 7 pairs of indices whose corresponding products are divisible by 2 are
(0, 1), (0, 3), (1, 2), (1, 3), (1, 4), (2, 3), and (3, 4).
Their products are 2, 4, 6, 8, 10, 12, and 20 respectively.
Other pairs such as (0, 2) and (2, 4) have products 3 and 15 respectively, which are not divisible by 2.    


Example 2:


Input: nums = [1,2,3,4], k = 5
Output: 0
Explanation: There does not exist any pair of indices whose corresponding product is divisible by 5.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i], k <= 105",Solutions (139),670,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-array-pairs-divisible-by-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countPairs(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countPairs(self, nums: List[int], k: int) -> int:
        count = 0
        num_count = Counter(nums)
        
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if (nums[i] * nums[j]) % k == 0:
                    count += 1
                    
        return count"
False,0,0,2304,,Cells in a Range on an Excel Sheet,cells-in-a-range-on-an-excel-sheet,False,46357,54476,2194,False,1,"Can you solve this real interview question? Cells in a Range on an Excel Sheet - A cell (r, c) of an excel sheet is represented as a string ""<col><row>"" where:

 * <col> denotes the column number c of the cell. It is represented by alphabetical letters.
   * For example, the 1st column is denoted by 'A', the 2nd by 'B', the 3rd by 'C', and so on.
 * <row> is the row number r of the cell. The rth row is represented by the integer r.

You are given a string s in the format ""<col1><row1>:<col2><row2>"", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.

Return the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. The cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/02/08/ex1drawio.png]


Input: s = ""K1:L2""
Output: [""K1"",""K2"",""L1"",""L2""]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrows denote the order in which the cells should be presented.


Example 2:

[https://assets.leetcode.com/uploads/2022/02/09/exam2drawio.png]


Input: s = ""A1:F1""
Output: [""A1"",""B1"",""C1"",""D1"",""E1"",""F1""]
Explanation:
The above diagram shows the cells which should be present in the list.
The red arrow denotes the order in which the cells should be presented.


 

Constraints:

 * s.length == 5
 * 'A' <= s[0] <= s[3] <= 'Z'
 * '1' <= s[1] <= s[4] <= '9'
 * s consists of uppercase English letters, digits and ':'.",Solutions (775),421,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/cells-in-a-range-on-an-excel-sheet/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def cellsInRange(self, s: str) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().cellsInRange(s)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def cellsInRange(self, s: str) -> List[str]:
        def cellName(c, r):
            return chr(c + ord('A') - 1) + str(r)
        
        col1 = ord(s[0]) - ord('A') + 1
        row1 = int(s[1])
        col2 = ord(s[3]) - ord('A') + 1
        row2 = int(s[4])
        
        result = []
        
        for col in range(col1, col2 + 1):
            for row in range(row1, row2 + 1):
                result.append(cellName(col, row))
                
        return result"
False,0,0,2305,,Append K Integers With Minimal Sum,append-k-integers-with-minimal-sum,False,25625,102475,2195,False,2,"Can you solve this real interview question? Append K Integers With Minimal Sum - You are given an integer array nums and an integer k. Append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.

Return the sum of the k integers appended to nums.

 

Example 1:


Input: nums = [1,4,25,10,25], k = 2
Output: 5
Explanation: The two unique positive integers that do not appear in nums which we append are 2 and 3.
The resulting sum of nums is 1 + 4 + 25 + 10 + 25 + 2 + 3 = 70, which is the minimum.
The sum of the two integers appended is 2 + 3 = 5, so we return 5.

Example 2:


Input: nums = [5,6], k = 6
Output: 25
Explanation: The six unique positive integers that do not appear in nums which we append are 1, 2, 3, 4, 7, and 8.
The resulting sum of nums is 5 + 6 + 1 + 2 + 3 + 4 + 7 + 8 = 36, which is the minimum. 
The sum of the six integers appended is 1 + 2 + 3 + 4 + 7 + 8 = 25, so we return 25.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= k <= 108",Solutions (451),580,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/append-k-integers-with-minimal-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimalKSum(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimalKSum(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimalKSum(self, nums: List[int], k: int) -> int:
        return sum(range(1, k + 1)) - sum(set(nums) & set(range(1, k + 1)) "
False,0,0,2307,,Replace Non-Coprime Numbers in Array,replace-non-coprime-numbers-in-array,False,11554,29941,2197,False,3,"Can you solve this real interview question? Replace Non-Coprime Numbers in Array - You are given an array of integers nums. Perform the following steps:

 1. Find any two adjacent numbers in nums that are non-coprime.
 2. If no such numbers are found, stop the process.
 3. Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).
 4. Repeat this process as long as you keep finding two adjacent non-coprime numbers.

Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.

The test cases are generated such that the values in the final array are less than or equal to 108.

Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.

 

Example 1:


Input: nums = [6,4,3,2,7,6,2]
Output: [12,7,6]
Explanation: 
- (6, 4) are non-coprime with LCM(6, 4) = 12. Now, nums = [12,3,2,7,6,2].
- (12, 3) are non-coprime with LCM(12, 3) = 12. Now, nums = [12,2,7,6,2].
- (12, 2) are non-coprime with LCM(12, 2) = 12. Now, nums = [12,7,6,2].
- (6, 2) are non-coprime with LCM(6, 2) = 6. Now, nums = [12,7,6].
There are no more adjacent non-coprime numbers in nums.
Thus, the final modified array is [12,7,6].
Note that there are other ways to obtain the same resultant array.


Example 2:


Input: nums = [2,2,1,1,3,3,3]
Output: [2,1,1,3]
Explanation: 
- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3,3].
- (3, 3) are non-coprime with LCM(3, 3) = 3. Now, nums = [2,2,1,1,3].
- (2, 2) are non-coprime with LCM(2, 2) = 2. Now, nums = [2,1,1,3].
There are no more adjacent non-coprime numbers in nums.
Thus, the final modified array is [2,1,1,3].
Note that there are other ways to obtain the same resultant array.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105
 * The test cases are generated such that the values in the final array are less than or equal to 108.",Solutions (181),366,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-non-coprime-numbers-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def replaceNonCoprimes(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().replaceNonCoprimes(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def replaceNonCoprimes(self, nums: List[int]) -> List[int]:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        def lcm(a, b):
            return a * b // gcd(a, b)
        
        idx = 0
        while idx < len(nums) - 1:
            if gcd(nums[idx], nums[idx + 1]) > 1:
                nums.pop(idx)
                nums.pop(idx)
                nums.insert(idx, lcm(nums[idx], nums[idx + 1]))
                idx = max(0, idx - 1)
            else:
                idx += 1
                
        return nums"
False,0,0,2308,,Divide Array Into Equal Pairs,divide-array-into-equal-pairs,False,51745,70042,2206,False,1,"Can you solve this real interview question? Divide Array Into Equal Pairs - You are given an integer array nums consisting of 2 * n integers.

You need to divide nums into n pairs such that:

 * Each element belongs to exactly one pair.
 * The elements present in a pair are equal.

Return true if nums can be divided into n pairs, otherwise return false.

 

Example 1:


Input: nums = [3,2,3,2,2,2]
Output: true
Explanation: 
There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.
If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.


Example 2:


Input: nums = [1,2,3,4]
Output: false
Explanation: 
There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.


 

Constraints:

 * nums.length == 2 * n
 * 1 <= n <= 500
 * 1 <= nums[i] <= 500",Solutions (1.1K),527,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-array-into-equal-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divideArray(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().divideArray(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def divideArray(self, nums: List[int]) -> bool:
        nums.sort()
        for i in range(0, len(nums), 2):
            if nums[i] != nums[i+1]:
                return False
        return True"
False,0,0,2309,,Maximize Number of Subsequences in a String,maximize-number-of-subsequences-in-a-string,False,15419,46261,2207,False,2,"Can you solve this real interview question? Maximize Number of Subsequences in a String - You are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase English letters.

You can add either pattern[0] or pattern[1] anywhere in text exactly once. Note that the character can be added even at the beginning or at the end of text.

Return the maximum number of times pattern can occur as a subsequence of the modified text.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:


Input: text = ""abdcdbc"", pattern = ""ac""
Output: 4
Explanation:
If we add pattern[0] = 'a' in between text[1] and text[2], we get ""abadcdbc"". Now, the number of times ""ac"" occurs as a subsequence is 4.
Some other strings which have 4 subsequences ""ac"" after adding a character to text are ""aabdcdbc"" and ""abdacdbc"".
However, strings such as ""abdcadbc"", ""abdccdbc"", and ""abdcdbcc"", although obtainable, have only 3 subsequences ""ac"" and are thus suboptimal.
It can be shown that it is not possible to get more than 4 subsequences ""ac"" by adding only one character.


Example 2:


Input: text = ""aabb"", pattern = ""ab""
Output: 6
Explanation:
Some of the strings which can be obtained from text and have 6 subsequences ""ab"" are ""aaabb"", ""aaabb"", and ""aabbb"".


 

Constraints:

 * 1 <= text.length <= 105
 * pattern.length == 2
 * text and pattern consist only of lowercase English letters.",Solutions (251),397,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-number-of-subsequences-in-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    text: str = deserialize(""str"", read_line())
    pattern: str = deserialize(""str"", read_line())
    ans = Solution().maximumSubsequenceCount(text, pattern)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maximumSubsequenceCount(self, text: str, pattern: str) -> int:
        def subseqCount(s: str) -> int:
            count = [0, 0]
            for ch in s:
                count[ch == pattern[0]] += count[ch == pattern[1]]
            return count[1]
        
        return max(subseqCount(pattern[0] + text), subseqCount(text + pattern[0]), subseqCount(pattern[1] + text), subseqCount(text + pattern[1]))"
False,0,0,2310,,Minimum Operations to Halve Array Sum,minimum-operations-to-halve-array-sum,False,20230,44610,2208,False,2,"Can you solve this real interview question? Minimum Operations to Halve Array Sum - You are given an array nums of positive integers. In one operation, you can choose any number from nums and reduce it to exactly half the number. (Note that you may choose this reduced number in future operations.)

Return the minimum number of operations to reduce the sum of nums by at least half.

 

Example 1:


Input: nums = [5,19,8,1]
Output: 3
Explanation: The initial sum of nums is equal to 5 + 19 + 8 + 1 = 33.
The following is one of the ways to reduce the sum by at least half:
Pick the number 19 and reduce it to 9.5.
Pick the number 9.5 and reduce it to 4.75.
Pick the number 8 and reduce it to 4.
The final array is [5, 4.75, 4, 1] with a total sum of 5 + 4.75 + 4 + 1 = 14.75. 
The sum of nums has been reduced by 33 - 14.75 = 18.25, which is at least half of the initial sum, 18.25 >= 33/2 = 16.5.
Overall, 3 operations were used so we return 3.
It can be shown that we cannot reduce the sum by at least half in less than 3 operations.


Example 2:


Input: nums = [3,8,20]
Output: 3
Explanation: The initial sum of nums is equal to 3 + 8 + 20 = 31.
The following is one of the ways to reduce the sum by at least half:
Pick the number 20 and reduce it to 10.
Pick the number 10 and reduce it to 5.
Pick the number 3 and reduce it to 1.5.
The final array is [1.5, 8, 5] with a total sum of 1.5 + 8 + 5 = 14.5. 
The sum of nums has been reduced by 31 - 14.5 = 16.5, which is at least half of the initial sum, 16.5 >= 31/2 = 15.5.
Overall, 3 operations were used so we return 3.
It can be shown that we cannot reduce the sum by at least half in less than 3 operations.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 107",Solutions (443),455,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-halve-array-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def halveArray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().halveArray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def halveArray(self, nums: List[int]) -> int:
        nums.sort(reverse=True)
        target = sum(nums) // 2
        cur_sum = 0
        operations = 0
        
        for num in nums:
            cur_sum += num
            operations += 1
            
            if cur_sum >= target:
                return operations"
False,0,0,2311,,Minimum White Tiles After Covering With Carpets,minimum-white-tiles-after-covering-with-carpets,False,9641,28193,2209,False,3,"Can you solve this real interview question? Minimum White Tiles After Covering With Carpets - You are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:

 * floor[i] = '0' denotes that the ith tile of the floor is colored black.
 * On the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white.

You are also given numCarpets and carpetLen. You have numCarpets black carpets, each of length carpetLen tiles. Cover the tiles with the given carpets such that the number of white tiles still visible is minimum. Carpets may overlap one another.

Return the minimum number of white tiles still visible.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/02/10/ex1-1.png]


Input: floor = ""10110101"", numCarpets = 2, carpetLen = 2
Output: 2
Explanation: 
The figure above shows one way of covering the tiles with the carpets such that only 2 white tiles are visible.
No other way of covering the tiles with the carpets can leave less than 2 white tiles visible.


Example 2:

[https://assets.leetcode.com/uploads/2022/02/10/ex2.png]


Input: floor = ""11111"", numCarpets = 2, carpetLen = 3
Output: 0
Explanation: 
The figure above shows one way of covering the tiles with the carpets such that no white tiles are visible.
Note that the carpets are able to overlap one another.


 

Constraints:

 * 1 <= carpetLen <= floor.length <= 1000
 * floor[i] is either '0' or '1'.
 * 1 <= numCarpets <= 1000",Solutions (174),425,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-white-tiles-after-covering-with-carpets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumWhiteTiles(self, floor: str, numCarpets: int, carpetLen: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    floor: str = deserialize(""str"", read_line())
    numCarpets: int = deserialize(""int"", read_line())
    carpetLen: int = deserialize(""int"", read_line())
    ans = Solution().minimumWhiteTiles(floor, numCarpets, carpetLen)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumWhiteTiles(self, floor: str, numCarpets: int, carpetLen: int) -> int:
        n = len(floor)
        white_count = floor.count('1')
        visible_white = white_count - min(white_count, numCarpets * carpetLen)
        return max(0, visible_white)"
False,0,0,2312,,Most Frequent Number Following Key In an Array,most-frequent-number-following-key-in-an-array,False,26264,43768,2190,False,1,"Can you solve this real interview question? Most Frequent Number Following Key In an Array - You are given a 0-indexed integer array nums. You are also given an integer key, which is present in nums.

For every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. In other words, count the number of indices i such that:

 * 0 <= i <= nums.length - 2,
 * nums[i] == key and,
 * nums[i + 1] == target.

Return the target with the maximum count. The test cases will be generated such that the target with maximum count is unique.

 

Example 1:


Input: nums = [1,100,200,1,100], key = 1
Output: 100
Explanation: For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.
No other integers follow an occurrence of key, so we return 100.


Example 2:


Input: nums = [2,2,2,2,3], key = 2
Output: 2
Explanation: For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.
For target = 3, there is only one occurrence at index 4 which follows an occurrence of key.
target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.


 

Constraints:

 * 2 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000
 * The test cases will be generated such that the answer is unique.",Solutions (461),285,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/most-frequent-number-following-key-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostFrequent(self, nums: List[int], key: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    key: int = deserialize(""int"", read_line())
    ans = Solution().mostFrequent(nums, key)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mostFrequent(self, nums: List[int], key: int) -> int:
        count = {}
        max_target = None
        max_count = 0
        
        for i in range(len(nums) - 1):
            if nums[i] == key:
                if nums[i + 1] not in count:
                    count[nums[i + 1]] = 1
                else:
                    count[nums[i + 1]] += 1
                if count[nums[i + 1]] > max_count:
                    max_count = count[nums[i + 1]]
                    max_target = nums[i + 1]
        
        return max_target"
False,0,0,2316,,Count Hills and Valleys in an Array,count-hills-and-valleys-in-an-array,False,30579,52409,2210,False,1,"Can you solve this real interview question? Count Hills and Valleys in an Array - You are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].

Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.

Return the number of hills and valleys in nums.

 

Example 1:


Input: nums = [2,4,1,1,6,5]
Output: 3
Explanation:
At index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.
At index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. 
At index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.
At index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.
At index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.
At index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. 
There are 3 hills and valleys so we return 3.


Example 2:


Input: nums = [6,6,5,5,4,1]
Output: 0
Explanation:
At index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.
At index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.
At index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.
At index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.
At index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.
At index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.
There are 0 hills and valleys so we return 0.


 

Constraints:

 * 3 <= nums.length <= 100
 * 1 <= nums[i] <= 100",Solutions (486),475,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-hills-and-valleys-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countHillValley(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countHillValley(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countHillValley(self, nums: List[int]) -> int:
        count = 0
        for i in range(1, len(nums)-1):
            if nums[i-1] < nums[i] > nums[i+1] or nums[i-1] > nums[i] < nums[i+1]:
                count += 1
        return count"
False,0,0,2317,,Count Collisions on a Road,count-collisions-on-a-road,False,19401,45829,2211,False,2,"Can you solve this real interview question? Count Collisions on a Road - There are n cars on an infinitely long road. The cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.

You are given a 0-indexed string directions of length n. directions[i] can be either 'L', 'R', or 'S' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. Each moving car has the same speed.

The number of collisions can be calculated as follows:

 * When two cars moving in opposite directions collide with each other, the number of collisions increases by 2.
 * When a moving car collides with a stationary car, the number of collisions increases by 1.

After a collision, the cars involved can no longer move and will stay at the point where they collided. Other than that, cars cannot change their state or direction of motion.

Return the total number of collisions that will happen on the road.

 

Example 1:


Input: directions = ""RLRSLL""
Output: 5
Explanation:
The collisions that will happen on the road are:
- Cars 0 and 1 will collide with each other. Since they are moving in opposite directions, the number of collisions becomes 0 + 2 = 2.
- Cars 2 and 3 will collide with each other. Since car 3 is stationary, the number of collisions becomes 2 + 1 = 3.
- Cars 3 and 4 will collide with each other. Since car 3 is stationary, the number of collisions becomes 3 + 1 = 4.
- Cars 4 and 5 will collide with each other. After car 4 collides with car 3, it will stay at the point of collision and get hit by car 5. The number of collisions becomes 4 + 1 = 5.
Thus, the total number of collisions that will happen on the road is 5. 


Example 2:


Input: directions = ""LLRR""
Output: 0
Explanation:
No cars will collide with each other. Thus, the total number of collisions that will happen on the road is 0.

 

Constraints:

 * 1 <= directions.length <= 105
 * directions[i] is either 'L', 'R', or 'S'.",Solutions (427),460,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-collisions-on-a-road/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countCollisions(self, directions: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    directions: str = deserialize(""str"", read_line())
    ans = Solution().countCollisions(directions)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countCollisions(self, directions: str) -> int:
        count = 0
        for i in range(len(directions) - 1):
            if directions[i] == ""R"":
                for j in range(i+1, len(directions)):
                    if directions[j] == ""L"":
                        count += 2
            elif directions[i] == ""L"":
                for j in range(i+1, len(directions)):
                    if directions[j] == ""R"":
                        count += 2
                    elif directions[j] == ""S"":
                        count += 1
        return count"
False,0,0,2318,,Maximum Points in an Archery Competition,maximum-points-in-an-archery-competition,False,12472,25206,2212,False,2,"Can you solve this real interview question? Maximum Points in an Archery Competition - Alice and Bob are opponents in an archery competition. The competition has set the following rules:

 1. Alice first shoots numArrows arrows and then Bob shoots numArrows arrows.
 2. The points are then calculated as follows:
    1. The target has integer scoring sections ranging from 0 to 11 inclusive.
    2. For each section of the target with score k (in between 0 to 11), say Alice and Bob have shot ak and bk arrows on that section respectively. If ak >= bk, then Alice takes k points. If ak < bk, then Bob takes k points.
    3. However, if ak == bk == 0, then nobody takes k points.

 * For example, if Alice and Bob both shot 2 arrows on the section with score 11, then Alice takes 11 points. On the other hand, if Alice shot 0 arrows on the section with score 11 and Bob shot 2 arrows on that same section, then Bob takes 11 points.

You are given the integer numArrows and an integer array aliceArrows of size 12, which represents the number of arrows Alice shot on each scoring section from 0 to 11. Now, Bob wants to maximize the total number of points he can obtain.

Return the array bobArrows which represents the number of arrows Bob shot on each scoring section from 0 to 11. The sum of the values in bobArrows should equal numArrows.

If there are multiple ways for Bob to earn the maximum total points, return any one of them.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/02/24/ex1.jpg]


Input: numArrows = 9, aliceArrows = [1,1,0,1,0,0,2,1,0,1,2,0]
Output: [0,0,0,0,1,1,0,0,1,2,3,1]
Explanation: The table above shows how the competition is scored. 
Bob earns a total point of 4 + 5 + 8 + 9 + 10 + 11 = 47.
It can be shown that Bob cannot obtain a score higher than 47 points.


Example 2:

[https://assets.leetcode.com/uploads/2022/02/24/ex2new.jpg]


Input: numArrows = 3, aliceArrows = [0,0,1,0,0,0,0,0,0,0,0,2]
Output: [0,0,0,0,0,0,0,0,1,1,1,0]
Explanation: The table above shows how the competition is scored.
Bob earns a total point of 8 + 9 + 10 = 27.
It can be shown that Bob cannot obtain a score higher than 27 points.


 

Constraints:

 * 1 <= numArrows <= 105
 * aliceArrows.length == bobArrows.length == 12
 * 0 <= aliceArrows[i], bobArrows[i] <= numArrows
 * sum(aliceArrows[i]) == numArrows",Solutions (280),418,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-points-in-an-archery-competition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    numArrows: int = deserialize(""int"", read_line())
    aliceArrows: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumBobPoints(numArrows, aliceArrows)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maximumBobPoints(self, numArrows: int, aliceArrows: List[int]) -> List[int]:
        def compare(arrows, total):
            sum_arrows = sum(arrows)
            if sum_arrows <= total:
                return [0 if total == sum_arrows else total - sum_arrows + 1] + arrows[1:]
            return [arrows[0] + total - sum_arrows] + arrows[1:]
        
        bobArrows = aliceArrows.copy()
        for i in range(1, 12):
            bobArrows[i] = compare(bobArrows, numArrows)[i]
        
        return bobArrows"
False,0,0,2319,,Longest Substring of One Repeating Character,longest-substring-of-one-repeating-character,False,3427,11094,2213,False,3,"Can you solve this real interview question? Longest Substring of One Repeating Character - You are given a 0-indexed string s. You are also given a 0-indexed string queryCharacters of length k and a 0-indexed array of integer indices queryIndices of length k, both of which are used to describe k queries.

The ith query updates the character in s at index queryIndices[i] to the character queryCharacters[i].

Return an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.

 

Example 1:


Input: s = ""babacc"", queryCharacters = ""bcb"", queryIndices = [1,3,3]
Output: [3,3,4]
Explanation: 
- 1st query updates s = ""bbbacc"". The longest substring consisting of one repeating character is ""bbb"" with length 3.
- 2nd query updates s = ""bbbccc"". 
  The longest substring consisting of one repeating character can be ""bbb"" or ""ccc"" with length 3.
- 3rd query updates s = ""bbbbcc"". The longest substring consisting of one repeating character is ""bbbb"" with length 4.
Thus, we return [3,3,4].


Example 2:


Input: s = ""abyzz"", queryCharacters = ""aa"", queryIndices = [2,1]
Output: [2,3]
Explanation:
- 1st query updates s = ""abazz"". The longest substring consisting of one repeating character is ""zz"" with length 2.
- 2nd query updates s = ""aaazz"". The longest substring consisting of one repeating character is ""aaa"" with length 3.
Thus, we return [2,3].


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.
 * k == queryCharacters.length == queryIndices.length
 * 1 <= k <= 105
 * queryCharacters consists of lowercase English letters.
 * 0 <= queryIndices[i] < s.length",Solutions (86),234,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-substring-of-one-repeating-character/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestRepeating(self, s: str, queryCharacters: str, queryIndices: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    queryCharacters: str = deserialize(""str"", read_line())
    queryIndices: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestRepeating(s, queryCharacters, queryIndices)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def longestRepeating(self, s: str, queryCharacters: str, queryIndices: List[int]) -> List[int]:
        def longest_repeating(s):
            max_length = 0
            cur_length = 1
            prev_char = s[0]

            for i in range(1, len(s)):
                if s[i] == prev_char:
                    cur_length += 1
                else:
                    max_length = max(max_length, cur_length)
                    cur_length = 1
                    prev_char = s[i]

            max_length = max(max_length, cur_length)

            return max_length

        result = []
        for i in range(len(queryIndices)):
            idx = queryIndices[i]
            s = s[:idx] + queryCharacters[i] + s[idx + 1:]
            result.append(longest_repeating(s))

        return result"
False,0,0,2320,,Find All K-Distant Indices in an Array,find-all-k-distant-indices-in-an-array,False,31053,47762,2200,False,1,"Can you solve this real interview question? Find All K-Distant Indices in an Array - You are given a 0-indexed integer array nums and two integers key and k. A k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.

Return a list of all k-distant indices sorted in increasing order.

 

Example 1:


Input: nums = [3,4,9,1,3,9,5], key = 9, k = 1
Output: [1,2,3,4,5,6]
Explanation: Here, nums[2] == key and nums[5] == key.
- For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j where |0 - j| <= k and nums[j] == key. Thus, 0 is not a k-distant index.
- For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index.
- For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index.
- For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index.
- For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index.
- For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index.
- For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.
Thus, we return [1,2,3,4,5,6] which is sorted in increasing order. 


Example 2:


Input: nums = [2,2,2,2,2], key = 2, k = 2
Output: [0,1,2,3,4]
Explanation: For all indices i in nums, there exists some index j such that |i - j| <= k and nums[j] == key, so every index is a k-distant index. 
Hence, we return [0,1,2,3,4].


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000
 * key is an integer from the array nums.
 * 1 <= k <= nums.length",Solutions (425),325,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-k-distant-indices-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    key: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().findKDistantIndices(nums, key, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findKDistantIndices(self, nums: List[int], key: int, k: int) -> List[int]:
        indices = []
        for i in range(len(nums)):
            for j in range(max(0, i - k), min(len(nums), i + k + 1)):
                if nums[j] == key:
                    indices.append(i)
                    break
        return sorted(indices)"
False,0,0,2321,,Minimum Weighted Subgraph With the Required Paths,minimum-weighted-subgraph-with-the-required-paths,False,9026,25068,2203,False,3,"Can you solve this real interview question? Minimum Weighted Subgraph With the Required Paths - You are given an integer n denoting the number of nodes of a weighted directed graph. The nodes are numbered from 0 to n - 1.

You are also given a 2D integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti.

Lastly, you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph.

Return the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. In case such a subgraph does not exist, return -1.

A subgraph is a graph whose vertices and edges are subsets of the original graph. The weight of a subgraph is the sum of weights of its constituent edges.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/02/17/example1drawio.png]


Input: n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5
Output: 9
Explanation:
The above figure represents the input graph.
The blue edges represent one of the subgraphs that yield the optimal answer.
Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.


Example 2:

[https://assets.leetcode.com/uploads/2022/02/17/example2-1drawio.png]


Input: n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2
Output: -1
Explanation:
The above figure represents the input graph.
It can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.


 

Constraints:

 * 3 <= n <= 105
 * 0 <= edges.length <= 105
 * edges[i].length == 3
 * 0 <= fromi, toi, src1, src2, dest <= n - 1
 * fromi != toi
 * src1, src2, and dest are pairwise distinct.
 * 1 <= weight[i] <= 105",Solutions (131),551,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-weighted-subgraph-with-the-required-paths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    src1: int = deserialize(""int"", read_line())
    src2: int = deserialize(""int"", read_line())
    dest: int = deserialize(""int"", read_line())
    ans = Solution().minimumWeight(n, edges, src1, src2, dest)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumWeight(self, n: int, edges: List[List[int]], src1: int, src2: int, dest: int) -> int:
        # Write your code here
        pass"
False,0,0,2323,,Minimum Bit Flips to Convert Number,minimum-bit-flips-to-convert-number,False,36947,44898,2220,False,1,"Can you solve this real interview question? Minimum Bit Flips to Convert Number - A bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.

 * For example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. We can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc.

Given two integers start and goal, return the minimum number of bit flips to convert start to goal.

 

Example 1:


Input: start = 10, goal = 7
Output: 3
Explanation: The binary representation of 10 and 7 are 1010 and 0111 respectively. We can convert 10 to 7 in 3 steps:
- Flip the first bit from the right: 1010 -> 1011.
- Flip the third bit from the right: 1011 -> 1111.
- Flip the fourth bit from the right: 1111 -> 0111.
It can be shown we cannot convert 10 to 7 in less than 3 steps. Hence, we return 3.

Example 2:


Input: start = 3, goal = 4
Output: 3
Explanation: The binary representation of 3 and 4 are 011 and 100 respectively. We can convert 3 to 4 in 3 steps:
- Flip the first bit from the right: 011 -> 010.
- Flip the second bit from the right: 010 -> 000.
- Flip the third bit from the right: 000 -> 100.
It can be shown we cannot convert 3 to 4 in less than 3 steps. Hence, we return 3.


 

Constraints:

 * 0 <= start, goal <= 109",Solutions (775),478,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-bit-flips-to-convert-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minBitFlips(self, start: int, goal: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    start: int = deserialize(""int"", read_line())
    goal: int = deserialize(""int"", read_line())
    ans = Solution().minBitFlips(start, goal)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minBitFlips(self, start: int, goal: int) -> int:
        def flip(bit):
            return '1' if bit == '0' else '0'
        
        start_bits = bin(start)[2:]
        goal_bits = bin(goal)[2:]
        
        if len(goal_bits) > len(start_bits):
            start_bits = '0' * (len(goal_bits) - len(start_bits)) + start_bits
        
        flips = 0
        for i in range(len(start_bits)):
            if start_bits[i] != goal_bits[i]:
                flips += 1
                for j in range(i, len(start_bits)):
                    if start_bits[j] == goal_bits[i]:
                        start_bits = start_bits[:j] + flip(start_bits[j]) + start_bits[j+1:]
                        break
        
        return flips"
False,0,0,2324,,Find Triangular Sum of an Array,find-triangular-sum-of-an-array,False,52730,67122,2221,False,2,"Can you solve this real interview question? Find Triangular Sum of an Array - You are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).

The triangular sum of nums is the value of the only element present in nums after the following process terminates:

 1. Let nums comprise of n elements. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n - 1.
 2. For each index i, where 0 <= i < n - 1, assign the value of newNums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.
 3. Replace the array nums with newNums.
 4. Repeat the entire process starting from step 1.

Return the triangular sum of nums.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/02/22/ex1drawio.png]


Input: nums = [1,2,3,4,5]
Output: 8
Explanation:
The above diagram depicts the process from which we obtain the triangular sum of the array.

Example 2:


Input: nums = [5]
Output: 5
Explanation:
Since there is only one element in nums, the triangular sum is the value of that element itself.

 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] <= 9",Solutions (979),803,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-triangular-sum-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def triangularSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().triangularSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def triangularSum(self, nums: List[int]) -> int:
        while len(nums) > 1:
            newNums = [(nums[i] + nums[i+1]) % 10 for i in range(len(nums) - 1)]
            nums = newNums
        return nums[0]"
False,0,0,2325,,Number of Ways to Select Buildings,number-of-ways-to-select-buildings,False,25803,50294,2222,False,2,"Can you solve this real interview question? Number of Ways to Select Buildings - You are given a 0-indexed binary string s which represents the types of buildings along a street where:

 * s[i] = '0' denotes that the ith building is an office and
 * s[i] = '1' denotes that the ith building is a restaurant.

As a city official, you would like to select 3 buildings for random inspection. However, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.

 * For example, given s = ""001101"", we cannot select the 1st, 3rd, and 5th buildings as that would form ""011"" which is not allowed due to having two consecutive buildings of the same type.

Return the number of valid ways to select 3 buildings.

 

Example 1:


Input: s = ""001101""
Output: 6
Explanation: 
The following sets of indices selected are valid:
- [0,2,4] from ""001101"" forms ""010""
- [0,3,4] from ""001101"" forms ""010""
- [1,2,4] from ""001101"" forms ""010""
- [1,3,4] from ""001101"" forms ""010""
- [2,4,5] from ""001101"" forms ""101""
- [3,4,5] from ""001101"" forms ""101""
No other selection is valid. Thus, there are 6 total ways.


Example 2:


Input: s = ""11100""
Output: 0
Explanation: It can be shown that there are no valid selections.


 

Constraints:

 * 3 <= s.length <= 105
 * s[i] is either '0' or '1'.",Solutions (453),782,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-select-buildings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfWays(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().numberOfWays(s)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def numberOfWays(self, s: str) -> int:
        count = 0
        for i in range(len(s) - 2):
            if (s[i] != s[i+1]) and (s[i+1] != s[i+2]) and (s[i] != s[i+2]):
                count += 1
        return count"
False,0,0,2326,,Sum of Scores of Built Strings,sum-of-scores-of-built-strings,False,5201,13938,2223,False,3,"Can you solve this real interview question? Sum of Scores of Built Strings - You are building a string s of length n one character at a time, prepending each new character to the front of the string. The strings are labeled from 1 to n, where the string with length i is labeled si.

 * For example, for s = ""abaca"", s1 == ""a"", s2 == ""ca"", s3 == ""aca"", etc.

The score of si is the length of the longest common prefix between si and sn (Note that s == sn).

Given the final string s, return the sum of the score of every si.

 

Example 1:


Input: s = ""babab""
Output: 9
Explanation:
For s1 == ""b"", the longest common prefix is ""b"" which has a score of 1.
For s2 == ""ab"", there is no common prefix so the score is 0.
For s3 == ""bab"", the longest common prefix is ""bab"" which has a score of 3.
For s4 == ""abab"", there is no common prefix so the score is 0.
For s5 == ""babab"", the longest common prefix is ""babab"" which has a score of 5.
The sum of the scores is 1 + 0 + 3 + 0 + 5 = 9, so we return 9.

Example 2:


Input: s = ""azbazbzaz""
Output: 14
Explanation: 
For s2 == ""az"", the longest common prefix is ""az"" which has a score of 2.
For s6 == ""azbzaz"", the longest common prefix is ""azb"" which has a score of 3.
For s9 == ""azbazbzaz"", the longest common prefix is ""azbazbzaz"" which has a score of 9.
For all other si, the score is 0.
The sum of the scores is 2 + 3 + 9 = 14, so we return 14.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (66),187,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-scores-of-built-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumScores(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().sumScores(s)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def sumScores(self, s: str) -> int:
        def longest_common_prefix(s1, s2):
            i = 0
            while i < len(s1) and i < len(s2) and s1[i] == s2[i]:
                i += 1
            return i
        
        score = 0
        for i in range(1, len(s)+1):
            score += longest_common_prefix(s[:i], s)
        
        return score"
False,0,0,2327,,Largest Number After Digit Swaps by Parity,largest-number-after-digit-swaps-by-parity,False,30755,50366,2231,False,1,"Can you solve this real interview question? Largest Number After Digit Swaps by Parity - You are given a positive integer num. You may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).

Return the largest possible value of num after any number of swaps.

 

Example 1:


Input: num = 1234
Output: 3412
Explanation: Swap the digit 3 with the digit 1, this results in the number 3214.
Swap the digit 2 with the digit 4, this results in the number 3412.
Note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.
Also note that we may not swap the digit 4 with the digit 1 since they are of different parities.


Example 2:


Input: num = 65875
Output: 87655
Explanation: Swap the digit 8 with the digit 6, this results in the number 85675.
Swap the first digit 5 with the digit 7, this results in the number 87655.
Note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.


 

Constraints:

 * 1 <= num <= 109",Solutions (581),429,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-number-after-digit-swaps-by-parity/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestInteger(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().largestInteger(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","
class Solution:
    def largestInteger(self, num: int) -> int:
        even = sorted([int(x) for x in str(num) if int(x) % 2 == 0], reverse=True)
        odd = sorted([int(x) for x in str(num) if int(x) % 2 != 0], reverse=True)
        
        num_str = str(num)
        res = ''
        
        for i in num_str:
            if int(i) % 2 == 0:
                res += str(even.pop(0))
            else:
                res += str(odd.pop(0))
        
        return int(res)"
False,0,0,2328,,Minimize Result by Adding Parentheses to Expression,minimize-result-by-adding-parentheses-to-expression,False,15165,23154,2232,False,2,"Can you solve this real interview question? Minimize Result by Adding Parentheses to Expression - You are given a 0-indexed string expression of the form ""<num1>+<num2>"" where <num1> and <num2> represent positive integers.

Add a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. The left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'.

Return expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. If there are multiple answers that yield the same result, return any of them.

The input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.

 

Example 1:


Input: expression = ""247+38""
Output: ""2(47+38)""
Explanation: The expression evaluates to 2 * (47 + 38) = 2 * 85 = 170.
Note that ""2(4)7+38"" is invalid because the right parenthesis must be to the right of the '+'.
It can be shown that 170 is the smallest possible value.


Example 2:


Input: expression = ""12+34""
Output: ""1(2+3)4""
Explanation: The expression evaluates to 1 * (2 + 3) * 4 = 1 * 5 * 4 = 20.


Example 3:


Input: expression = ""999+999""
Output: ""(999+999)""
Explanation: The expression evaluates to 999 + 999 = 1998.


 

Constraints:

 * 3 <= expression.length <= 10
 * expression consists of digits from '1' to '9' and '+'.
 * expression starts and ends with digits.
 * expression contains exactly one '+'.
 * The original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.",Solutions (311),160,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-result-by-adding-parentheses-to-expression/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeResult(self, expression: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    expression: str = deserialize(""str"", read_line())
    ans = Solution().minimizeResult(expression)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def minimizeResult(self, expression: str) -> str:
        # Your code here."
False,0,0,2329,,Maximum Product After K Increments,maximum-product-after-k-increments,False,22710,55230,2233,False,2,"Can you solve this real interview question? Maximum Product After K Increments - You are given an array of non-negative integers nums and an integer k. In one operation, you may choose any element from nums and increment it by 1.

Return the maximum product of nums after at most k operations. Since the answer may be very large, return it modulo 109 + 7. Note that you should maximize the product before taking the modulo. 

 

Example 1:


Input: nums = [0,4], k = 5
Output: 20
Explanation: Increment the first number 5 times.
Now nums = [5, 4], with a product of 5 * 4 = 20.
It can be shown that 20 is maximum product possible, so we return 20.
Note that there may be other ways to increment nums to have the maximum product.


Example 2:


Input: nums = [6,3,3,2], k = 2
Output: 216
Explanation: Increment the second number 1 time and increment the fourth number 1 time.
Now nums = [6, 4, 3, 3], with a product of 6 * 4 * 3 * 3 = 216.
It can be shown that 216 is maximum product possible, so we return 216.
Note that there may be other ways to increment nums to have the maximum product.


 

Constraints:

 * 1 <= nums.length, k <= 105
 * 0 <= nums[i] <= 106",Solutions (439),534,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-product-after-k-increments/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumProduct(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumProduct(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumProduct(self, nums: List[int], k: int) -> int:
        MOD = 10**9 + 7
        nums.sort()
     
        for i in range(k):
            if nums[i] < 0:
                nums[i] = -nums[i]
            else:
                break
     
        nums.sort()
     
        k = k - i
        i = 0
     
        while k:
            if k == 1:
                return (nums[0] * nums[i + 1]) % MOD
            temp1, temp2 = nums[i] * nums[i + 1], nums[-1] * nums[-2]
            if temp1 < temp2:
                tmp = nums[-1] % MOD
                temp1 = nums[i + 1]
                if temp1 < tmp:
                    nums[-1] = temp1
                    nums[i] *= -1
                    i += 2
                else:
                    nums[i + 1] = tmp
                k -= 2
            else:
                nums[i + 1] *= nums[i]
                i += 1
                k -= 1
        res = 1
        for ele in nums:
            res = (res * ele) % MOD
        return res
        "
False,0,0,2330,,Maximum Total Beauty of the Gardens,maximum-total-beauty-of-the-gardens,False,5322,18681,2234,False,3,"Can you solve this real interview question? Maximum Total Beauty of the Gardens - Alice is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.

You are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. Flowers that are already planted cannot be removed. You are then given another integer newFlowers, which is the maximum number of flowers that Alice can additionally plant. You are also given the integers target, full, and partial.

A garden is considered complete if it has at least target flowers. The total beauty of the gardens is then determined as the sum of the following:

 * The number of complete gardens multiplied by full.
 * The minimum number of flowers in any of the incomplete gardens multiplied by partial. If there are no incomplete gardens, then this value will be 0.

Return the maximum total beauty that Alice can obtain after planting at most newFlowers flowers.

 

Example 1:


Input: flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1
Output: 14
Explanation: Alice can plant
- 2 flowers in the 0th garden
- 3 flowers in the 1st garden
- 1 flower in the 2nd garden
- 1 flower in the 3rd garden
The gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.
There is 1 garden that is complete.
The minimum number of flowers in the incomplete gardens is 2.
Thus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.
No other way of planting flowers can obtain a total beauty higher than 14.


Example 2:


Input: flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6
Output: 30
Explanation: Alice can plant
- 3 flowers in the 0th garden
- 0 flowers in the 1st garden
- 0 flowers in the 2nd garden
- 2 flowers in the 3rd garden
The gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.
There are 3 gardens that are complete.
The minimum number of flowers in the incomplete gardens is 4.
Thus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.
No other way of planting flowers can obtain a total beauty higher than 30.
Note that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.


 

Constraints:

 * 1 <= flowers.length <= 105
 * 1 <= flowers[i], target <= 105
 * 1 <= newFlowers <= 1010
 * 1 <= full, partial <= 105",Solutions (83),353,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-total-beauty-of-the-gardens/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    flowers: List[int] = deserialize(""List[int]"", read_line())
    newFlowers: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    full: int = deserialize(""int"", read_line())
    partial: int = deserialize(""int"", read_line())
    ans = Solution().maximumBeauty(flowers, newFlowers, target, full, partial)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maximumBeauty(self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int) -> int:
        n = len(flowers)
        flowers.sort()
        complete_gardens = sum(1 for f in flowers if f >= target)
        incomplete_gardens = n - complete_gardens

        min_incomplete = partial if incomplete_gardens > 0 else 0

        remaining_flowers = max(0, newFlowers - sum(flowers))

        beauty = complete_gardens * full + min_incomplete

        return beauty + min(remaining_flowers, incomplete_gardens * (target - 1)) * partial + max(0, remaining_flowers - incomplete_gardens * (target - 1)) * full"
False,0,0,2331,,Intersection of Multiple Arrays,intersection-of-multiple-arrays,False,46880,68260,2248,False,1,"Can you solve this real interview question? Intersection of Multiple Arrays - Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.

 

Example 1:


Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
Output: [3,4]
Explanation: 
The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].

Example 2:


Input: nums = [[1,2,3],[4,5,6]]
Output: []
Explanation: 
There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= sum(nums[i].length) <= 1000
 * 1 <= nums[i][j] <= 1000
 * All the values of nums[i] are unique.",Solutions (821),483,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/intersection-of-multiple-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def intersection(self, nums: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().intersection(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def intersection(self, nums: List[List[int]]) -> List[int]:
        result = set(nums[0])
        for i in range(1, len(nums)):
            result = result.intersection(nums[i])
        return sorted(list(result))"
False,0,0,2332,,Count Lattice Points Inside a Circle,count-lattice-points-inside-a-circle,False,18288,36151,2249,False,2,"Can you solve this real interview question? Count Lattice Points Inside a Circle - Given a 2D integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle.

Note:

 * A lattice point is a point with integer coordinates.
 * Points that lie on the circumference of a circle are also considered to be inside it.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/02/exa-11.png]


Input: circles = [[2,2,1]]
Output: 5
Explanation:
The figure above shows the given circle.
The lattice points present inside the circle are (1, 2), (2, 1), (2, 2), (2, 3), and (3, 2) and are shown in green.
Other points such as (1, 1) and (1, 3), which are shown in red, are not considered inside the circle.
Hence, the number of lattice points present inside at least one circle is 5.

Example 2:

[https://assets.leetcode.com/uploads/2022/03/02/exa-22.png]


Input: circles = [[2,2,2],[3,4,1]]
Output: 16
Explanation:
The figure above shows the given circles.
There are exactly 16 lattice points which are present inside at least one circle. 
Some of them are (0, 2), (2, 0), (2, 4), (3, 2), and (4, 4).


 

Constraints:

 * 1 <= circles.length <= 200
 * circles[i].length == 3
 * 1 <= xi, yi <= 100
 * 1 <= ri <= min(xi, yi)",Solutions (240),179,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-lattice-points-inside-a-circle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countLatticePoints(self, circles: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    circles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countLatticePoints(circles)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countLatticePoints(self, circles: List[List[int]]) -> int:
        def lattice_points_in_circle(x, y, r):
            count = 0
            for i in range(x - r, x + r + 1):
                for j in range(y - r, y + r + 1):
                    if (i - x) ** 2 + (j - y) ** 2 <= r ** 2:
                        count += 1
            return count
        
        points = set()
        for circle in circles:
            points.update([(x, y) for x in range(circle[0] - circle[2], circle[0] + circle[2] + 1) for y in range(circle[1] - circle[2], circle[1] + circle[2] + 1) if (x - circle[0]) ** 2 + (y - circle[1]) ** 2 <= circle[2] ** 2])
        
        return len(points)"
False,0,0,2333,,Count Number of Rectangles Containing Each Point,count-number-of-rectangles-containing-each-point,False,11881,34817,2250,False,2,"Can you solve this real interview question? Count Number of Rectangles Containing Each Point - You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).

The ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).

Return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.

The ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/02/example1.png]


Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]
Output: [2,1]
Explanation: 
The first rectangle contains no points.
The second rectangle contains only the point (2, 1).
The third rectangle contains the points (2, 1) and (1, 4).
The number of rectangles that contain the point (2, 1) is 2.
The number of rectangles that contain the point (1, 4) is 1.
Therefore, we return [2, 1].


Example 2:

[https://assets.leetcode.com/uploads/2022/03/02/example2.png]


Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]
Output: [1,3]
Explanation:
The first rectangle contains only the point (1, 1).
The second rectangle contains only the point (1, 1).
The third rectangle contains the points (1, 3) and (1, 1).
The number of rectangles that contain the point (1, 3) is 1.
The number of rectangles that contain the point (1, 1) is 3.
Therefore, we return [1, 3].


 

Constraints:

 * 1 <= rectangles.length, points.length <= 5 * 104
 * rectangles[i].length == points[j].length == 2
 * 1 <= li, xj <= 109
 * 1 <= hi, yj <= 100
 * All the rectangles are unique.
 * All the points are unique.",Solutions (180),407,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countRectangles(self, rectangles: List[List[int]], points: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    rectangles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    points: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countRectangles(rectangles, points)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def countRectangles(self, rectangles: List[List[int]], points: List[List[int]]) -> List[int]:
        count = [0] * len(points)
        for i, (x, y) in enumerate(points):
            for l, h in rectangles:
                if 0 <= x <= l and 0 <= y <= h:
                    count[i] += 1
        return count"
False,0,0,2334,,Number of Flowers in Full Bloom,number-of-flowers-in-full-bloom,False,12619,24654,2251,False,3,"Can you solve this real interview question? Number of Flowers in Full Bloom - You are given a 0-indexed 2D integer array flowers, where flowers[i] = [starti, endi] means the ith flower will be in full bloom from starti to endi (inclusive). You are also given a 0-indexed integer array people of size n, where poeple[i] is the time that the ith person will arrive to see the flowers.

Return an integer array answer of size n, where answer[i] is the number of flowers that are in full bloom when the ith person arrives.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/02/ex1new.jpg]


Input: flowers = [[1,6],[3,7],[9,12],[4,13]], poeple = [2,3,7,11]
Output: [1,2,2,2]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/02/ex2new.jpg]


Input: flowers = [[1,10],[3,3]], poeple = [3,3,2]
Output: [2,2,1]
Explanation: The figure above shows the times when the flowers are in full bloom and when the people arrive.
For each person, we return the number of flowers in full bloom during their arrival.


 

Constraints:

 * 1 <= flowers.length <= 5 * 104
 * flowers[i].length == 2
 * 1 <= starti <= endi <= 109
 * 1 <= people.length <= 5 * 104
 * 1 <= people[i] <= 109",Solutions (253),499,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-flowers-in-full-bloom/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    flowers: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    people: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().fullBloomFlowers(flowers, people)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def fullBloomFlowers(self, flowers: List[List[int]], people: List[int]) -> List[int]:
        res = []
        blooming = []
        
        for f in flowers:
            blooming.append((f[0], 1))
            blooming.append((f[1] + 1, -1))
        
        blooming.sort()
        
        blooming_count = 0
        i = 0
        for p in people:
            while i < len(blooming) and blooming[i][0] <= p:
                blooming_count += blooming[i][1]
                i += 1
            res.append(blooming_count)
        
        return res"
False,0,0,2337,,Remove Digit From Number to Maximize Result,remove-digit-from-number-to-maximize-result,False,48681,105253,2259,False,1,"Can you solve this real interview question? Remove Digit From Number to Maximize Result - You are given a string number representing a positive integer and a character digit.

Return the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. The test cases are generated such that digit occurs at least once in number.

 

Example 1:


Input: number = ""123"", digit = ""3""
Output: ""12""
Explanation: There is only one '3' in ""123"". After removing '3', the result is ""12"".


Example 2:


Input: number = ""1231"", digit = ""1""
Output: ""231""
Explanation: We can remove the first '1' to get ""231"" or remove the second '1' to get ""123"".
Since 231 > 123, we return ""231"".


Example 3:


Input: number = ""551"", digit = ""5""
Output: ""51""
Explanation: We can remove either the first or second '5' from ""551"".
Both result in the string ""51"".


 

Constraints:

 * 2 <= number.length <= 100
 * number consists of digits from '1' to '9'.
 * digit is a digit from '1' to '9'.
 * digit occurs at least once in number.",Solutions (652),579,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeDigit(self, number: str, digit: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    number: str = deserialize(""str"", read_line())
    digit: str = deserialize(""str"", read_line())
    ans = Solution().removeDigit(number, digit)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeDigit(self, number: str, digit: str) -> str:
        max_val = max(int(number[:i] + number[i+1:]) for i in range(len(number)) if number[i] == digit)
        return str(max_val)"
False,0,0,2338,,Minimum Consecutive Cards to Pick Up,minimum-consecutive-cards-to-pick-up,False,40345,78823,2260,False,2,"Can you solve this real interview question? Minimum Consecutive Cards to Pick Up - You are given an integer array cards where cards[i] represents the value of the ith card. A pair of cards are matching if the cards have the same value.

Return the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. If it is impossible to have matching cards, return -1.

 

Example 1:


Input: cards = [3,4,2,3,4,7]
Output: 4
Explanation: We can pick up the cards [3,4,2,3] which contain a matching pair of cards with value 3. Note that picking up the cards [4,2,3,4] is also optimal.


Example 2:


Input: cards = [1,0,5,3]
Output: -1
Explanation: There is no way to pick up a set of consecutive cards that contain a pair of matching cards.


 

Constraints:

 * 1 <= cards.length <= 105
 * 0 <= cards[i] <= 106",Solutions (693),647,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-consecutive-cards-to-pick-up/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumCardPickup(self, cards: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    cards: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumCardPickup(cards)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumCardPickup(self, cards: List[int]) -> int:
        card_dict = {}
        min_pickup = float('inf')
        for i, card in enumerate(cards):
            if card in card_dict:
                min_pickup = min(min_pickup, i - card_dict[card])
            card_dict[card] = i
        return min_pickup if min_pickup != float('inf') else -1"
False,0,0,2339,,K Divisible Elements Subarrays,k-divisible-elements-subarrays,False,20582,42797,2261,False,2,"Can you solve this real interview question? K Divisible Elements Subarrays - Given an integer array nums and two integers k and p, return the number of distinct subarrays which have at most k elements divisible by p.

Two arrays nums1 and nums2 are said to be distinct if:

 * They are of different lengths, or
 * There exists at least one index i where nums1[i] != nums2[i].

A subarray is defined as a non-empty contiguous sequence of elements in an array.

 

Example 1:


Input: nums = [2,3,3,2,2], k = 2, p = 2
Output: 11
Explanation:
The elements at indices 0, 3, and 4 are divisible by p = 2.
The 11 distinct subarrays which have at most k = 2 elements divisible by 2 are:
[2], [2,3], [2,3,3], [2,3,3,2], [3], [3,3], [3,3,2], [3,3,2,2], [3,2], [3,2,2], and [2,2].
Note that the subarrays [2] and [3] occur more than once in nums, but they should each be counted only once.
The subarray [2,3,3,2,2] should not be counted because it has 3 elements that are divisible by 2.


Example 2:


Input: nums = [1,2,3,4], k = 4, p = 1
Output: 10
Explanation:
All element of nums are divisible by p = 1.
Also, every subarray of nums will have at most 4 elements that are divisible by 1.
Since all subarrays are distinct, the total number of subarrays satisfying all the constraints is 10.


 

Constraints:

 * 1 <= nums.length <= 200
 * 1 <= nums[i], p <= 200
 * 1 <= k <= nums.length

 

Follow up:

Can you solve this problem in O(n2) time complexity?",Solutions (285),465,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/k-divisible-elements-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDistinct(self, nums: List[int], k: int, p: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    p: int = deserialize(""int"", read_line())
    ans = Solution().countDistinct(nums, k, p)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDistinct(self, nums: List[int], k: int, p: int) -> int:
        result = 0
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                subarray = nums[i:j+1]
                if len([x for x in subarray if x % p == 0]) <= k:
                    result += 1
        return result"
False,0,0,2340,,Total Appeal of A String,total-appeal-of-a-string,False,22583,39796,2262,False,3,"Can you solve this real interview question? Total Appeal of A String - The appeal of a string is the number of distinct characters found in the string.

 * For example, the appeal of ""abbca"" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'.

Given a string s, return the total appeal of all of its substrings.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""abbca""
Output: 28
Explanation: The following are the substrings of ""abbca"":
- Substrings of length 1: ""a"", ""b"", ""b"", ""c"", ""a"" have an appeal of 1, 1, 1, 1, and 1 respectively. The sum is 5.
- Substrings of length 2: ""ab"", ""bb"", ""bc"", ""ca"" have an appeal of 2, 1, 2, and 2 respectively. The sum is 7.
- Substrings of length 3: ""abb"", ""bbc"", ""bca"" have an appeal of 2, 2, and 3 respectively. The sum is 7.
- Substrings of length 4: ""abbc"", ""bbca"" have an appeal of 3 and 3 respectively. The sum is 6.
- Substrings of length 5: ""abbca"" has an appeal of 3. The sum is 3.
The total sum is 5 + 7 + 7 + 6 + 3 = 28.


Example 2:


Input: s = ""code""
Output: 20
Explanation: The following are the substrings of ""code"":
- Substrings of length 1: ""c"", ""o"", ""d"", ""e"" have an appeal of 1, 1, 1, and 1 respectively. The sum is 4.
- Substrings of length 2: ""co"", ""od"", ""de"" have an appeal of 2, 2, and 2 respectively. The sum is 6.
- Substrings of length 3: ""cod"", ""ode"" have an appeal of 3 and 3 respectively. The sum is 6.
- Substrings of length 4: ""code"" has an appeal of 4. The sum is 4.
The total sum is 4 + 6 + 6 + 4 = 20.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters.",Solutions (310),825,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/total-appeal-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def appealSum(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().appealSum(s)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def appealSum(self, s: str) -> int:
        total = 0
        for i in range(len(s)):
            distinct = set()
            for j in range(i, len(s)):
                distinct.add(s[j])
                total += len(distinct)
        return total"
False,0,0,2341,,Count Prefixes of a Given String,count-prefixes-of-a-given-string,False,38928,53382,2255,False,1,"Can you solve this real interview question? Count Prefixes of a Given String - You are given a string array words and a string s, where words[i] and s comprise only of lowercase English letters.

Return the number of strings in words that are a prefix of s.

A prefix of a string is a substring that occurs at the beginning of the string. A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: words = [""a"",""b"",""c"",""ab"",""bc"",""abc""], s = ""abc""
Output: 3
Explanation:
The strings in words which are a prefix of s = ""abc"" are:
""a"", ""ab"", and ""abc"".
Thus the number of strings in words which are a prefix of s is 3.

Example 2:


Input: words = [""a"",""a""], s = ""aa""
Output: 2
Explanation:
Both of the strings are a prefix of s. 
Note that the same string can occur multiple times in words, and it should be counted each time.

 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length, s.length <= 10
 * words[i] and s consist of lowercase English letters only.",Solutions (831),399,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-prefixes-of-a-given-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPrefixes(self, words: List[str], s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().countPrefixes(words, s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPrefixes(self, words: List[str], s: str) -> int:
        count = 0
        for word in words:
            if s.startswith(word):
                count += 1
        return count"
False,0,0,2342,minimum-average-difference,Minimum Average Difference,minimum-average-difference,False,74772,173472,2256,False,2,"Can you solve this real interview question? Minimum Average Difference - You are given a 0-indexed integer array nums of length n.

The average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. Both averages should be rounded down to the nearest integer.

Return the index with the minimum average difference. If there are multiple such indices, return the smallest one.

Note:

 * The absolute difference of two numbers is the absolute value of their difference.
 * The average of n elements is the sum of the n elements divided (integer division) by n.
 * The average of 0 elements is considered to be 0.

 

Example 1:


Input: nums = [2,5,3,9,5,3]
Output: 3
Explanation:
- The average difference of index 0 is: |2 / 1 - (5 + 3 + 9 + 5 + 3) / 5| = |2 / 1 - 25 / 5| = |2 - 5| = 3.
- The average difference of index 1 is: |(2 + 5) / 2 - (3 + 9 + 5 + 3) / 4| = |7 / 2 - 20 / 4| = |3 - 5| = 2.
- The average difference of index 2 is: |(2 + 5 + 3) / 3 - (9 + 5 + 3) / 3| = |10 / 3 - 17 / 3| = |3 - 5| = 2.
- The average difference of index 3 is: |(2 + 5 + 3 + 9) / 4 - (5 + 3) / 2| = |19 / 4 - 8 / 2| = |4 - 4| = 0.
- The average difference of index 4 is: |(2 + 5 + 3 + 9 + 5) / 5 - 3 / 1| = |24 / 5 - 3 / 1| = |4 - 3| = 1.
- The average difference of index 5 is: |(2 + 5 + 3 + 9 + 5 + 3) / 6 - 0| = |27 / 6 - 0| = |4 - 0| = 4.
The average difference of index 3 is the minimum average difference so return 3.


Example 2:


Input: nums = [0]
Output: 0
Explanation:
The only index is 0 so return 0.
The average difference of index 0 is: |0 / 1 - 0| = |0 - 0| = 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 105",Solutions (1.4K),1.4K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-average-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumAverageDifference(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumAverageDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumAverageDifference(self, nums: List[int]) -> int:
        total_sum = sum(nums)
        n = len(nums)
        left_sum = 0
        right_sum = total_sum
        min_diff = float('inf')
        min_index = 0
        
        for i in range(n-1):
            left_sum += nums[i]
            right_sum -= nums[i]
            left_avg = left_sum // (i+1)
            right_avg = right_sum // (n-i-1)
            diff = abs(left_avg - right_avg)
            
            if diff < min_diff or (diff == min_diff and i < min_index):
                min_diff = diff
                min_index = i
        
        return min_index"
False,0,0,2343,,Count Unguarded Cells in the Grid,count-unguarded-cells-in-the-grid,False,13245,25387,2257,False,2,"Can you solve this real interview question? Count Unguarded Cells in the Grid - You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.

A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.

Return the number of unoccupied cells that are not guarded.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/10/example1drawio2.png]


Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]
Output: 7
Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.
There are a total of 7 unguarded cells, so we return 7.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/10/example2drawio.png]


Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]
Output: 4
Explanation: The unguarded cells are shown in green in the above diagram.
There are a total of 4 unguarded cells, so we return 4.


 

Constraints:

 * 1 <= m, n <= 105
 * 2 <= m * n <= 105
 * 1 <= guards.length, walls.length <= 5 * 104
 * 2 <= guards.length + walls.length <= m * n
 * guards[i].length == walls[j].length == 2
 * 0 <= rowi, rowj < m
 * 0 <= coli, colj < n
 * All the positions in guards and walls are unique.",Solutions (325),345,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-unguarded-cells-in-the-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    m: int = deserialize(""int"", read_line())
    n: int = deserialize(""int"", read_line())
    guards: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    walls: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countUnguarded(m, n, guards, walls)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countUnguarded(self, m: int, n: int, guards: List[List[int]], walls: List[List[int]]) -> int:
        res = 0
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        for i in range(m):
            for j in range(n):
                if [i, j] not in guards:
                    guarded = False
                    for guard in guards:
                        if i == guard[0] or j == guard[1] or abs(i - guard[0]) == abs(j - guard[1]):
                            guarded = True
                            break
                    if not guarded:
                        res += 1
        return res"
False,0,0,2344,,Escape the Spreading Fire,escape-the-spreading-fire,False,6803,19402,2258,False,3,"Can you solve this real interview question? Escape the Spreading Fire - You are given a 0-indexed 2D integer array grid of size m x n which represents a field. Each cell has one of three values:

 * 0 represents grass,
 * 1 represents fire,
 * 2 represents a wall that you and fire cannot pass through.

You are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). Every minute, you may move to an adjacent grass cell. After your move, every fire cell will spread to all adjacent cells that are not walls.

Return the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. If this is impossible, return -1. If you can always reach the safehouse regardless of the minutes stayed, return 109.

Note that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.

A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/10/ex1new.jpg]


Input: grid = [[0,2,0,0,0,0,0],[0,0,0,2,2,1,0],[0,2,0,0,1,2,0],[0,0,2,2,2,0,2],[0,0,0,0,0,0,0]]
Output: 3
Explanation: The figure above shows the scenario where you stay in the initial position for 3 minutes.
You will still be able to safely reach the safehouse.
Staying for more than 3 minutes will not allow you to safely reach the safehouse.

Example 2:

[https://assets.leetcode.com/uploads/2022/03/10/ex2new2.jpg]


Input: grid = [[0,0,0,0],[0,1,2,0],[0,2,0,0]]
Output: -1
Explanation: The figure above shows the scenario where you immediately move towards the safehouse.
Fire will spread to any cell you move towards and it is impossible to safely reach the safehouse.
Thus, -1 is returned.


Example 3:

[https://assets.leetcode.com/uploads/2022/03/10/ex3new.jpg]


Input: grid = [[0,0,0],[2,2,0],[1,2,0]]
Output: 1000000000
Explanation: The figure above shows the initial grid.
Notice that the fire is contained by walls and you will always be able to safely reach the safehouse.
Thus, 109 is returned.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 300
 * 4 <= m * n <= 2 * 104
 * grid[i][j] is either 0, 1, or 2.
 * grid[0][0] == grid[m - 1][n - 1] == 0",Solutions (150),513,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/escape-the-spreading-fire/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumMinutes(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumMinutes(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumMinutes(self, grid: List[List[int]]) -> int:
        pass"
False,0,0,2345,,Minimum Number of Operations to Convert Time,minimum-number-of-operations-to-convert-time,False,31607,48353,2224,False,1,"Can you solve this real interview question? Minimum Number of Operations to Convert Time - You are given two strings current and correct representing two 24-hour times.

24-hour times are formatted as ""HH:MM"", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.

In one operation you can increase the time current by 1, 5, 15, or 60 minutes. You can perform this operation any number of times.

Return the minimum number of operations needed to convert current to correct.

 

Example 1:


Input: current = ""02:30"", correct = ""04:35""
Output: 3
Explanation:
We can convert current to correct in 3 operations as follows:
- Add 60 minutes to current. current becomes ""03:30"".
- Add 60 minutes to current. current becomes ""04:30"".
- Add 5 minutes to current. current becomes ""04:35"".
It can be proven that it is not possible to convert current to correct in fewer than 3 operations.

Example 2:


Input: current = ""11:00"", correct = ""11:01""
Output: 1
Explanation: We only have to add one minute to current, so the minimum number of operations needed is 1.


 

Constraints:

 * current and correct are in the format ""HH:MM""
 * current <= correct",Solutions (597),356,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def convertTime(self, current: str, correct: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    current: str = deserialize(""str"", read_line())
    correct: str = deserialize(""str"", read_line())
    ans = Solution().convertTime(current, correct)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def convertTime(self, current: str, correct: str) -> int:
        def convertToMinutes(time_str):
            hour, minute = map(int, time_str.split(':'))
            return hour * 60 + minute
        
        current_minutes = convertToMinutes(current)
        correct_minutes = convertToMinutes(correct)
        
        diff = (correct_minutes - current_minutes + 1440) % 1440
        return min(diff, 1440 - diff) // 60 + (diff % 60 != 0)"
False,0,0,2346,,Largest 3-Same-Digit Number in String,largest-3-same-digit-number-in-string,False,30903,51914,2264,False,1,"Can you solve this real interview question? Largest 3-Same-Digit Number in String - You are given a string num representing a large integer. An integer is good if it meets the following conditions:

 * It is a substring of num with length 3.
 * It consists of only one unique digit.

Return the maximum good integer as a string or an empty string """" if no such integer exists.

Note:

 * A substring is a contiguous sequence of characters within a string.
 * There may be leading zeroes in num or a good integer.

 

Example 1:


Input: num = ""6777133339""
Output: ""777""
Explanation: There are two distinct good integers: ""777"" and ""333"".
""777"" is the largest, so we return ""777"".


Example 2:


Input: num = ""2300019""
Output: ""000""
Explanation: ""000"" is the only good integer.


Example 3:


Input: num = ""42352338""
Output: """"
Explanation: No substring of length 3 consists of only one unique digit. Therefore, there are no good integers.


 

Constraints:

 * 3 <= num.length <= 1000
 * num only consists of digits.",Solutions (605),292,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-3-same-digit-number-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestGoodInteger(self, num: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().largestGoodInteger(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestGoodInteger(self, num: str) -> str:
        max_good = """"
        for i in range(len(num) - 2):
            if num[i] == num[i + 1] == num[i + 2]:
                max_good = max(max_good, num[i:i+3])
        return max_good"
False,0,0,2348,,Count Number of Texts,count-number-of-texts,False,14986,31844,2266,False,2,"Can you solve this real interview question? Count Number of Texts - Alice is texting Bob using her phone. The mapping of digits to letters is shown in the figure below.

[https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png]

In order to add a letter, Alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.

 * For example, to add the letter 's', Alice has to press '7' four times. Similarly, to add the letter 'k', Alice has to press '5' twice.
 * Note that the digits '0' and '1' do not map to any letters, so Alice does not use them.

However, due to an error in transmission, Bob did not receive Alice's text message but received a string of pressed keys instead.

 * For example, when Alice sent the message ""bob"", Bob received the string ""2266622"".

Given a string pressedKeys representing the string received by Bob, return the total number of possible text messages Alice could have sent.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: pressedKeys = ""22233""
Output: 8
Explanation:
The possible text messages Alice could have sent are:
""aaadd"", ""abdd"", ""badd"", ""cdd"", ""aaae"", ""abe"", ""bae"", and ""ce"".
Since there are 8 possible messages, we return 8.


Example 2:


Input: pressedKeys = ""222222222222222222222222222222222222""
Output: 82876089
Explanation:
There are 2082876103 possible text messages Alice could have sent.
Since we need to return the answer modulo 109 + 7, we return 2082876103 % (109 + 7) = 82876089.


 

Constraints:

 * 1 <= pressedKeys.length <= 105
 * pressedKeys only consists of digits from '2' - '9'.",Solutions (281),685,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-texts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countTexts(self, pressedKeys: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    pressedKeys: str = deserialize(""str"", read_line())
    ans = Solution().countTexts(pressedKeys)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countTexts(self, pressedKeys: str) -> int:
        mod = 10**9 + 7
        dp = [0] * (len(pressedKeys) + 1)
        dp[0] = 1
        for i in range(1, len(pressedKeys) + 1):
            for j in range(1, min(i, 3) + 1):
                if pressedKeys[i - j] == '0' or pressedKeys[i - j] == '1':
                    continue
                dp[i] += dp[i - j]
                dp[i] %= mod
        return dp[len(pressedKeys)]"
False,0,0,2349,, Check if There Is a Valid Parentheses String Path,check-if-there-is-a-valid-parentheses-string-path,False,12431,32739,2267,False,3,"Can you solve this real interview question?  Check if There Is a Valid Parentheses String Path - A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

 * It is ().
 * It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
 * It can be written as (A), where A is a valid parentheses string.

You are given an m x n matrix of parentheses grid. A valid parentheses string path in the grid is a path satisfying all of the following conditions:

 * The path starts from the upper left cell (0, 0).
 * The path ends at the bottom-right cell (m - 1, n - 1).
 * The path only ever moves down or right.
 * The resulting parentheses string formed by the path is valid.

Return true if there exists a valid parentheses string path in the grid. Otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/15/example1drawio.png]


Input: grid = [[""("",""("",""(""],["")"",""("","")""],[""("",""("","")""],[""("",""("","")""]]
Output: true
Explanation: The above diagram shows two possible paths that form valid parentheses strings.
The first path shown results in the valid parentheses string ""()(())"".
The second path shown results in the valid parentheses string ""((()))"".
Note that there may be other valid parentheses string paths.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/15/example2drawio.png]


Input: grid = [["")"","")""],[""("",""(""]]
Output: false
Explanation: The two possible paths form the parentheses strings ""))("" and "")(("". Since neither of them are valid parentheses strings, we return false.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 100
 * grid[i][j] is either '(' or ')'.",Solutions (221),431,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-there-is-a-valid-parentheses-string-path/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hasValidPath(self, grid: List[List[str]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().hasValidPath(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def hasValidPath(self, grid: List[List[str]]) -> bool:
        pass"
False,0,0,2350,,Find Closest Number to Zero,find-closest-number-to-zero,False,37720,82942,2239,False,1,"Can you solve this real interview question? Find Closest Number to Zero - Given an integer array nums of size n, return the number with the value closest to 0 in nums. If there are multiple answers, return the number with the largest value.

 

Example 1:


Input: nums = [-4,-2,1,4,8]
Output: 1
Explanation:
The distance from -4 to 0 is |-4| = 4.
The distance from -2 to 0 is |-2| = 2.
The distance from 1 to 0 is |1| = 1.
The distance from 4 to 0 is |4| = 4.
The distance from 8 to 0 is |8| = 8.
Thus, the closest number to 0 in the array is 1.


Example 2:


Input: nums = [2,-1,1]
Output: 1
Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.


 

Constraints:

 * 1 <= n <= 1000
 * -105 <= nums[i] <= 105",Solutions (598),425,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/find-closest-number-to-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findClosestNumber(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findClosestNumber(self, nums: List[int]) -> int:
        return min(nums, key=lambda x: (abs(x), -x))"
False,0,0,2351,,Number of Ways to Buy Pens and Pencils,number-of-ways-to-buy-pens-and-pencils,False,20150,35446,2240,False,2,"Can you solve this real interview question? Number of Ways to Buy Pens and Pencils - You are given an integer total indicating the amount of money you have. You are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. You can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.

Return the number of distinct ways you can buy some number of pens and pencils.

 

Example 1:


Input: total = 20, cost1 = 10, cost2 = 5
Output: 9
Explanation: The price of a pen is 10 and the price of a pencil is 5.
- If you buy 0 pens, you can buy 0, 1, 2, 3, or 4 pencils.
- If you buy 1 pen, you can buy 0, 1, or 2 pencils.
- If you buy 2 pens, you cannot buy any pencils.
The total number of ways to buy pens and pencils is 5 + 3 + 1 = 9.


Example 2:


Input: total = 5, cost1 = 10, cost2 = 10
Output: 1
Explanation: The price of both pens and pencils are 10, which cost more than total, so you cannot buy any writing utensils. Therefore, there is only 1 way: buy 0 pens and 0 pencils.


 

Constraints:

 * 1 <= total, cost1, cost2 <= 106",Solutions (383),344,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    total: int = deserialize(""int"", read_line())
    cost1: int = deserialize(""int"", read_line())
    cost2: int = deserialize(""int"", read_line())
    ans = Solution().waysToBuyPensPencils(total, cost1, cost2)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def waysToBuyPensPencils(self, total: int, cost1: int, cost2: int) -> int:
        dp = [0] * (total + 1)
        dp[0] = 1
        
        for i in range(cost1, total + 1):
            dp[i] += dp[i - cost1]
            
        for i in range(cost2, total + 1):
            dp[i] += dp[i - cost2]
        
        return dp[total]"
False,0,0,2353,,Maximum Score of a Node Sequence,maximum-score-of-a-node-sequence,False,9517,25111,2242,False,3,"Can you solve this real interview question? Maximum Score of a Node Sequence - There is an undirected graph with n nodes, numbered from 0 to n - 1.

You are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A node sequence is valid if it meets the following conditions:

 * There is an edge connecting every pair of adjacent nodes in the sequence.
 * No node appears more than once in the sequence.

The score of a node sequence is defined as the sum of the scores of the nodes in the sequence.

Return the maximum score of a valid node sequence with a length of 4. If no such sequence exists, return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/15/ex1new3.png]


Input: scores = [5,2,9,8,4], edges = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
Output: 24
Explanation: The figure above shows the graph and the chosen node sequence [0,1,2,3].
The score of the node sequence is 5 + 2 + 9 + 8 = 24.
It can be shown that no other node sequence has a score of more than 24.
Note that the sequences [3,1,2,0] and [1,0,2,3] are also valid and have a score of 24.
The sequence [0,3,2,4] is not valid since no edge connects nodes 0 and 3.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/17/ex2.png]


Input: scores = [9,20,6,4,11,12], edges = [[0,3],[5,3],[2,4],[1,3]]
Output: -1
Explanation: The figure above shows the graph.
There are no valid node sequences of length 4, so we return -1.


 

Constraints:

 * n == scores.length
 * 4 <= n <= 5 * 104
 * 1 <= scores[i] <= 108
 * 0 <= edges.length <= 5 * 104
 * edges[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi
 * There are no duplicate edges.",Solutions (91),441,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-score-of-a-node-sequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    scores: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumScore(scores, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumScore(self, scores: List[int], edges: List[List[int]]) -> int:
        # Your code here
        pass"
False,0,0,2355,,Maximum Consecutive Floors Without Special Floors,maximum-consecutive-floors-without-special-floors,False,25333,48587,2274,False,2,"Can you solve this real interview question? Maximum Consecutive Floors Without Special Floors - Alice manages a company and has rented some floors of a building as office space. Alice has decided some of these floors should be special floors, used for relaxation only.

You are given two integers bottom and top, which denote that Alice has rented all the floors from bottom to top (inclusive). You are also given the integer array special, where special[i] denotes a special floor that Alice has designated for relaxation.

Return the maximum number of consecutive floors without a special floor.

 

Example 1:


Input: bottom = 2, top = 9, special = [4,6]
Output: 3
Explanation: The following are the ranges (inclusive) of consecutive floors without a special floor:
- (2, 3) with a total amount of 2 floors.
- (5, 5) with a total amount of 1 floor.
- (7, 9) with a total amount of 3 floors.
Therefore, we return the maximum number which is 3 floors.


Example 2:


Input: bottom = 6, top = 8, special = [7,6,8]
Output: 0
Explanation: Every floor rented is a special floor, so we return 0.


 

Constraints:

 * 1 <= special.length <= 105
 * 1 <= bottom <= special[i] <= top <= 109
 * All the values of special are unique.",Solutions (429),315,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-consecutive-floors-without-special-floors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    bottom: int = deserialize(""int"", read_line())
    top: int = deserialize(""int"", read_line())
    special: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxConsecutive(bottom, top, special)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxConsecutive(self, bottom: int, top: int, special: List[int]) -> int:
        special = set(special)
        max_length = 0
        temp_length = 0
        
        for i in range(bottom, top+1):
            if i not in special:
                temp_length += 1
            else:
                max_length = max(max_length, temp_length)
                temp_length = 0
        
        max_length = max(max_length, temp_length)
        
        return max_length"
False,0,0,2356,,Largest Combination With Bitwise AND Greater Than Zero,largest-combination-with-bitwise-and-greater-than-zero,False,20312,28071,2275,False,2,"Can you solve this real interview question? Largest Combination With Bitwise AND Greater Than Zero - The bitwise AND of an array nums is the bitwise AND of all integers in nums.

 * For example, for nums = [1, 5, 3], the bitwise AND is equal to 1 & 5 & 3 = 1.
 * Also, for nums = [7], the bitwise AND is 7.

You are given an array of positive integers candidates. Evaluate the bitwise AND of every combination of numbers of candidates. Each number in candidates may only be used once in each combination.

Return the size of the largest combination of candidates with a bitwise AND greater than 0.

 

Example 1:


Input: candidates = [16,17,71,62,12,24,14]
Output: 4
Explanation: The combination [16,17,62,24] has a bitwise AND of 16 & 17 & 62 & 24 = 16 > 0.
The size of the combination is 4.
It can be shown that no combination with a size greater than 4 has a bitwise AND greater than 0.
Note that more than one combination may have the largest size.
For example, the combination [62,12,24,14] has a bitwise AND of 62 & 12 & 24 & 14 = 8 > 0.


Example 2:


Input: candidates = [8,8]
Output: 2
Explanation: The largest combination [8,8] has a bitwise AND of 8 & 8 = 8 > 0.
The size of the combination is 2, so we return 2.


 

Constraints:

 * 1 <= candidates.length <= 105
 * 1 <= candidates[i] <= 107",Solutions (304),450,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-combination-with-bitwise-and-greater-than-zero/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestCombination(self, candidates: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    candidates: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().largestCombination(candidates)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestCombination(self, candidates: List[int]) -> int:
        return 0"
False,0,0,2358,,Number of Ways to Split Array,number-of-ways-to-split-array,False,25448,55710,2270,False,2,"Can you solve this real interview question? Number of Ways to Split Array - You are given a 0-indexed integer array nums of length n.

nums contains a valid split at index i if the following are true:

 * The sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.
 * There is at least one element to the right of i. That is, 0 <= i < n - 1.

Return the number of valid splits in nums.

 

Example 1:


Input: nums = [10,4,-8,7]
Output: 2
Explanation: 
There are three ways of splitting nums into two non-empty parts:
- Split nums at index 0. Then, the first part is [10], and its sum is 10. The second part is [4,-8,7], and its sum is 3. Since 10 >= 3, i = 0 is a valid split.
- Split nums at index 1. Then, the first part is [10,4], and its sum is 14. The second part is [-8,7], and its sum is -1. Since 14 >= -1, i = 1 is a valid split.
- Split nums at index 2. Then, the first part is [10,4,-8], and its sum is 6. The second part is [7], and its sum is 7. Since 6 < 7, i = 2 is not a valid split.
Thus, the number of valid splits in nums is 2.


Example 2:


Input: nums = [2,3,1,0]
Output: 2
Explanation: 
There are two valid splits in nums:
- Split nums at index 1. Then, the first part is [2,3], and its sum is 5. The second part is [1,0], and its sum is 1. Since 5 >= 1, i = 1 is a valid split. 
- Split nums at index 2. Then, the first part is [2,3,1], and its sum is 6. The second part is [0], and its sum is 0. Since 6 >= 0, i = 2 is a valid split.


 

Constraints:

 * 2 <= nums.length <= 105
 * -105 <= nums[i] <= 105",Solutions (401),411,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-split-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToSplitArray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().waysToSplitArray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToSplitArray(self, nums: List[int]) -> int:
        n = len(nums)
        prefix_sum = [0] * n 

        for i in range(n):
            prefix_sum[i] = prefix_sum[i - 1] + nums[i]

        total = prefix_sum[-1]
        result = 0
        left_sum = 0

        for i in range(n - 1):
            if prefix_sum[i] * 3 > total:
                break
            left_sum += nums[i]

            low, high = i + 1, n - 2
            while low < high:
                mid = (low + high) // 2
                mid_sum = prefix_sum[mid] - prefix_sum[i]
                right_sum = total - prefix_sum[i]
                
                if left_sum <= mid_sum <= right_sum:
                    result = (result + 1) % (10**9 + 7)
                    low = mid + 1
                elif mid_sum < left_sum:
                    low = mid + 1
                else:
                    high = mid - 1

        return result"
False,0,0,2359,,Maximum White Tiles Covered by a Carpet,maximum-white-tiles-covered-by-a-carpet,False,13087,39697,2271,False,2,"Can you solve this real interview question? Maximum White Tiles Covered by a Carpet - You are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.

You are also given an integer carpetLen, the length of a single carpet that can be placed anywhere.

Return the maximum number of white tiles that can be covered by the carpet.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/25/example1drawio3.png]


Input: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10
Output: 9
Explanation: Place the carpet starting on tile 10. 
It covers 9 white tiles, so we return 9.
Note that there may be other places where the carpet covers 9 white tiles.
It can be shown that the carpet cannot cover more than 9 white tiles.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/24/example2drawio.png]


Input: tiles = [[10,11],[1,1]], carpetLen = 2
Output: 2
Explanation: Place the carpet starting on tile 10. 
It covers 2 white tiles, so we return 2.


 

Constraints:

 * 1 <= tiles.length <= 5 * 104
 * tiles[i].length == 2
 * 1 <= li <= ri <= 109
 * 1 <= carpetLen <= 109
 * The tiles are non-overlapping.",Solutions (209),651,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-white-tiles-covered-by-a-carpet/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tiles: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    carpetLen: int = deserialize(""int"", read_line())
    ans = Solution().maximumWhiteTiles(tiles, carpetLen)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumWhiteTiles(self, tiles: List[List[int]], carpetLen: int) -> int:
        tiles.sort(key=lambda x: x[0])
        max_white = 0
        for i in range(len(tiles)):
            left = tiles[i][0]
            right = tiles[i][1]
            covered = 0
            for j in range(i, len(tiles)):
                if tiles[j][0] - right <= carpetLen:
                    right = max(right, tiles[j][1])
                    covered = right - left + 1
                else:
                    break
            max_white = max(max_white, covered)
        return max_white"
False,0,0,2360,,Substring With Largest Variance,substring-with-largest-variance,False,23534,63648,2272,False,3,"Can you solve this real interview question? Substring With Largest Variance - The variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. Note the two characters may or may not be the same.

Given a string s consisting of lowercase English letters only, return the largest variance possible among all substrings of s.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""aababbb""
Output: 3
Explanation:
All possible variances along with their respective substrings are listed below:
- Variance 0 for substrings ""a"", ""aa"", ""ab"", ""abab"", ""aababb"", ""ba"", ""b"", ""bb"", and ""bbb"".
- Variance 1 for substrings ""aab"", ""aba"", ""abb"", ""aabab"", ""ababb"", ""aababbb"", and ""bab"".
- Variance 2 for substrings ""aaba"", ""ababbb"", ""abbb"", and ""babb"".
- Variance 3 for substring ""babbb"".
Since the largest possible variance is 3, we return it.


Example 2:


Input: s = ""abcde""
Output: 0
Explanation:
No letter occurs more than once in s, so the variance of every substring is 0.


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of lowercase English letters.",Solutions (137),698,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/substring-with-largest-variance/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestVariance(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().largestVariance(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def largestVariance(self, s: str) -> int:
        max_variance = 0
        for i in range(len(s)):
            char_count = {}
            for j in range(i, len(s)):
                if s[j] in char_count:
                    max_variance = max(max_variance, abs(char_count[s[j]] - char_count[s[j - 1]]))
                char_count[s[j]] = char_count.get(s[j], 0) + 1
        return max_variance"
False,0,0,2361,,Calculate Digit Sum of a String,calculate-digit-sum-of-a-string,False,28987,43671,2243,False,1,"Can you solve this real interview question? Calculate Digit Sum of a String - You are given a string s consisting of digits and an integer k.

A round can be completed if the length of s is greater than k. In one round, do the following:

 1. Divide s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. Note that the size of the last group can be smaller than k.
 2. Replace each group of s with a string representing the sum of all its digits. For example, ""346"" is replaced with ""13"" because 3 + 4 + 6 = 13.
 3. Merge consecutive groups together to form a new string. If the length of the string is greater than k, repeat from step 1.

Return s after all rounds have been completed.

 

Example 1:


Input: s = ""11111222223"", k = 3
Output: ""135""
Explanation: 
- For the first round, we divide s into groups of size 3: ""111"", ""112"", ""222"", and ""23"".
  ​​​​​Then we calculate the digit sum of each group: 1 + 1 + 1 = 3, 1 + 1 + 2 = 4, 2 + 2 + 2 = 6, and 2 + 3 = 5. 
  So, s becomes ""3"" + ""4"" + ""6"" + ""5"" = ""3465"" after the first round.
- For the second round, we divide s into ""346"" and ""5"".
  Then we calculate the digit sum of each group: 3 + 4 + 6 = 13, 5 = 5. 
  So, s becomes ""13"" + ""5"" = ""135"" after second round. 
Now, s.length <= k, so we return ""135"" as the answer.


Example 2:


Input: s = ""00000000"", k = 3
Output: ""000""
Explanation: 
We divide s into ""000"", ""000"", and ""00"".
Then we calculate the digit sum of each group: 0 + 0 + 0 = 0, 0 + 0 + 0 = 0, and 0 + 0 = 0. 
s becomes ""0"" + ""0"" + ""0"" = ""000"", whose length is equal to k, so we return ""000"".


 

Constraints:

 * 1 <= s.length <= 100
 * 2 <= k <= 100
 * s consists of digits only.",Solutions (563),430,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/calculate-digit-sum-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def digitSum(self, s: str, k: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().digitSum(s, k)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def digitSum(self, s: str, k: int) -> str:
        while len(s) > k:
            groups = [s[i:i+k] for i in range(0, len(s), k)]
            s = """".join(str(sum(int(digit) for digit in group)) for group in groups)
        return s"
False,0,0,2362,minimum-rounds-to-complete-all-tasks,Minimum Rounds to Complete All Tasks,minimum-rounds-to-complete-all-tasks,False,130561,207446,2244,False,2,"Can you solve this real interview question? Minimum Rounds to Complete All Tasks - You are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. In each round, you can complete either 2 or 3 tasks of the same difficulty level.

Return the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.

 

Example 1:


Input: tasks = [2,2,3,3,2,4,4,4,4,4]
Output: 4
Explanation: To complete all the tasks, a possible plan is:
- In the first round, you complete 3 tasks of difficulty level 2. 
- In the second round, you complete 2 tasks of difficulty level 3. 
- In the third round, you complete 3 tasks of difficulty level 4. 
- In the fourth round, you complete 2 tasks of difficulty level 4.  
It can be shown that all the tasks cannot be completed in fewer than 4 rounds, so the answer is 4.


Example 2:


Input: tasks = [2,3,3]
Output: -1
Explanation: There is only 1 task of difficulty level 2, but in each round, you can only complete either 2 or 3 tasks of the same difficulty level. Hence, you cannot complete all the tasks, and the answer is -1.


 

Constraints:

 * 1 <= tasks.length <= 105
 * 1 <= tasks[i] <= 109",Solutions (2.5K),2.5K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-rounds-to-complete-all-tasks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumRounds(self, tasks: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumRounds(tasks)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumRounds(self, tasks: List[int]) -> int:
        counts = [0] * 10**9
        for t in tasks:
            counts[t] += 1
        
        rounds = 0
        while sum(counts) > 0:
            two = 0
            three = 0
            for i in range(1, len(counts)):
                if counts[i] >= 3:
                    counts[i] -= 3
                    three += 1
                elif counts[i] == 2:
                    counts[i] -= 2
                    two += 1
                elif counts[i] == 1:
                    counts[i] -= 1
            rounds += 1
            if two > 0:
                rounds += 1
            elif three > 0:
                rounds += 1
        
        return rounds if sum(counts) == 0 else -1"
False,0,0,2363,,Maximum Trailing Zeros in a Cornered Path,maximum-trailing-zeros-in-a-cornered-path,False,6902,19700,2245,False,2,"Can you solve this real interview question? Maximum Trailing Zeros in a Cornered Path - You are given a 2D integer array grid of size m x n, where each cell contains a positive integer.

A cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.

The product of a path is defined as the product of all the values in the path.

Return the maximum number of trailing zeros in the product of a cornered path found in grid.

Note:

 * Horizontal movement means moving in either the left or right direction.
 * Vertical movement means moving in either the up or down direction.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/23/ex1new2.jpg]


Input: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
Output: 3
Explanation: The grid on the left shows a valid cornered path.
It has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.
It can be shown that this is the maximum trailing zeros in the product of a cornered path.

The grid in the middle is not a cornered path as it has more than one turn.
The grid on the right is not a cornered path as it requires a return to a previously visited cell.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/25/ex2.jpg]


Input: grid = [[4,3,2],[7,6,1],[8,8,8]]
Output: 0
Explanation: The grid is shown in the figure above.
There are no cornered paths in the grid that result in a product with a trailing zero.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 105
 * 1 <= m * n <= 105
 * 1 <= grid[i][j] <= 1000",Solutions (174),155,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-trailing-zeros-in-a-cornered-path/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxTrailingZeros(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxTrailingZeros(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxTrailingZeros(self, grid: List[List[int]]) -> int:
        if not grid:
            return 0
        
        m, n = len(grid), len(grid[0])
        
        def num_trailing_zeros(num):
            count = 0
            while num % 10 == 0:
                count += 1
                num //= 10
            return count
        
        def dfs(i, j, visited, direction):
            if i < 0 or i >= m or j < 0 or j >= n or visited[i][j]:
                return 0
            visited[i][j] = True
            curr_num = grid[i][j]
            zeros = num_trailing_zeros(curr_num)
            if direction == 0:
                zeros += max(dfs(i+1, j, visited, 0), dfs(i-1, j, visited, 0))
            else:
                zeros += max(dfs(i, j+1, visited, 1), dfs(i, j-1, visited, 1))
            visited[i][j] = False
            return zeros
        
        max_zeros = 0
        visited = [[False for _ in range(n)] for _ in range(m)]
        for i in range(m):
            for j in range(n):
                zeros = dfs(i, j, visited, 0)
                max_zeros = max(max_zeros, zeros)
                zeros = dfs(i, j, visited, 1)
                max_zeros = max(max_zeros, zeros)
        
        return max_zeros"
False,0,0,2364,longest-path-with-different-adjacent-characters,Longest Path With Different Adjacent Characters,longest-path-with-different-adjacent-characters,False,65241,116884,2246,False,3,"Can you solve this real interview question? Longest Path With Different Adjacent Characters - You are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. The tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. Since node 0 is the root, parent[0] == -1.

You are also given a string s of length n, where s[i] is the character assigned to node i.

Return the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/25/testingdrawio.png]


Input: parent = [-1,0,0,1,1,2], s = ""abacbe""
Output: 3
Explanation: The longest path where each two adjacent nodes have different characters in the tree is the path: 0 -> 1 -> 3. The length of this path is 3, so 3 is returned.
It can be proven that there is no longer path that satisfies the conditions. 


Example 2:

[https://assets.leetcode.com/uploads/2022/03/25/graph2drawio.png]


Input: parent = [-1,0,0,0], s = ""aabc""
Output: 3
Explanation: The longest path where each two adjacent nodes have different characters is the path: 2 -> 0 -> 3. The length of this path is 3, so 3 is returned.


 

Constraints:

 * n == parent.length == s.length
 * 1 <= n <= 105
 * 0 <= parent[i] <= n - 1 for all i >= 1
 * parent[0] == -1
 * parent represents a valid tree.
 * s consists of only lowercase English letters.",Solutions (936),2.2K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-path-with-different-adjacent-characters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestPath(self, parent: List[int], s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    parent: List[int] = deserialize(""List[int]"", read_line())
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestPath(parent, s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestPath(self, parent: List[int], s: str) -> int:
        # Add your solution here
        pass"
False,0,0,2365,,Percentage of Letter in String,percentage-of-letter-in-string,False,47230,63876,2278,False,1,"Can you solve this real interview question? Percentage of Letter in String - Given a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.

 

Example 1:


Input: s = ""foobar"", letter = ""o""
Output: 33
Explanation:
The percentage of characters in s that equal the letter 'o' is 2 / 6 * 100% = 33% when rounded down, so we return 33.


Example 2:


Input: s = ""jjjj"", letter = ""k""
Output: 0
Explanation:
The percentage of characters in s that equal the letter 'k' is 0%, so we return 0.

 

Constraints:

 * 1 <= s.length <= 100
 * s consists of lowercase English letters.
 * letter is a lowercase English letter.",Solutions (916),365,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/percentage-of-letter-in-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def percentageLetter(self, s: str, letter: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    letter: str = deserialize(""str"", read_line())
    ans = Solution().percentageLetter(s, letter)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def percentageLetter(self, s: str, letter: str) -> int:
        return int((s.count(letter) / len(s)) * 100) if s.count(letter) > 0 else 0"
False,0,0,2366,maximum-bags-with-full-capacity-of-rocks,Maximum Bags With Full Capacity of Rocks,maximum-bags-with-full-capacity-of-rocks,False,84072,124096,2279,False,2,"Can you solve this real interview question? Maximum Bags With Full Capacity of Rocks - You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.

Return the maximum number of bags that could have full capacity after placing the additional rocks in some bags.

 

Example 1:


Input: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2
Output: 3
Explanation:
Place 1 rock in bag 0 and 1 rock in bag 1.
The number of rocks in each bag are now [2,3,4,4].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that there may be other ways of placing the rocks that result in an answer of 3.


Example 2:


Input: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100
Output: 3
Explanation:
Place 8 rocks in bag 0 and 2 rocks in bag 2.
The number of rocks in each bag are now [10,2,2].
Bags 0, 1, and 2 have full capacity.
There are 3 bags at full capacity, so we return 3.
It can be shown that it is not possible to have more than 3 bags at full capacity.
Note that we did not use all of the additional rocks.


 

Constraints:

 * n == capacity.length == rocks.length
 * 1 <= n <= 5 * 104
 * 1 <= capacity[i] <= 109
 * 0 <= rocks[i] <= capacity[i]
 * 1 <= additionalRocks <= 109",Solutions (2K),1.5K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-bags-with-full-capacity-of-rocks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    capacity: List[int] = deserialize(""List[int]"", read_line())
    rocks: List[int] = deserialize(""List[int]"", read_line())
    additionalRocks: int = deserialize(""int"", read_line())
    ans = Solution().maximumBags(capacity, rocks, additionalRocks)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumBags(self, capacity: List[int], rocks: List[int], additionalRocks: int) -> int:
        return min(sum(r + additionalRocks <= c for r, c in zip(rocks, capacity)), len(rocks))"
False,0,0,2367,,Minimum Lines to Represent a Line Chart,minimum-lines-to-represent-a-line-chart,False,21892,90136,2280,False,2,"Can you solve this real interview question? Minimum Lines to Represent a Line Chart - You are given a 2D integer array stockPrices where stockPrices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. A line chart is created from the array by plotting the points on an XY plane with the X-axis representing the day and the Y-axis representing the price and connecting adjacent points. One such example is shown below:

[https://assets.leetcode.com/uploads/2022/03/30/1920px-pushkin_population_historysvg.png]

Return the minimum number of lines needed to represent the line chart.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/03/30/ex0.png]


Input: stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]
Output: 3
Explanation:
The diagram above represents the input, with the X-axis representing the day and Y-axis representing the price.
The following 3 lines can be drawn to represent the line chart:
- Line 1 (in red) from (1,7) to (4,4) passing through (1,7), (2,6), (3,5), and (4,4).
- Line 2 (in blue) from (4,4) to (5,4).
- Line 3 (in green) from (5,4) to (8,1) passing through (5,4), (6,3), (7,2), and (8,1).
It can be shown that it is not possible to represent the line chart using less than 3 lines.


Example 2:

[https://assets.leetcode.com/uploads/2022/03/30/ex1.png]


Input: stockPrices = [[3,4],[1,2],[7,8],[2,3]]
Output: 1
Explanation:
As shown in the diagram above, the line chart can be represented with a single line.


 

Constraints:

 * 1 <= stockPrices.length <= 105
 * stockPrices[i].length == 2
 * 1 <= dayi, pricei <= 109
 * All dayi are distinct.",Solutions (413),303,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumLines(self, stockPrices: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stockPrices: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumLines(stockPrices)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumLines(self, stockPrices: List[List[int]]) -> int:
        return len(stockPrices) - 1"
False,0,0,2368,sum-of-total-strength-of-wizards,Sum of Total Strength of Wizards,sum-of-total-strength-of-wizards,False,13922,50872,2281,False,3,"Can you solve this real interview question? Sum of Total Strength of Wizards - As the ruler of a kingdom, you have an army of wizards at your command.

You are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. For a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:

 * The strength of the weakest wizard in the group.
 * The total of all the individual strengths of the wizards in the group.

Return the sum of the total strengths of all contiguous groups of wizards. Since the answer may be very large, return it modulo 109 + 7.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: strength = [1,3,1,2]
Output: 44
Explanation: The following are all the contiguous groups of wizards:
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [3] from [1,3,1,2] has a total strength of min([3]) * sum([3]) = 3 * 3 = 9
- [1] from [1,3,1,2] has a total strength of min([1]) * sum([1]) = 1 * 1 = 1
- [2] from [1,3,1,2] has a total strength of min([2]) * sum([2]) = 2 * 2 = 4
- [1,3] from [1,3,1,2] has a total strength of min([1,3]) * sum([1,3]) = 1 * 4 = 4
- [3,1] from [1,3,1,2] has a total strength of min([3,1]) * sum([3,1]) = 1 * 4 = 4
- [1,2] from [1,3,1,2] has a total strength of min([1,2]) * sum([1,2]) = 1 * 3 = 3
- [1,3,1] from [1,3,1,2] has a total strength of min([1,3,1]) * sum([1,3,1]) = 1 * 5 = 5
- [3,1,2] from [1,3,1,2] has a total strength of min([3,1,2]) * sum([3,1,2]) = 1 * 6 = 6
- [1,3,1,2] from [1,3,1,2] has a total strength of min([1,3,1,2]) * sum([1,3,1,2]) = 1 * 7 = 7
The sum of all the total strengths is 1 + 9 + 1 + 4 + 4 + 4 + 3 + 5 + 6 + 7 = 44.


Example 2:


Input: strength = [5,4,6]
Output: 213
Explanation: The following are all the contiguous groups of wizards: 
- [5] from [5,4,6] has a total strength of min([5]) * sum([5]) = 5 * 5 = 25
- [4] from [5,4,6] has a total strength of min([4]) * sum([4]) = 4 * 4 = 16
- [6] from [5,4,6] has a total strength of min([6]) * sum([6]) = 6 * 6 = 36
- [5,4] from [5,4,6] has a total strength of min([5,4]) * sum([5,4]) = 4 * 9 = 36
- [4,6] from [5,4,6] has a total strength of min([4,6]) * sum([4,6]) = 4 * 10 = 40
- [5,4,6] from [5,4,6] has a total strength of min([5,4,6]) * sum([5,4,6]) = 4 * 15 = 60
The sum of all the total strengths is 25 + 16 + 36 + 36 + 40 + 60 = 213.


 

Constraints:

 * 1 <= strength.length <= 105
 * 1 <= strength[i] <= 109",Solutions (114),933,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-total-strength-of-wizards/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalStrength(self, strength: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strength: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().totalStrength(strength)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalStrength(self, strength: List[int]) -> int:
        MOD = 10**9 + 7
        n = len(strength)
        
        prefix_sum = [0] * (n + 1)
        for i in range(n):
            prefix_sum[i + 1] = prefix_sum[i] + strength[i]
        
        stack = []
        total_strength = 0
        
        for i in range(n):
            while stack and strength[i] < strength[stack[-1]]:
                j = stack.pop()
                total_strength += (prefix_sum[i] - prefix_sum[j]) * strength[j]
                total_strength %= MOD
            stack.append(i)
        
        while stack:
            j = stack.pop()
            total_strength += (prefix_sum[n] - prefix_sum[j]) * strength[j]
            total_strength %= MOD
        
        return total_strength"
False,0,0,2372,,Rearrange Characters to Make Target String,rearrange-characters-to-make-target-string,False,30216,52017,2287,False,1,"Can you solve this real interview question? Rearrange Characters to Make Target String - You are given two 0-indexed strings s and target. You can take some letters from s and rearrange them to form new strings.

Return the maximum number of copies of target that can be formed by taking letters from s and rearranging them.

 

Example 1:


Input: s = ""ilovecodingonleetcode"", target = ""code""
Output: 2
Explanation:
For the first copy of ""code"", take the letters at indices 4, 5, 6, and 7.
For the second copy of ""code"", take the letters at indices 17, 18, 19, and 20.
The strings that are formed are ""ecod"" and ""code"" which can both be rearranged into ""code"".
We can make at most two copies of ""code"", so we return 2.


Example 2:


Input: s = ""abcba"", target = ""abc""
Output: 1
Explanation:
We can make one copy of ""abc"" by taking the letters at indices 0, 1, and 2.
We can make at most one copy of ""abc"", so we return 1.
Note that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of ""abc"".


Example 3:


Input: s = ""abbaccaddaeea"", target = ""aaaaa""
Output: 1
Explanation:
We can make one copy of ""aaaaa"" by taking the letters at indices 0, 3, 6, 9, and 12.
We can make at most one copy of ""aaaaa"", so we return 1.


 

Constraints:

 * 1 <= s.length <= 100
 * 1 <= target.length <= 10
 * s and target consist of lowercase English letters.",Solutions (528),359,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/rearrange-characters-to-make-target-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rearrangeCharacters(self, s: str, target: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().rearrangeCharacters(s, target)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rearrangeCharacters(self, s: str, target: str) -> int:
        import collections
        
        if len(target) == 0:
            return 0
        
        target_counter = collections.Counter(target)
        max_copies = 0
        
        for i in range(len(target), len(s)+1):
            if collections.Counter(s[i-len(target):i]) == target_counter:
                max_copies += 1
                
        return max_copies"
False,0,0,2373,,Apply Discount to Prices,apply-discount-to-prices,False,17203,61642,2288,False,2,"Can you solve this real interview question? Apply Discount to Prices - A sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. A word represents a price if it is a sequence of digits preceded by a dollar sign.

 * For example, ""$100"", ""$23"", and ""$6"" represent prices while ""100"", ""$"", and ""$1e5"" do not.

You are given a string sentence representing a sentence and an integer discount. For each word representing a price, apply a discount of discount% on the price and update the word in the sentence. All updated prices should be represented with exactly two decimal places.

Return a string representing the modified sentence.

Note that all prices will contain at most 10 digits.

 

Example 1:


Input: sentence = ""there are $1 $2 and 5$ candies in the shop"", discount = 50
Output: ""there are $0.50 $1.00 and 5$ candies in the shop""
Explanation: 
The words which represent prices are ""$1"" and ""$2"". 
- A 50% discount on ""$1"" yields ""$0.50"", so ""$1"" is replaced by ""$0.50"".
- A 50% discount on ""$2"" yields ""$1"". Since we need to have exactly 2 decimal places after a price, we replace ""$2"" with ""$1.00"".


Example 2:


Input: sentence = ""1 2 $3 4 $5 $6 7 8$ $9 $10$"", discount = 100
Output: ""1 2 $0.00 4 $0.00 $0.00 7 8$ $0.00 $10$""
Explanation: 
Applying a 100% discount on any price will result in 0.
The words representing prices are ""$3"", ""$5"", ""$6"", and ""$9"".
Each of them is replaced by ""$0.00"".


 

Constraints:

 * 1 <= sentence.length <= 105
 * sentence consists of lowercase English letters, digits, ' ', and '$'.
 * sentence does not have leading or trailing spaces.
 * All words in sentence are separated by a single space.
 * All prices will be positive numbers without leading zeros.
 * All prices will have at most 10 digits.
 * 0 <= discount <= 100",Solutions (392),152,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/apply-discount-to-prices/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def discountPrices(self, sentence: str, discount: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    discount: int = deserialize(""int"", read_line())
    ans = Solution().discountPrices(sentence, discount)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def discountPrices(self, sentence: str, discount: int) -> str:
        import re

        def apply_discount(match):
            price = float(match.group(0)[1:])
            discounted_price = price * (1 - discount / 100)
            return f""${discounted_price:.2f}""
        
        return re.sub(r'\$\d+\.?\d*', apply_discount, sentence)"
False,0,0,2374,,Steps to Make Array Non-decreasing,steps-to-make-array-non-decreasing,False,14192,67430,2289,False,2,"Can you solve this real interview question? Steps to Make Array Non-decreasing - You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.

Return the number of steps performed until nums becomes a non-decreasing array.

 

Example 1:


Input: nums = [5,3,4,4,7,3,6,11,8,5,11]
Output: 3
Explanation: The following are the steps performed:
- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]
- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]
- Step 3: [5,4,7,11,11] becomes [5,7,11,11]
[5,7,11,11] is a non-decreasing array. Therefore, we return 3.


Example 2:


Input: nums = [4,5,7,7,13]
Output: 0
Explanation: nums is already a non-decreasing array. Therefore, we return 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (169),1K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/steps-to-make-array-non-decreasing/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalSteps(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().totalSteps(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def totalSteps(self, nums: List[int]) -> int:
        steps = 0
        for i in range(1, len(nums)):
            if nums[i - 1] > nums[i]:
                steps += 1
                nums[i] = nums[i - 1]
        return steps"
False,0,0,2375,,Minimum Obstacle Removal to Reach Corner,minimum-obstacle-removal-to-reach-corner,False,15884,32075,2290,False,3,"Can you solve this real interview question? Minimum Obstacle Removal to Reach Corner - You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:

 * 0 represents an empty cell,
 * 1 represents an obstacle that may be removed.

You can move up, down, left, or right from and to an empty cell.

Return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/06/example1drawio-1.png]


Input: grid = [[0,1,1],[1,1,0],[1,1,0]]
Output: 2
Explanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).
It can be shown that we need to remove at least 2 obstacles, so we return 2.
Note that there may be other ways to remove 2 obstacles to create a path.


Example 2:

[https://assets.leetcode.com/uploads/2022/04/06/example1drawio.png]


Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
Output: 0
Explanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 105
 * 2 <= m * n <= 105
 * grid[i][j] is either 0 or 1.
 * grid[0][0] == grid[m - 1][n - 1] == 0",Solutions (301),712,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumObstacles(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumObstacles(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumObstacles(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        obstacles = [[float('inf') for _ in range(n)] for _ in range(m)]
        
        obstacles[0][0] = 0
        
        queue = deque([(0, 0)])
        
        while queue:
            x, y = queue.popleft()
            
            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                new_x, new_y = x + dx, y + dy
                
                if 0 <= new_x < m and 0 <= new_y < n:
                    new_obstacles = obstacles[x][y] + grid[new_x][new_y]
                    
                    if new_obstacles < obstacles[new_x][new_y]:
                        obstacles[new_x][new_y] = new_obstacles
                        queue.append((new_x, new_y))
        
        return obstacles[m - 1][n - 1] - grid[m-1][n-1]"
False,0,0,2377,,Check if Number Has Equal Digit Count and Digit Value,check-if-number-has-equal-digit-count-and-digit-value,False,37862,51723,2283,False,1,"Can you solve this real interview question? Check if Number Has Equal Digit Count and Digit Value - You are given a 0-indexed string num of length n consisting of digits.

Return true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.

 

Example 1:


Input: num = ""1210""
Output: true
Explanation:
num[0] = '1'. The digit 0 occurs once in num.
num[1] = '2'. The digit 1 occurs twice in num.
num[2] = '1'. The digit 2 occurs once in num.
num[3] = '0'. The digit 3 occurs zero times in num.
The condition holds true for every index in ""1210"", so return true.


Example 2:


Input: num = ""030""
Output: false
Explanation:
num[0] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.
num[1] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.
num[2] = '0'. The digit 2 occurs zero times in num.
The indices 0 and 1 both violate the condition, so return false.


 

Constraints:

 * n == num.length
 * 1 <= n <= 10
 * num consists of digits.",Solutions (741),426,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-number-has-equal-digit-count-and-digit-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def digitCount(self, num: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().digitCount(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def digitCount(self, num: str) -> bool:
        for i in range(len(num)):
            if num.count(str(i)) != int(num[i]):
                return False
        return True"
False,0,0,2378,,Sender With Largest Word Count,sender-with-largest-word-count,False,25913,46180,2284,False,2,"Can you solve this real interview question? Sender With Largest Word Count - You have a chat log of n messages. You are given two string arrays messages and senders where messages[i] is a message sent by senders[i].

A message is list of words that are separated by a single space with no leading or trailing spaces. The word count of a sender is the total number of words sent by the sender. Note that a sender may send more than one message.

Return the sender with the largest word count. If there is more than one sender with the largest word count, return the one with the lexicographically largest name.

Note:

 * Uppercase letters come before lowercase letters in lexicographical order.
 * ""Alice"" and ""alice"" are distinct.

 

Example 1:


Input: messages = [""Hello userTwooo"",""Hi userThree"",""Wonderful day Alice"",""Nice day userThree""], senders = [""Alice"",""userTwo"",""userThree"",""Alice""]
Output: ""Alice""
Explanation: Alice sends a total of 2 + 3 = 5 words.
userTwo sends a total of 2 words.
userThree sends a total of 3 words.
Since Alice has the largest word count, we return ""Alice"".


Example 2:


Input: messages = [""How is leetcode for everyone"",""Leetcode is useful for practice""], senders = [""Bob"",""Charlie""]
Output: ""Charlie""
Explanation: Bob sends a total of 5 words.
Charlie sends a total of 5 words.
Since there is a tie for the largest word count, we return the sender with the lexicographically larger name, Charlie.

 

Constraints:

 * n == messages.length == senders.length
 * 1 <= n <= 104
 * 1 <= messages[i].length <= 100
 * 1 <= senders[i].length <= 10
 * messages[i] consists of uppercase and lowercase English letters and ' '.
 * All the words in messages[i] are separated by a single space.
 * messages[i] does not have leading or trailing spaces.
 * senders[i] consists of uppercase and lowercase English letters only.",Solutions (538),310,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/sender-with-largest-word-count/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    messages: List[str] = deserialize(""List[str]"", read_line())
    senders: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().largestWordCount(messages, senders)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestWordCount(self, messages: List[str], senders: List[str]) -> str:
        sender_word_count = {}
        for i in range(len(messages)):
            sender = senders[i]
            words = messages[i].split()
            if sender in sender_word_count:
                sender_word_count[sender] += len(words)
            else:
                sender_word_count[sender] = len(words)

        max_word_count = max(sender_word_count.values())
        max_senders = [sender for sender, count in sender_word_count.items() if count == max_word_count]
        return max(max_senders)"
False,0,0,2379,,Maximum Total Importance of Roads,maximum-total-importance-of-roads,False,24478,40287,2285,False,2,"Can you solve this real interview question? Maximum Total Importance of Roads - You are given an integer n denoting the number of cities in a country. The cities are numbered from 0 to n - 1.

You are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.

You need to assign each city with an integer value from 1 to n, where each value can only be used once. The importance of a road is then defined as the sum of the values of the two cities it connects.

Return the maximum total importance of all roads possible after assigning the values optimally.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/07/ex1drawio.png]


Input: n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]
Output: 43
Explanation: The figure above shows the country and the assigned values of [2,4,5,3,1].
- The road (0,1) has an importance of 2 + 4 = 6.
- The road (1,2) has an importance of 4 + 5 = 9.
- The road (2,3) has an importance of 5 + 3 = 8.
- The road (0,2) has an importance of 2 + 5 = 7.
- The road (1,3) has an importance of 4 + 3 = 7.
- The road (2,4) has an importance of 5 + 1 = 6.
The total importance of all roads is 6 + 9 + 8 + 7 + 7 + 6 = 43.
It can be shown that we cannot obtain a greater total importance than 43.


Example 2:

[https://assets.leetcode.com/uploads/2022/04/07/ex2drawio.png]


Input: n = 5, roads = [[0,3],[2,4],[1,3]]
Output: 20
Explanation: The figure above shows the country and the assigned values of [4,3,2,5,1].
- The road (0,3) has an importance of 4 + 5 = 9.
- The road (2,4) has an importance of 2 + 1 = 3.
- The road (1,3) has an importance of 3 + 5 = 8.
The total importance of all roads is 9 + 3 + 8 = 20.
It can be shown that we cannot obtain a greater total importance than 20.


 

Constraints:

 * 2 <= n <= 5 * 104
 * 1 <= roads.length <= 5 * 104
 * roads[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi
 * There are no duplicate roads.",Solutions (508),572,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-total-importance-of-roads/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    roads: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maximumImportance(n, roads)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maximumImportance(self, n: int, roads: List[List[int]]) -> int:
        from collections import defaultdict
        graph = defaultdict(list)
        for road in roads:
            a, b = road
            graph[a].append(b)
            graph[b].append(a)
        
        visited = [False] * n
        values = [-1] * n
        
        def dfs(node, val):
            visited[node] = True
            values[node] = val
            importance = 0
            for neighbor in graph[node]:
                if not visited[neighbor]:
                    importance += val + dfs(neighbor, n - val)
            return importance
        
        return dfs(0, n)"
False,0,0,2383,,Add Two Integers,add-two-integers,False,248820,281158,2235,False,1,"Can you solve this real interview question? Add Two Integers - Given two integers num1 and num2, return the sum of the two integers.

 

Example 1:


Input: num1 = 12, num2 = 5
Output: 17
Explanation: num1 is 12, num2 is 5, and their sum is 12 + 5 = 17, so 17 is returned.


Example 2:


Input: num1 = -10, num2 = 4
Output: -6
Explanation: num1 + num2 = -6, so -6 is returned.


 

Constraints:

 * -100 <= num1, num2 <= 100",Solutions (920),958,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/add-two-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sum(self, num1: int, num2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: int = deserialize(""int"", read_line())
    num2: int = deserialize(""int"", read_line())
    ans = Solution().sum(num1, num2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def sum(self, num1: int, num2: int) -> int:
        return num1 + num2"
False,0,0,2386,,Min Max Game,min-max-game,False,35576,55824,2293,False,1,"Can you solve this real interview question? Min Max Game - You are given a 0-indexed integer array nums whose length is a power of 2.

Apply the following algorithm on nums:

 1. Let n be the length of nums. If n == 1, end the process. Otherwise, create a new 0-indexed integer array newNums of length n / 2.
 2. For every even index i where 0 <= i < n / 2, assign the value of newNums[i] as min(nums[2 * i], nums[2 * i + 1]).
 3. For every odd index i where 0 <= i < n / 2, assign the value of newNums[i] as max(nums[2 * i], nums[2 * i + 1]).
 4. Replace the array nums with newNums.
 5. Repeat the entire process starting from step 1.

Return the last number that remains in nums after applying the algorithm.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/04/13/example1drawio-1.png]


Input: nums = [1,3,5,2,4,8,2,2]
Output: 1
Explanation: The following arrays are the results of applying the algorithm repeatedly.
First: nums = [1,5,4,2]
Second: nums = [1,4]
Third: nums = [1]
1 is the last remaining number, so we return 1.


Example 2:


Input: nums = [3]
Output: 3
Explanation: 3 is already the last remaining number, so we return 3.


 

Constraints:

 * 1 <= nums.length <= 1024
 * 1 <= nums[i] <= 109
 * nums.length is a power of 2.",Solutions (638),411,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/min-max-game/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMaxGame(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minMaxGame(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMaxGame(self, nums: List[int]) -> int:
        while len(nums) > 1:
            newNums = []
            for i in range(0, len(nums) // 2):
                newNums.append(min(nums[2*i], nums[2*i+1]))
                newNums.append(max(nums[2*i], nums[2*i+1]))
            nums = newNums
        return nums[0]"
False,0,0,2387,,Partition Array Such That Maximum Difference Is K,partition-array-such-that-maximum-difference-is-k,False,30548,42052,2294,False,2,"Can you solve this real interview question? Partition Array Such That Maximum Difference Is K - You are given an integer array nums and an integer k. You may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.

Return the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [3,6,1,2,5], k = 2
Output: 2
Explanation:
We can partition nums into the two subsequences [3,1,2] and [6,5].
The difference between the maximum and minimum value in the first subsequence is 3 - 1 = 2.
The difference between the maximum and minimum value in the second subsequence is 6 - 5 = 1.
Since two subsequences were created, we return 2. It can be shown that 2 is the minimum number of subsequences needed.


Example 2:


Input: nums = [1,2,3], k = 1
Output: 2
Explanation:
We can partition nums into the two subsequences [1,2] and [3].
The difference between the maximum and minimum value in the first subsequence is 2 - 1 = 1.
The difference between the maximum and minimum value in the second subsequence is 3 - 3 = 0.
Since two subsequences were created, we return 2. Note that another optimal solution is to partition nums into the two subsequences [1] and [2,3].


Example 3:


Input: nums = [2,2,4,5], k = 0
Output: 3
Explanation:
We can partition nums into the three subsequences [2,2], [4], and [5].
The difference between the maximum and minimum value in the first subsequences is 2 - 2 = 0.
The difference between the maximum and minimum value in the second subsequences is 4 - 4 = 0.
The difference between the maximum and minimum value in the third subsequences is 5 - 5 = 0.
Since three subsequences were created, we return 3. It can be shown that 3 is the minimum number of subsequences needed.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 105
 * 0 <= k <= 105",Solutions (586),581,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-array-such-that-maximum-difference-is-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def partitionArray(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().partitionArray(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def partitionArray(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2388,,Replace Elements in an Array,replace-elements-in-an-array,False,27656,48017,2295,False,2,"Can you solve this real interview question? Replace Elements in an Array - You are given a 0-indexed array nums that consists of n distinct positive integers. Apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1].

It is guaranteed that in the ith operation:

 * operations[i][0] exists in nums.
 * operations[i][1] does not exist in nums.

Return the array obtained after applying all the operations.

 

Example 1:


Input: nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]
Output: [3,2,7,1]
Explanation: We perform the following operations on nums:
- Replace the number 1 with 3. nums becomes [3,2,4,6].
- Replace the number 4 with 7. nums becomes [3,2,7,6].
- Replace the number 6 with 1. nums becomes [3,2,7,1].
We return the final array [3,2,7,1].


Example 2:


Input: nums = [1,2], operations = [[1,3],[2,1],[3,2]]
Output: [2,1]
Explanation: We perform the following operations to nums:
- Replace the number 1 with 3. nums becomes [3,2].
- Replace the number 2 with 1. nums becomes [3,1].
- Replace the number 3 with 2. nums becomes [2,1].
We return the array [2,1].


 

Constraints:

 * n == nums.length
 * m == operations.length
 * 1 <= n, m <= 105
 * All the values of nums are distinct.
 * operations[i].length == 2
 * 1 <= nums[i], operations[i][0], operations[i][1] <= 106
 * operations[i][0] will exist in nums when applying the ith operation.
 * operations[i][1] will not exist in nums when applying the ith operation.",Solutions (515),506,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/replace-elements-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    operations: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().arrayChange(nums, operations)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def arrayChange(self, nums: List[int], operations: List[List[int]]) -> List[int]:
        new_nums = nums.copy()
        for operation in operations:
            new_nums[new_nums.index(operation[0])] = operation[1]
        return new_nums"
False,0,0,2390,naming-a-company,Naming a Company,naming-a-company,False,54728,116251,2306,False,3,"Can you solve this real interview question? Naming a Company - You are given an array of strings ideas that represents a list of names to be used in the process of naming a company. The process of naming a company is as follows:

 1. Choose 2 distinct names from ideas, call them ideaA and ideaB.
 2. Swap the first letters of ideaA and ideaB with each other.
 3. If both of the new names are not found in the original ideas, then the name ideaA ideaB (the concatenation of ideaA and ideaB, separated by a space) is a valid company name.
 4. Otherwise, it is not a valid name.

Return the number of distinct valid names for the company.

 

Example 1:


Input: ideas = [""coffee"",""donuts"",""time"",""toffee""]
Output: 6
Explanation: The following selections are valid:
- (""coffee"", ""donuts""): The company name created is ""doffee conuts"".
- (""donuts"", ""coffee""): The company name created is ""conuts doffee"".
- (""donuts"", ""time""): The company name created is ""tonuts dime"".
- (""donuts"", ""toffee""): The company name created is ""tonuts doffee"".
- (""time"", ""donuts""): The company name created is ""dime tonuts"".
- (""toffee"", ""donuts""): The company name created is ""doffee tonuts"".
Therefore, there are a total of 6 distinct company names.

The following are some examples of invalid selections:
- (""coffee"", ""time""): The name ""toffee"" formed after swapping already exists in the original array.
- (""time"", ""toffee""): Both names are still the same after swapping and exist in the original array.
- (""coffee"", ""toffee""): Both names formed after swapping already exist in the original array.


Example 2:


Input: ideas = [""lack"",""back""]
Output: 0
Explanation: There are no valid selections. Therefore, 0 is returned.


 

Constraints:

 * 2 <= ideas.length <= 5 * 104
 * 1 <= ideas[i].length <= 10
 * ideas[i] consists of lowercase English letters.
 * All the strings in ideas are unique.",Solutions (606),1.8K,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/naming-a-company/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctNames(self, ideas: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ideas: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().distinctNames(ideas)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def distinctNames(self, ideas: List[str]) -> int:
        pass"
False,0,0,2391,,Strong Password Checker II,strong-password-checker-ii,False,30007,53283,2299,False,1,"Can you solve this real interview question? Strong Password Checker II - A password is said to be strong if it satisfies all the following criteria:

 * It has at least 8 characters.
 * It contains at least one lowercase letter.
 * It contains at least one uppercase letter.
 * It contains at least one digit.
 * It contains at least one special character. The special characters are the characters in the following string: ""!@#$%^&*()-+"".
 * It does not contain 2 of the same character in adjacent positions (i.e., ""aab"" violates this condition, but ""aba"" does not).

Given a string password, return true if it is a strong password. Otherwise, return false.

 

Example 1:


Input: password = ""IloveLe3tcode!""
Output: true
Explanation: The password meets all the requirements. Therefore, we return true.


Example 2:


Input: password = ""Me+You--IsMyDream""
Output: false
Explanation: The password does not contain a digit and also contains 2 of the same character in adjacent positions. Therefore, we return false.


Example 3:


Input: password = ""1aB!""
Output: false
Explanation: The password does not meet the length requirement. Therefore, we return false.

 

Constraints:

 * 1 <= password.length <= 100
 * password consists of letters, digits, and special characters: ""!@#$%^&*()-+"".",Solutions (557),262,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/strong-password-checker-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    password: str = deserialize(""str"", read_line())
    ans = Solution().strongPasswordCheckerII(password)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def strongPasswordCheckerII(self, password: str) -> bool:
        return len(password) >= 8 and any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password) and any(c in ""!@#$%^&*()-+"" for c in password) and not any(password[i] == password[i+1] for i in range(len(password) - 1))"
False,0,0,2392,successful-pairs-of-spells-and-potions,Successful Pairs of Spells and Potions,successful-pairs-of-spells-and-potions,False,22430,69001,2300,False,2,"Can you solve this real interview question? Successful Pairs of Spells and Potions - You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

 

Example 1:


Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.


Example 2:


Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]
Explanation:
- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.
- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. 
- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. 
Thus, [2,0,2] is returned.


 

Constraints:

 * n == spells.length
 * m == potions.length
 * 1 <= n, m <= 105
 * 1 <= spells[i], potions[i] <= 105
 * 1 <= success <= 1010",Solutions (419),484,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/successful-pairs-of-spells-and-potions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    spells: List[int] = deserialize(""List[int]"", read_line())
    potions: List[int] = deserialize(""List[int]"", read_line())
    success: int = deserialize(""int"", read_line())
    ans = Solution().successfulPairs(spells, potions, success)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        pairs = []
        for i in range(len(spells)):
            count = 0
            for potion in potions:
                if spells[i] * potion >= success:
                    count += 1
            pairs.append(count)
        return pairs"
False,0,0,2393,,Match Substring After Replacement,match-substring-after-replacement,False,11199,28376,2301,False,3,"Can you solve this real interview question? Match Substring After Replacement - You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:

 * Replace a character oldi of sub with newi.

Each character in sub cannot be replaced more than once.

Return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. Otherwise, return false.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:


Input: s = ""fool3e7bar"", sub = ""leet"", mappings = [[""e"",""3""],[""t"",""7""],[""t"",""8""]]
Output: true
Explanation: Replace the first 'e' in sub with '3' and 't' in sub with '7'.
Now sub = ""l3e7"" is a substring of s, so we return true.

Example 2:


Input: s = ""fooleetbar"", sub = ""f00l"", mappings = [[""o"",""0""]]
Output: false
Explanation: The string ""f00l"" is not a substring of s and no replacements can be made.
Note that we cannot replace '0' with 'o'.


Example 3:


Input: s = ""Fool33tbaR"", sub = ""leetd"", mappings = [[""e"",""3""],[""t"",""7""],[""t"",""8""],[""d"",""b""],[""p"",""b""]]
Output: true
Explanation: Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.
Now sub = ""l33tb"" is a substring of s, so we return true.



 

Constraints:

 * 1 <= sub.length <= s.length <= 5000
 * 0 <= mappings.length <= 1000
 * mappings[i].length == 2
 * oldi != newi
 * s and sub consist of uppercase and lowercase English letters and digits.
 * oldi and newi are either uppercase or lowercase English letters or digits.",Solutions (215),324,"# Created by asetti2002 at 2024/04/17 02:06
# leetgo: 1.4.3
# https://leetcode.com/problems/match-substring-after-replacement/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    sub: str = deserialize(""str"", read_line())
    mappings: List[List[str]] = deserialize(""List[List[str]]"", read_line())
    ans = Solution().matchReplacement(s, sub, mappings)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def matchReplacement(self, s: str, sub: str, mappings: List[List[str]]) -> bool:
        def dfs(s, sub):
            if len(sub) == 0:
                return True
            if len(s) < len(sub):
                return False
            if sub[0] not in mapping:
                return any(dfs(s[i+1:], sub[1:]) for i in range(len(s)))
            for old, new in mapping[sub[0]]:
                if s.startswith(old):
                    if dfs(s[1:], sub[1:]):
                        return True
            return False
        
        mapping = {}
        for old, new in mappings:
            if old not in mapping:
                mapping[old] = set()
            mapping[old].add(new)
        
        return dfs(s, sub)"
False,0,0,2394,,Count Subarrays With Score Less Than K,count-subarrays-with-score-less-than-k,False,16227,31022,2302,False,3,"Can you solve this real interview question? Count Subarrays With Score Less Than K - The score of an array is defined as the product of its sum and its length.

 * For example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75.

Given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:


Input: nums = [2,1,4,3,5], k = 10
Output: 6
Explanation:
The 6 subarrays having scores less than 10 are:
- [2] with score 2 * 1 = 2.
- [1] with score 1 * 1 = 1.
- [4] with score 4 * 1 = 4.
- [3] with score 3 * 1 = 3. 
- [5] with score 5 * 1 = 5.
- [2,1] with score (2 + 1) * 2 = 6.
Note that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.

Example 2:


Input: nums = [1,1,1], k = 5
Output: 5
Explanation:
Every subarray except [1,1,1] has a score less than 5.
[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.
Thus, there are 5 subarrays having scores less than 5.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 105
 * 1 <= k <= 1015",Solutions (348),721,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-subarrays-with-score-less-than-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countSubarrays(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        res = 0
        prefix_product = 1
        start = 0

        for end in range(len(nums)):
            prefix_product *= nums[end]

            while prefix_product >= k and start <= end:
                prefix_product /= nums[start]
                start += 1

            if prefix_product < k:
                res += end - start + 1

        return res"
False,0,0,2395,,Longest Binary Subsequence Less Than or Equal to K,longest-binary-subsequence-less-than-or-equal-to-k,False,18258,49140,2311,False,2,"Can you solve this real interview question? Longest Binary Subsequence Less Than or Equal to K - You are given a binary string s and a positive integer k.

Return the length of the longest subsequence of s that makes up a binary number less than or equal to k.

Note:

 * The subsequence can contain leading zeroes.
 * The empty string is considered to be equal to 0.
 * A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:


Input: s = ""1001010"", k = 5
Output: 5
Explanation: The longest subsequence of s that makes up a binary number less than or equal to 5 is ""00010"", as this number is equal to 2 in decimal.
Note that ""00100"" and ""00101"" are also possible, which are equal to 4 and 5 in decimal, respectively.
The length of this subsequence is 5, so 5 is returned.


Example 2:


Input: s = ""00101001"", k = 1
Output: 6
Explanation: ""000001"" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.
The length of this subsequence is 6, so 6 is returned.


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either '0' or '1'.
 * 1 <= k <= 109",Solutions (393),582,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-binary-subsequence-less-than-or-equal-to-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubsequence(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().longestSubsequence(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubsequence(self, s: str, k: int) -> int:
        def to_decimal(binary):
            return int(binary, 2)

        def to_binary(decimal):
            return bin(decimal)[2:]

        def is_subsequence(sub, target):
            i = 0
            for j in range(len(target)):
                if i < len(sub) and sub[i] == target[j]:
                    i += 1
            return i == len(sub)

        max_len = 0
        for i in range(1, 2 ** len(s)):
            binary = to_binary(i)
            if is_subsequence(binary, s) and to_decimal(binary) <= k:
                max_len = max(max_len, len(binary))

        return max_len"
False,0,0,2397,,Count Number of Ways to Place Houses,count-number-of-ways-to-place-houses,False,21822,53694,2320,False,2,"Can you solve this real interview question? Count Number of Ways to Place Houses - There is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed.

Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo 109 + 7.

Note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.

 

Example 1:


Input: n = 1
Output: 4
Explanation: 
Possible arrangements:
1. All plots are empty.
2. A house is placed on one side of the street.
3. A house is placed on the other side of the street.
4. Two houses are placed, one on each side of the street.


Example 2:

[https://assets.leetcode.com/uploads/2022/05/12/arrangements.png]


Input: n = 2
Output: 9
Explanation: The 9 possible arrangements are shown in the diagram above.


 

Constraints:

 * 1 <= n <= 104",Solutions (381),442,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-ways-to-place-houses/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countHousePlacements(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countHousePlacements(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countHousePlacements(self, n: int) -> int:
        MOD = 10**9 + 7
        
        if n == 0:
            return 1
        elif n == 1:
            return 4
        
        dp = [0] * (n + 1)
        dp[0], dp[1] = 1, 4
        
        for i in range(2, n + 1):
            dp[i] = (dp[i - 1] * 3 + dp[i - 2] * 2) % MOD
        
        return dp[n]"
False,0,0,2398,,Check if Matrix Is X-Matrix,check-if-matrix-is-x-matrix,False,36833,55231,2319,False,1,"Can you solve this real interview question? Check if Matrix Is X-Matrix - A square matrix is said to be an X-Matrix if both of the following conditions hold:

 1. All the elements in the diagonals of the matrix are non-zero.
 2. All other elements are 0.

Given a 2D integer array grid of size n x n representing a square matrix, return true if grid is an X-Matrix. Otherwise, return false.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/05/03/ex1.jpg]


Input: grid = [[2,0,0,1],[0,3,1,0],[0,5,2,0],[4,0,0,2]]
Output: true
Explanation: Refer to the diagram above. 
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is an X-Matrix.


Example 2:

[https://assets.leetcode.com/uploads/2022/05/03/ex2.jpg]


Input: grid = [[5,7,0],[0,3,1],[0,5,0]]
Output: false
Explanation: Refer to the diagram above.
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is not an X-Matrix.


 

Constraints:

 * n == grid.length == grid[i].length
 * 3 <= n <= 100
 * 0 <= grid[i][j] <= 105",Solutions (596),348,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-matrix-is-x-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkXMatrix(self, grid: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkXMatrix(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkXMatrix(self, grid: List[List[int]]) -> bool:
        n = len(grid)
        for i in range(n):
            for j in range(n):
                if i == j:
                    if grid[i][j] == 0:
                        return False
                else:
                    if grid[i][j] != 0:
                        return False
        return True"
False,0,0,2400,,Minimum Score After Removals on a Tree,minimum-score-after-removals-on-a-tree,False,5394,10619,2322,False,3,"Can you solve this real interview question? Minimum Score After Removals on a Tree - There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Remove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:

 1. Get the XOR of all the values of the nodes for each of the three components respectively.
 2. The difference between the largest XOR value and the smallest XOR value is the score of the pair.

 * For example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.

Return the minimum score of any possible pair of edge removals on the given tree.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/05/03/ex1drawio.png]


Input: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]
Output: 9
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.
- The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1.
- The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5.
The score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.
It can be shown that no other pair of removals will obtain a smaller score than 9.


Example 2:

[https://assets.leetcode.com/uploads/2022/05/03/ex2drawio.png]


Input: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]
Output: 0
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.
- The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.
- The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.
The score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.
We cannot obtain a smaller score than 0.


 

Constraints:

 * n == nums.length
 * 3 <= n <= 1000
 * 1 <= nums[i] <= 108
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * edges represents a valid tree.",Solutions (116),371,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-score-after-removals-on-a-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumScore(nums, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumScore(self, nums: List[int], edges: List[List[int]]) -> int:
        pass"
False,0,0,2401,,Count Asterisks,count-asterisks,False,42790,52079,2315,False,1,"Can you solve this real interview question? Count Asterisks - You are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.

Return the number of '*' in s, excluding the '*' between each pair of '|'.

Note that each '|' will belong to exactly one pair.

 

Example 1:


Input: s = ""l|*e*et|c**o|*de|""
Output: 2
Explanation: The considered characters are underlined: ""l|*e*et|c**o|*de|"".
The characters between the first and second '|' are excluded from the answer.
Also, the characters between the third and fourth '|' are excluded from the answer.
There are 2 asterisks considered. Therefore, we return 2.

Example 2:


Input: s = ""iamprogrammer""
Output: 0
Explanation: In this example, there are no asterisks in s. Therefore, we return 0.


Example 3:


Input: s = ""yo|uar|e**|b|e***au|tifu|l""
Output: 5
Explanation: The considered characters are underlined: ""yo|uar|e**|b|e***au|tifu|l"". There are 5 asterisks considered. Therefore, we return 5.

 

Constraints:

 * 1 <= s.length <= 1000
 * s consists of lowercase English letters, vertical bars '|', and asterisks '*'.
 * s contains an even number of vertical bars '|'.",Solutions (1K),432,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-asterisks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countAsterisks(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countAsterisks(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countAsterisks(self, s: str) -> int:
        count = 0
        i = 0
        
        while i < len(s):
            if s[i] == '|':
                while i < len(s) and s[i] != '|':
                    i += 1
            if i < len(s) and s[i] == '*':
                count += 1
            i += 1
            
        return count"
False,0,0,2402,,Maximum XOR After Operations ,maximum-xor-after-operations,False,16912,21363,2317,False,2,"Can you solve this real interview question? Maximum XOR After Operations  - You are given a 0-indexed integer array nums. In one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] AND (nums[i] XOR x).

Note that AND is the bitwise AND operation and XOR is the bitwise XOR operation.

Return the maximum possible bitwise XOR of all elements of nums after applying the operation any number of times.

 

Example 1:


Input: nums = [3,2,4,6]
Output: 7
Explanation: Apply the operation with x = 4 and i = 3, num[3] = 6 AND (6 XOR 4) = 6 AND 2 = 2.
Now, nums = [3, 2, 4, 2] and the bitwise XOR of all the elements = 3 XOR 2 XOR 4 XOR 2 = 7.
It can be shown that 7 is the maximum possible bitwise XOR.
Note that other operations may be used to achieve a bitwise XOR of 7.

Example 2:


Input: nums = [1,2,3,9,2]
Output: 11
Explanation: Apply the operation zero times.
The bitwise XOR of all the elements = 1 XOR 2 XOR 3 XOR 9 XOR 2 = 11.
It can be shown that 11 is the maximum possible bitwise XOR.

 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 108",Solutions (266),461,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-xor-after-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumXOR(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumXOR(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumXOR(self, nums: List[int]) -> int:
        pass"
False,0,0,2403,count-unreachable-pairs-of-nodes-in-an-undirected-graph,Count Unreachable Pairs of Nodes in an Undirected Graph,count-unreachable-pairs-of-nodes-in-an-undirected-graph,False,21770,56038,2316,False,2,"Can you solve this real interview question? Count Unreachable Pairs of Nodes in an Undirected Graph - You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1. You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/05/05/tc-3.png]


Input: n = 3, edges = [[0,1],[0,2],[1,2]]
Output: 0
Explanation: There are no pairs of nodes that are unreachable from each other. Therefore, we return 0.


Example 2:

[https://assets.leetcode.com/uploads/2022/05/05/tc-2.png]


Input: n = 7, edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]
Output: 14
Explanation: There are 14 pairs of nodes that are unreachable from each other:
[[0,1],[0,3],[0,6],[1,2],[1,3],[1,4],[1,5],[2,3],[2,6],[3,4],[3,5],[3,6],[4,6],[5,6]].
Therefore, we return 14.


 

Constraints:

 * 1 <= n <= 105
 * 0 <= edges.length <= 2 * 105
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * There are no repeated edges.",Solutions (1.3K),1.7K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-unreachable-pairs-of-nodes-in-an-undirected-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countPairs(n, edges)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countPairs(self, n: int, edges: List[List[int]]) -> int:
        return 0"
False,0,0,2404,,Number of Distinct Roll Sequences,number-of-distinct-roll-sequences,False,8363,14871,2318,False,3,"Can you solve this real interview question? Number of Distinct Roll Sequences - You are given an integer n. You roll a fair 6-sided dice n times. Determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:

 1. The greatest common divisor of any adjacent values in the sequence is equal to 1.
 2. There is at least a gap of 2 rolls between equal valued rolls. More formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.

Return the total number of distinct sequences possible. Since the answer may be very large, return it modulo 109 + 7.

Two sequences are considered distinct if at least one element is different.

 

Example 1:


Input: n = 4
Output: 184
Explanation: Some of the possible sequences are (1, 2, 3, 4), (6, 1, 2, 3), (1, 2, 3, 1), etc.
Some invalid sequences are (1, 2, 1, 3), (1, 2, 3, 6).
(1, 2, 1, 3) is invalid since the first and third roll have an equal value and abs(1 - 3) = 2 (i and j are 1-indexed).
(1, 2, 3, 6) is invalid since the greatest common divisor of 3 and 6 = 3.
There are a total of 184 distinct sequences possible, so we return 184.

Example 2:


Input: n = 2
Output: 22
Explanation: Some of the possible sequences are (1, 2), (2, 1), (3, 2).
Some invalid sequences are (3, 6), (2, 4) since the greatest common divisor is not equal to 1.
There are a total of 22 distinct sequences possible, so we return 22.


 

Constraints:

 * 1 <= n <= 104",Solutions (216),366,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-distinct-roll-sequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctSequences(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().distinctSequences(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctSequences(self, n: int) -> int:
        MOD = 10**9 + 7
        dp = [[0] * 6 for _ in range(n)]

        for j in range(6):
            dp[0][j] = 1
        
        for i in range(1, n):
            for j in range(6):
                for k in range(6):
                    if math.gcd(j + 1, k + 1) == 1 and abs(j - k) > 1:
                        dp[i][j] = (dp[i][j] + dp[i-1][k]) % MOD
        
        return sum(dp[-1]) % MOD"
False,0,0,2406,,Decode the Message,decode-the-message,False,54025,63877,2325,False,1,"Can you solve this real interview question? Decode the Message - You are given the strings key and message, which represent a cipher key and a secret message, respectively. The steps to decode message are as follows:

 1. Use the first appearance of all 26 lowercase English letters in key as the order of the substitution table.
 2. Align the substitution table with the regular English alphabet.
 3. Each letter in message is then substituted using the table.
 4. Spaces ' ' are transformed to themselves.

 * For example, given key = ""happy boy"" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f').

Return the decoded message.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/05/08/ex1new4.jpg]


Input: key = ""the quick brown fox jumps over the lazy dog"", message = ""vkbs bs t suepuv""
Output: ""this is a secret""
Explanation: The diagram above shows the substitution table.
It is obtained by taking the first appearance of each letter in ""the quick brown fox jumps over the lazy dog"".


Example 2:

[https://assets.leetcode.com/uploads/2022/05/08/ex2new.jpg]


Input: key = ""eljuxhpwnyrdgtqkviszcfmabo"", message = ""zwx hnfx lqantp mnoeius ycgk vcnjrdb""
Output: ""the five boxing wizards jump quickly""
Explanation: The diagram above shows the substitution table.
It is obtained by taking the first appearance of each letter in ""eljuxhpwnyrdgtqkviszcfmabo"".


 

Constraints:

 * 26 <= key.length <= 2000
 * key consists of lowercase English letters and ' '.
 * key contains every letter in the English alphabet ('a' to 'z') at least once.
 * 1 <= message.length <= 2000
 * message consists of lowercase English letters and ' '.",Solutions (1.1K),618,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/decode-the-message/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def decodeMessage(self, key: str, message: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    key: str = deserialize(""str"", read_line())
    message: str = deserialize(""str"", read_line())
    ans = Solution().decodeMessage(key, message)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def decodeMessage(self, key: str, message: str) -> str:
        import string
        
        table = {}
        for i, char in enumerate(key):
            if char != ' ' and char not in table:
                table[char] = string.ascii_lowercase[i]
        
        decoded_message = ''
        for char in message:
            if char == ' ':
                decoded_message += ' '
            else:
                decoded_message += table[char]
        
        return decoded_message"
False,0,0,2408,,Number of People Aware of a Secret,number-of-people-aware-of-a-secret,False,16848,37605,2327,False,2,"Can you solve this real interview question? Number of People Aware of a Secret - On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: n = 6, delay = 2, forget = 4
Output: 5
Explanation:
Day 1: Suppose the first person is named A. (1 person)
Day 2: A is the only person who knows the secret. (1 person)
Day 3: A shares the secret with a new person, B. (2 people)
Day 4: A shares the secret with a new person, C. (3 people)
Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)
Day 6: B shares the secret with E, and C shares the secret with F. (5 people)


Example 2:


Input: n = 4, delay = 1, forget = 3
Output: 6
Explanation:
Day 1: The first person is named A. (1 person)
Day 2: A shares the secret with B. (2 people)
Day 3: A and B share the secret with 2 new people, C and D. (4 people)
Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)


 

Constraints:

 * 2 <= n <= 1000
 * 1 <= delay < forget <= n",Solutions (351),665,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-people-aware-of-a-secret/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    delay: int = deserialize(""int"", read_line())
    forget: int = deserialize(""int"", read_line())
    ans = Solution().peopleAwareOfSecret(n, delay, forget)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def peopleAwareOfSecret(self, n: int, delay: int, forget: int) -> int:
        MOD = 10**9 + 7
        dp = [0] * n
        dp[0] = 1
        
        for day in range(1, n):
            dp[day] = dp[day - 1] + (dp[day - delay] if day >= delay else 0) - (dp[day - forget - 1] if day > forget else 0)
            dp[day] %= MOD
        
        return dp[n - 1]"
False,0,0,2409,number-of-increasing-paths-in-a-grid,Number of Increasing Paths in a Grid,number-of-increasing-paths-in-a-grid,False,16559,34762,2328,False,3,"Can you solve this real interview question? Number of Increasing Paths in a Grid - You are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.

Return the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. Since the answer may be very large, return it modulo 109 + 7.

Two paths are considered different if they do not have exactly the same sequence of visited cells.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/05/10/griddrawio-4.png]


Input: grid = [[1,1],[3,4]]
Output: 8
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [1], [3], [4].
- Paths with length 2: [1 -> 3], [1 -> 4], [3 -> 4].
- Paths with length 3: [1 -> 3 -> 4].
The total number of paths is 4 + 3 + 1 = 8.


Example 2:


Input: grid = [[1],[2]]
Output: 3
Explanation: The strictly increasing paths are:
- Paths with length 1: [1], [2].
- Paths with length 2: [1 -> 2].
The total number of paths is 2 + 1 = 3.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 1000
 * 1 <= m * n <= 105
 * 1 <= grid[i][j] <= 105",Solutions (387),691,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-increasing-paths-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPaths(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countPaths(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPaths(self, grid: List[List[int]]) -> int:
        MOD = 10**9 + 7
        m, n = len(grid), len(grid[0])
        dp = [[1] * n for _ in range(m)]

        for i in range(m):
            for j in range(n):
                if i > 0 and j > 0:
                    dp[i][j] = (dp[i][j] + dp[i-1][j] + dp[i][j-1]) % MOD
                elif i > 0:
                    dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD
                elif j > 0:
                    dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD
        return dp[-1][-1]"
False,0,0,2412,,Minimum Amount of Time to Fill Cups,minimum-amount-of-time-to-fill-cups,False,33621,59730,2335,False,1,"Can you solve this real interview question? Minimum Amount of Time to Fill Cups - You have a water dispenser that can dispense cold, warm, and hot water. Every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.

You are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. Return the minimum number of seconds needed to fill up all the cups.

 

Example 1:


Input: amount = [1,4,2]
Output: 4
Explanation: One way to fill up the cups is:
Second 1: Fill up a cold cup and a warm cup.
Second 2: Fill up a warm cup and a hot cup.
Second 3: Fill up a warm cup and a hot cup.
Second 4: Fill up a warm cup.
It can be proven that 4 is the minimum number of seconds needed.


Example 2:


Input: amount = [5,4,4]
Output: 7
Explanation: One way to fill up the cups is:
Second 1: Fill up a cold cup, and a hot cup.
Second 2: Fill up a cold cup, and a warm cup.
Second 3: Fill up a cold cup, and a warm cup.
Second 4: Fill up a warm cup, and a hot cup.
Second 5: Fill up a cold cup, and a hot cup.
Second 6: Fill up a cold cup, and a warm cup.
Second 7: Fill up a hot cup.


Example 3:


Input: amount = [5,0,0]
Output: 5
Explanation: Every second, we fill up a cold cup.


 

Constraints:

 * amount.length == 3
 * 0 <= amount[i] <= 100",Solutions (574),490,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-amount-of-time-to-fill-cups/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def fillCups(self, amount: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    amount: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().fillCups(amount)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def fillCups(self, amount: List[int]) -> int:
        return max(amount) + sum(amount) - 1"
False,0,0,2414,,Move Pieces to Obtain a String,move-pieces-to-obtain-a-string,False,20664,43218,2337,False,2,"Can you solve this real interview question? Move Pieces to Obtain a String - You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:

 * The characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right.
 * The character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.

Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.

 

Example 1:


Input: start = ""_L__R__R_"", target = ""L______RR""
Output: true
Explanation: We can obtain the string target from start by doing the following moves:
- Move the first piece one step to the left, start becomes equal to ""L___R__R_"".
- Move the last piece one step to the right, start becomes equal to ""L___R___R"".
- Move the second piece three steps to the right, start becomes equal to ""L______RR"".
Since it is possible to get the string target from start, we return true.


Example 2:


Input: start = ""R_L_"", target = ""__LR""
Output: false
Explanation: The 'R' piece in the string start can move one step to the right to obtain ""_RL_"".
After that, no pieces can move anymore, so it is impossible to obtain the string target from start.


Example 3:


Input: start = ""_R"", target = ""R_""
Output: false
Explanation: The piece in the string start can move only to the right, so it is impossible to obtain the string target from start.

 

Constraints:

 * n == start.length == target.length
 * 1 <= n <= 105
 * start and target consist of the characters 'L', 'R', and '_'.",Solutions (360),537,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/move-pieces-to-obtain-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def canChange(self, start: str, target: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    start: str = deserialize(""str"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().canChange(start, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def canChange(self, start: str, target: str) -> bool:
        def count_steps(s):
            count = 0
            for i in range(len(s) - 1):
                if s[i] == 'R' and s[i+1] == '_':
                    count += 1
            return count
        
        return count_steps(start) >= count_steps(target) and start.count('L') >= target.count('L')"
False,0,0,2415,,Count the Number of Ideal Arrays,count-the-number-of-ideal-arrays,False,4741,17994,2338,False,3,"Can you solve this real interview question? Count the Number of Ideal Arrays - You are given two integers n and maxValue, which are used to describe an ideal array.

A 0-indexed integer array arr of length n is considered ideal if the following conditions hold:

 * Every arr[i] is a value from 1 to maxValue, for 0 <= i < n.
 * Every arr[i] is divisible by arr[i - 1], for 0 < i < n.

Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: n = 2, maxValue = 5
Output: 10
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]
- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]
- Arrays starting with the value 3 (1 array): [3,3]
- Arrays starting with the value 4 (1 array): [4,4]
- Arrays starting with the value 5 (1 array): [5,5]
There are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.


Example 2:


Input: n = 5, maxValue = 3
Output: 11
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (9 arrays): 
   - With no other distinct values (1 array): [1,1,1,1,1] 
   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]
   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]
- Arrays starting with the value 2 (1 array): [2,2,2,2,2]
- Arrays starting with the value 3 (1 array): [3,3,3,3,3]
There are a total of 9 + 1 + 1 = 11 distinct ideal arrays.


 

Constraints:

 * 2 <= n <= 104
 * 1 <= maxValue <= 104",Solutions (106),380,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-ideal-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def idealArrays(self, n: int, maxValue: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    maxValue: int = deserialize(""int"", read_line())
    ans = Solution().idealArrays(n, maxValue)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def idealArrays(self, n: int, maxValue: int) -> int:
        MOD = 10**9 + 7
        dp = [1] * (maxValue + 1)
        for _ in range(1, n):
            new_dp = [0] * (maxValue + 1)
            for i in range(1, maxValue + 1):
                for j in range(i, maxValue + 1, i):
                    new_dp[j] = (new_dp[j] + dp[i]) % MOD
            dp = new_dp
        return sum(dp) % MOD"
False,0,0,2417,,The Latest Time to Catch a Bus,the-latest-time-to-catch-a-bus,False,13309,56767,2332,False,2,"Can you solve this real interview question? The Latest Time to Catch a Bus - You are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. You are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. All bus departure times are unique. All passenger arrival times are unique.

You are given an integer capacity, which represents the maximum number of passengers that can get on each bus.

When a passenger arrives, they will wait in line for the next available bus. You can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. Passengers with the earliest arrival times get on the bus first.

More formally when a bus arrives, either:

 * If capacity or fewer passengers are waiting for a bus, they will all get on the bus, or
 * The capacity passengers with the earliest arrival times will get on the bus.

Return the latest time you may arrive at the bus station to catch a bus. You cannot arrive at the same time as another passenger.

Note: The arrays buses and passengers are not necessarily sorted.

 

Example 1:


Input: buses = [10,20], passengers = [2,17,18,19], capacity = 2
Output: 16
Explanation: Suppose you arrive at time 16.
At time 10, the first bus departs with the 0th passenger. 
At time 20, the second bus departs with you and the 1st passenger.
Note that you may not arrive at the same time as another passenger, which is why you must arrive before the 1st passenger to catch the bus.

Example 2:


Input: buses = [20,30,10], passengers = [19,13,26,4,25,11,21], capacity = 2
Output: 20
Explanation: Suppose you arrive at time 20.
At time 10, the first bus departs with the 3rd passenger. 
At time 20, the second bus departs with the 5th and 1st passengers.
At time 30, the third bus departs with the 0th passenger and you.
Notice if you had arrived any later, then the 6th passenger would have taken your seat on the third bus.

 

Constraints:

 * n == buses.length
 * m == passengers.length
 * 1 <= n, m, capacity <= 105
 * 2 <= buses[i], passengers[i] <= 109
 * Each element in buses is unique.
 * Each element in passengers is unique.",Solutions (277),311,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/the-latest-time-to-catch-a-bus/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    buses: List[int] = deserialize(""List[int]"", read_line())
    passengers: List[int] = deserialize(""List[int]"", read_line())
    capacity: int = deserialize(""int"", read_line())
    ans = Solution().latestTimeCatchTheBus(buses, passengers, capacity)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def latestTimeCatchTheBus(self, buses: List[int], passengers: List[int], capacity: int) -> int:
        pass"
False,0,0,2418,,Minimum Sum of Squared Difference,minimum-sum-of-squared-difference,False,11015,43181,2333,False,2,"Can you solve this real interview question? Minimum Sum of Squared Difference - You are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.

The sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.

You are also given two positive integers k1 and k2. You can modify any of the elements of nums1 by +1 or -1 at most k1 times. Similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.

Return the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.

Note: You are allowed to modify the array elements to become negative integers.

 

Example 1:


Input: nums1 = [1,2,3,4], nums2 = [2,10,20,19], k1 = 0, k2 = 0
Output: 579
Explanation: The elements in nums1 and nums2 cannot be modified because k1 = 0 and k2 = 0. 
The sum of square difference will be: (1 - 2)2 + (2 - 10)2 + (3 - 20)2 + (4 - 19)2 = 579.


Example 2:


Input: nums1 = [1,4,10,12], nums2 = [5,8,6,9], k1 = 1, k2 = 1
Output: 43
Explanation: One way to obtain the minimum sum of square difference is: 
- Increase nums1[0] once.
- Increase nums2[2] once.
The minimum of the sum of square difference will be: 
(2 - 5)2 + (4 - 8)2 + (10 - 7)2 + (12 - 9)2 = 43.
Note that, there are other ways to obtain the minimum of the sum of square difference, but there is no way to obtain a sum smaller than 43.

 

Constraints:

 * n == nums1.length == nums2.length
 * 1 <= n <= 105
 * 0 <= nums1[i], nums2[i] <= 105
 * 0 <= k1, k2 <= 109",Solutions (198),516,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-sum-of-squared-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minSumSquareDiff(self, nums1: List[int], nums2: List[int], k1: int, k2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k1: int = deserialize(""int"", read_line())
    k2: int = deserialize(""int"", read_line())
    ans = Solution().minSumSquareDiff(nums1, nums2, k1, k2)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minSumSquareDiff(self, nums1: List[int], nums2: List[int], k1: int, k2: int) -> int:
        n = len(nums1)
        nums1.sort()
        nums2.sort()
        
        dp = [[float('inf')] * (k2 + 1) for _ in range(n + 1)]
        dp[0][0] = 0
        
        for i in range(1, n + 1):
            diff = abs(nums1[i - 1] - nums2[i - 1])
            dp[i][0] = dp[i - 1][0] + diff
            
        for i in range(1, n + 1):
            for j in range(1, min(i, k2) + 1):
                dp[i][j] = min(dp[i - 1][j - 1] + abs(nums1[i - 1] - nums2[i - 1]), dp[i - 1][j])
                    
        return dp[n][k2]"
False,0,0,2419,,Subarray With Elements Greater Than Varying Threshold,subarray-with-elements-greater-than-varying-threshold,False,5971,14501,2334,False,3,"Can you solve this real interview question? Subarray With Elements Greater Than Varying Threshold - You are given an integer array nums and an integer threshold.

Find any subarray of nums of length k such that every element in the subarray is greater than threshold / k.

Return the size of any such subarray. If there is no such subarray, return -1.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,3,4,3,1], threshold = 6
Output: 3
Explanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.
Note that this is the only valid subarray.


Example 2:


Input: nums = [6,5,6,5,8], threshold = 7
Output: 1
Explanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.
Note that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. 
Similarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.
Therefore, 2, 3, 4, or 5 may also be returned.

 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i], threshold <= 109",Solutions (136),432,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validSubarraySize(self, nums: List[int], threshold: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    threshold: int = deserialize(""int"", read_line())
    ans = Solution().validSubarraySize(nums, threshold)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def validSubarraySize(self, nums: List[int], threshold: int) -> int:
        def check_subarray(arr, threshold, k):
            for i in range(len(arr)-k+1):
                if min(arr[i:i+k]) > threshold/k:
                    return True
            return False
        
        for k in range(1, len(nums)+1):
            if check_subarray(nums, threshold, k):
                return k
        return -1"
False,0,0,2421,,Maximum Number of Pairs in Array,maximum-number-of-pairs-in-array,False,46634,61370,2341,False,1,"Can you solve this real interview question? Maximum Number of Pairs in Array - You are given a 0-indexed integer array nums. In one operation, you may do the following:

 * Choose two integers in nums that are equal.
 * Remove both integers from nums, forming a pair.

The operation is done on nums as many times as possible.

Return a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.

 

Example 1:


Input: nums = [1,3,2,1,3,2,2]
Output: [3,1]
Explanation:
Form a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].
Form a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].
Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].
No more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.


Example 2:


Input: nums = [1,1]
Output: [1,0]
Explanation: Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [].
No more pairs can be formed. A total of 1 pair has been formed, and there are 0 numbers leftover in nums.


Example 3:


Input: nums = [0]
Output: [0,1]
Explanation: No pairs can be formed, and there is 1 number leftover in nums.


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 100",Solutions (1.2K),502,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-pairs-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfPairs(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().numberOfPairs(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def numberOfPairs(self, nums: List[int]) -> List[int]:
        counts = {}
        pairs = 0
        
        for num in nums:
            if num in counts:
                counts[num] += 1
            else:
                counts[num] = 1
        
        for num in counts.values():
            pairs += num // 2
        
        leftover = sum(num % 2 for num in counts.values())
        
        return [pairs, leftover]"
False,0,0,2422,,Query Kth Smallest Trimmed Number,query-kth-smallest-trimmed-number,False,20830,50366,2343,False,2,"Can you solve this real interview question? Query Kth Smallest Trimmed Number - You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.

You are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:

 * Trim each number in nums to its rightmost trimi digits.
 * Determine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.
 * Reset each number in nums to its original length.

Return an array answer of the same length as queries, where answer[i] is the answer to the ith query.

Note:

 * To trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
 * Strings in nums may contain leading zeros.

 

Example 1:


Input: nums = [""102"",""473"",""251"",""814""], queries = [[1,1],[2,3],[4,2],[1,2]]
Output: [2,2,1,0]
Explanation:
1. After trimming to the last digit, nums = [""2"",""3"",""1"",""4""]. The smallest number is 1 at index 2.
2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.
3. Trimmed to the last 2 digits, nums = [""02"",""73"",""51"",""14""]. The 4th smallest number is 73.
4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.
   Note that the trimmed number ""02"" is evaluated as 2.


Example 2:


Input: nums = [""24"",""37"",""96"",""04""], queries = [[2,1],[2,2]]
Output: [3,0]
Explanation:
1. Trimmed to the last digit, nums = [""4"",""7"",""6"",""4""]. The 2nd smallest number is 4 at index 3.
   There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.
2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24.


 

Constraints:

 * 1 <= nums.length <= 100
 * 1 <= nums[i].length <= 100
 * nums[i] consists of only digits.
 * All nums[i].length are equal.
 * 1 <= queries.length <= 100
 * queries[i].length == 2
 * 1 <= ki <= nums.length
 * 1 <= trimi <= nums[i].length

 

Follow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?",Solutions (394),226,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/query-kth-smallest-trimmed-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[str] = deserialize(""List[str]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().smallestTrimmedNumbers(nums, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallestTrimmedNumbers(self, nums: List[str], queries: List[List[int]]) -> List[int]:
        def trim_number(number, trim):
            return number[-trim:]

        result = []
        for query in queries:
            ki, trimi = query[0], query[1]
            trimmed_nums = [trim_number(num, trimi) for num in nums]
            sorted_indices = sorted(range(len(trimmed_nums)), key=lambda x: (trimmed_nums[x], x))
            result.append(sorted_indices.index(ki))

        return result"
False,0,0,2423,,Minimum Deletions to Make Array Divisible,minimum-deletions-to-make-array-divisible,False,23120,40738,2344,False,3,"Can you solve this real interview question? Minimum Deletions to Make Array Divisible - You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.

Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.

Note that an integer x divides y if y % x == 0.

 

Example 1:


Input: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]
Output: 2
Explanation: 
The smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.
We use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].
The smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.
It can be shown that 2 is the minimum number of deletions needed.


Example 2:


Input: nums = [4,3,6], numsDivide = [8,2,6,10]
Output: -1
Explanation: 
We want the smallest element in nums to divide all the elements of numsDivide.
There is no way to delete elements from nums to allow this.

 

Constraints:

 * 1 <= nums.length, numsDivide.length <= 105
 * 1 <= nums[i], numsDivide[i] <= 109",Solutions (455),464,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    numsDivide: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minOperations(nums, numsDivide)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, nums: List[int], numsDivide: List[int]) -> int:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a

        def lcm(a, b):
            return a * b // gcd(a, b)

        lcm_num = nums[0]
        for num in nums[1:]:
            lcm_num = lcm(lcm_num, num)

        gcd_num = numsDivide[0]
        for num in numsDivide[1:]:
            gcd_num = gcd(gcd_num, num)

        if gcd_num % lcm_num != 0:
            return -1

        count = 0
        for num in nums:
            temp_lcm_num = lcm_num // gcd(lcm_num, num)
            if gcd_num % temp_lcm_num != 0:
                count += 1

        return count"
False,0,0,2427,,First Letter to Appear Twice,first-letter-to-appear-twice,False,67775,90506,2351,False,1,"Can you solve this real interview question? First Letter to Appear Twice - Given a string s consisting of lowercase English letters, return the first letter to appear twice.

Note:

 * A letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b.
 * s will contain at least one letter that appears twice.

 

Example 1:


Input: s = ""abccbaacz""
Output: ""c""
Explanation:
The letter 'a' appears on the indexes 0, 5 and 6.
The letter 'b' appears on the indexes 1 and 4.
The letter 'c' appears on the indexes 2, 3 and 7.
The letter 'z' appears on the index 8.
The letter 'c' is the first letter to appear twice, because out of all the letters the index of its second occurrence is the smallest.


Example 2:


Input: s = ""abcdd""
Output: ""d""
Explanation:
The only letter that appears twice is 'd' so we return 'd'.


 

Constraints:

 * 2 <= s.length <= 100
 * s consists of lowercase English letters.
 * s has at least one repeated letter.",Solutions (1.3K),714,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/first-letter-to-appear-twice/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repeatedCharacter(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().repeatedCharacter(s)
    print(""\noutput:"", serialize(ans, ""character""))
","class Solution:
    def repeatedCharacter(self, s: str) -> str:
        seen = set()
        for i in range(len(s)):
            if s[i] in seen:
                return s[i]
            seen.add(s[i])"
False,0,0,2428,,Equal Row and Column Pairs,equal-row-and-column-pairs,False,33741,47742,2352,False,2,"Can you solve this real interview question? Equal Row and Column Pairs - Given a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal.

A row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/01/ex1.jpg]


Input: grid = [[3,2,1],[1,7,6],[2,7,7]]
Output: 1
Explanation: There is 1 equal row and column pair:
- (Row 2, Column 1): [2,7,7]


Example 2:

[https://assets.leetcode.com/uploads/2022/06/01/ex2.jpg]


Input: grid = [[3,1,2,2],[1,4,4,5],[2,4,2,2],[2,4,2,2]]
Output: 3
Explanation: There are 3 equal row and column pairs:
- (Row 0, Column 0): [3,1,2,2]
- (Row 2, Column 2): [2,4,2,2]
- (Row 3, Column 2): [2,4,2,2]


 

Constraints:

 * n == grid.length == grid[i].length
 * 1 <= n <= 200
 * 1 <= grid[i][j] <= 105",Solutions (574),422,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/equal-row-and-column-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def equalPairs(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().equalPairs(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def equalPairs(self, grid: List[List[int]]) -> int:
        count = 0
        for i in range(len(grid)):
            if grid[i] in zip(*grid):
                count += 1
        return count"
False,0,0,2430,,Number of Excellent Pairs,number-of-excellent-pairs,False,11846,25738,2354,False,3,"Can you solve this real interview question? Number of Excellent Pairs - You are given a 0-indexed positive integer array nums and a positive integer k.

A pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:

 * Both the numbers num1 and num2 exist in the array nums.
 * The sum of the number of set bits in num1 OR num2 and num1 AND num2 is greater than or equal to k, where OR is the bitwise OR operation and AND is the bitwise AND operation.

Return the number of distinct excellent pairs.

Two pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. For example, (1, 2) and (2, 1) are distinct.

Note that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.

 

Example 1:


Input: nums = [1,2,3,1], k = 3
Output: 5
Explanation: The excellent pairs are the following:
- (3, 3). (3 AND 3) and (3 OR 3) are both equal to (11) in binary. The total number of set bits is 2 + 2 = 4, which is greater than or equal to k = 3.
- (2, 3) and (3, 2). (2 AND 3) is equal to (10) in binary, and (2 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.
- (1, 3) and (3, 1). (1 AND 3) is equal to (01) in binary, and (1 OR 3) is equal to (11) in binary. The total number of set bits is 1 + 2 = 3.
So the number of excellent pairs is 5.

Example 2:


Input: nums = [5,1,1], k = 10
Output: 0
Explanation: There are no excellent pairs for this array.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= k <= 60",Solutions (202),503,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-excellent-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countExcellentPairs(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countExcellentPairs(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countExcellentPairs(self, nums: List[int], k: int) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                if bin(nums[i] & nums[j]).count('1') + bin(nums[i] | nums[j]).count('1') >= k:
                    count += 1
        return count"
False,0,0,2432,number-of-zero-filled-subarrays,Number of Zero-Filled Subarrays,number-of-zero-filled-subarrays,False,102026,152852,2348,False,2,"Can you solve this real interview question? Number of Zero-Filled Subarrays - Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.

Example 2:


Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.


Example 3:


Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * -109 <= nums[i] <= 109",Solutions (2.2K),2K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-zero-filled-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def zeroFilledSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().zeroFilledSubarray(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def zeroFilledSubarray(self, nums: List[int]) -> int:
        count = 0
        zero_count = 0
        for num in nums:
            if num == 0:
                zero_count += 1
                count += zero_count
            else:
                zero_count = 0
        return count"
False,0,0,2433,,Best Poker Hand,best-poker-hand,False,30934,51016,2347,False,1,"Can you solve this real interview question? Best Poker Hand - You are given an integer array ranks and a character array suits. You have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].

The following are the types of poker hands you can make from best to worst:

 1. ""Flush"": Five cards of the same suit.
 2. ""Three of a Kind"": Three cards of the same rank.
 3. ""Pair"": Two cards of the same rank.
 4. ""High Card"": Any single card.

Return a string representing the best type of poker hand you can make with the given cards.

Note that the return values are case-sensitive.

 

Example 1:


Input: ranks = [13,2,3,1,9], suits = [""a"",""a"",""a"",""a"",""a""]
Output: ""Flush""
Explanation: The hand with all the cards consists of 5 cards with the same suit, so we have a ""Flush"".


Example 2:


Input: ranks = [4,4,2,4,4], suits = [""d"",""a"",""a"",""b"",""c""]
Output: ""Three of a Kind""
Explanation: The hand with the first, second, and fourth card consists of 3 cards with the same rank, so we have a ""Three of a Kind"".
Note that we could also make a ""Pair"" hand but ""Three of a Kind"" is a better hand.
Also note that other cards could be used to make the ""Three of a Kind"" hand.

Example 3:


Input: ranks = [10,10,2,12,9], suits = [""a"",""b"",""c"",""a"",""d""]
Output: ""Pair""
Explanation: The hand with the first and second card consists of 2 cards with the same rank, so we have a ""Pair"".
Note that we cannot make a ""Flush"" or a ""Three of a Kind"".


 

Constraints:

 * ranks.length == suits.length == 5
 * 1 <= ranks[i] <= 13
 * 'a' <= suits[i] <= 'd'
 * No two cards have the same rank and suit.",Solutions (485),293,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/best-poker-hand/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bestHand(self, ranks: List[int], suits: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    ranks: List[int] = deserialize(""List[int]"", read_line())
    suits: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().bestHand(ranks, suits)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def bestHand(self, ranks: List[int], suits: List[str]) -> str:
        suits_set = set(suits)
        ranks_set = set(ranks)
        
        if len(suits_set) == 1:
            return ""Flush""
        elif any(ranks.count(rank) >= 3 for rank in ranks_set):
            return ""Three of a Kind""
        elif any(ranks.count(rank) == 2 for rank in ranks_set):
            return ""Pair""
        else:
            return ""High Card"""
False,0,0,2435,,Shortest Impossible Sequence of Rolls,shortest-impossible-sequence-of-rolls,False,11617,17025,2350,False,3,"Can you solve this real interview question? Shortest Impossible Sequence of Rolls - You are given an integer array rolls of length n and an integer k. You roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].

Return the length of the shortest sequence of rolls that cannot be taken from rolls.

A sequence of rolls of length len is the result of rolling a k sided dice len times.

Note that the sequence taken does not have to be consecutive as long as it is in order.

 

Example 1:


Input: rolls = [4,2,1,2,3,3,2,4,1], k = 4
Output: 3
Explanation: Every sequence of rolls of length 1, [1], [2], [3], [4], can be taken from rolls.
Every sequence of rolls of length 2, [1, 1], [1, 2], ..., [4, 4], can be taken from rolls.
The sequence [1, 4, 2] cannot be taken from rolls, so we return 3.
Note that there are other sequences that cannot be taken from rolls.

Example 2:


Input: rolls = [1,1,2,2], k = 2
Output: 2
Explanation: Every sequence of rolls of length 1, [1], [2], can be taken from rolls.
The sequence [2, 1] cannot be taken from rolls, so we return 2.
Note that there are other sequences that cannot be taken from rolls but [2, 1] is the shortest.


Example 3:


Input: rolls = [1,1,3,2,2,2,3,3], k = 4
Output: 1
Explanation: The sequence [4] cannot be taken from rolls, so we return 1.
Note that there are other sequences that cannot be taken from rolls but [4] is the shortest.


 

Constraints:

 * n == rolls.length
 * 1 <= n <= 105
 * 1 <= rolls[i] <= k <= 105",Solutions (190),520,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-impossible-sequence-of-rolls/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shortestSequence(self, rolls: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    rolls: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().shortestSequence(rolls, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def shortestSequence(self, rolls: List[int], k: int) -> int:
        pass"
False,0,0,2436,,Make Array Zero by Subtracting Equal Amounts,make-array-zero-by-subtracting-equal-amounts,False,63171,87064,2357,False,1,"Can you solve this real interview question? Make Array Zero by Subtracting Equal Amounts - You are given a non-negative integer array nums. In one operation, you must:

 * Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
 * Subtract x from every positive element in nums.

Return the minimum number of operations to make every element in nums equal to 0.

 

Example 1:


Input: nums = [1,5,0,3,5]
Output: 3
Explanation:
In the first operation, choose x = 1. Now, nums = [0,4,0,2,4].
In the second operation, choose x = 2. Now, nums = [0,2,0,0,2].
In the third operation, choose x = 2. Now, nums = [0,0,0,0,0].


Example 2:


Input: nums = [0]
Output: 0
Explanation: Each element in nums is already 0 so no operations are needed.


 

Constraints:

 * 1 <= nums.length <= 100
 * 0 <= nums[i] <= 100",Solutions (1K),796,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/make-array-zero-by-subtracting-equal-amounts/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumOperations(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumOperations(self, nums: List[int]) -> int:
        min_num = min(filter(None, nums))
        count = 0
        for num in nums:
            if num > 0:
                count += num // min_num
        return count"
False,0,0,2437,,Maximum Number of Groups Entering a Competition,maximum-number-of-groups-entering-a-competition,False,28687,42406,2358,False,2,"Can you solve this real interview question? Maximum Number of Groups Entering a Competition - You are given a positive integer array grades which represents the grades of students in a university. You would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:

 * The sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last).
 * The total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last).

Return the maximum number of groups that can be formed.

 

Example 1:


Input: grades = [10,6,12,7,3,5]
Output: 3
Explanation: The following is a possible way to form 3 groups of students:
- 1st group has the students with grades = [12]. Sum of grades: 12. Student count: 1
- 2nd group has the students with grades = [6,7]. Sum of grades: 6 + 7 = 13. Student count: 2
- 3rd group has the students with grades = [10,3,5]. Sum of grades: 10 + 3 + 5 = 18. Student count: 3
It can be shown that it is not possible to form more than 3 groups.


Example 2:


Input: grades = [8,8]
Output: 1
Explanation: We can only form 1 group, since forming 2 groups would lead to an equal number of students in both groups.


 

Constraints:

 * 1 <= grades.length <= 105
 * 1 <= grades[i] <= 105",Solutions (484),491,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-groups-entering-a-competition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumGroups(self, grades: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grades: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumGroups(grades)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumGroups(self, grades: List[int]) -> int:
        grades.sort()
        groups = 1
        for i in range(1, len(grades)):
            if sum(grades[:i]) < sum(grades[i:i+1]) and len(grades[:i]) < len(grades[i:i+1]):
                groups += 1
        return groups"
False,0,0,2438,find-closest-node-to-given-two-nodes,Find Closest Node to Given Two Nodes,find-closest-node-to-given-two-nodes,False,66291,143605,2359,False,2,"Can you solve this real interview question? Find Closest Node to Given Two Nodes - You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.

You are also given two integers node1 and node2.

Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.

Note that edges may contain cycles.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-2.png]


Input: edges = [2,2,3,-1], node1 = 0, node2 = 1
Output: 2
Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.
The maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.


Example 2:

[https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-4.png]


Input: edges = [1,2,-1], node1 = 0, node2 = 2
Output: 2
Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.
The maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.


 

Constraints:

 * n == edges.length
 * 2 <= n <= 105
 * -1 <= edges[i] < n
 * edges[i] != i
 * 0 <= node1, node2 < n",Solutions (1.1K),1.5K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/find-closest-node-to-given-two-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[int] = deserialize(""List[int]"", read_line())
    node1: int = deserialize(""int"", read_line())
    node2: int = deserialize(""int"", read_line())
    ans = Solution().closestMeetingNode(edges, node1, node2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def closestMeetingNode(self, edges: List[int], node1: int, node2: int) -> int:
        pass"
False,0,0,2439,longest-cycle-in-a-graph,Longest Cycle in a Graph,longest-cycle-in-a-graph,False,17729,45564,2360,False,3,"Can you solve this real interview question? Longest Cycle in a Graph - You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from node i, then edges[i] == -1.

Return the length of the longest cycle in the graph. If no cycle exists, return -1.

A cycle is a path that starts and ends at the same node.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/08/graph4drawio-5.png]


Input: edges = [3,3,4,2,3]
Output: 3
Explanation: The longest cycle in the graph is the cycle: 2 -> 4 -> 3 -> 2.
The length of this cycle is 3, so 3 is returned.


Example 2:

[https://assets.leetcode.com/uploads/2022/06/07/graph4drawio-1.png]


Input: edges = [2,-1,3,1]
Output: -1
Explanation: There are no cycles in this graph.


 

Constraints:

 * n == edges.length
 * 2 <= n <= 105
 * -1 <= edges[i] < n
 * edges[i] != i",Solutions (996),1.9K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-cycle-in-a-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestCycle(edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestCycle(self, edges: List[int]) -> int:
        n = len(edges)
        longest = 0
        
        for i in range(n):
            current = i
            visited = set()
            length = 0
            
            while current not in visited:
                visited.add(current)
                current = edges[current]
                length += 1
                if current == i:
                    longest = max(longest, length)
                    break
                    
        return longest if longest > 2 else -1"
False,0,0,2442,,Number of Arithmetic Triplets,number-of-arithmetic-triplets,False,66105,79041,2367,False,1,"Can you solve this real interview question? Number of Arithmetic Triplets - You are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. A triplet (i, j, k) is an arithmetic triplet if the following conditions are met:

 * i < j < k,
 * nums[j] - nums[i] == diff, and
 * nums[k] - nums[j] == diff.

Return the number of unique arithmetic triplets.

 

Example 1:


Input: nums = [0,1,4,6,7,10], diff = 3
Output: 2
Explanation:
(1, 2, 4) is an arithmetic triplet because both 7 - 4 == 3 and 4 - 1 == 3.
(2, 4, 5) is an arithmetic triplet because both 10 - 7 == 3 and 7 - 4 == 3. 


Example 2:


Input: nums = [4,5,6,7,8,9], diff = 2
Output: 2
Explanation:
(0, 2, 4) is an arithmetic triplet because both 8 - 6 == 2 and 6 - 4 == 2.
(1, 3, 5) is an arithmetic triplet because both 9 - 7 == 2 and 7 - 5 == 2.


 

Constraints:

 * 3 <= nums.length <= 200
 * 0 <= nums[i] <= 200
 * 1 <= diff <= 50
 * nums is strictly increasing.",Solutions (1.1K),809,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-arithmetic-triplets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    diff: int = deserialize(""int"", read_line())
    ans = Solution().arithmeticTriplets(nums, diff)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:
        count = 0
        num_set = set(nums)
        for j in range(1, len(nums)):
            if nums[j] - diff in num_set and nums[j] + diff in num_set:
                count += 1
        return count"
False,0,0,2443,,Check if There is a Valid Partition For The Array,check-if-there-is-a-valid-partition-for-the-array,False,19014,47353,2369,False,2,"Can you solve this real interview question? Check if There is a Valid Partition For The Array - You are given a 0-indexed integer array nums. You have to partition the array into one or more contiguous subarrays.

We call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:

 1. The subarray consists of exactly 2 equal elements. For example, the subarray [2,2] is good.
 2. The subarray consists of exactly 3 equal elements. For example, the subarray [4,4,4] is good.
 3. The subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. For example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.

Return true if the array has at least one valid partition. Otherwise, return false.

 

Example 1:


Input: nums = [4,4,4,5,6]
Output: true
Explanation: The array can be partitioned into the subarrays [4,4] and [4,5,6].
This partition is valid, so we return true.


Example 2:


Input: nums = [1,1,1,2]
Output: false
Explanation: There is no valid partition for this array.


 

Constraints:

 * 2 <= nums.length <= 105
 * 1 <= nums[i] <= 106",Solutions (309),504,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-there-is-a-valid-partition-for-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().validPartition(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def validPartition(self, nums: List[int]) -> bool:
        def is_valid(subarray):
            if len(subarray) == 2:
                return subarray[0] == subarray[1]
            elif len(subarray) == 3:
                return subarray[0] == subarray[1] == subarray[2]
            else:
                return all(subarray[i] == subarray[i-1] + 1 for i in range(1, len(subarray)))
        
        for i in range(2, len(nums)):
            if is_valid(nums[:i]) and is_valid(nums[i:]):
                return True
        return False"
False,0,0,2444,,Longest Ideal Subsequence,longest-ideal-subsequence,False,18712,49616,2370,False,2,"Can you solve this real interview question? Longest Ideal Subsequence - You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:

 * t is a subsequence of the string s.
 * The absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.

Return the length of the longest ideal string.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

Note that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.

 

Example 1:


Input: s = ""acfgbd"", k = 2
Output: 4
Explanation: The longest ideal string is ""acbd"". The length of this string is 4, so 4 is returned.
Note that ""acfgbd"" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.

Example 2:


Input: s = ""abcd"", k = 3
Output: 4
Explanation: The longest ideal string is ""abcd"". The length of this string is 4, so 4 is returned.


 

Constraints:

 * 1 <= s.length <= 105
 * 0 <= k <= 25
 * s consists of lowercase English letters.",Solutions (327),630,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-ideal-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestIdealString(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().longestIdealString(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestIdealString(self, s: str, k: int) -> int:
        def find_longest_ideal_string(s, k):
            n = len(s)
            dp = [1] * n
            for i in range(1, n):
                for j in range(i):
                    if abs(ord(s[i]) - ord(s[j])) <= k:
                        dp[i] = max(dp[i], dp[j] + 1)
            return max(dp)
        return find_longest_ideal_string(s, k)"
False,0,0,2445,reachable-nodes-with-restrictions,Reachable Nodes With Restrictions,reachable-nodes-with-restrictions,False,31507,54585,2368,False,2,"Can you solve this real interview question? Reachable Nodes With Restrictions - There is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. You are also given an integer array restricted which represents restricted nodes.

Return the maximum number of nodes you can reach from node 0 without visiting a restricted node.

Note that node 0 will not be a restricted node.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/15/ex1drawio.png]


Input: n = 7, edges = [[0,1],[1,2],[3,1],[4,0],[0,5],[5,6]], restricted = [4,5]
Output: 4
Explanation: The diagram above shows the tree.
We have that [0,1,2,3] are the only nodes that can be reached from node 0 without visiting a restricted node.


Example 2:

[https://assets.leetcode.com/uploads/2022/06/15/ex2drawio.png]


Input: n = 7, edges = [[0,1],[0,2],[0,5],[0,4],[3,2],[6,5]], restricted = [4,2,1]
Output: 3
Explanation: The diagram above shows the tree.
We have that [0,5,6] are the only nodes that can be reached from node 0 without visiting a restricted node.


 

Constraints:

 * 2 <= n <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * edges represents a valid tree.
 * 1 <= restricted.length < n
 * 1 <= restricted[i] < n
 * All the values of restricted are unique.",Solutions (503),479,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/reachable-nodes-with-restrictions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    restricted: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().reachableNodes(n, edges, restricted)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:
        # Your code here
        pass"
False,0,0,2448,,Count Number of Bad Pairs,count-number-of-bad-pairs,False,22527,54808,2364,False,2,"Can you solve this real interview question? Count Number of Bad Pairs - You are given a 0-indexed integer array nums. A pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].

Return the total number of bad pairs in nums.

 

Example 1:


Input: nums = [4,1,3,3]
Output: 5
Explanation: The pair (0, 1) is a bad pair since 1 - 0 != 1 - 4.
The pair (0, 2) is a bad pair since 2 - 0 != 3 - 4, 2 != -1.
The pair (0, 3) is a bad pair since 3 - 0 != 3 - 4, 3 != -1.
The pair (1, 2) is a bad pair since 2 - 1 != 3 - 1, 1 != 2.
The pair (2, 3) is a bad pair since 3 - 2 != 3 - 3, 1 != 0.
There are a total of 5 bad pairs, so we return 5.


Example 2:


Input: nums = [1,2,3,4,5]
Output: 0
Explanation: There are no bad pairs.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (432),726,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-bad-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countBadPairs(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countBadPairs(self, nums: List[int]) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if i < j and j - i != nums[j] - nums[i]:
                    count += 1
        return count"
False,0,0,2449,,Maximum Number of Robots Within Budget,maximum-number-of-robots-within-budget,False,14754,44747,2398,False,3,"Can you solve this real interview question? Maximum Number of Robots Within Budget - You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.

The total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.

Return the maximum number of consecutive robots you can run such that the total cost does not exceed budget.

 

Example 1:


Input: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25
Output: 3
Explanation: 
It is possible to run all individual and consecutive pairs of robots within budget.
To obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.
It can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.


Example 2:


Input: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19
Output: 0
Explanation: No robot can be run that does not exceed the budget, so we return 0.


 

Constraints:

 * chargeTimes.length == runningCosts.length == n
 * 1 <= n <= 5 * 104
 * 1 <= chargeTimes[i], runningCosts[i] <= 105
 * 1 <= budget <= 1015",Solutions (311),612,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-robots-within-budget/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumRobots(self, chargeTimes: List[int], runningCosts: List[int], budget: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    chargeTimes: List[int] = deserialize(""List[int]"", read_line())
    runningCosts: List[int] = deserialize(""List[int]"", read_line())
    budget: int = deserialize(""int"", read_line())
    ans = Solution().maximumRobots(chargeTimes, runningCosts, budget)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumRobots(self, chargeTimes: List[int], runningCosts: List[int], budget: int) -> int:
        max_robots = 0
        for i in range(len(chargeTimes)):
            total_cost = max(chargeTimes[:i+1]) + (i+1) * sum(runningCosts[:i+1])
            if total_cost <= budget:
                max_robots = i + 1
            else:
                break
        return max_robots"
False,0,0,2450,,Minimum Replacements to Sort the Array,minimum-replacements-to-sort-the-array,False,9609,23468,2366,False,3,"Can you solve this real interview question? Minimum Replacements to Sort the Array - You are given a 0-indexed integer array nums. In one operation you can replace any element of the array with any two elements that sum to it.

 * For example, consider nums = [5,6,7]. In one operation, we can replace nums[1] with 2 and 4 and convert nums to [5,2,4,7].

Return the minimum number of operations to make an array that is sorted in non-decreasing order.

 

Example 1:


Input: nums = [3,9,3]
Output: 2
Explanation: Here are the steps to sort the array in non-decreasing order:
- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]
- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]
There are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.



Example 2:


Input: nums = [1,2,3,4,5]
Output: 0
Explanation: The array is already in non-decreasing order. Therefore, we return 0. 


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (140),426,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-replacements-to-sort-the-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumReplacement(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumReplacement(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumReplacement(self, nums: List[int]) -> int:
        pass"
False,0,0,2454,,Largest Local Values in a Matrix,largest-local-values-in-a-matrix,False,34393,41249,2373,False,1,"Can you solve this real interview question? Largest Local Values in a Matrix - You are given an n x n integer matrix grid.

Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:

 * maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.

In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.

Return the generated matrix.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/21/ex1.png]


Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.

Example 2:

[https://assets.leetcode.com/uploads/2022/07/02/ex2new2.png]


Input: grid = [[1,1,1,1,1],[1,1,1,1,1],[1,1,2,1,1],[1,1,1,1,1],[1,1,1,1,1]]
Output: [[2,2,2],[2,2,2],[2,2,2]]
Explanation: Notice that the 2 is contained within every contiguous 3 x 3 matrix in grid.


 

Constraints:

 * n == grid.length == grid[i].length
 * 3 <= n <= 100
 * 1 <= grid[i][j] <= 100",Solutions (569),513,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-local-values-in-a-matrix/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().largestLocal(grid)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def largestLocal(self, grid: List[List[int]]) -> List[List[int]]:
        n = len(grid)
        maxLocal = []
        for i in range(n - 2):
            row = []
            for j in range(n - 2):
                local_values = [grid[a][b] for a in range(i, i + 3) for b in range(j, j + 3)]
                row.append(max(local_values))
            maxLocal.append(row)
        return maxLocal"
False,0,0,2455,,Node With Highest Edge Score,node-with-highest-edge-score,False,25528,54910,2374,False,2,"Can you solve this real interview question? Node With Highest Edge Score - You are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge.

The graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i].

The edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i.

Return the node with the highest edge score. If multiple nodes have the same edge score, return the node with the smallest index.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/06/20/image-20220620195403-1.png]


Input: edges = [1,0,0,0,0,7,7,5]
Output: 7
Explanation:
- The nodes 1, 2, 3 and 4 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 + 3 + 4 = 10.
- The node 0 has an edge pointing to node 1. The edge score of node 1 is 0.
- The node 7 has an edge pointing to node 5. The edge score of node 5 is 7.
- The nodes 5 and 6 have an edge pointing to node 7. The edge score of node 7 is 5 + 6 = 11.
Node 7 has the highest edge score so return 7.


Example 2:

[https://assets.leetcode.com/uploads/2022/06/20/image-20220620200212-3.png]


Input: edges = [2,0,0,2]
Output: 0
Explanation:
- The nodes 1 and 2 have an edge pointing to node 0. The edge score of node 0 is 1 + 2 = 3.
- The nodes 0 and 3 have an edge pointing to node 2. The edge score of node 2 is 0 + 3 = 3.
Nodes 0 and 2 both have an edge score of 3. Since node 0 has a smaller index, we return 0.


 

Constraints:

 * n == edges.length
 * 2 <= n <= 105
 * 0 <= edges[i] < n
 * edges[i] != i",Solutions (427),327,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/node-with-highest-edge-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def edgeScore(self, edges: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().edgeScore(edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def edgeScore(self, edges: List[int]) -> int:
        edge_scores = [0] * len(edges)
        for i, edge in enumerate(edges):
            edge_scores[edge] += i
        
        max_score = max(edge_scores)
        return edge_scores.index(max_score)"
False,0,0,2456,,Construct Smallest Number From DI String,construct-smallest-number-from-di-string,False,21706,29107,2375,False,2,"Can you solve this real interview question? Construct Smallest Number From DI String - You are given a 0-indexed string pattern of length n consisting of the characters 'I' meaning increasing and 'D' meaning decreasing.

A 0-indexed string num of length n + 1 is created using the following conditions:

 * num consists of the digits '1' to '9', where each digit is used at most once.
 * If pattern[i] == 'I', then num[i] < num[i + 1].
 * If pattern[i] == 'D', then num[i] > num[i + 1].

Return the lexicographically smallest possible string num that meets the conditions.

 

Example 1:


Input: pattern = ""IIIDIDDD""
Output: ""123549876""
Explanation:
At indices 0, 1, 2, and 4 we must have that num[i] < num[i+1].
At indices 3, 5, 6, and 7 we must have that num[i] > num[i+1].
Some possible values of num are ""245639871"", ""135749862"", and ""123849765"".
It can be proven that ""123549876"" is the smallest possible num that meets the conditions.
Note that ""123414321"" is not possible because the digit '1' is used more than once.

Example 2:


Input: pattern = ""DDD""
Output: ""4321""
Explanation:
Some possible values of num are ""9876"", ""7321"", and ""8742"".
It can be proven that ""4321"" is the smallest possible num that meets the conditions.


 

Constraints:

 * 1 <= pattern.length <= 8
 * pattern consists of only the letters 'I' and 'D'.",Solutions (521),680,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/construct-smallest-number-from-di-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestNumber(self, pattern: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    pattern: str = deserialize(""str"", read_line())
    ans = Solution().smallestNumber(pattern)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def smallestNumber(self, pattern: str) -> str:
        res = []
        stack = []
        for i in range(len(pattern)):
            if pattern[i] == 'I':
                stack.append(i)
                while stack:
                    res.append(stack.pop() + len(res) + 1)
            else:
                stack.append(i)
        stack.append(len(pattern))
        while stack:
            res.append(stack.pop() + len(res) + 1)
        return ''.join(str(num) for num in res)"
False,0,0,2457,,Count Special Integers,count-special-integers,False,8660,23613,2376,False,3,"Can you solve this real interview question? Count Special Integers - We call a positive integer special if all of its digits are distinct.

Given a positive integer n, return the number of special integers that belong to the interval [1, n].

 

Example 1:


Input: n = 20
Output: 19
Explanation: All the integers from 1 to 20, except 11, are special. Thus, there are 19 special integers.


Example 2:


Input: n = 5
Output: 5
Explanation: All the integers from 1 to 5 are special.


Example 3:


Input: n = 135
Output: 110
Explanation: There are 110 integers from 1 to 135 that are special.
Some of the integers that are not special are: 22, 114, and 131.

 

Constraints:

 * 1 <= n <= 2 * 109",Solutions (169),457,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-special-integers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSpecialNumbers(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().countSpecialNumbers(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSpecialNumbers(self, n: int) -> int:
        count = 0
        for i in range(1, n+1):
            if len(set(str(i))) == len(str(i)):
                count += 1
        return count"
False,0,0,2459,,Minimum Hours of Training to Win a Competition,minimum-hours-of-training-to-win-a-competition,False,25312,61726,2383,False,1,"Can you solve this real interview question? Minimum Hours of Training to Win a Competition - You are entering a competition, and are given two positive integers initialEnergy and initialExperience denoting your initial energy and initial experience respectively.

You are also given two 0-indexed integer arrays energy and experience, both of length n.

You will face n opponents in order. The energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. When you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.

Defeating the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].

Before starting the competition, you can train for some number of hours. After each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.

Return the minimum number of training hours required to defeat all n opponents.

 

Example 1:


Input: initialEnergy = 5, initialExperience = 3, energy = [1,4,3,2], experience = [2,6,3,1]
Output: 8
Explanation: You can increase your energy to 11 after 6 hours of training, and your experience to 5 after 2 hours of training.
You face the opponents in the following order:
- You have more energy and experience than the 0th opponent so you win.
  Your energy becomes 11 - 1 = 10, and your experience becomes 5 + 2 = 7.
- You have more energy and experience than the 1st opponent so you win.
  Your energy becomes 10 - 4 = 6, and your experience becomes 7 + 6 = 13.
- You have more energy and experience than the 2nd opponent so you win.
  Your energy becomes 6 - 3 = 3, and your experience becomes 13 + 3 = 16.
- You have more energy and experience than the 3rd opponent so you win.
  Your energy becomes 3 - 2 = 1, and your experience becomes 16 + 1 = 17.
You did a total of 6 + 2 = 8 hours of training before the competition, so we return 8.
It can be proven that no smaller answer exists.


Example 2:


Input: initialEnergy = 2, initialExperience = 4, energy = [1], experience = [3]
Output: 0
Explanation: You do not need any additional energy or experience to win the competition, so we return 0.


 

Constraints:

 * n == energy.length == experience.length
 * 1 <= n <= 100
 * 1 <= initialEnergy, initialExperience, energy[i], experience[i] <= 100",Solutions (410),251,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-hours-of-training-to-win-a-competition/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    initialEnergy: int = deserialize(""int"", read_line())
    initialExperience: int = deserialize(""int"", read_line())
    energy: List[int] = deserialize(""List[int]"", read_line())
    experience: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minNumberOfHours(initialEnergy, initialExperience, energy, experience)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minNumberOfHours(self, initialEnergy: int, initialExperience: int, energy: List[int], experience: List[int]) -> int:
        def can_win(curr_energy, curr_experience, energy_needed, experience_needed):
            return curr_energy > energy_needed and curr_experience > experience_needed
        
        n = len(energy)
        min_hours = 0
        
        for i in range(n):
            needed_energy = energy[i]
            needed_experience = experience[i]
            
            while not can_win(initialEnergy, initialExperience, needed_energy, needed_experience):
                if initialEnergy >= initialExperience:
                    initialEnergy += 1
                else:
                    initialExperience += 1
                min_hours += 1
            
            initialEnergy -= needed_energy
            initialExperience += needed_experience
        
        return min_hours"
False,0,0,2462,,Find the K-Sum of an Array,find-the-k-sum-of-an-array,False,6958,18238,2386,False,3,"Can you solve this real interview question? Find the K-Sum of an Array - You are given an integer array nums and a positive integer k. You can choose any subsequence of the array and sum all of its elements together.

We define the K-Sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct).

Return the K-Sum of the array.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Note that the empty subsequence is considered to have a sum of 0.

 

Example 1:


Input: nums = [2,4,-2], k = 5
Output: 2
Explanation: All the possible subsequence sums that we can obtain are the following sorted in decreasing order:
- 6, 4, 4, 2, 2, 0, 0, -2.
The 5-Sum of the array is 2.


Example 2:


Input: nums = [1,-2,3,4,-10,12], k = 16
Output: 10
Explanation: The 16-Sum of the array is 10.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * -109 <= nums[i] <= 109
 * 1 <= k <= min(2000, 2n)",Solutions (78),459,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-k-sum-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def kSum(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().kSum(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def kSum(self, nums: List[int], k: int) -> int:

        n = len(nums)
        dp = [0] * (k + 1)
        dp[0] = 1

        for num in nums:
            for i in range(k, num - 1, -1):
                dp[i] += dp[i - num]

        return dp[k]"
False,0,0,2463,,Minimum Recolors to Get K Consecutive Black Blocks,minimum-recolors-to-get-k-consecutive-black-blocks,False,31689,54878,2379,False,1,"Can you solve this real interview question? Minimum Recolors to Get K Consecutive Black Blocks - You are given a 0-indexed string blocks of length n, where blocks[i] is either 'W' or 'B', representing the color of the ith block. The characters 'W' and 'B' denote the colors white and black, respectively.

You are also given an integer k, which is the desired number of consecutive black blocks.

In one operation, you can recolor a white block such that it becomes a black block.

Return the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.

 

Example 1:


Input: blocks = ""WBBWWBBWBW"", k = 7
Output: 3
Explanation:
One way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks
so that blocks = ""BBBBBBBWBW"". 
It can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.
Therefore, we return 3.


Example 2:


Input: blocks = ""WBWBBBW"", k = 2
Output: 0
Explanation:
No changes need to be made, since 2 consecutive black blocks already exist.
Therefore, we return 0.


 

Constraints:

 * n == blocks.length
 * 1 <= n <= 100
 * blocks[i] is either 'W' or 'B'.
 * 1 <= k <= n",Solutions (642),492,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-recolors-to-get-k-consecutive-black-blocks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumRecolors(self, blocks: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    blocks: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumRecolors(blocks, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumRecolors(self, blocks: str, k: int) -> int:
        n = len(blocks)
        count = 0
        
        for i in range(n - k + 1):
            if blocks[i:i+k].count('B') < k:
                count += 1
        
        return count"
False,0,0,2464,,Time Needed to Rearrange a Binary String,time-needed-to-rearrange-a-binary-string,False,22231,45359,2380,False,2,"Can you solve this real interview question? Time Needed to Rearrange a Binary String - You are given a binary string s. In one second, all occurrences of ""01"" are simultaneously replaced with ""10"". This process repeats until no occurrences of ""01"" exist.

Return the number of seconds needed to complete this process.

 

Example 1:


Input: s = ""0110101""
Output: 4
Explanation: 
After one second, s becomes ""1011010"".
After another second, s becomes ""1101100"".
After the third second, s becomes ""1110100"".
After the fourth second, s becomes ""1111000"".
No occurrence of ""01"" exists any longer, and the process needed 4 seconds to complete,
so we return 4.


Example 2:


Input: s = ""11100""
Output: 0
Explanation:
No occurrence of ""01"" exists in s, and the processes needed 0 seconds to complete,
so we return 0.


 

Constraints:

 * 1 <= s.length <= 1000
 * s[i] is either '0' or '1'.

 

Follow up:

Can you solve this problem in O(n) time complexity?",Solutions (330),356,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/time-needed-to-rearrange-a-binary-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def secondsToRemoveOccurrences(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().secondsToRemoveOccurrences(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def secondsToRemoveOccurrences(self, s: str) -> int:
        count = 0
        while '01' in s:
            s = s.replace('01', '10')
            count += 1
        return count"
False,0,0,2465,,Shifting Letters II,shifting-letters-ii,False,14557,41607,2381,False,2,"Can you solve this real interview question? Shifting Letters II - You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.

Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').

Return the final string after all such shifts to s are applied.

 

Example 1:


Input: s = ""abc"", shifts = [[0,1,0],[1,2,1],[0,2,1]]
Output: ""ace""
Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = ""zac"".
Secondly, shift the characters from index 1 to index 2 forward. Now s = ""zbd"".
Finally, shift the characters from index 0 to index 2 forward. Now s = ""ace"".

Example 2:


Input: s = ""dztz"", shifts = [[0,0,0],[1,1,1]]
Output: ""catz""
Explanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = ""cztz"".
Finally, shift the characters from index 1 to index 1 forward. Now s = ""catz"".


 

Constraints:

 * 1 <= s.length, shifts.length <= 5 * 104
 * shifts[i].length == 3
 * 0 <= starti <= endi < s.length
 * 0 <= directioni <= 1
 * s consists of lowercase English letters.",Solutions (268),573,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/shifting-letters-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    shifts: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().shiftingLetters(s, shifts)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def shiftingLetters(self, s: str, shifts: List[List[int]]) -> str:
        result = """"
        shift_sum = 0
        for i in range(len(s) - 1, -1, -1):
            shift_sum = (shift_sum + shifts[i][2]) % 26
            result = chr(((ord(s[i]) - ord('a') + shift_sum) % 26) + ord('a')) + result
        return result"
False,0,0,2466,,Maximum Segment Sum After Removals,maximum-segment-sum-after-removals,False,6354,13299,2382,False,3,"Can you solve this real interview question? Maximum Segment Sum After Removals - You are given two 0-indexed integer arrays nums and removeQueries, both of length n. For the ith query, the element in nums at the index removeQueries[i] is removed, splitting nums into different segments.

A segment is a contiguous sequence of positive integers in nums. A segment sum is the sum of every element in a segment.

Return an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.

Note: The same index will not be removed more than once.

 

Example 1:


Input: nums = [1,2,5,6,1], removeQueries = [0,3,2,4,1]
Output: [14,7,2,2,0]
Explanation: Using 0 to indicate a removed element, the answer is as follows:
Query 1: Remove the 0th element, nums becomes [0,2,5,6,1] and the maximum segment sum is 14 for segment [2,5,6,1].
Query 2: Remove the 3rd element, nums becomes [0,2,5,0,1] and the maximum segment sum is 7 for segment [2,5].
Query 3: Remove the 2nd element, nums becomes [0,2,0,0,1] and the maximum segment sum is 2 for segment [2]. 
Query 4: Remove the 4th element, nums becomes [0,2,0,0,0] and the maximum segment sum is 2 for segment [2]. 
Query 5: Remove the 1st element, nums becomes [0,0,0,0,0] and the maximum segment sum is 0, since there are no segments.
Finally, we return [14,7,2,2,0].

Example 2:


Input: nums = [3,2,11,1], removeQueries = [3,2,1,0]
Output: [16,5,3,0]
Explanation: Using 0 to indicate a removed element, the answer is as follows:
Query 1: Remove the 3rd element, nums becomes [3,2,11,0] and the maximum segment sum is 16 for segment [3,2,11].
Query 2: Remove the 2nd element, nums becomes [3,2,0,0] and the maximum segment sum is 5 for segment [3,2].
Query 3: Remove the 1st element, nums becomes [3,0,0,0] and the maximum segment sum is 3 for segment [3].
Query 4: Remove the 0th element, nums becomes [0,0,0,0] and the maximum segment sum is 0, since there are no segments.
Finally, we return [16,5,3,0].


 

Constraints:

 * n == nums.length == removeQueries.length
 * 1 <= n <= 105
 * 1 <= nums[i] <= 109
 * 0 <= removeQueries[i] < n
 * All the values of removeQueries are unique.",Solutions (160),371,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-segment-sum-after-removals/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    removeQueries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumSegmentSum(nums, removeQueries)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def maximumSegmentSum(self, nums: List[int], removeQueries: List[int]) -> List[int]:
        n = len(nums)
        prefix_sum = [0] * (n + 1)
        seg_sum = [0] * (n + 1)
        max_seg_sum = [0] * (n + 1)
        
        for i in range(n):
            prefix_sum[i+1] = prefix_sum[i] + nums[i]
        
        for i in range(n):
            seg_sum[i] = prefix_sum[i+1] - prefix_sum[removeQueries[i]+1]
        
        s = []
        for i in range(n):
            while s and s[-1] < seg_sum[i]:
                s.pop()
            if s:
                max_seg_sum[i] = max(s[-1], 0)
            s.append(seg_sum[i])
        
        answer = []
        for i in range(n-1, -1, -1):
            answer.append(max_seg_sum[i])
            if max_seg_sum[i] == seg_sum[i]:
                s.pop()
            while s and s[-1] < seg_sum[i]:
                s.pop()
            if s:
                max_seg_sum[i] = max(s[-1], 0)
            s.append(seg_sum[i])
        
        return answer[::-1]"
False,0,0,2469,longest-subsequence-with-limited-sum,Longest Subsequence With Limited Sum,longest-subsequence-with-limited-sum,False,79093,109088,2389,False,1,"Can you solve this real interview question? Longest Subsequence With Limited Sum - You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [4,5,2,1], queries = [3,10,21]
Output: [2,3,4]
Explanation: We answer the queries as follows:
- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.
- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.
- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.


Example 2:


Input: nums = [2,3,4,5], queries = [1]
Output: [0]
Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.

 

Constraints:

 * n == nums.length
 * m == queries.length
 * 1 <= n, m <= 1000
 * 1 <= nums[i], queries[i] <= 106",Solutions (1.2K),1.5K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-subsequence-with-limited-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    queries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().answerQueries(nums, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:
        dp = [0] * (10**6 + 1)
        
        for num in nums:
            for i in range(num, len(dp)):
                dp[i] = max(dp[i], dp[i - num] + 1)
        
        return [dp[q] for q in queries]"
False,0,0,2470,removing-stars-from-a-string,Removing Stars From a String,removing-stars-from-a-string,False,39849,61001,2390,False,2,"Can you solve this real interview question? Removing Stars From a String - You are given a string s, which contains stars *.

In one operation, you can:

 * Choose a star in s.
 * Remove the closest non-star character to its left, as well as remove the star itself.

Return the string after all stars have been removed.

Note:

 * The input will be generated such that the operation is always possible.
 * It can be shown that the resulting string will always be unique.

 

Example 1:


Input: s = ""leet**cod*e""
Output: ""lecoe""
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in ""leet**cod*e"". s becomes ""lee*cod*e"".
- The closest character to the 2nd star is 'e' in ""lee*cod*e"". s becomes ""lecod*e"".
- The closest character to the 3rd star is 'd' in ""lecod*e"". s becomes ""lecoe"".
There are no more stars, so we return ""lecoe"".

Example 2:


Input: s = ""erase*****""
Output: """"
Explanation: The entire string is removed, so we return an empty string.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters and stars *.
 * The operation above can be performed on s.",Solutions (903),698,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/removing-stars-from-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def removeStars(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().removeStars(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def removeStars(self, s: str) -> str:
        stack = []
        for char in s:
            if char == '*':
                stack.pop()
            else:
                stack.append(char)
        return ''.join(stack)"
False,0,0,2471,,Minimum Amount of Time to Collect Garbage,minimum-amount-of-time-to-collect-garbage,False,32074,38033,2391,False,2,"Can you solve this real interview question? Minimum Amount of Time to Collect Garbage - You are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute.

You are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1.

There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.

Only one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.

Return the minimum number of minutes needed to pick up all the garbage.

 

Example 1:


Input: garbage = [""G"",""P"",""GP"",""GG""], travel = [2,4,3]
Output: 21
Explanation:
The paper garbage truck:
1. Travels from house 0 to house 1
2. Collects the paper garbage at house 1
3. Travels from house 1 to house 2
4. Collects the paper garbage at house 2
Altogether, it takes 8 minutes to pick up all the paper garbage.
The glass garbage truck:
1. Collects the glass garbage at house 0
2. Travels from house 0 to house 1
3. Travels from house 1 to house 2
4. Collects the glass garbage at house 2
5. Travels from house 2 to house 3
6. Collects the glass garbage at house 3
Altogether, it takes 13 minutes to pick up all the glass garbage.
Since there is no metal garbage, we do not need to consider the metal garbage truck.
Therefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage.


Example 2:


Input: garbage = [""MMM"",""PGM"",""GP""], travel = [3,10]
Output: 37
Explanation:
The metal garbage truck takes 7 minutes to pick up all the metal garbage.
The paper garbage truck takes 15 minutes to pick up all the paper garbage.
The glass garbage truck takes 15 minutes to pick up all the glass garbage.
It takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage.


 

Constraints:

 * 2 <= garbage.length <= 105
 * garbage[i] consists of only the letters 'M', 'P', and 'G'.
 * 1 <= garbage[i].length <= 10
 * travel.length == garbage.length - 1
 * 1 <= travel[i] <= 100",Solutions (766),535,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-amount-of-time-to-collect-garbage/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    garbage: List[str] = deserialize(""List[str]"", read_line())
    travel: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().garbageCollection(garbage, travel)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def garbageCollection(self, garbage: List[str], travel: List[int]) -> int:
        pass"
False,0,0,2473,,Max Sum of a Pair With Equal Sum of Digits,max-sum-of-a-pair-with-equal-sum-of-digits,False,31613,59248,2342,False,2,"Can you solve this real interview question? Max Sum of a Pair With Equal Sum of Digits - You are given a 0-indexed array nums consisting of positive integers. You can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].

Return the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.

 

Example 1:


Input: nums = [18,43,36,13,7]
Output: 54
Explanation: The pairs (i, j) that satisfy the conditions are:
- (0, 2), both numbers have a sum of digits equal to 9, and their sum is 18 + 36 = 54.
- (1, 4), both numbers have a sum of digits equal to 7, and their sum is 43 + 7 = 50.
So the maximum sum that we can obtain is 54.


Example 2:


Input: nums = [10,12,19,14]
Output: -1
Explanation: There are no two numbers that satisfy the conditions, so we return -1.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (719),520,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/max-sum-of-a-pair-with-equal-sum-of-digits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumSum(self, nums: List[int]) -> int:
        def digit_sum(n):
            return sum(int(d) for d in str(n))

        pairs = {}
        max_sum = -1

        for i, num in enumerate(nums):
            digit_sum_num = digit_sum(num)
            if digit_sum_num in pairs:
                pair_index = pairs[digit_sum_num]
                pair_sum = nums[pair_index] + num
                if pair_sum > max_sum:
                    max_sum = pair_sum
            else:
                pairs[digit_sum_num] = i

        return max_sum"
False,0,0,2475,,Largest Palindromic Number,largest-palindromic-number,False,20309,65122,2384,False,2,"Can you solve this real interview question? Largest Palindromic Number - You are given a string num consisting of digits only.

Return the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. It should not contain leading zeroes.

Notes:

 * You do not need to use all the digits of num, but you must use at least one digit.
 * The digits can be reordered.

 

Example 1:


Input: num = ""444947137""
Output: ""7449447""
Explanation: 
Use the digits ""4449477"" from ""444947137"" to form the palindromic integer ""7449447"".
It can be shown that ""7449447"" is the largest palindromic integer that can be formed.


Example 2:


Input: num = ""00009""
Output: ""9""
Explanation: 
It can be shown that ""9"" is the largest palindromic integer that can be formed.
Note that the integer returned should not contain leading zeroes.


 

Constraints:

 * 1 <= num.length <= 105
 * num consists of digits.",Solutions (454),450,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-palindromic-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def largestPalindromic(self, num: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    num: str = deserialize(""str"", read_line())
    ans = Solution().largestPalindromic(num)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def largestPalindromic(self, num: str) -> str:
        digits = sorted(num, reverse=True)
        result = []
        for digit in digits:
            if digit == '0' and not result:
                return '0'
            if digit != '0':
                result.append(digit)
        mid = ''
        for digit in result:
            if digit != '0' and digit == digits[len(digits) // 2]:
                mid = digit
            else:
                result.append(digit)
        return ''.join(result) + mid + ''.join(result[::-1])"
False,0,0,2476,,Check Distances Between Same Letters,check-distances-between-same-letters,False,34132,48345,2399,False,1,"Can you solve this real interview question? Check Distances Between Same Letters - You are given a 0-indexed string s consisting of only lowercase English letters, where each letter in s appears exactly twice. You are also given a 0-indexed integer array distance of length 26.

Each letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25).

In a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. If the ith letter does not appear in s, then distance[i] can be ignored.

Return true if s is a well-spaced string, otherwise return false.

 

Example 1:


Input: s = ""abaccb"", distance = [1,3,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: true
Explanation:
- 'a' appears at indices 0 and 2 so it satisfies distance[0] = 1.
- 'b' appears at indices 1 and 5 so it satisfies distance[1] = 3.
- 'c' appears at indices 3 and 4 so it satisfies distance[2] = 0.
Note that distance[3] = 5, but since 'd' does not appear in s, it can be ignored.
Return true because s is a well-spaced string.


Example 2:


Input: s = ""aa"", distance = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: false
Explanation:
- 'a' appears at indices 0 and 1 so there are zero letters between them.
Because distance[0] = 1, s is not a well-spaced string.


 

Constraints:

 * 2 <= s.length <= 52
 * s consists only of lowercase English letters.
 * Each letter appears in s exactly twice.
 * distance.length == 26
 * 0 <= distance[i] <= 50",Solutions (575),337,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/check-distances-between-same-letters/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkDistances(self, s: str, distance: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    distance: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().checkDistances(s, distance)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkDistances(self, s: str, distance: List[int]) -> bool:
        def dfs(s, distance, index, curDist):
            if index == 26:
                return True
            if distance[index] == 0:
                return dfs(s, distance, index + 1, 0)
            
            for i in range(len(s)):
                if s[i] == chr(97 + index):
                    if curDist == distance[index]:
                        if dfs(s, distance, index + 1, 0):
                            return True
                    elif curDist < distance[index]:
                        if dfs(s, distance, index, curDist + 1):
                            return True
            return False
        
        return dfs(s, distance, 0, 0)"
False,0,0,2477,,Number of Ways to Reach a Position After Exactly k Steps,number-of-ways-to-reach-a-position-after-exactly-k-steps,False,21195,64303,2400,False,2,"Can you solve this real interview question? Number of Ways to Reach a Position After Exactly k Steps - You are given two positive integers startPos and endPos. Initially, you are standing at position startPos on an infinite number line. With one step, you can move either one position to the left, or one position to the right.

Given a positive integer k, return the number of different ways to reach the position endPos starting from startPos, such that you perform exactly k steps. Since the answer may be very large, return it modulo 109 + 7.

Two ways are considered different if the order of the steps made is not exactly the same.

Note that the number line includes negative integers.

 

Example 1:


Input: startPos = 1, endPos = 2, k = 3
Output: 3
Explanation: We can reach position 2 from 1 in exactly 3 steps in three ways:
- 1 -> 2 -> 3 -> 2.
- 1 -> 2 -> 1 -> 2.
- 1 -> 0 -> 1 -> 2.
It can be proven that no other way is possible, so we return 3.

Example 2:


Input: startPos = 2, endPos = 5, k = 10
Output: 0
Explanation: It is impossible to reach position 5 from position 2 in exactly 10 steps.


 

Constraints:

 * 1 <= startPos, endPos, k <= 1000",Solutions (362),533,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-reach-a-position-after-exactly-k-steps/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    startPos: int = deserialize(""int"", read_line())
    endPos: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numberOfWays(startPos, endPos, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfWays(self, startPos: int, endPos: int, k: int) -> int:
        MOD = 10**9 + 7
        
        dp = [[0] * 2001 for _ in range(2001)]
        
        dp[0][startPos] = 1
        
        for i in range(1, k + 1):
            for j in range(-1000, 1001):
                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j+1]) % MOD
        
        return dp[k][endPos]"
False,0,0,2478,,Longest Nice Subarray,longest-nice-subarray,False,20425,41504,2401,False,2,"Can you solve this real interview question? Longest Nice Subarray - You are given an array nums consisting of positive integers.

We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.

Return the length of the longest nice subarray.

A subarray is a contiguous part of an array.

Note that subarrays of length 1 are always considered nice.

 

Example 1:


Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:
- 3 AND 8 = 0.
- 3 AND 48 = 0.
- 8 AND 48 = 0.
It can be proven that no longer nice subarray can be obtained, so we return 3.

Example 2:


Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (366),881,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-nice-subarray/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestNiceSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestNiceSubarray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestNiceSubarray(self, nums: List[int]) -> int:
        def check_bitwise_and_zero(num1, num2):
            return num1 & num2 == 0
        
        n = len(nums)
        max_len = 0
        
        for i in range(n):
            for j in range(i+1, n):
                if all(check_bitwise_and_zero(nums[k], nums[l]) for k in range(i, j) for l in range(k+1, j)):
                    max_len = max(max_len, j-i+1)
        
        return max_len"
False,0,0,2479,,Meeting Rooms III,meeting-rooms-iii,False,15981,47602,2402,False,3,"Can you solve this real interview question? Meeting Rooms III - You are given an integer n. There are n rooms numbered from 0 to n - 1.

You are given a 2D integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). All the values of starti are unique.

Meetings are allocated to rooms in the following manner:

 1. Each meeting will take place in the unused room with the lowest number.
 2. If there are no available rooms, the meeting will be delayed until a room becomes free. The delayed meeting should have the same duration as the original meeting.
 3. When a room becomes unused, meetings that have an earlier original start time should be given the room.

Return the number of the room that held the most meetings. If there are multiple rooms, return the room with the lowest number.

A half-closed interval [a, b) is the interval between a and b including a and not including b.

 

Example 1:


Input: n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]
Output: 0
Explanation:
- At time 0, both rooms are not being used. The first meeting starts in room 0.
- At time 1, only room 1 is not being used. The second meeting starts in room 1.
- At time 2, both rooms are being used. The third meeting is delayed.
- At time 3, both rooms are being used. The fourth meeting is delayed.
- At time 5, the meeting in room 1 finishes. The third meeting starts in room 1 for the time period [5,10).
- At time 10, the meetings in both rooms finish. The fourth meeting starts in room 0 for the time period [10,11).
Both rooms 0 and 1 held 2 meetings, so we return 0. 


Example 2:


Input: n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]
Output: 1
Explanation:
- At time 1, all three rooms are not being used. The first meeting starts in room 0.
- At time 2, rooms 1 and 2 are not being used. The second meeting starts in room 1.
- At time 3, only room 2 is not being used. The third meeting starts in room 2.
- At time 4, all three rooms are being used. The fourth meeting is delayed.
- At time 5, the meeting in room 2 finishes. The fourth meeting starts in room 2 for the time period [5,10).
- At time 6, all three rooms are being used. The fifth meeting is delayed.
- At time 10, the meetings in rooms 1 and 2 finish. The fifth meeting starts in room 1 for the time period [10,12).
Room 0 held 1 meeting while rooms 1 and 2 each held 2 meetings, so we return 1. 


 

Constraints:

 * 1 <= n <= 100
 * 1 <= meetings.length <= 105
 * meetings[i].length == 2
 * 0 <= starti < endi <= 5 * 105
 * All the values of starti are unique.",Solutions (249),516,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/meeting-rooms-iii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    meetings: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().mostBooked(n, meetings)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        import heapq
        
        meetings.sort()
        heap = []
        rooms = [[] for _ in range(n)]
        
        for m in meetings:
            start = m[0]
            for i in range(len(rooms)):
                if not rooms[i] or heapq.heappop(rooms[i]) <= start:
                    heapq.heappush(rooms[i], m[1])
                    break
        
        max_meetings = 0
        room_number = 0
        
        for i in range(len(rooms)):
            if len(rooms[i]) > max_meetings:
                max_meetings = len(rooms[i])
                room_number = i
        
        return room_number"
False,0,0,2480,,Find Subarrays With Equal Sum,find-subarrays-with-equal-sum,False,34165,53034,2395,False,1,"Can you solve this real interview question? Find Subarrays With Equal Sum - Given a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. Note that the two subarrays must begin at different indices.

Return true if these subarrays exist, and false otherwise.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [4,2,4]
Output: true
Explanation: The subarrays with elements [4,2] and [2,4] have the same sum of 6.


Example 2:


Input: nums = [1,2,3,4,5]
Output: false
Explanation: No two subarrays of size 2 have the same sum.


Example 3:


Input: nums = [0,0,0]
Output: true
Explanation: The subarrays [nums[0],nums[1]] and [nums[1],nums[2]] have the same sum of 0. 
Note that even though the subarrays have the same content, the two subarrays are considered different because they are in different positions in the original array.


 

Constraints:

 * 2 <= nums.length <= 1000
 * -109 <= nums[i] <= 109",Solutions (605),374,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/find-subarrays-with-equal-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSubarrays(self, nums: List[int]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findSubarrays(nums)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def findSubarrays(self, nums: List[int]) -> bool:
        prefix_sum = [0]
        for num in nums:
            prefix_sum.append(prefix_sum[-1] + num)
        
        seen = {}
        for i in range(len(nums) - 1):
            for j in range(i + 2, len(nums)): 
                current_sum = prefix_sum[j + 1] - prefix_sum[i]
                if current_sum in seen:
                    return True
                seen[current_sum] = (i, j)
        
        return False"
False,0,0,2481,,Strictly Palindromic Number,strictly-palindromic-number,False,46803,53323,2396,False,2,"Can you solve this real interview question? Strictly Palindromic Number - An integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic.

Given an integer n, return true if n is strictly palindromic and false otherwise.

A string is palindromic if it reads the same forward and backward.

 

Example 1:


Input: n = 9
Output: false
Explanation: In base 2: 9 = 1001 (base 2), which is palindromic.
In base 3: 9 = 100 (base 3), which is not palindromic.
Therefore, 9 is not strictly palindromic so we return false.
Note that in bases 4, 5, 6, and 7, n = 9 is also not palindromic.


Example 2:


Input: n = 4
Output: false
Explanation: We only consider base 2: 4 = 100 (base 2), which is not palindromic.
Therefore, we return false.



 

Constraints:

 * 4 <= n <= 105",Solutions (786),367,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/strictly-palindromic-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isStrictlyPalindromic(self, n: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().isStrictlyPalindromic(n)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isStrictlyPalindromic(self, n: int) -> bool:
        return n > 5"
False,0,0,2482,,Maximum Rows Covered by Columns,maximum-rows-covered-by-columns,False,11735,22222,2397,False,2,"Can you solve this real interview question? Maximum Rows Covered by Columns - You are given a 0-indexed m x n binary matrix matrix and an integer numSelect, which denotes the number of distinct columns you must select from matrix.

Let us consider s = {c1, c2, ...., cnumSelect} as the set of columns selected by you. A row row is covered by s if:

 * For each cell matrix[row][col] (0 <= col <= n - 1) where matrix[row][col] == 1, col is present in s or,
 * No cell in row has a value of 1.

You need to choose numSelect columns such that the number of rows that are covered is maximized.

Return the maximum number of rows that can be covered by a set of numSelect columns.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/07/14/rowscovered.png]


Input: matrix = [[0,0,0],[1,0,1],[0,1,1],[0,0,1]], numSelect = 2
Output: 3
Explanation: One possible way to cover 3 rows is shown in the diagram above.
We choose s = {0, 2}.
- Row 0 is covered because it has no occurrences of 1.
- Row 1 is covered because the columns with value 1, i.e. 0 and 2 are present in s.
- Row 2 is not covered because matrix[2][1] == 1 but 1 is not present in s.
- Row 3 is covered because matrix[2][2] == 1 and 2 is present in s.
Thus, we can cover three rows.
Note that s = {1, 2} will also cover 3 rows, but it can be shown that no more than three rows can be covered.


Example 2:

[https://assets.leetcode.com/uploads/2022/07/14/rowscovered2.png]


Input: matrix = [[1],[0]], numSelect = 1
Output: 2
Explanation: Selecting the only column will result in both rows being covered since the entire matrix is selected.
Therefore, we return 2.


 

Constraints:

 * m == matrix.length
 * n == matrix[i].length
 * 1 <= m, n <= 12
 * matrix[i][j] is either 0 or 1.
 * 1 <= numSelect <= n",Solutions (303),213,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-rows-covered-by-columns/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    matrix: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    numSelect: int = deserialize(""int"", read_line())
    ans = Solution().maximumRows(matrix, numSelect)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumRows(self, matrix: List[List[int]], numSelect: int) -> int:
        def count_covered(matrix, selected):
            count = 0
            for row in matrix:
                if all(row[i] == 0 or i in selected for i in range(len(row))):
                    count += 1
            return count
        
        def backtrack(index, selected, numSelect):
            if len(selected) == numSelect:
                return count_covered(matrix, selected)
            
            if index == len(matrix[0]):
                return 0
            
            select_column = backtrack(index + 1, selected + [index], numSelect)
            skip_column = backtrack(index + 1, selected, numSelect)
            return max(select_column, skip_column)
        
        return backtrack(0, [], numSelect)"
False,0,0,2483,,Task Scheduler II,task-scheduler-ii,False,17692,37831,2365,False,2,"Can you solve this real interview question? Task Scheduler II - You are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.

You are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.

Each day, until all tasks have been completed, you must either:

 * Complete the next task from tasks, or
 * Take a break.

Return the minimum number of days needed to complete all tasks.

 

Example 1:


Input: tasks = [1,2,1,2,3,1], space = 3
Output: 9
Explanation:
One way to complete all tasks in 9 days is as follows:
Day 1: Complete the 0th task.
Day 2: Complete the 1st task.
Day 3: Take a break.
Day 4: Take a break.
Day 5: Complete the 2nd task.
Day 6: Complete the 3rd task.
Day 7: Take a break.
Day 8: Complete the 4th task.
Day 9: Complete the 5th task.
It can be shown that the tasks cannot be completed in less than 9 days.


Example 2:


Input: tasks = [5,8,8,5], space = 2
Output: 6
Explanation:
One way to complete all tasks in 6 days is as follows:
Day 1: Complete the 0th task.
Day 2: Complete the 1st task.
Day 3: Take a break.
Day 4: Take a break.
Day 5: Complete the 2nd task.
Day 6: Complete the 3rd task.
It can be shown that the tasks cannot be completed in less than 6 days.


 

Constraints:

 * 1 <= tasks.length <= 105
 * 1 <= tasks[i] <= 109
 * 1 <= space <= tasks.length",Solutions (337),398,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/task-scheduler-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def taskSchedulerII(self, tasks: List[int], space: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[int] = deserialize(""List[int]"", read_line())
    space: int = deserialize(""int"", read_line())
    ans = Solution().taskSchedulerII(tasks, space)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def taskSchedulerII(self, tasks: List[int], space: int) -> int:
        # Your code here"
False,0,0,2486,,Most Frequent Even Element,most-frequent-even-element,False,45985,90249,2404,False,1,"Can you solve this real interview question? Most Frequent Even Element - Given an integer array nums, return the most frequent even element.

If there is a tie, return the smallest one. If there is no such element, return -1.

 

Example 1:


Input: nums = [0,1,2,2,4,4,1]
Output: 2
Explanation:
The even elements are 0, 2, and 4. Of these, 2 and 4 appear the most.
We return the smallest one, which is 2.

Example 2:


Input: nums = [4,4,4,9,2,4]
Output: 4
Explanation: 4 is the even element appears the most.


Example 3:


Input: nums = [29,47,21,41,13,37,25,7]
Output: -1
Explanation: There is no even element.


 

Constraints:

 * 1 <= nums.length <= 2000
 * 0 <= nums[i] <= 105",Solutions (712),583,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/most-frequent-even-element/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostFrequentEven(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mostFrequentEven(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mostFrequentEven(self, nums: List[int]) -> int:
        count = {}
        for num in nums:
            if num % 2 == 0:
                count[num] = count.get(num, 0) + 1
        
        max_freq = 0
        most_frequent_even = -1
        for num, freq in count.items():
            if freq > max_freq or (freq == max_freq and num < most_frequent_even):
                max_freq = freq
                most_frequent_even = num
        
        return most_frequent_even"
False,0,0,2487,optimal-partition-of-string,Optimal Partition of String,optimal-partition-of-string,False,33570,44700,2405,False,2,"Can you solve this real interview question? Optimal Partition of String - Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.

Return the minimum number of substrings in such a partition.

Note that each character should belong to exactly one substring in a partition.

 

Example 1:


Input: s = ""abacaba""
Output: 4
Explanation:
Two possible partitions are (""a"",""ba"",""cab"",""a"") and (""ab"",""a"",""ca"",""ba"").
It can be shown that 4 is the minimum number of substrings needed.


Example 2:


Input: s = ""ssssss""
Output: 6
Explanation:
The only valid partition is (""s"",""s"",""s"",""s"",""s"",""s"").


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only English lowercase letters.",Solutions (668),508,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/optimal-partition-of-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def partitionString(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().partitionString(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def partitionString(self, s: str) -> int:
        def get_unique_substrings(s):
            seen = set()
            substrings = []
            current_substring = """"
            
            for char in s:
                if char in seen:
                    substrings.append(current_substring)
                    current_substring = """"
                    seen = set()
                
                seen.add(char)
                current_substring += char
            
            substrings.append(current_substring)
            return len(substrings)
        
        return get_unique_substrings(s)"
False,0,0,2488,,Divide Intervals Into Minimum Number of Groups,divide-intervals-into-minimum-number-of-groups,False,20430,44450,2406,False,2,"Can you solve this real interview question? Divide Intervals Into Minimum Number of Groups - You are given a 2D integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].

You have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.

Return the minimum number of groups you need to make.

Two intervals intersect if there is at least one common number between them. For example, the intervals [1, 5] and [5, 8] intersect.

 

Example 1:


Input: intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]
Output: 3
Explanation: We can divide the intervals into the following groups:
- Group 1: [1, 5], [6, 8].
- Group 2: [2, 3], [5, 10].
- Group 3: [1, 10].
It can be proven that it is not possible to divide the intervals into fewer than 3 groups.


Example 2:


Input: intervals = [[1,3],[5,6],[8,10],[11,13]]
Output: 1
Explanation: None of the intervals overlap, so we can put all of them in one group.


 

Constraints:

 * 1 <= intervals.length <= 105
 * intervals[i].length == 2
 * 1 <= lefti <= righti <= 106",Solutions (326),590,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-intervals-into-minimum-number-of-groups/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minGroups(self, intervals: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    intervals: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minGroups(intervals)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minGroups(self, intervals: List[List[int]]) -> int:
        def merge(intervals):
            intervals.sort(key=lambda x: x[0])
            merged = [intervals[0]]
            for i in range(1, len(intervals)):
                if intervals[i][0] <= merged[-1][1]:
                    merged[-1][1] = max(intervals[i][1], merged[-1][1])
                else:
                    merged.append(intervals[i])
            return merged

        merged_intervals = merge(intervals)
        return len(merged_intervals)"
False,0,0,2491,,Smallest Even Multiple,smallest-even-multiple,False,77705,88648,2413,False,1,"Can you solve this real interview question? Smallest Even Multiple - Given a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.

 

Example 1:


Input: n = 5
Output: 10
Explanation: The smallest multiple of both 5 and 2 is 10.


Example 2:


Input: n = 6
Output: 6
Explanation: The smallest multiple of both 6 and 2 is 6. Note that a number is a multiple of itself.


 

Constraints:

 * 1 <= n <= 150",Solutions (1.3K),544,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-even-multiple/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestEvenMultiple(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().smallestEvenMultiple(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestEvenMultiple(self, n: int) -> int:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        def lcm(a, b):
            return a // gcd(a, b) * b
        
        ans = 1
        for i in range(1, n + 1):
            ans = lcm(ans, i)
        return ans"
False,0,0,2492,,Length of the Longest Alphabetical Continuous Substring,length-of-the-longest-alphabetical-continuous-substring,False,32170,57174,2414,False,2,"Can you solve this real interview question? Length of the Longest Alphabetical Continuous Substring - An alphabetical continuous string is a string consisting of consecutive letters in the alphabet. In other words, it is any substring of the string ""abcdefghijklmnopqrstuvwxyz"".

 * For example, ""abc"" is an alphabetical continuous string, while ""acb"" and ""za"" are not.

Given a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.

 

Example 1:


Input: s = ""abacaba""
Output: 2
Explanation: There are 4 distinct continuous substrings: ""a"", ""b"", ""c"" and ""ab"".
""ab"" is the longest continuous substring.


Example 2:


Input: s = ""abcde""
Output: 5
Explanation: ""abcde"" is the longest continuous substring.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only English lowercase letters.",Solutions (606),347,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/length-of-the-longest-alphabetical-continuous-substring/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestContinuousSubstring(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().longestContinuousSubstring(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestContinuousSubstring(self, s: str) -> int:
        max_len = 1
        current_len = 1
        
        for i in range(1, len(s)):
            if ord(s[i]) - ord(s[i-1]) == 1:
                current_len += 1
            else:
                current_len = 1
                
            max_len = max(max_len, current_len)
        
        return max_len"
False,0,0,2494,,Sum of Prefix Scores of Strings,sum-of-prefix-scores-of-strings,False,19728,44963,2416,False,3,"Can you solve this real interview question? Sum of Prefix Scores of Strings - You are given an array words of size n consisting of non-empty strings.

We define the score of a string word as the number of strings words[i] such that word is a prefix of words[i].

 * For example, if words = [""a"", ""ab"", ""abc"", ""cab""], then the score of ""ab"" is 2, since ""ab"" is a prefix of both ""ab"" and ""abc"".

Return an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i].

Note that a string is considered as a prefix of itself.

 

Example 1:


Input: words = [""abc"",""ab"",""bc"",""b""]
Output: [5,4,3,2]
Explanation: The answer for each string is the following:
- ""abc"" has 3 prefixes: ""a"", ""ab"", and ""abc"".
- There are 2 strings with the prefix ""a"", 2 strings with the prefix ""ab"", and 1 string with the prefix ""abc"".
The total is answer[0] = 2 + 2 + 1 = 5.
- ""ab"" has 2 prefixes: ""a"" and ""ab"".
- There are 2 strings with the prefix ""a"", and 2 strings with the prefix ""ab"".
The total is answer[1] = 2 + 2 = 4.
- ""bc"" has 2 prefixes: ""b"" and ""bc"".
- There are 2 strings with the prefix ""b"", and 1 string with the prefix ""bc"".
The total is answer[2] = 2 + 1 = 3.
- ""b"" has 1 prefix: ""b"".
- There are 2 strings with the prefix ""b"".
The total is answer[3] = 2.


Example 2:


Input: words = [""abcd""]
Output: [4]
Explanation:
""abcd"" has 4 prefixes: ""a"", ""ab"", ""abc"", and ""abcd"".
Each prefix has a score of one, so the total is answer[0] = 1 + 1 + 1 + 1 = 4.


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 1000
 * words[i] consists of lowercase English letters.",Solutions (419),550,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-prefix-scores-of-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumPrefixScores(self, words: List[str]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().sumPrefixScores(words)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def sumPrefixScores(self, words: List[str]) -> List[int]:
        def count_prefixes(word, words):
            count = 0
            for w in words:
                if w.startswith(word):
                    count += 1
            return count
        
        result = []
        for word in words:
            total = 0
            for i in range(1, len(word) + 1):
                total += count_prefixes(word[:i], words)
            result.append(total)
        
        return result"
False,0,0,2496,,Count Days Spent Together,count-days-spent-together,False,16770,38514,2409,False,1,"Can you solve this real interview question? Count Days Spent Together - Alice and Bob are traveling to Rome for separate business meetings.

You are given 4 strings arriveAlice, leaveAlice, arriveBob, and leaveBob. Alice will be in the city from the dates arriveAlice to leaveAlice (inclusive), while Bob will be in the city from the dates arriveBob to leaveBob (inclusive). Each will be a 5-character string in the format ""MM-DD"", corresponding to the month and day of the date.

Return the total number of days that Alice and Bob are in Rome together.

You can assume that all dates occur in the same calendar year, which is not a leap year. Note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].

 

Example 1:


Input: arriveAlice = ""08-15"", leaveAlice = ""08-18"", arriveBob = ""08-16"", leaveBob = ""08-19""
Output: 3
Explanation: Alice will be in Rome from August 15 to August 18. Bob will be in Rome from August 16 to August 19. They are both in Rome together on August 16th, 17th, and 18th, so the answer is 3.


Example 2:


Input: arriveAlice = ""10-01"", leaveAlice = ""10-31"", arriveBob = ""11-01"", leaveBob = ""12-31""
Output: 0
Explanation: There is no day when Alice and Bob are in Rome together, so we return 0.


 

Constraints:

 * All dates are provided in the format ""MM-DD"".
 * Alice and Bob's arrival dates are earlier than or equal to their leaving dates.
 * The given dates are valid dates of a non-leap year.",Solutions (485),194,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-days-spent-together/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDaysTogether(self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    arriveAlice: str = deserialize(""str"", read_line())
    leaveAlice: str = deserialize(""str"", read_line())
    arriveBob: str = deserialize(""str"", read_line())
    leaveBob: str = deserialize(""str"", read_line())
    ans = Solution().countDaysTogether(arriveAlice, leaveAlice, arriveBob, leaveBob)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDaysTogether(self, arriveAlice: str, leaveAlice: str, arriveBob: str, leaveBob: str) -> int:
        def get_days(month, day):
            days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
            return sum(days_in_month[:int(month) - 1]) + int(day)

        start = max(get_days(arriveAlice[:2], arriveAlice[3:]), get_days(arriveBob[:2], arriveBob[3:]))
        end = min(get_days(leaveAlice[:2], leaveAlice[3:]), get_days(leaveBob[:2], leaveBob[3:]))

        return max(0, end - start + 1)"
False,0,0,2497,,Maximum Matching of Players With Trainers,maximum-matching-of-players-with-trainers,False,22915,37592,2410,False,2,"Can you solve this real interview question? Maximum Matching of Players With Trainers - You are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. You are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer.

The ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. Additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player.

Return the maximum number of matchings between players and trainers that satisfy these conditions.

 

Example 1:


Input: players = [4,7,9], trainers = [8,2,5,8]
Output: 2
Explanation:
One of the ways we can form two matchings is as follows:
- players[0] can be matched with trainers[0] since 4 <= 8.
- players[1] can be matched with trainers[3] since 7 <= 8.
It can be proven that 2 is the maximum number of matchings that can be formed.


Example 2:


Input: players = [1,1,1], trainers = [10]
Output: 1
Explanation:
The trainer can be matched with any of the 3 players.
Each player can only be matched with one trainer, so the maximum answer is 1.


 

Constraints:

 * 1 <= players.length, trainers.length <= 105
 * 1 <= players[i], trainers[j] <= 109",Solutions (478),316,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-matching-of-players-with-trainers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    players: List[int] = deserialize(""List[int]"", read_line())
    trainers: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().matchPlayersAndTrainers(players, trainers)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def matchPlayersAndTrainers(self, players: List[int], trainers: List[int]) -> int:
        players.sort()
        trainers.sort()
        
        player_index = 0
        trainer_index = 0
        count = 0
        
        while player_index < len(players) and trainer_index < len(trainers):
            if players[player_index] <= trainers[trainer_index]:
                count += 1
                player_index += 1
                trainer_index += 1
            else:
                trainer_index += 1
        
        return count"
False,0,0,2498,,Smallest Subarrays With Maximum Bitwise OR,smallest-subarrays-with-maximum-bitwise-or,False,9423,22632,2411,False,2,"Can you solve this real interview question? Smallest Subarrays With Maximum Bitwise OR - You are given a 0-indexed array nums of length n, consisting of non-negative integers. For each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise OR.

 * In other words, let Bij be the bitwise OR of the subarray nums[i...j]. You need to find the smallest subarray starting at i, such that bitwise OR of this subarray is equal to max(Bik) where i <= k <= n - 1.

The bitwise OR of an array is the bitwise OR of all the numbers in it.

Return an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise OR.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,0,2,1,3]
Output: [3,3,2,2,1]
Explanation:
The maximum possible bitwise OR starting at any index is 3. 
- Starting at index 0, the shortest subarray that yields it is [1,0,2].
- Starting at index 1, the shortest subarray that yields the maximum bitwise OR is [0,2,1].
- Starting at index 2, the shortest subarray that yields the maximum bitwise OR is [2,1].
- Starting at index 3, the shortest subarray that yields the maximum bitwise OR is [1,3].
- Starting at index 4, the shortest subarray that yields the maximum bitwise OR is [3].
Therefore, we return [3,3,2,2,1]. 


Example 2:


Input: nums = [1,2]
Output: [2,1]
Explanation:
Starting at index 0, the shortest subarray that yields the maximum bitwise OR is of length 2.
Starting at index 1, the shortest subarray that yields the maximum bitwise OR is of length 1.
Therefore, we return [2,1].


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 0 <= nums[i] <= 109",Solutions (166),435,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-subarrays-with-maximum-bitwise-or/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestSubarrays(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().smallestSubarrays(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def smallestSubarrays(self, nums: List[int]) -> List[int]:
        n = len(nums)
        ans = [n] * n
        nxt = [n] * 31
        for i in range(n-1, -1, -1):
            now = 0
            for j in range(30, -1, -1):
                if (nums[i] >> j) & 1:
                    if nxt[j] != n:
                        now = max(now, nxt[j])
                    nxt[j] = i
                if now != n:
                    ans[i] = min(ans[i], now - i + 1)
        return ans"
False,0,0,2499,,Minimum Money Required Before Transactions,minimum-money-required-before-transactions,False,8371,21113,2412,False,3,"Can you solve this real interview question? Minimum Money Required Before Transactions - You are given a 0-indexed 2D integer array transactions, where transactions[i] = [costi, cashbacki].

The array describes transactions, where each transaction must be completed exactly once in some order. At any given moment, you have a certain amount of money. In order to complete transaction i, money >= costi must hold true. After performing a transaction, money becomes money - costi + cashbacki.

Return the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.

 

Example 1:


Input: transactions = [[2,1],[5,0],[4,2]]
Output: 10
Explanation:
Starting with money = 10, the transactions can be performed in any order.
It can be shown that starting with money < 10 will fail to complete all transactions in some order.


Example 2:


Input: transactions = [[3,0],[0,3]]
Output: 3
Explanation:
- If transactions are in the order [[3,0],[0,3]], the minimum money required to complete the transactions is 3.
- If transactions are in the order [[0,3],[3,0]], the minimum money required to complete the transactions is 0.
Thus, starting with money = 3, the transactions can be performed in any order.


 

Constraints:

 * 1 <= transactions.length <= 105
 * transactions[i].length == 2
 * 0 <= costi, cashbacki <= 109",Solutions (123),326,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-money-required-before-transactions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumMoney(self, transactions: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    transactions: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumMoney(transactions)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumMoney(self, transactions: List[List[int]]) -> int:
        total_cost = sum(transaction[0] for transaction in transactions)
        return total_cost"
False,0,0,2502,,Sort the People,sort-the-people,False,67470,83193,2418,False,1,"Can you solve this real interview question? Sort the People - You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.

For each index i, names[i] and heights[i] denote the name and height of the ith person.

Return names sorted in descending order by the people's heights.

 

Example 1:


Input: names = [""Mary"",""John"",""Emma""], heights = [180,165,170]
Output: [""Mary"",""Emma"",""John""]
Explanation: Mary is the tallest, followed by Emma and John.


Example 2:


Input: names = [""Alice"",""Bob"",""Bob""], heights = [155,185,150]
Output: [""Bob"",""Alice"",""Bob""]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.


 

Constraints:

 * n == names.length == heights.length
 * 1 <= n <= 103
 * 1 <= names[i].length <= 20
 * 1 <= heights[i] <= 105
 * names[i] consists of lower and upper case English letters.
 * All the values of heights are distinct.",Solutions (1.4K),788,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-the-people/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    names: List[str] = deserialize(""List[str]"", read_line())
    heights: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().sortPeople(names, heights)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def sortPeople(self, names: List[str], heights: List[int]) -> List[str]:
        return [name for _, name in sorted(zip(heights, names), key=lambda x: x[0], reverse=True]"
False,0,0,2503,,Longest Subarray With Maximum Bitwise AND,longest-subarray-with-maximum-bitwise-and,False,21267,44330,2419,False,2,"Can you solve this real interview question? Longest Subarray With Maximum Bitwise AND - You are given an integer array nums of size n.

Consider a non-empty subarray from nums that has the maximum possible bitwise AND.

 * In other words, let k be the maximum value of the bitwise AND of any subarray of nums. Then, only subarrays with a bitwise AND equal to k should be considered.

Return the length of the longest such subarray.

The bitwise AND of an array is the bitwise AND of all the numbers in it.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:


Input: nums = [1,2,3,3,2,2]
Output: 2
Explanation:
The maximum possible bitwise AND of a subarray is 3.
The longest subarray with that value is [3,3], so we return 2.


Example 2:


Input: nums = [1,2,3,4]
Output: 1
Explanation:
The maximum possible bitwise AND of a subarray is 4.
The longest subarray with that value is [4], so we return 1.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 106",Solutions (373),346,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-subarray-with-maximum-bitwise-and/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestSubarray(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        max_bitwise_and = 0
        bitwise_and = 0
        count = 0
        
        for num in nums:
            max_bitwise_and = max(max_bitwise_and, num)
            bitwise_and &= num
            if bitwise_and == max_bitwise_and:
                count += 1
            else:
                count = 1
        
        return count"
False,0,0,2504,,Find All Good Indices,find-all-good-indices,False,18202,48473,2420,False,2,"Can you solve this real interview question? Find All Good Indices - You are given a 0-indexed integer array nums of size n and a positive integer k.

We call an index i in the range k <= i < n - k good if the following conditions are satisfied:

 * The k elements that are just before the index i are in non-increasing order.
 * The k elements that are just after the index i are in non-decreasing order.

Return an array of all good indices sorted in increasing order.

 

Example 1:


Input: nums = [2,1,1,1,3,4,1], k = 2
Output: [2,3]
Explanation: There are two good indices in the array:
- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.
- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.
Note that the index 4 is not good because [4,1] is not non-decreasing.

Example 2:


Input: nums = [2,1,1,2], k = 2
Output: []
Explanation: There are no good indices in this array.


 

Constraints:

 * n == nums.length
 * 3 <= n <= 105
 * 1 <= nums[i] <= 106
 * 1 <= k <= n / 2",Solutions (328),498,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/find-all-good-indices/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def goodIndices(self, nums: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().goodIndices(nums, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def goodIndices(self, nums: List[int], k: int) -> List[int]:
        def is_good(i):
            return all(nums[i - k: i] >= nums[i - k + 1: i + 1]) and all(nums[i: i + k] <= nums[i + 1: i + k + 1])
        
        return [i for i in range(k, len(nums) - k) if is_good(i)]"
False,0,0,2505,number-of-good-paths,Number of Good Paths,number-of-good-paths,False,47950,83344,2421,False,3,"Can you solve this real interview question? Number of Good Paths - There is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.

You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A good path is a simple path that satisfies the following conditions:

 1. The starting node and the ending node have the same value.
 2. All nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).

Return the number of distinct good paths.

Note that a path and its reverse are counted as the same path. For example, 0 -> 1 is considered to be the same as 1 -> 0. A single node is also considered as a valid path.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png]


Input: vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]
Output: 6
Explanation: There are 5 good paths consisting of a single node.
There is 1 additional good path: 1 -> 0 -> 2 -> 4.
(The reverse path 4 -> 2 -> 0 -> 1 is treated as the same as 1 -> 0 -> 2 -> 4.)
Note that 0 -> 2 -> 3 is not a good path because vals[2] > vals[0].


Example 2:

[https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png]


Input: vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]
Output: 7
Explanation: There are 5 good paths consisting of a single node.
There are 2 additional good paths: 0 -> 1 and 2 -> 3.


Example 3:

[https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png]


Input: vals = [1], edges = []
Output: 1
Explanation: The tree consists of only one node, so there is one good path.


 

Constraints:

 * n == vals.length
 * 1 <= n <= 3 * 104
 * 0 <= vals[i] <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * edges represents a valid tree.",Solutions (366),1.9K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-good-paths/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    vals: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().numberOfGoodPaths(vals, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfGoodPaths(self, vals: List[int], edges: List[List[int]]) -> int:
        # implementation of the solution
        pass"
False,0,0,2507,,Number of Common Factors,number-of-common-factors,False,45060,56499,2427,False,1,"Can you solve this real interview question? Number of Common Factors - Given two positive integers a and b, return the number of common factors of a and b.

An integer x is a common factor of a and b if x divides both a and b.

 

Example 1:


Input: a = 12, b = 6
Output: 4
Explanation: The common factors of 12 and 6 are 1, 2, 3, 6.


Example 2:


Input: a = 25, b = 30
Output: 2
Explanation: The common factors of 25 and 30 are 1, 5.


 

Constraints:

 * 1 <= a, b <= 1000",Solutions (826),377,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-common-factors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def commonFactors(self, a: int, b: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    a: int = deserialize(""int"", read_line())
    b: int = deserialize(""int"", read_line())
    ans = Solution().commonFactors(a, b)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def commonFactors(self, a: int, b: int) -> int:
        def gcd(x, y):
            while y:
                x, y = y, x % y
            return x
        
        def common_factors_count(a, b):
            n = gcd(a, b)
            count = 0
            for i in range(1, int(n**0.5) + 1):
                if n % i == 0:
                    count += 2
                    if i == n // i:
                        count -= 1
            return count
        
        return common_factors_count(a, b)"
False,0,0,2508,,Maximum Sum of an Hourglass,maximum-sum-of-an-hourglass,False,26804,36097,2428,False,2,"Can you solve this real interview question? Maximum Sum of an Hourglass - You are given an m x n integer matrix grid.

We define an hourglass as a part of the matrix with the following form:

[https://assets.leetcode.com/uploads/2022/08/21/img.jpg]

Return the maximum sum of the elements of an hourglass.

Note that an hourglass cannot be rotated and must be entirely contained within the matrix.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/08/21/1.jpg]


Input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
Output: 30
Explanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30.


Example 2:

[https://assets.leetcode.com/uploads/2022/08/21/2.jpg]


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: 35
Explanation: There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 3 <= m, n <= 150
 * 0 <= grid[i][j] <= 106",Solutions (470),313,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-of-an-hourglass/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxSum(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().maxSum(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxSum(self, grid: List[List[int]]) -> int:
        max_sum = float('-inf')
        for i in range(len(grid) - 2):
            for j in range(len(grid[0]) - 2):
                hourglass_sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2]
                max_sum = max(max_sum, hourglass_sum)
        return max_sum"
False,0,0,2509,,Minimize XOR,minimize-xor,False,17511,41169,2429,False,2,"Can you solve this real interview question? Minimize XOR - Given two positive integers num1 and num2, find the positive integer x such that:

 * x has the same number of set bits as num2, and
 * The value x XOR num1 is minimal.

Note that XOR is the bitwise XOR operation.

Return the integer x. The test cases are generated such that x is uniquely determined.

The number of set bits of an integer is the number of 1's in its binary representation.

 

Example 1:


Input: num1 = 3, num2 = 5
Output: 3
Explanation:
The binary representations of num1 and num2 are 0011 and 0101, respectively.
The integer 3 has the same number of set bits as num2, and the value 3 XOR 3 = 0 is minimal.


Example 2:


Input: num1 = 1, num2 = 12
Output: 3
Explanation:
The binary representations of num1 and num2 are 0001 and 1100, respectively.
The integer 3 has the same number of set bits as num2, and the value 3 XOR 1 = 2 is minimal.


 

Constraints:

 * 1 <= num1, num2 <= 109",Solutions (325),347,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-xor/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeXor(self, num1: int, num2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num1: int = deserialize(""int"", read_line())
    num2: int = deserialize(""int"", read_line())
    ans = Solution().minimizeXor(num1, num2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizeXor(self, num1: int, num2: int) -> int:
        def countSetBits(n):
            count = 0
            while n:
                count += n & 1
                n >>= 1
            return count
        
        bits_num = countSetBits(num2)
        x = (2 ** bits_num) - 1
        return x"
False,0,0,2510,,Maximum Deletions on a String,maximum-deletions-on-a-string,False,10294,31943,2430,False,3,"Can you solve this real interview question? Maximum Deletions on a String - You are given a string s consisting of only lowercase English letters. In one operation, you can:

 * Delete the entire string s, or
 * Delete the first i letters of s if the first i letters of s are equal to the following i letters in s, for any i in the range 1 <= i <= s.length / 2.

For example, if s = ""ababc"", then in one operation, you could delete the first two letters of s to get ""abc"", since the first two letters of s and the following two letters of s are both equal to ""ab"".

Return the maximum number of operations needed to delete all of s.

 

Example 1:


Input: s = ""abcabcdabc""
Output: 2
Explanation:
- Delete the first 3 letters (""abc"") since the next 3 letters are equal. Now, s = ""abcdabc"".
- Delete all the letters.
We used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.
Note that in the second operation we cannot delete ""abc"" again because the next occurrence of ""abc"" does not happen in the next 3 letters.


Example 2:


Input: s = ""aaabaab""
Output: 4
Explanation:
- Delete the first letter (""a"") since the next letter is equal. Now, s = ""aabaab"".
- Delete the first 3 letters (""aab"") since the next 3 letters are equal. Now, s = ""aab"".
- Delete the first letter (""a"") since the next letter is equal. Now, s = ""ab"".
- Delete all the letters.
We used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed.


Example 3:


Input: s = ""aaaaa""
Output: 5
Explanation: In each operation, we can delete the first letter of s.


 

Constraints:

 * 1 <= s.length <= 4000
 * s consists only of lowercase English letters.",Solutions (187),382,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-deletions-on-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def deleteString(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().deleteString(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def deleteString(self, s: str) -> int:
        cnt = 1
        while cnt * 2 <= len(s) and s[:cnt] == s[cnt:cnt * 2]:
            cnt += 1
        return min(cnt, len(s))"
False,0,0,2511,,Partition String Into Substrings With Values at Most K,partition-string-into-substrings-with-values-at-most-k,False,15542,33269,2522,False,2,"Can you solve this real interview question? Partition String Into Substrings With Values at Most K - You are given a string s consisting of digits from 1 to 9 and an integer k.

A partition of a string s is called good if:

 * Each digit of s is part of exactly one substring.
 * The value of each substring is less than or equal to k.

Return the minimum number of substrings in a good partition of s. If no good partition of s exists, return -1.

Note that:

 * The value of a string is its result when interpreted as an integer. For example, the value of ""123"" is 123 and the value of ""1"" is 1.
 * A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""165462"", k = 60
Output: 4
Explanation: We can partition the string into substrings ""16"", ""54"", ""6"", and ""2"". Each substring has a value less than or equal to k = 60.
It can be shown that we cannot partition the string into less than 4 substrings.


Example 2:


Input: s = ""238182"", k = 5
Output: -1
Explanation: There is no good partition for this string.


 

Constraints:

 * 1 <= s.length <= 105
 * s[i] is a digit from '1' to '9'.
 * 1 <= k <= 109

 ",Solutions (350),269,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/partition-string-into-substrings-with-values-at-most-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumPartition(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minimumPartition(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumPartition(self, s: str, k: int) -> int:
        if any(int(d) > k for d in s):
            return -1
        count = 1
        cur_val = int(s[0])
        for i in range(1, len(s)):
            if cur_val + int(s[i]) > k:
                cur_val = int(s[i])
                count += 1
            else:
                cur_val += int(s[i])
        return count"
False,0,0,2513,,Number of Pairs Satisfying Inequality,number-of-pairs-satisfying-inequality,False,8851,20624,2426,False,3,"Can you solve this real interview question? Number of Pairs Satisfying Inequality - You are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. Find the number of pairs (i, j) such that:

 * 0 <= i < j <= n - 1 and
 * nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff.

Return the number of pairs that satisfy the conditions.

 

Example 1:


Input: nums1 = [3,2,5], nums2 = [2,2,1], diff = 1
Output: 3
Explanation:
There are 3 pairs that satisfy the conditions:
1. i = 0, j = 1: 3 - 2 <= 2 - 2 + 1. Since i < j and 1 <= 1, this pair satisfies the conditions.
2. i = 0, j = 2: 3 - 5 <= 2 - 1 + 1. Since i < j and -2 <= 2, this pair satisfies the conditions.
3. i = 1, j = 2: 2 - 5 <= 2 - 1 + 1. Since i < j and -3 <= 2, this pair satisfies the conditions.
Therefore, we return 3.


Example 2:


Input: nums1 = [3,-1], nums2 = [-2,2], diff = -1
Output: 0
Explanation:
Since there does not exist any pair that satisfies the conditions, we return 0.


 

Constraints:

 * n == nums1.length == nums2.length
 * 2 <= n <= 105
 * -104 <= nums1[i], nums2[i] <= 104
 * -104 <= diff <= 104",Solutions (175),403,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-pairs-satisfying-inequality/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    diff: int = deserialize(""int"", read_line())
    ans = Solution().numberOfPairs(nums1, nums2, diff)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def numberOfPairs(self, nums1: List[int], nums2: List[int], diff: int) -> int:
        count = 0
        for i in range(len(nums1)):
            for j in range(i+1, len(nums1)):
                if nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff:
                    count += 1
        return count"
False,0,0,2518,,The Employee That Worked on the Longest Task,the-employee-that-worked-on-the-longest-task,False,26974,54544,2432,False,1,"Can you solve this real interview question? The Employee That Worked on the Longest Task - There are n employees, each with a unique id from 0 to n - 1.

You are given a 2D integer array logs where logs[i] = [idi, leaveTimei] where:

 * idi is the id of the employee that worked on the ith task, and
 * leaveTimei is the time at which the employee finished the ith task. All the values leaveTimei are unique.

Note that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0.

Return the id of the employee that worked the task with the longest time. If there is a tie between two or more employees, return the smallest id among them.

 

Example 1:


Input: n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]
Output: 1
Explanation: 
Task 0 started at 0 and ended at 3 with 3 units of times.
Task 1 started at 3 and ended at 5 with 2 units of times.
Task 2 started at 5 and ended at 9 with 4 units of times.
Task 3 started at 9 and ended at 15 with 6 units of times.
The task with the longest time is task 3 and the employee with id 1 is the one that worked on it, so we return 1.


Example 2:


Input: n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]
Output: 3
Explanation: 
Task 0 started at 0 and ended at 1 with 1 unit of times.
Task 1 started at 1 and ended at 7 with 6 units of times.
Task 2 started at 7 and ended at 12 with 5 units of times.
Task 3 started at 12 and ended at 17 with 5 units of times.
The tasks with the longest time is task 1. The employees that worked on it is 3, so we return 3.


Example 3:


Input: n = 2, logs = [[0,10],[1,20]]
Output: 0
Explanation: 
Task 0 started at 0 and ended at 10 with 10 units of times.
Task 1 started at 10 and ended at 20 with 10 units of times.
The tasks with the longest time are tasks 0 and 1. The employees that worked on them are 0 and 1, so we return the smallest id 0.


 

Constraints:

 * 2 <= n <= 500
 * 1 <= logs.length <= 500
 * logs[i].length == 2
 * 0 <= idi <= n - 1
 * 1 <= leaveTimei <= 500
 * idi != idi+1
 * leaveTimei are sorted in a strictly increasing order.",Solutions (407),207,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/the-employee-that-worked-on-the-longest-task/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    logs: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().hardestWorker(n, logs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def hardestWorker(self, n: int, logs: List[List[int]]) -> int:
        employee_times = [0] * n
        for i in range(1, len(logs)):
            employee_times[logs[i][0]] += logs[i][1] - logs[i-1][1]
        return employee_times.index(max(employee_times))"
False,0,0,2519,,Find The Original Array of Prefix Xor,find-the-original-array-of-prefix-xor,False,31413,36699,2433,False,2,"Can you solve this real interview question? Find The Original Array of Prefix Xor - You are given an integer array pref of size n. Find and return the array arr of size n that satisfies:

 * pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i].

Note that ^ denotes the bitwise-xor operation.

It can be proven that the answer is unique.

 

Example 1:


Input: pref = [5,2,0,3,1]
Output: [5,7,2,3,2]
Explanation: From the array [5,7,2,3,2] we have the following:
- pref[0] = 5.
- pref[1] = 5 ^ 7 = 2.
- pref[2] = 5 ^ 7 ^ 2 = 0.
- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3.
- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1.


Example 2:


Input: pref = [13]
Output: [13]
Explanation: We have pref[0] = arr[0] = 13.


 

Constraints:

 * 1 <= pref.length <= 105
 * 0 <= pref[i] <= 106",Solutions (574),468,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-original-array-of-prefix-xor/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findArray(self, pref: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    pref: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findArray(pref)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def findArray(self, pref: List[int]) -> List[int]:
        arr = [pref[0]]
        for i in range(1, len(pref)):
            arr.append(pref[i] ^ arr[i-1])
        return arr"
False,0,0,2520,,Using a Robot to Print the Lexicographically Smallest String,using-a-robot-to-print-the-lexicographically-smallest-string,False,13909,36074,2434,False,2,"Can you solve this real interview question? Using a Robot to Print the Lexicographically Smallest String - You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:

 * Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.
 * Remove the last character of a string t and give it to the robot. The robot will write this character on paper.

Return the lexicographically smallest string that can be written on the paper.

 

Example 1:


Input: s = ""zza""
Output: ""azz""
Explanation: Let p denote the written string.
Initially p="""", s=""zza"", t="""".
Perform first operation three times p="""", s="""", t=""zza"".
Perform second operation three times p=""azz"", s="""", t="""".


Example 2:


Input: s = ""bac""
Output: ""abc""
Explanation: Let p denote the written string.
Perform first operation twice p="""", s=""c"", t=""ba"". 
Perform second operation twice p=""ab"", s=""c"", t="""". 
Perform first operation p=""ab"", s="""", t=""c"". 
Perform second operation p=""abc"", s="""", t="""".


Example 3:


Input: s = ""bdda""
Output: ""addb""
Explanation: Let p denote the written string.
Initially p="""", s=""bdda"", t="""".
Perform first operation four times p="""", s="""", t=""bdda"".
Perform second operation four times p=""addb"", s="""", t="""".


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only English lowercase letters.",Solutions (276),541,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/using-a-robot-to-print-the-lexicographically-smallest-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def robotWithString(self, s: str) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().robotWithString(s)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def robotWithString(self, s: str) -> str:
        t = """"
        i, j = 0, len(s) - 1
        
        while i <= j:
            if s[i] < s[j]:
                t += s[i]
                i += 1
            else:
                t += s[j]
                j -= 1
                
        return t"
False,0,0,2521,,Paths in Matrix Whose Sum Is Divisible by K,paths-in-matrix-whose-sum-is-divisible-by-k,False,15063,36239,2435,False,3,"Can you solve this real interview question? Paths in Matrix Whose Sum Is Divisible by K - You are given a 0-indexed m x n integer matrix grid and an integer k. You are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.

Return the number of paths where the sum of the elements on the path is divisible by k. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/08/13/image-20220813183124-1.png]


Input: grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3
Output: 2
Explanation: There are two paths where the sum of the elements on the path is divisible by k.
The first path highlighted in red has a sum of 5 + 2 + 4 + 5 + 2 = 18 which is divisible by 3.
The second path highlighted in blue has a sum of 5 + 3 + 0 + 5 + 2 = 15 which is divisible by 3.


Example 2:

[https://assets.leetcode.com/uploads/2022/08/17/image-20220817112930-3.png]


Input: grid = [[0,0]], k = 5
Output: 1
Explanation: The path highlighted in red has a sum of 0 + 0 = 0 which is divisible by 5.


Example 3:

[https://assets.leetcode.com/uploads/2022/08/12/image-20220812224605-3.png]


Input: grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1
Output: 10
Explanation: Every integer is divisible by 1 so the sum of the elements on every possible path is divisible by k.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 5 * 104
 * 1 <= m * n <= 5 * 104
 * 0 <= grid[i][j] <= 100
 * 1 <= k <= 50",Solutions (344),572,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/paths-in-matrix-whose-sum-is-divisible-by-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfPaths(self, grid: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().numberOfPaths(grid, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfPaths(self, grid: List[List[int]], k: int) -> int:
        MOD = 10**9 + 7
        
        m, n = len(grid), len(grid[0])
        
        dp = [[0] * n for _ in range(m)]
        dp[0][0] = grid[0][0] % k == 0
        
        for i in range(1, m):
            dp[i][0] = (dp[i-1][0] * 10 + grid[i][0]) % k == 0
        
        for j in range(1, n):
            dp[0][j] = (dp[0][j-1] * 10 + grid[0][j]) % k == 0
        
        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = (dp[i-1][j] * 10 + grid[i][j]) % k == 0 or (dp[i][j-1] * 10 + grid[i][j]) % k == 0
                
        return dp[-1][-1] % MOD"
False,0,0,2524,,Largest Positive Integer That Exists With Its Negative,largest-positive-integer-that-exists-with-its-negative,False,37326,54860,2441,False,1,"Can you solve this real interview question? Largest Positive Integer That Exists With Its Negative - Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1.

 

Example 1:


Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.


Example 2:


Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.


Example 3:


Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.


 

Constraints:

 * 1 <= nums.length <= 1000
 * -1000 <= nums[i] <= 1000
 * nums[i] != 0",Solutions (699),344,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/largest-positive-integer-that-exists-with-its-negative/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMaxK(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findMaxK(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMaxK(self, nums: List[int]) -> int:
        positives = set(num for num in nums if num >= 0)
        for num in positives:
            if -num in nums:
                return num
        return -1"
False,0,0,2525,,Count Number of Distinct Integers After Reverse Operations,count-number-of-distinct-integers-after-reverse-operations,False,35435,45005,2442,False,2,"Can you solve this real interview question? Count Number of Distinct Integers After Reverse Operations - You are given an array nums consisting of positive integers.

You have to take each integer in the array, reverse its digits, and add it to the end of the array. You should apply this operation to the original integers in nums.

Return the number of distinct integers in the final array.

 

Example 1:


Input: nums = [1,13,10,12,31]
Output: 6
Explanation: After including the reverse of each number, the resulting array is [1,13,10,12,31,1,31,1,21,13].
The reversed integers that were added to the end of the array are underlined. Note that for the integer 10, after reversing it, it becomes 01 which is just 1.
The number of distinct integers in this array is 6 (The numbers 1, 10, 12, 13, 21, and 31).

Example 2:


Input: nums = [2,2,2]
Output: 1
Explanation: After including the reverse of each number, the resulting array is [2,2,2,2,2,2].
The number of distinct integers in this array is 1 (The number 2).


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 106",Solutions (754),396,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-distinct-integers-after-reverse-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDistinctIntegers(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countDistinctIntegers(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDistinctIntegers(self, nums: List[int]) -> int:
        seen = set()
        for num in nums:
            seen.add(num)
            rev_num = int(str(num)[::-1])
            seen.add(rev_num)
        return len(seen)"
False,0,0,2526,,Longest Increasing Subsequence II,longest-increasing-subsequence-ii,False,7925,36543,2407,False,3,"Can you solve this real interview question? Longest Increasing Subsequence II - You are given an integer array nums and an integer k.

Find the longest subsequence of nums that meets the following requirements:

 * The subsequence is strictly increasing and
 * The difference between adjacent elements in the subsequence is at most k.

Return the length of the longest subsequence that meets the requirements.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [4,2,1,4,3,4,5,8,15], k = 3
Output: 5
Explanation:
The longest subsequence that meets the requirements is [1,3,4,5,8].
The subsequence has a length of 5, so we return 5.
Note that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.


Example 2:


Input: nums = [7,4,5,1,8,12,4,7], k = 5
Output: 4
Explanation:
The longest subsequence that meets the requirements is [4,5,8,12].
The subsequence has a length of 4, so we return 4.


Example 3:


Input: nums = [1,5], k = 1
Output: 1
Explanation:
The longest subsequence that meets the requirements is [1].
The subsequence has a length of 1, so we return 1.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i], k <= 105",Solutions (143),550,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-increasing-subsequence-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def lengthOfLIS(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().lengthOfLIS(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def lengthOfLIS(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2527,count-subarrays-with-fixed-bounds,Count Subarrays With Fixed Bounds,count-subarrays-with-fixed-bounds,False,55135,88899,2444,False,3,"Can you solve this real interview question? Count Subarrays With Fixed Bounds - You are given an integer array nums and two integers minK and maxK.

A fixed-bound subarray of nums is a subarray that satisfies the following conditions:

 * The minimum value in the subarray is equal to minK.
 * The maximum value in the subarray is equal to maxK.

Return the number of fixed-bound subarrays.

A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].


Example 2:


Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.


 

Constraints:

 * 2 <= nums.length <= 105
 * 1 <= nums[i], minK, maxK <= 106",Solutions (601),2.1K,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/count-subarrays-with-fixed-bounds/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    minK: int = deserialize(""int"", read_line())
    maxK: int = deserialize(""int"", read_line())
    ans = Solution().countSubarrays(nums, minK, maxK)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:
        count = 0
        ans = 0
        left = 0
        
        for right in range(len(nums)):
            if minK <= nums[right] <= maxK:
                count = right - left + 1
                ans += count
            else:
                count = 0
                left = right + 1
        
        return ans"
False,0,0,2528,,Number of Valid Clock Times,number-of-valid-clock-times,False,17898,41504,2437,False,1,"Can you solve this real interview question? Number of Valid Clock Times - You are given a string of length 5 called time, representing the current time on a digital clock in the format ""hh:mm"". The earliest possible time is ""00:00"" and the latest possible time is ""23:59"".

In the string time, the digits represented by the ? symbol are unknown, and must be replaced with a digit from 0 to 9.

Return an integer answer, the number of valid clock times that can be created by replacing every ? with a digit from 0 to 9.

 

Example 1:


Input: time = ""?5:00""
Output: 2
Explanation: We can replace the ? with either a 0 or 1, producing ""05:00"" or ""15:00"". Note that we cannot replace it with a 2, since the time ""25:00"" is invalid. In total, we have two choices.


Example 2:


Input: time = ""0?:0?""
Output: 100
Explanation: Each ? can be replaced by any digit from 0 to 9, so we have 100 total choices.


Example 3:


Input: time = ""??:??""
Output: 1440
Explanation: There are 24 possible choices for the hours, and 60 possible choices for the minutes. In total, we have 24 * 60 = 1440 choices.


 

Constraints:

 * time is a valid string of length 5 in the format ""hh:mm"".
 * ""00"" <= hh <= ""23""
 * ""00"" <= mm <= ""59""
 * Some of the digits might be replaced with '?' and need to be replaced with digits from 0 to 9.",Solutions (383),181,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-valid-clock-times/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countTime(self, time: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    time: str = deserialize(""str"", read_line())
    ans = Solution().countTime(time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countTime(self, time: str) -> int:
        count = 0

        for h in range(24):
            for m in range(60):
                if (time[0] == '?' or int(time[0]) == h // 10) and \
                   (time[1] == '?' or int(time[1]) == h % 10) and \
                   (time[3] == '?' or int(time[3]) == m // 10) and \
                   (time[4] == '?' or int(time[4]) == m % 10):
                    count += 1

        return count"
False,0,0,2529,,Range Product Queries of Powers,range-product-queries-of-powers,False,13072,33598,2438,False,2,"Can you solve this real interview question? Range Product Queries of Powers - Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.

You are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.

Return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.

 

Example 1:


Input: n = 15, queries = [[0,1],[2,2],[0,3]]
Output: [2,4,64]
Explanation:
For n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.
Answer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.
Answer to 2nd query: powers[2] = 4.
Answer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.
Each answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned.


Example 2:


Input: n = 2, queries = [[0,0]]
Output: [2]
Explanation:
For n = 2, powers = [2].
The answer to the only query is powers[0] = 2. The answer modulo 109 + 7 is the same, so [2] is returned.


 

Constraints:

 * 1 <= n <= 109
 * 1 <= queries.length <= 105
 * 0 <= starti <= endi < powers.length",Solutions (264),239,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/range-product-queries-of-powers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().productQueries(n, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def productQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        MOD = 10**9 + 7
        powers = [1]
        for i in range(1, n.bit_length()):
            powers.append(powers[-1] * 2 % MOD)
            
        ans = []
        
        for query in queries:
            left, right = query[0], query[1]
            product = 1
            for i in range(left, right + 1):
                product = (product * powers[i]) % MOD
            ans.append(product)
            
        return ans"
False,0,0,2530,minimize-maximum-of-array,Minimize Maximum of Array,minimize-maximum-of-array,False,10983,31869,2439,False,2,"Can you solve this real interview question? Minimize Maximum of Array - You are given a 0-indexed array nums comprising of n non-negative integers.

In one operation, you must:

 * Choose an integer i such that 1 <= i < n and nums[i] > 0.
 * Decrease nums[i] by 1.
 * Increase nums[i - 1] by 1.

Return the minimum possible value of the maximum integer of nums after performing any number of operations.

 

Example 1:


Input: nums = [3,7,1,6]
Output: 5
Explanation:
One set of optimal operations is as follows:
1. Choose i = 1, and nums becomes [4,6,1,6].
2. Choose i = 3, and nums becomes [4,6,2,5].
3. Choose i = 1, and nums becomes [5,5,2,5].
The maximum integer of nums is 5. It can be shown that the maximum number cannot be less than 5.
Therefore, we return 5.


Example 2:


Input: nums = [10,1]
Output: 10
Explanation:
It is optimal to leave nums as is, and since 10 is the maximum value, we return 10.


 

Constraints:

 * n == nums.length
 * 2 <= n <= 105
 * 0 <= nums[i] <= 109",Solutions (183),482,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-maximum-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeArrayValue(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimizeArrayValue(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizeArrayValue(self, nums: List[int]) -> int:
        n = len(nums)
        for i in range(1, n):
            if nums[i] > 0:
                diff = min(nums[i], nums[i-1])
                nums[i] -= diff
                nums[i-1] += diff
        return max(nums)"
False,0,0,2531,,Create Components With Same Value,create-components-with-same-value,False,4195,7687,2440,False,3,"Can you solve this real interview question? Create Components With Same Value - There is an undirected tree with n nodes labeled from 0 to n - 1.

You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

You are allowed to delete some edges, splitting the tree into multiple connected components. Let the value of a component be the sum of all nums[i] for which node i is in the component.

Return the maximum number of edges you can delete, such that every connected component in the tree has the same value.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/08/26/diagramdrawio.png]


Input: nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] 
Output: 2 
Explanation: The above figure shows how we can delete the edges [0,1] and [3,4]. The created components are nodes [0], [1,2,3] and [4]. The sum of the values in each component equals 6. It can be proven that no better deletion exists, so the answer is 2.


Example 2:


Input: nums = [2], edges = []
Output: 0
Explanation: There are no edges to be deleted.


 

Constraints:

 * 1 <= n <= 2 * 104
 * nums.length == n
 * 1 <= nums[i] <= 50
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= edges[i][0], edges[i][1] <= n - 1
 * edges represents a valid tree.",Solutions (81),283,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/create-components-with-same-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().componentValue(nums, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def componentValue(self, nums: List[int], edges: List[List[int]]) -> int:
        # Your code here
        pass"
False,0,0,2532,,Remove Letter To Equalize Frequency,remove-letter-to-equalize-frequency,False,24551,136647,2423,False,1,"Can you solve this real interview question? Remove Letter To Equalize Frequency - You are given a 0-indexed string word, consisting of lowercase English letters. You need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.

Return true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.

Note:

 * The frequency of a letter x is the number of times it occurs in the string.
 * You must remove exactly one letter and cannot chose to do nothing.

 

Example 1:


Input: word = ""abcc""
Output: true
Explanation: Select index 3 and delete it: word becomes ""abc"" and each character has a frequency of 1.


Example 2:


Input: word = ""aazz""
Output: false
Explanation: We must delete a character, so either the frequency of ""a"" is 1 and the frequency of ""z"" is 2, or vice versa. It is impossible to make all present letters have equal frequency.


 

Constraints:

 * 2 <= word.length <= 100
 * word consists of lowercase English letters only.",Solutions (628),377,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/remove-letter-to-equalize-frequency/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def equalFrequency(self, word: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    ans = Solution().equalFrequency(word)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def equalFrequency(self, word: str) -> bool:
        def check_freq(word):
            freq = {}
            for letter in word:
                if letter in freq:
                    freq[letter] += 1
                else:
                    freq[letter] = 1
            return list(freq.values())
        
        frequencies = check_freq(word)
        unique_freq = set(frequencies)
        
        if len(unique_freq) == 1:
            return True
        
        if len(unique_freq) > 2:
            return False
        
        for freq in unique_freq:
            if frequencies.count(freq) == 1:
                return True if 1 in frequencies or abs(frequencies[0]-frequencies[1]) == 1 else False
        
        return False"
False,0,0,2533,,Bitwise XOR of All Pairings,bitwise-xor-of-all-pairings,False,14160,24182,2425,False,2,"Can you solve this real interview question? Bitwise XOR of All Pairings - You are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. There exists another array, nums3, which contains the bitwise XOR of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).

Return the bitwise XOR of all integers in nums3.

 

Example 1:


Input: nums1 = [2,1,3], nums2 = [10,2,5,0]
Output: 13
Explanation:
A possible nums3 array is [8,0,7,2,11,3,4,1,9,1,6,3].
The bitwise XOR of all these numbers is 13, so we return 13.


Example 2:


Input: nums1 = [1,2], nums2 = [3,4]
Output: 0
Explanation:
All possible pairs of bitwise XORs are nums1[0] ^ nums2[0], nums1[0] ^ nums2[1], nums1[1] ^ nums2[0],
and nums1[1] ^ nums2[1].
Thus, one possible nums3 array is [2,5,1,6].
2 ^ 5 ^ 1 ^ 6 = 0, so we return 0.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * 0 <= nums1[i], nums2[j] <= 109",Solutions (362),301,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/bitwise-xor-of-all-pairings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().xorAllNums(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def xorAllNums(self, nums1: List[int], nums2: List[int]) -> int:
        result = 0
        for num1 in nums1:
            for num2 in nums2:
                result ^= num1 ^ num2
        return result"
False,0,0,2536,,Determine if Two Events Have Conflict,determine-if-two-events-have-conflict,False,27494,55060,2446,False,1,"Can you solve this real interview question? Determine if Two Events Have Conflict - You are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:

 * event1 = [startTime1, endTime1] and
 * event2 = [startTime2, endTime2].

Event times are valid 24 hours format in the form of HH:MM.

A conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).

Return true if there is a conflict between two events. Otherwise, return false.

 

Example 1:


Input: event1 = [""01:15"",""02:00""], event2 = [""02:00"",""03:00""]
Output: true
Explanation: The two events intersect at time 2:00.


Example 2:


Input: event1 = [""01:00"",""02:00""], event2 = [""01:20"",""03:00""]
Output: true
Explanation: The two events intersect starting from 01:20 to 02:00.


Example 3:


Input: event1 = [""10:00"",""11:00""], event2 = [""14:00"",""15:00""]
Output: false
Explanation: The two events do not intersect.


 

Constraints:

 * evnet1.length == event2.length == 2.
 * event1[i].length == event2[i].length == 5
 * startTime1 <= endTime1
 * startTime2 <= endTime2
 * All the event times follow the HH:MM format.",Solutions (392),292,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/determine-if-two-events-have-conflict/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    event1: List[str] = deserialize(""List[str]"", read_line())
    event2: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().haveConflict(event1, event2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def haveConflict(self, event1: List[str], event2: List[str]) -> bool:
        start1, end1 = event1
        start2, end2 = event2
        return start1 <= end2 and start2 <= end1"
False,0,0,2538,minimum-cost-to-make-array-equal,Minimum Cost to Make Array Equal,minimum-cost-to-make-array-equal,False,12012,34555,2448,False,3,"Can you solve this real interview question? Minimum Cost to Make Array Equal - You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

You can do the following operation any number of times:

 * Increase or decrease any element of the array nums by 1.

The cost of doing one operation on the ith element is cost[i].

Return the minimum total cost such that all the elements of the array nums become equal.

 

Example 1:


Input: nums = [1,3,5,2], cost = [2,3,1,14]
Output: 8
Explanation: We can make all the elements equal to 2 in the following way:
- Increase the 0th element one time. The cost is 2.
- Decrease the 1st element one time. The cost is 3.
- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.
The total cost is 2 + 3 + 3 = 8.
It can be shown that we cannot make the array equal with a smaller cost.


Example 2:


Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]
Output: 0
Explanation: All the elements are already equal, so no operations are needed.


 

Constraints:

 * n == nums.length == cost.length
 * 1 <= n <= 105
 * 1 <= nums[i], cost[i] <= 106",Solutions (243),571,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-make-array-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, nums: List[int], cost: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    cost: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(nums, cost)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minCost(self, nums: List[int], cost: List[int]) -> int:
        total_cost = 0
        max_cost = 0
        n = len(nums)
        
        for i in range(n):
            if i > 0 and nums[i] != nums[i-1]:
                total_cost += max_cost # add the maximum cost before resetting
                max_cost = 0 # reset
                
            max_cost = max(max_cost, cost[i]) # keep track of the maximum cost
        
        total_cost += max_cost # add the final max cost
        
        return total_cost"
False,0,0,2539,,Minimum Number of Operations to Make Arrays Similar,minimum-number-of-operations-to-make-arrays-similar,False,8977,14045,2449,False,3,"Can you solve this real interview question? Minimum Number of Operations to Make Arrays Similar - You are given two positive integer arrays nums and target, of the same length.

In one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:

 * set nums[i] = nums[i] + 2 and
 * set nums[j] = nums[j] - 2.

Two arrays are considered to be similar if the frequency of each element is the same.

Return the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.

 

Example 1:


Input: nums = [8,12,6], target = [2,14,10]
Output: 2
Explanation: It is possible to make nums similar to target in two operations:
- Choose i = 0 and j = 2, nums = [10,12,4].
- Choose i = 1 and j = 2, nums = [10,14,2].
It can be shown that 2 is the minimum number of operations needed.


Example 2:


Input: nums = [1,2,5], target = [4,1,3]
Output: 1
Explanation: We can make nums similar to target in one operation:
- Choose i = 1 and j = 2, nums = [1,4,3].


Example 3:


Input: nums = [1,1,1,1,1], target = [1,1,1,1,1]
Output: 0
Explanation: The array nums is already similiar to target.


 

Constraints:

 * n == nums.length == target.length
 * 1 <= n <= 105
 * 1 <= nums[i], target[i] <= 106
 * It is possible to make nums similar to target.",Solutions (175),319,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeSimilar(self, nums: List[int], target: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    target: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().makeSimilar(nums, target)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def makeSimilar(self, nums: List[int], target: List[int]) -> int:
        res = 0
        for i in range(len(nums)):
            res += abs(nums[i] - target[i]) // 2
        return res"
False,0,0,2541,,Sum of Number and Its Reverse,sum-of-number-and-its-reverse,False,27721,60569,2443,False,2,"Can you solve this real interview question? Sum of Number and Its Reverse - Given a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.

 

Example 1:


Input: num = 443
Output: true
Explanation: 172 + 271 = 443 so we return true.


Example 2:


Input: num = 63
Output: false
Explanation: 63 cannot be expressed as the sum of a non-negative integer and its reverse so we return false.


Example 3:


Input: num = 181
Output: true
Explanation: 140 + 041 = 181 so we return true. Note that when a number is reversed, there may be leading zeros.


 

Constraints:

 * 0 <= num <= 105",Solutions (489),204,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/sum-of-number-and-its-reverse/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sumOfNumberAndReverse(self, num: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().sumOfNumberAndReverse(num)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def sumOfNumberAndReverse(self, num: int) -> bool:
        return num % 10 != 0 or num == 0"
False,0,0,2542,,Average Value of Even Numbers That Are Divisible by Three,average-value-of-even-numbers-that-are-divisible-by-three,False,34633,58602,2455,False,1,"Can you solve this real interview question? Average Value of Even Numbers That Are Divisible by Three - Given an integer array nums of positive integers, return the average value of all even integers that are divisible by 3.

Note that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.

 

Example 1:


Input: nums = [1,3,6,10,12,15]
Output: 9
Explanation: 6 and 12 are even numbers that are divisible by 3. (6 + 12) / 2 = 9.


Example 2:


Input: nums = [1,2,4,7,10]
Output: 0
Explanation: There is no single number that satisfies the requirement, so return 0.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 1000",Solutions (536),223,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/average-value-of-even-numbers-that-are-divisible-by-three/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def averageValue(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().averageValue(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def averageValue(self, nums: List[int]) -> int:
        return sum(num for num in nums if num % 2 == 0 and num % 3 == 0) // len([num for num in nums if num % 2 == 0 and num % 3 == 0]) if len([num for num in nums if num % 2 == 0 and num % 3 == 0]) > 0 else 0"
False,0,0,2543,,Most Popular Video Creator,most-popular-video-creator,False,17676,40339,2456,False,2,"Can you solve this real interview question? Most Popular Video Creator - You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creator[i], has an id of ids[i], and has views[i] views.

The popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.

 * If multiple creators have the highest popularity, find all of them.
 * If multiple videos have the highest view count for a creator, find the lexicographically smallest id.

Return a 2D array of strings answer where answer[i] = [creatori, idi] means that creatori has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.

 

Example 1:


Input: creators = [""alice"",""bob"",""alice"",""chris""], ids = [""one"",""two"",""three"",""four""], views = [5,10,5,4]
Output: [[""alice"",""one""],[""bob"",""two""]]
Explanation:
The popularity of alice is 5 + 5 = 10.
The popularity of bob is 10.
The popularity of chris is 4.
alice and bob are the most popular creators.
For bob, the video with the highest view count is ""two"".
For alice, the videos with the highest view count are ""one"" and ""three"". Since ""one"" is lexicographically smaller than ""three"", it is included in the answer.


Example 2:


Input: creators = [""alice"",""alice"",""alice""], ids = [""a"",""b"",""c""], views = [1,2,2]
Output: [[""alice"",""b""]]
Explanation:
The videos with id ""b"" and ""c"" have the highest view count.
Since ""b"" is lexicographically smaller than ""c"", it is included in the answer.


 

Constraints:

 * n == creators.length == ids.length == views.length
 * 1 <= n <= 105
 * 1 <= creators[i].length, ids[i].length <= 5
 * creators[i] and ids[i] consist only of lowercase English letters.
 * 0 <= views[i] <= 105",Solutions (365),201,"# Created by asetti2002 at 2024/04/17 02:05
# leetgo: 1.4.3
# https://leetcode.com/problems/most-popular-video-creator/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:
        

# @lc code=end

if __name__ == ""__main__"":
    creators: List[str] = deserialize(""List[str]"", read_line())
    ids: List[str] = deserialize(""List[str]"", read_line())
    views: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mostPopularCreator(creators, ids, views)
    print(""\noutput:"", serialize(ans, ""string[][]""))
","class Solution:
    def mostPopularCreator(self, creators: List[str], ids: List[str], views: List[int]) -> List[List[str]]:
        from collections import defaultdict
        
        creator_views = defaultdict(int)
        video_dict = defaultdict(list)
        
        for i in range(len(creators)):
            creator_views[creators[i]] += views[i]
            video_dict[creators[i]].append((ids[i], views[i]))
        
        max_views = max(creator_views.values())
        
        result = []
        for creator, total_views in creator_views.items():
            if total_views == max_views:
                videos = video_dict[creator]
                top_video = min(videos, key=lambda x: x[0])[0]
                result.append([creator, top_video])
        
        return result"
False,0,0,2544,,Minimum Addition to Make Integer Beautiful,minimum-addition-to-make-integer-beautiful,False,15256,41207,2457,False,2,"Can you solve this real interview question? Minimum Addition to Make Integer Beautiful - You are given two positive integers n and target.

An integer is considered beautiful if the sum of its digits is less than or equal to target.

Return the minimum non-negative integer x such that n + x is beautiful. The input will be generated such that it is always possible to make n beautiful.

 

Example 1:


Input: n = 16, target = 6
Output: 4
Explanation: Initially n is 16 and its digit sum is 1 + 6 = 7. After adding 4, n becomes 20 and digit sum becomes 2 + 0 = 2. It can be shown that we can not make n beautiful with adding non-negative integer less than 4.


Example 2:


Input: n = 467, target = 6
Output: 33
Explanation: Initially n is 467 and its digit sum is 4 + 6 + 7 = 17. After adding 33, n becomes 500 and digit sum becomes 5 + 0 + 0 = 5. It can be shown that we can not make n beautiful with adding non-negative integer less than 33.


Example 3:


Input: n = 1, target = 1
Output: 0
Explanation: Initially n is 1 and its digit sum is 1, which is already smaller than or equal to target.


 

Constraints:

 * 1 <= n <= 1012
 * 1 <= target <= 150
 * The input will be generated such that it is always possible to make n beautiful.",Solutions (364),421,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-addition-to-make-integer-beautiful/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeIntegerBeautiful(self, n: int, target: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    target: int = deserialize(""int"", read_line())
    ans = Solution().makeIntegerBeautiful(n, target)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def makeIntegerBeautiful(self, n: int, target: int) -> int:
        x = max(0, (target - sum(int(i) for i in str(n)) + 9) // 10 * 10)
        return x"
False,0,0,2546,,Number of Subarrays With GCD Equal to K,number-of-subarrays-with-gcd-equal-to-k,False,19108,39283,2447,False,2,"Can you solve this real interview question? Number of Subarrays With GCD Equal to K - Given an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k.

A subarray is a contiguous non-empty sequence of elements within an array.

The greatest common divisor of an array is the largest integer that evenly divides all the array elements.

 

Example 1:


Input: nums = [9,3,1,2,6,3], k = 3
Output: 4
Explanation: The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]


Example 2:


Input: nums = [4], k = 7
Output: 0
Explanation: There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i], k <= 109",Solutions (239),343,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-subarrays-with-gcd-equal-to-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarrayGCD(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().subarrayGCD(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarrayGCD(self, nums: List[int], k: int) -> int:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        def has_common_divisor(arr):
            common = arr[0]
            for num in arr:
                common = gcd(common, num)
                if common == k:
                    return True
            return False
        
        count = 0
        for i in range(len(nums)):
            for j in range(i, len(nums)):
                if has_common_divisor(nums[i:j+1]):
                    count += 1
        return count"
False,0,0,2547,,Odd String Difference,odd-string-difference,False,20057,33393,2451,False,1,"Can you solve this real interview question? Odd String Difference - You are given an array of equal-length strings words. Assume that the length of each string is n.

Each string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. Note that the difference between two letters is the difference between their positions in the alphabet i.e. the position of 'a' is 0, 'b' is 1, and 'z' is 25.

 * For example, for the string ""acb"", the difference integer array is [2 - 0, 1 - 2] = [2, -1].

All the strings in words have the same difference integer array, except one. You should find that string.

Return the string in words that has different difference integer array.

 

Example 1:


Input: words = [""adc"",""wzy"",""abc""]
Output: ""abc""
Explanation: 
- The difference integer array of ""adc"" is [3 - 0, 2 - 3] = [3, -1].
- The difference integer array of ""wzy"" is [25 - 22, 24 - 25]= [3, -1].
- The difference integer array of ""abc"" is [1 - 0, 2 - 1] = [1, 1]. 
The odd array out is [1, 1], so we return the corresponding string, ""abc"".


Example 2:


Input: words = [""aaa"",""bob"",""ccc"",""ddd""]
Output: ""bob""
Explanation: All the integer arrays are [0, 0] except for ""bob"", which corresponds to [13, -13].


 

Constraints:

 * 3 <= words.length <= 100
 * n == words[i].length
 * 2 <= n <= 20
 * words[i] consists of lowercase English letters.",Solutions (421),280,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/odd-string-difference/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def oddString(self, words: List[str]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().oddString(words)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def oddString(self, words: List[str]) -> str:
        diff = lambda word: [ord(word[i]) - ord(word[i-1]) for i in range(1, len(word))]
        unique_diff = list(set(diff(words[0])))
        for word in words:
            if unique_diff != diff(word):
                return word"
False,0,0,2548,,Destroy Sequential Targets,destroy-sequential-targets,False,11404,30212,2453,False,2,"Can you solve this real interview question? Destroy Sequential Targets - You are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. You are also given an integer space.

You have a machine which can destroy targets. Seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. You want to destroy the maximum number of targets in nums.

Return the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.

 

Example 1:


Input: nums = [3,7,8,1,1,5], space = 2
Output: 1
Explanation: If we seed the machine with nums[3], then we destroy all targets equal to 1,3,5,7,9,... 
In this case, we would destroy 5 total targets (all except for nums[2]). 
It is impossible to destroy more than 5 targets, so we return nums[3].


Example 2:


Input: nums = [1,3,5,2,4,6], space = 2
Output: 1
Explanation: Seeding the machine with nums[0], or nums[3] destroys 3 targets. 
It is not possible to destroy more than 3 targets.
Since nums[0] is the minimal integer that can destroy 3 targets, we return 1.


Example 3:


Input: nums = [6,2,5], space = 100
Output: 2
Explanation: Whatever initial seed we select, we can only destroy 1 target. The minimal seed is nums[1].


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= space <= 109",Solutions (216),361,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/destroy-sequential-targets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def destroyTargets(self, nums: List[int], space: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    space: int = deserialize(""int"", read_line())
    ans = Solution().destroyTargets(nums, space)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def destroyTargets(self, nums: List[int], space: int) -> int:
        nums.sort()
        max_targets = 0
        
        for num in nums:
            count = 1
            while num + count * space in nums:
                count += 1
            if count > max_targets:
                max_targets = count
                result = num
        
        return result"
False,0,0,2549,,Next Greater Element IV,next-greater-element-iv,False,6390,16051,2454,False,3,"Can you solve this real interview question? Next Greater Element IV - You are given a 0-indexed array of non-negative integers nums. For each integer in nums, you must find its respective second greater integer.

The second greater integer of nums[i] is nums[j] such that:

 * j > i
 * nums[j] > nums[i]
 * There exists exactly one index k such that nums[k] > nums[i] and i < k < j.

If there is no such nums[j], the second greater integer is considered to be -1.

 * For example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1.

Return an integer array answer, where answer[i] is the second greater integer of nums[i].

 

Example 1:


Input: nums = [2,4,0,9,6]
Output: [9,6,6,-1,-1]
Explanation:
0th index: 4 is the first integer greater than 2, and 9 is the second integer greater than 2, to the right of 2.
1st index: 9 is the first, and 6 is the second integer greater than 4, to the right of 4.
2nd index: 9 is the first, and 6 is the second integer greater than 0, to the right of 0.
3rd index: There is no integer greater than 9 to its right, so the second greater integer is considered to be -1.
4th index: There is no integer greater than 6 to its right, so the second greater integer is considered to be -1.
Thus, we return [9,6,6,-1,-1].


Example 2:


Input: nums = [3,3]
Output: [-1,-1]
Explanation:
We return [-1,-1] since neither integer has any integer greater than it.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109",Solutions (129),446,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/next-greater-element-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def secondGreaterElement(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().secondGreaterElement(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def secondGreaterElement(self, nums: List[int]) -> List[int]:
        stack = []
        n = len(nums)
        ans = [-1] * n
        for i in range(n):
            while stack and nums[i] > nums[stack[-1]]:
                prev_idx = stack.pop()
                if stack:
                    ans[stack[-1]] = max(ans[stack[-1]], nums[i])
                ans[prev_idx] = nums[i]
            stack.append(i)
        return ans"
False,0,0,2550,,Words Within Two Edits of Dictionary,words-within-two-edits-of-dictionary,False,15540,25738,2452,False,2,"Can you solve this real interview question? Words Within Two Edits of Dictionary - You are given two string arrays, queries and dictionary. All words in each array comprise of lowercase English letters and have the same length.

In one edit you can take a word from queries, and change any letter in it to any other letter. Find all words from queries that, after a maximum of two edits, equal some word from dictionary.

Return a list of all words from queries, that match with some word from dictionary after a maximum of two edits. Return the words in the same order they appear in queries.

 

Example 1:


Input: queries = [""word"",""note"",""ants"",""wood""], dictionary = [""wood"",""joke"",""moat""]
Output: [""word"",""note"",""wood""]
Explanation:
- Changing the 'r' in ""word"" to 'o' allows it to equal the dictionary word ""wood"".
- Changing the 'n' to 'j' and the 't' to 'k' in ""note"" changes it to ""joke"".
- It would take more than 2 edits for ""ants"" to equal a dictionary word.
- ""wood"" can remain unchanged (0 edits) and match the corresponding dictionary word.
Thus, we return [""word"",""note"",""wood""].


Example 2:


Input: queries = [""yes""], dictionary = [""not""]
Output: []
Explanation:
Applying any two edits to ""yes"" cannot make it equal to ""not"". Thus, we return an empty array.


 

Constraints:

 * 1 <= queries.length, dictionary.length <= 100
 * n == queries[i].length == dictionary[j].length
 * 1 <= n <= 100
 * All queries[i] and dictionary[j] are composed of lowercase English letters.",Solutions (304),218,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/words-within-two-edits-of-dictionary/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    queries: List[str] = deserialize(""List[str]"", read_line())
    dictionary: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().twoEditWords(queries, dictionary)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def twoEditWords(self, queries: List[str], dictionary: List[str]) -> List[str]:
        def is_edit_distance_one(word1, word2):
            if len(word1) != len(word2):
                return False
            count_diff = 0
            for i in range(len(word1)):
                if word1[i] != word2[i]:
                    count_diff += 1
                if count_diff > 1:
                    return False
            return count_diff == 1

        def is_edit_distance_two(word1, word2):
            if len(word1) != len(word2):
                return False
            count_diff = 0
            for i in range(len(word1)):
                if word1[i] != word2[i]:
                    count_diff += 1
                if count_diff > 2:
                    return False
            return count_diff == 2

        result = []
        for query in queries:
            match_found = False
            if query in dictionary:
                result.append(query)
                match_found = True
            else:
                for word in dictionary:
                    if is_edit_distance_one(query, word) or is_edit_distance_two(query, word):
                        result.append(query)
                        match_found = True
                        break
            if not match_found:
                result = result

        return result"
False,0,0,2551,,Apply Operations to an Array,apply-operations-to-an-array,False,34801,51876,2460,False,1,"Can you solve this real interview question? Apply Operations to an Array - You are given a 0-indexed array nums of size n consisting of non-negative integers.

You need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:

 * If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.

After performing all the operations, shift all the 0's to the end of the array.

 * For example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].

Return the resulting array.

Note that the operations are applied sequentially, not all at once.

 

Example 1:


Input: nums = [1,2,2,1,1,0]
Output: [1,4,2,0,0,0]
Explanation: We do the following operations:
- i = 0: nums[0] and nums[1] are not equal, so we skip this operation.
- i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,4,0,1,1,0].
- i = 2: nums[2] and nums[3] are not equal, so we skip this operation.
- i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,2,0,0].
- i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,0,0].
After that, we shift the 0's to the end, which gives the array [1,4,2,0,0,0].


Example 2:


Input: nums = [0,1]
Output: [1,0]
Explanation: No operation can be applied, we just shift the 0 to the end.


 

Constraints:

 * 2 <= nums.length <= 2000
 * 0 <= nums[i] <= 1000",Solutions (632),331,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/apply-operations-to-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().applyOperations(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def applyOperations(self, nums: List[int]) -> List[int]:
        n = len(nums)
        for i in range(n-1):
            if nums[i] == nums[i+1]:
                nums[i] *= 2
                nums[i+1] = 0
        nums.sort(key=lambda x: x == 0)
        return nums"
False,0,0,2552,,Maximum Sum of Distinct Subarrays With Length K,maximum-sum-of-distinct-subarrays-with-length-k,False,22774,66474,2461,False,2,"Can you solve this real interview question? Maximum Sum of Distinct Subarrays With Length K - You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:

 * The length of the subarray is k, and
 * All the elements of the subarray are distinct.

Return the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,5,4,2,9,9,9], k = 3
Output: 15
Explanation: The subarrays of nums with length 3 are:
- [1,5,4] which meets the requirements and has a sum of 10.
- [5,4,2] which meets the requirements and has a sum of 11.
- [4,2,9] which meets the requirements and has a sum of 15.
- [2,9,9] which does not meet the requirements because the element 9 is repeated.
- [9,9,9] which does not meet the requirements because the element 9 is repeated.
We return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions


Example 2:


Input: nums = [4,4,4], k = 3
Output: 0
Explanation: The subarrays of nums with length 3 are:
- [4,4,4] which does not meet the requirements because the element 4 is repeated.
We return 0 because no subarrays meet the conditions.


 

Constraints:

 * 1 <= k <= nums.length <= 105
 * 1 <= nums[i] <= 105",Solutions (477),627,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumSubarraySum(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumSubarraySum(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maximumSubarraySum(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2553,,Total Cost to Hire K Workers,total-cost-to-hire-k-workers,False,13984,37241,2462,False,2,"Can you solve this real interview question? Total Cost to Hire K Workers - You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker.

You are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:

 * You will run k sessions and hire exactly one worker in each session.
 * In each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index.
   * For example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2].
   * In the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process.
 * If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.
 * A worker can only be chosen once.

Return the total cost to hire exactly k workers.

 

Example 1:


Input: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4
Output: 11
Explanation: We hire 3 workers in total. The total cost is initially 0.
- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2.
- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.
- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.
The total hiring cost is 11.


Example 2:


Input: costs = [1,2,4,1], k = 3, candidates = 3
Output: 4
Explanation: We hire 3 workers in total. The total cost is initially 0.
- In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers.
- In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2.
- In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.
The total hiring cost is 4.


 

Constraints:

 * 1 <= costs.length <= 105
 * 1 <= costs[i] <= 105
 * 1 <= k, candidates <= costs.length",Solutions (338),421,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/total-cost-to-hire-k-workers/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    costs: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    candidates: int = deserialize(""int"", read_line())
    ans = Solution().totalCost(costs, k, candidates)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:
        n = len(costs)
        costs.sort()
        ans = float('inf')
        total = 0
        
        for i in range(k, n+1):
            total += costs[i-1]
            ans = min(ans, total)
            if i < n and i >= candidates:
                total -= costs[i-candidates]
        
        return ans"
False,0,0,2554,,Minimum Total Distance Traveled,minimum-total-distance-traveled,False,5913,14547,2463,False,3,"Can you solve this real interview question? Minimum Total Distance Traveled - There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.

The positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.

All the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.

At any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.

Return the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.

Note that

 * All robots move at the same speed.
 * If two robots move in the same direction, they will never collide.
 * If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other.
 * If a robot passes by a factory that reached its limits, it crosses it as if it does not exist.
 * If the robot moved from a position x to a position y, the distance it moved is |y - x|.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/09/15/example1.jpg]


Input: robot = [0,4,6], factory = [[2,2],[6,2]]
Output: 4
Explanation: As shown in the figure:
- The first robot at position 0 moves in the positive direction. It will be repaired at the first factory.
- The second robot at position 4 moves in the negative direction. It will be repaired at the first factory.
- The third robot at position 6 will be repaired at the second factory. It does not need to move.
The limit of the first factory is 2, and it fixed 2 robots.
The limit of the second factory is 2, and it fixed 1 robot.
The total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4.


Example 2:

[https://assets.leetcode.com/uploads/2022/09/15/example-2.jpg]


Input: robot = [1,-1], factory = [[-2,1],[2,1]]
Output: 2
Explanation: As shown in the figure:
- The first robot at position 1 moves in the positive direction. It will be repaired at the second factory.
- The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.
The limit of the first factory is 1, and it fixed 1 robot.
The limit of the second factory is 1, and it fixed 1 robot.
The total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2.


 

Constraints:

 * 1 <= robot.length, factory.length <= 100
 * factory[j].length == 2
 * -109 <= robot[i], positionj <= 109
 * 0 <= limitj <= robot.length
 * The input will be generated such that it is always possible to repair every robot.",Solutions (116),363,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-total-distance-traveled/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    robot: List[int] = deserialize(""List[int]"", read_line())
    factory: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumTotalDistance(robot, factory)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumTotalDistance(self, robot: List[int], factory: List[List[int]]) -> int:
        pass"
False,0,0,2556,,Convert the Temperature,convert-the-temperature,False,70154,78748,2469,False,1,"Can you solve this real interview question? Convert the Temperature - You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius.

You should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit].

Return the array ans. Answers within 10-5 of the actual answer will be accepted.

Note that:

 * Kelvin = Celsius + 273.15
 * Fahrenheit = Celsius * 1.80 + 32.00

 

Example 1:


Input: celsius = 36.50
Output: [309.65000,97.70000]
Explanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70.


Example 2:


Input: celsius = 122.11
Output: [395.26000,251.79800]
Explanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798.


 

Constraints:

 * 0 <= celsius <= 1000",Solutions (850),327,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/convert-the-temperature/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def convertTemperature(self, celsius: float) -> List[float]:
        

# @lc code=end

if __name__ == ""__main__"":
    celsius: float = deserialize(""float"", read_line())
    ans = Solution().convertTemperature(celsius)
    print(""\noutput:"", serialize(ans, ""double[]""))
","class Solution:
    def convertTemperature(self, celsius: float) -> List[float]:
        kelvin = celsius + 273.15
        fahrenheit = celsius * 1.80 + 32.00
        return [round(kelvin, 5), round(fahrenheit, 5)]"
False,0,0,2557,,Number of Subarrays With LCM Equal to K,number-of-subarrays-with-lcm-equal-to-k,False,17907,46676,2470,False,2,"Can you solve this real interview question? Number of Subarrays With LCM Equal to K - Given an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray's elements is k.

A subarray is a contiguous non-empty sequence of elements within an array.

The least common multiple of an array is the smallest positive integer that is divisible by all the array elements.

 

Example 1:


Input: nums = [3,6,2,7,1], k = 6
Output: 4
Explanation: The subarrays of nums where 6 is the least common multiple of all the subarray's elements are:
- [3,6,2,7,1]
- [3,6,2,7,1]
- [3,6,2,7,1]
- [3,6,2,7,1]


Example 2:


Input: nums = [3], k = 2
Output: 0
Explanation: There are no subarrays of nums where 2 is the least common multiple of all the subarray's elements.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i], k <= 1000",Solutions (202),284,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-subarrays-with-lcm-equal-to-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def subarrayLCM(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().subarrayLCM(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def subarrayLCM(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2559,,Maximum Number of Non-overlapping Palindrome Substrings,maximum-number-of-non-overlapping-palindrome-substrings,False,9195,24153,2472,False,3,"Can you solve this real interview question? Maximum Number of Non-overlapping Palindrome Substrings - You are given a string s and a positive integer k.

Select a set of non-overlapping substrings from the string s that satisfy the following conditions:

 * The length of each substring is at least k.
 * Each substring is a palindrome.

Return the maximum number of substrings in an optimal selection.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""abaccdbbd"", k = 3
Output: 2
Explanation: We can select the substrings underlined in s = ""abaccdbbd"". Both ""aba"" and ""dbbd"" are palindromes and have a length of at least k = 3.
It can be shown that we cannot find a selection with more than two valid substrings.


Example 2:


Input: s = ""adbcda"", k = 2
Output: 0
Explanation: There is no palindrome substring of length at least 2 in the string.


 

Constraints:

 * 1 <= k <= s.length <= 2000
 * s consists of lowercase English letters.",Solutions (199),318,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPalindromes(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxPalindromes(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxPalindromes(self, s: str, k: int) -> int:
        pass"
False,0,0,2561,,Number of Distinct Averages,number-of-distinct-averages,False,25590,43908,2465,False,1,"Can you solve this real interview question? Number of Distinct Averages - You are given a 0-indexed integer array nums of even length.

As long as nums is not empty, you must repetitively:

 * Find the minimum number in nums and remove it.
 * Find the maximum number in nums and remove it.
 * Calculate the average of the two removed numbers.

The average of two numbers a and b is (a + b) / 2.

 * For example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.

Return the number of distinct averages calculated using the above process.

Note that when there is a tie for a minimum or maximum number, any can be removed.

 

Example 1:


Input: nums = [4,1,4,0,3,5]
Output: 2
Explanation:
1. Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3].
2. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3].
3. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.
Since there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2.


Example 2:


Input: nums = [1,100]
Output: 1
Explanation:
There is only one average to be calculated after removing 1 and 100, so we return 1.


 

Constraints:

 * 2 <= nums.length <= 100
 * nums.length is even.
 * 0 <= nums[i] <= 100",Solutions (535),258,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-distinct-averages/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctAverages(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().distinctAverages(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctAverages(self, nums: List[int]) -> int:
        # Write your code here
        pass"
False,0,0,2562,,Count Ways To Build Good Strings,count-ways-to-build-good-strings,False,11251,26723,2466,False,2,"Can you solve this real interview question? Count Ways To Build Good Strings - Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:

 * Append the character '0' zero times.
 * Append the character '1' one times.

This can be performed any number of times.

A good string is a string constructed by the above process having a length between low and high (inclusive).

Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.

 

Example 1:


Input: low = 3, high = 3, zero = 1, one = 1
Output: 8
Explanation: 
One possible valid good string is ""011"". 
It can be constructed as follows: """" -> ""0"" -> ""01"" -> ""011"". 
All binary strings from ""000"" to ""111"" are good strings in this example.


Example 2:


Input: low = 2, high = 3, zero = 1, one = 2
Output: 5
Explanation: The good strings are ""00"", ""11"", ""000"", ""110"", and ""011"".


 

Constraints:

 * 1 <= low <= high <= 105
 * 1 <= zero, one <= low",Solutions (191),338,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-ways-to-build-good-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    low: int = deserialize(""int"", read_line())
    high: int = deserialize(""int"", read_line())
    zero: int = deserialize(""int"", read_line())
    one: int = deserialize(""int"", read_line())
    ans = Solution().countGoodStrings(low, high, zero, one)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countGoodStrings(self, low: int, high: int, zero: int, one: int) -> int:
        MOD = 10**9 + 7

        @lru_cache(None)
        def dp(length, zeros, ones):
            if length < low or length > high or zeros > zero or ones > one:
                return 0
            if length == high and zeros == zero and ones == one:
                return 1
            return (dp(length + 1, zeros, ones) + dp(length + 1, zeros + 1, ones) + dp(length + 1, zeros, ones + 1)) % MOD

        return dp(0, 0, 0)"
False,0,0,2563,,Split Message Based on Limit,split-message-based-on-limit,False,3702,8000,2468,False,3,"Can you solve this real interview question? Split Message Based on Limit - You are given a string, message, and a positive integer, limit.

You must split message into one or more parts based on limit. Each resulting part should have the suffix ""<a/b>"", where ""b"" is to be replaced with the total number of parts and ""a"" is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.

The resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.

Return the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.

 

Example 1:


Input: message = ""this is really a very awesome message"", limit = 9
Output: [""thi<1/14>"",""s i<2/14>"",""s r<3/14>"",""eal<4/14>"",""ly <5/14>"",""a v<6/14>"",""ery<7/14>"","" aw<8/14>"",""eso<9/14>"",""me<10/14>"","" m<11/14>"",""es<12/14>"",""sa<13/14>"",""ge<14/14>""]
Explanation:
The first 9 parts take 3 characters each from the beginning of message.
The next 5 parts take 2 characters each to finish splitting message. 
In this example, each part, including the last, has length 9. 
It can be shown it is not possible to split message into less than 14 parts.


Example 2:


Input: message = ""short message"", limit = 15
Output: [""short mess<1/2>"",""age<2/2>""]
Explanation:
Under the given constraints, the string can be split into two parts: 
- The first part comprises of the first 10 characters, and has a length 15.
- The next part comprises of the last 3 characters, and has a length 8.


 

Constraints:

 * 1 <= message.length <= 104
 * message consists only of lowercase English letters and ' '.
 * 1 <= limit <= 104",Solutions (100),80,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/split-message-based-on-limit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitMessage(self, message: str, limit: int) -> List[str]:
        

# @lc code=end

if __name__ == ""__main__"":
    message: str = deserialize(""str"", read_line())
    limit: int = deserialize(""int"", read_line())
    ans = Solution().splitMessage(message, limit)
    print(""\noutput:"", serialize(ans, ""string[]""))
","class Solution:
    def splitMessage(self, message: str, limit: int) -> List[str]:
        result = []
        parts = (len(message) + limit - 1) // limit
        
        if parts > 26:
            return []
        
        for i in range(parts):
            suffix = ""<{}/{}>"".format(i+1, parts)
            start = i * limit
            end = min((i + 1) * limit, len(message))
            result.append(message[start:end] + suffix)
        
        return result"
False,0,0,2564,,Most Profitable Path in a Tree,most-profitable-path-in-a-tree,False,6939,14382,2467,False,2,"Can you solve this real interview question? Most Profitable Path in a Tree - There is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

At every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents:

 * the price needed to open the gate at node i, if amount[i] is negative, or,
 * the cash reward obtained on opening the gate at node i, otherwise.

The game goes on as follows:

 * Initially, Alice is at node 0 and Bob is at node bob.
 * At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node 0.
 * For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that:
   * If the gate is already open, no price will be required, nor will there be any cash reward.
   * If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is c, then both Alice and Bob pay c / 2 each. Similarly, if the reward at the gate is c, both of them receive c / 2 each.
 * If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node 0, he stops moving. Note that these events are independent of each other.

Return the maximum net income Alice can have if she travels towards the optimal leaf node.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/29/eg1.png]


Input: edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]
Output: 6
Explanation: 
The above diagram represents the given tree. The game goes as follows:
- Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.
  Alice's net income is now -2.
- Both Alice and Bob move to node 1. 
  Since they reach here simultaneously, they open the gate together and share the reward.
  Alice's net income becomes -2 + (4 / 2) = 0.
- Alice moves on to node 3. Since Bob already opened its gate, Alice's income remains unchanged.
  Bob moves on to node 0, and stops moving.
- Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.
Now, neither Alice nor Bob can make any further moves, and the game ends.
It is not possible for Alice to get a higher net income.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/29/eg2.png]


Input: edges = [[0,1]], bob = 1, amount = [-7280,2350]
Output: -7280
Explanation: 
Alice follows the path 0->1 whereas Bob follows the path 1->0.
Thus, Alice opens the gate at node 0 only. Hence, her net income is -7280. 


 

Constraints:

 * 2 <= n <= 105
 * edges.length == n - 1
 * edges[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * edges represents a valid tree.
 * 1 <= bob < n
 * amount.length == n
 * amount[i] is an even integer in the range [-104, 104].",Solutions (172),430,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/most-profitable-path-in-a-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    bob: int = deserialize(""int"", read_line())
    amount: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().mostProfitablePath(edges, bob, amount)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def mostProfitablePath(self, edges: List[List[int]], bob: int, amount: List[int]) -> int:
        from collections import deque
        
        n = len(amount)
        tree = [[] for _ in range(n)]
        for a, b in edges:
            tree[a].append(b)
            tree[b].append(a)
        
        def dfs(node, parent):
            best_profit = amount[node]
            for neighbor in tree[node]:
                if neighbor == parent:
                    continue
                profit = dfs(neighbor, node)
                best_profit = max(best_profit, profit)
            return best_profit
        
        def find_max_profit(start):
            q = deque([(start, -1)])
            max_profit = amount[start]
            while q:
                node, parent = q.popleft()
                profit = amount[node]
                for neighbor in tree[node]:
                    if neighbor == parent:
                        continue
                    profit += dfs(neighbor, node)
                max_profit = max(max_profit, profit)
                for neighbor in tree[node]:
                    if neighbor != parent:
                        q.append((neighbor, node))
            return max_profit
        
        return find_max_profit(0)"
False,0,0,2566,,Number of Unequal Triplets in Array,number-of-unequal-triplets-in-array,False,25444,35912,2475,False,1,"Can you solve this real interview question? Number of Unequal Triplets in Array - You are given a 0-indexed array of positive integers nums. Find the number of triplets (i, j, k) that meet the following conditions:

 * 0 <= i < j < k < nums.length
 * nums[i], nums[j], and nums[k] are pairwise distinct.
   * In other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].

Return the number of triplets that meet the conditions.

 

Example 1:


Input: nums = [4,4,2,4,3]
Output: 3
Explanation: The following triplets meet the conditions:
- (0, 2, 4) because 4 != 2 != 3
- (1, 2, 4) because 4 != 2 != 3
- (2, 3, 4) because 2 != 4 != 3
Since there are 3 triplets, we return 3.
Note that (2, 0, 4) is not a valid triplet because 2 > 0.


Example 2:


Input: nums = [1,1,1,1,1]
Output: 0
Explanation: No triplets meet the conditions so we return 0.


 

Constraints:

 * 3 <= nums.length <= 100
 * 1 <= nums[i] <= 1000",Solutions (287),255,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-unequal-triplets-in-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def unequalTriplets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().unequalTriplets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def unequalTriplets(self, nums: List[int]) -> int:
        count = 0
        n = len(nums)
        for i in range(n):
            for j in range(i+1, n):
                for k in range(j+1, n):
                    if nums[i] != nums[j] and nums[i] != nums[k] and nums[j] != nums[k]:
                        count += 1
        return count"
False,0,0,2568,minimum-fuel-cost-to-report-to-the-capital,Minimum Fuel Cost to Report to the Capital,minimum-fuel-cost-to-report-to-the-capital,False,53674,79251,2477,False,2,"Can you solve this real interview question? Minimum Fuel Cost to Report to the Capital - There is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. The capital city is city 0. You are given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.

There is a meeting for the representatives of each city. The meeting is in the capital city.

There is a car in each city. You are given an integer seats that indicates the number of seats in each car.

A representative can use the car in their city to travel or change the car and ride with another representative. The cost of traveling between two cities is one liter of fuel.

Return the minimum number of liters of fuel to reach the capital city.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/09/22/a4c380025e3ff0c379525e96a7d63a3.png]


Input: roads = [[0,1],[0,2],[0,3]], seats = 5
Output: 3
Explanation: 
- Representative1 goes directly to the capital with 1 liter of fuel.
- Representative2 goes directly to the capital with 1 liter of fuel.
- Representative3 goes directly to the capital with 1 liter of fuel.
It costs 3 liters of fuel at minimum. 
It can be proven that 3 is the minimum number of liters of fuel needed.


Example 2:

[https://assets.leetcode.com/uploads/2022/11/16/2.png]


Input: roads = [[3,1],[3,2],[1,0],[0,4],[0,5],[4,6]], seats = 2
Output: 7
Explanation: 
- Representative2 goes directly to city 3 with 1 liter of fuel.
- Representative2 and representative3 go together to city 1 with 1 liter of fuel.
- Representative2 and representative3 go together to the capital with 1 liter of fuel.
- Representative1 goes directly to the capital with 1 liter of fuel.
- Representative5 goes directly to the capital with 1 liter of fuel.
- Representative6 goes directly to city 4 with 1 liter of fuel.
- Representative4 and representative6 go together to the capital with 1 liter of fuel.
It costs 7 liters of fuel at minimum. 
It can be proven that 7 is the minimum number of liters of fuel needed.


Example 3:

[https://assets.leetcode.com/uploads/2022/09/27/efcf7f7be6830b8763639cfd01b690a.png]


Input: roads = [], seats = 1
Output: 0
Explanation: No representatives need to travel to the capital city.


 

Constraints:

 * 1 <= n <= 105
 * roads.length == n - 1
 * roads[i].length == 2
 * 0 <= ai, bi < n
 * ai != bi
 * roads represents a valid tree.
 * 1 <= seats <= 105",Solutions (608),1.8K,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-fuel-cost-to-report-to-the-capital/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    roads: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    seats: int = deserialize(""int"", read_line())
    ans = Solution().minimumFuelCost(roads, seats)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
        adj_list = collections.defaultdict(list)
        for road in roads:
            adj_list[road[0]].append(road[1])
        visited = set()
        
        def dfs(node):
            if node == 0:
                return 0
            visited.add(node)
            total_fuel = seats
            for neighbor in adj_list[node]:
                if neighbor not in visited:
                    total_fuel += dfs(neighbor)
            return total_fuel
        
        return dfs(0) - seats"
False,0,0,2569,,Number of Beautiful Partitions,number-of-beautiful-partitions,False,7283,23647,2478,False,3,"Can you solve this real interview question? Number of Beautiful Partitions - You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.

A partition of s is called beautiful if:

 * s is partitioned into k non-intersecting substrings.
 * Each substring has a length of at least minLength.
 * Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.

Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.

A substring is a contiguous sequence of characters within a string.

 

Example 1:


Input: s = ""23542185131"", k = 3, minLength = 2
Output: 3
Explanation: There exists three ways to create a beautiful partition:
""2354 | 218 | 5131""
""2354 | 21851 | 31""
""2354218 | 51 | 31""


Example 2:


Input: s = ""23542185131"", k = 3, minLength = 3
Output: 1
Explanation: There exists one way to create a beautiful partition: ""2354 | 218 | 5131"".


Example 3:


Input: s = ""3312958"", k = 3, minLength = 1
Output: 1
Explanation: There exists one way to create a beautiful partition: ""331 | 29 | 58"".


 

Constraints:

 * 1 <= k, minLength <= s.length <= 1000
 * s consists of the digits '1' to '9'.",Solutions (139),264,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-beautiful-partitions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    minLength: int = deserialize(""int"", read_line())
    ans = Solution().beautifulPartitions(s, k, minLength)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def beautifulPartitions(self, s: str, k: int, minLength: int) -> int:
        MOD = 10**9 + 7
        primes = {'2', '3', '5', '7'}
        
        def is_prime(num):
            return num in primes
        
        n = len(s)
        dp = [[0] * (k + 1) for _ in range(n + 1)]
        dp[0][0] = 1
        
        for i in range(1, n + 1):
            for j in range(1, k + 1):
                for l in range(min(i, minLength), i + 1):
                    if is_prime(s[l-1]) and not is_prime(s[i-1]):
                        dp[i][j] = (dp[i][j] + dp[l-1][j-1]) % MOD
        
        return dp[n][k]"
False,0,0,2571,,Find the Pivot Integer,find-the-pivot-integer,False,32369,40441,2485,False,1,"Can you solve this real interview question? Find the Pivot Integer - Given a positive integer n, find the pivot integer x such that:

 * The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.

Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.

 

Example 1:


Input: n = 8
Output: 6
Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.


Example 2:


Input: n = 1
Output: 1
Explanation: 1 is the pivot integer since: 1 = 1.


Example 3:


Input: n = 4
Output: -1
Explanation: It can be proved that no such integer exist.


 

Constraints:

 * 1 <= n <= 1000",Solutions (709),366,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-pivot-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pivotInteger(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().pivotInteger(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def pivotInteger(self, n: int) -> int:
        total_sum = n * (n + 1) // 2
        if total_sum % 2 == 0:
            target_sum = total_sum // 2
            current_sum = 0
            for i in range(1, n + 1):
                current_sum += i
                if current_sum == target_sum:
                    return i
                elif current_sum > target_sum:
                    return -1
        else:
            return -1"
False,0,0,2572,,Append Characters to String to Make Subsequence,append-characters-to-string-to-make-subsequence,False,19749,30908,2486,False,2,"Can you solve this real interview question? Append Characters to String to Make Subsequence - You are given two strings s and t consisting of only lowercase English letters.

Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:


Input: s = ""coaching"", t = ""coding""
Output: 4
Explanation: Append the characters ""ding"" to the end of s so that s = ""coachingding"".
Now, t is a subsequence of s (""coachingding"").
It can be shown that appending any 3 characters to the end of s will never make t a subsequence.


Example 2:


Input: s = ""abcde"", t = ""a""
Output: 0
Explanation: t is already a subsequence of s (""abcde"").


Example 3:


Input: s = ""z"", t = ""abcde""
Output: 5
Explanation: Append the characters ""abcde"" to the end of s so that s = ""zabcde"".
Now, t is a subsequence of s (""zabcde"").
It can be shown that appending any 4 characters to the end of s will never make t a subsequence.


 

Constraints:

 * 1 <= s.length, t.length <= 105
 * s and t consist only of lowercase English letters.",Solutions (395),278,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/append-characters-to-string-to-make-subsequence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def appendCharacters(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().appendCharacters(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def appendCharacters(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        dp = [[0] * (n + 1) for _ in range(m + 1)]
        
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1] + 1
                else:
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
        
        return n - dp[m][n]"
False,0,0,2574,,Count Subarrays With Median K,count-subarrays-with-median-k,False,8366,19451,2488,False,3,"Can you solve this real interview question? Count Subarrays With Median K - You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.

Return the number of non-empty subarrays in nums that have a median equal to k.

Note:

 * The median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element.
   * For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.
 * A subarray is a contiguous part of an array.

 

Example 1:


Input: nums = [3,2,1,4,5], k = 4
Output: 3
Explanation: The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5].


Example 2:


Input: nums = [2,3,1], k = 3
Output: 1
Explanation: [3] is the only subarray that has a median equal to 3.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 105
 * 1 <= nums[i], k <= n
 * The integers in nums are distinct.",Solutions (152),416,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-subarrays-with-median-k/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countSubarrays(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countSubarrays(self, nums: List[int], k: int) -> int:
        pass"
False,0,0,2575,,Minimum Cuts to Divide a Circle,minimum-cuts-to-divide-a-circle,False,20112,38277,2481,False,1,"Can you solve this real interview question? Minimum Cuts to Divide a Circle - A valid cut in a circle can be:

 * A cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or
 * A cut that is represented by a straight line that touches one point on the edge of the circle and its center.

Some valid and invalid cuts are shown in the figures below.

[https://assets.leetcode.com/uploads/2022/10/29/alldrawio.png]

Given the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/24/11drawio.png]


Input: n = 4
Output: 2
Explanation: 
The above figure shows how cutting the circle twice through the middle divides it into 4 equal slices.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/24/22drawio.png]


Input: n = 3
Output: 3
Explanation:
At least 3 cuts are needed to divide the circle into 3 equal slices. 
It can be shown that less than 3 cuts cannot result in 3 slices of equal size and shape.
Also note that the first cut will not divide the circle into distinct parts.


 

Constraints:

 * 1 <= n <= 100",Solutions (374),138,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cuts-to-divide-a-circle/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def numberOfCuts(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().numberOfCuts(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def numberOfCuts(self, n: int) -> int:
        if n == 1:
            return 0
        elif n == 2:
            return 1
        else:
            return n"
False,0,0,2576,,Minimum Penalty for a Shop,minimum-penalty-for-a-shop,False,12633,22697,2483,False,2,"Can you solve this real interview question? Minimum Penalty for a Shop - You are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':

 * if the ith character is 'Y', it means that customers come at the ith hour
 * whereas 'N' indicates that no customers come at the ith hour.

If the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:

 * For every hour when the shop is open and no customers come, the penalty increases by 1.
 * For every hour when the shop is closed and customers come, the penalty increases by 1.

Return the earliest hour at which the shop must be closed to incur a minimum penalty.

Note that if a shop closes at the jth hour, it means the shop is closed at the hour j.

 

Example 1:


Input: customers = ""YYNY""
Output: 2
Explanation: 
- Closing the shop at the 0th hour incurs in 1+1+0+1 = 3 penalty.
- Closing the shop at the 1st hour incurs in 0+1+0+1 = 2 penalty.
- Closing the shop at the 2nd hour incurs in 0+0+0+1 = 1 penalty.
- Closing the shop at the 3rd hour incurs in 0+0+1+1 = 2 penalty.
- Closing the shop at the 4th hour incurs in 0+0+1+0 = 1 penalty.
Closing the shop at 2nd or 4th hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.


Example 2:


Input: customers = ""NNNNN""
Output: 0
Explanation: It is best to close the shop at the 0th hour as no customers arrive.

Example 3:


Input: customers = ""YYYY""
Output: 4
Explanation: It is best to close the shop at the 4th hour as customers arrive at each hour.


 

Constraints:

 * 1 <= customers.length <= 105
 * customers consists only of characters 'Y' and 'N'.",Solutions (315),260,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-penalty-for-a-shop/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def bestClosingTime(self, customers: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    customers: str = deserialize(""str"", read_line())
    ans = Solution().bestClosingTime(customers)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def bestClosingTime(self, customers: str) -> int:
        def penalty(hours, shop_closed):
            return sum(1 for i, c in enumerate(customers) if (shop_closed and c == 'Y') or (not shop_closed and c == 'N'))

        n = len(customers)
        left, right = 0, n
        
        while left < right:
            mid = left + (right - left) // 2
            if penalty(mid, shop_closed=False) < penalty(mid, shop_closed=True):
                right = mid
            else:
                left = mid + 1
        
        return left"
False,0,0,2577,,Count Palindromic Subsequences,count-palindromic-subsequences,False,4863,14711,2484,False,3,"Can you solve this real interview question? Count Palindromic Subsequences - Given a string of digits s, return the number of palindromic subsequences of s having length 5. Since the answer may be very large, return it modulo 109 + 7.

Note:

 * A string is palindromic if it reads the same forward and backward.
 * A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

 

Example 1:


Input: s = ""103301""
Output: 2
Explanation: 
There are 6 possible subsequences of length 5: ""10330"",""10331"",""10301"",""10301"",""13301"",""03301"". 
Two of them (both equal to ""10301"") are palindromic.


Example 2:


Input: s = ""0000000""
Output: 21
Explanation: All 21 subsequences are ""00000"", which is palindromic.


Example 3:


Input: s = ""9999900000""
Output: 2
Explanation: The only two palindromic subsequences are ""99999"" and ""00000"".


 

Constraints:

 * 1 <= s.length <= 104
 * s consists of digits.",Solutions (111),285,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-palindromic-subsequences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPalindromes(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countPalindromes(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPalindromes(self, s: str) -> int:
        pass"
False,0,0,2580,,Circular Sentence,circular-sentence,False,26480,41133,2490,False,1,"Can you solve this real interview question? Circular Sentence - A sentence is a list of words that are separated by a single space with no leading or trailing spaces.

 * For example, ""Hello World"", ""HELLO"", ""hello world hello world"" are all sentences.

Words consist of only uppercase and lowercase English letters. Uppercase and lowercase English letters are considered different.

A sentence is circular if:

 * The last character of a word is equal to the first character of the next word.
 * The last character of the last word is equal to the first character of the first word.

For example, ""leetcode exercises sound delightful"", ""eetcode"", ""leetcode eats soul"" are all circular sentences. However, ""Leetcode is cool"", ""happy Leetcode"", ""Leetcode"" and ""I like Leetcode"" are not circular sentences.

Given a string sentence, return true if it is circular. Otherwise, return false.

 

Example 1:


Input: sentence = ""leetcode exercises sound delightful""
Output: true
Explanation: The words in sentence are [""leetcode"", ""exercises"", ""sound"", ""delightful""].
- leetcode's last character is equal to exercises's first character.
- exercises's last character is equal to sound's first character.
- sound's last character is equal to delightful's first character.
- delightful's last character is equal to leetcode's first character.
The sentence is circular.

Example 2:


Input: sentence = ""eetcode""
Output: true
Explanation: The words in sentence are [""eetcode""].
- eetcode's last character is equal to eetcode's first character.
The sentence is circular.

Example 3:


Input: sentence = ""Leetcode is cool""
Output: false
Explanation: The words in sentence are [""Leetcode"", ""is"", ""cool""].
- Leetcode's last character is not equal to is's first character.
The sentence is not circular.

 

Constraints:

 * 1 <= sentence.length <= 500
 * sentence consist of only lowercase and uppercase English letters and spaces.
 * The words in sentence are separated by a single space.
 * There are no leading or trailing spaces.",Solutions (532),237,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/circular-sentence/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isCircularSentence(self, sentence: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    sentence: str = deserialize(""str"", read_line())
    ans = Solution().isCircularSentence(sentence)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isCircularSentence(self, sentence: str) -> bool:
        words = sentence.split()
        circular = False
        for i in range(len(words)):
            if words[i][-1].lower() == words[(i+1)%len(words)][0].lower():
                circular = True
            else:
                circular = False
                break
        return circular"
False,0,0,2581,,Divide Players Into Teams of Equal Skill,divide-players-into-teams-of-equal-skill,False,22812,38722,2491,False,2,"Can you solve this real interview question? Divide Players Into Teams of Equal Skill - You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.

The chemistry of a team is equal to the product of the skills of the players on that team.

Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.

 

Example 1:


Input: skill = [3,2,5,1,3,4]
Output: 22
Explanation: 
Divide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.
The sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.


Example 2:


Input: skill = [3,4]
Output: 12
Explanation: 
The two players form a team with a total skill of 7.
The chemistry of the team is 3 * 4 = 12.


Example 3:


Input: skill = [1,1,2,3]
Output: -1
Explanation: 
There is no way to divide the players into teams such that the total skill of each team is equal.


 

Constraints:

 * 2 <= skill.length <= 105
 * skill.length is even.
 * 1 <= skill[i] <= 1000",Solutions (486),310,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-players-into-teams-of-equal-skill/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def dividePlayers(self, skill: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    skill: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().dividePlayers(skill)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def dividePlayers(self, skill: List[int]) -> int:
        import itertools
        total_sum = sum(skill)
        if total_sum % len(skill) != 0:
            return -1
        target_sum = total_sum // (len(skill) // 2)
        teams = itertools.combinations(skill, len(skill) // 2)
        chemistry_sum = 0
        for team in teams:
            if sum(team) == target_sum:
                chemistry_sum += team[0] * team[1]
        return chemistry_sum"
False,0,0,2582,minimum-score-of-a-path-between-two-cities,Minimum Score of a Path Between Two Cities,minimum-score-of-a-path-between-two-cities,False,61432,105235,2492,False,2,"Can you solve this real interview question? Minimum Score of a Path Between Two Cities - You are given a positive integer n representing n cities numbered from 1 to n. You are also given a 2D array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. The cities graph is not necessarily connected.

The score of a path between two cities is defined as the minimum distance of a road in this path.

Return the minimum possible score of a path between cities 1 and n.

Note:

 * A path is a sequence of roads between two cities.
 * It is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path.
 * The test cases are generated such that there is at least one path between 1 and n.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/12/graph11.png]


Input: n = 4, roads = [[1,2,9],[2,3,6],[2,4,5],[1,4,7]]
Output: 5
Explanation: The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 4. The score of this path is min(9,5) = 5.
It can be shown that no other path has less score.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/12/graph22.png]


Input: n = 4, roads = [[1,2,2],[1,3,4],[3,4,7]]
Output: 2
Explanation: The path from city 1 to 4 with the minimum score is: 1 -> 2 -> 1 -> 3 -> 4. The score of this path is min(2,2,4,7) = 2.


 

Constraints:

 * 2 <= n <= 105
 * 1 <= roads.length <= 105
 * roads[i].length == 3
 * 1 <= ai, bi <= n
 * ai != bi
 * 1 <= distancei <= 104
 * There are no repeated edges.
 * There is at least one path between 1 and n.",Solutions (969),1.5K,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-score-of-a-path-between-two-cities/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    roads: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minScore(n, roads)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minScore(self, n: int, roads: List[List[int]]) -> int:
        import heapq
        
        graph = {}
        for road in roads:
            a, b, dist = road
            if a not in graph:
                graph[a] = []
            graph[a].append((b, dist))
            if b not in graph:
                graph[b] = []
            graph[b].append((a, dist))
        
        min_score = [float('inf')] * (n + 1)
        min_score[1] = 0
        
        heap = [(0, 1)]
        while heap:
            cur_dist, cur_city = heapq.heappop(heap)
            if cur_dist > min_score[cur_city]:
                continue
            for next_city, next_dist in graph.get(cur_city, []):
                score = max(cur_dist, next_dist)
                if score < min_score[next_city]:
                    min_score[next_city] = score
                    heapq.heappush(heap, (score, next_city))
        
        return min_score[n]"
False,0,0,2583,,Divide Nodes Into the Maximum Number of Groups,divide-nodes-into-the-maximum-number-of-groups,False,4919,13265,2493,False,3,"Can you solve this real interview question? Divide Nodes Into the Maximum Number of Groups - You are given a positive integer n representing the number of nodes in an undirected graph. The nodes are labeled from 1 to n.

You are also given a 2D integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. Notice that the given graph may be disconnected.

Divide the nodes of the graph into m groups (1-indexed) such that:

 * Each node in the graph belongs to exactly one group.
 * For every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.

Return the maximum number of groups (i.e., maximum m) into which you can divide the nodes. Return -1 if it is impossible to group the nodes with the given conditions.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/13/example1.png]


Input: n = 6, edges = [[1,2],[1,4],[1,5],[2,6],[2,3],[4,6]]
Output: 4
Explanation: As shown in the image we:
- Add node 5 to the first group.
- Add node 1 to the second group.
- Add nodes 2 and 4 to the third group.
- Add nodes 3 and 6 to the fourth group.
We can see that every edge is satisfied.
It can be shown that that if we create a fifth group and move any node from the third or fourth group to it, at least on of the edges will not be satisfied.


Example 2:


Input: n = 3, edges = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: If we add node 1 to the first group, node 2 to the second group, and node 3 to the third group to satisfy the first two edges, we can see that the third edge will not be satisfied.
It can be shown that no grouping is possible.


 

Constraints:

 * 1 <= n <= 500
 * 1 <= edges.length <= 104
 * edges[i].length == 2
 * 1 <= ai, bi <= n
 * ai != bi
 * There is at most one edge between any pair of vertices.",Solutions (96),271,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/divide-nodes-into-the-maximum-number-of-groups/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().magnificentSets(n, edges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def magnificentSets(self, n: int, edges: List[List[int]]) -> int:
        # Write your code here
        pass"
False,0,0,2585,,Delete Greatest Value in Each Row,delete-greatest-value-in-each-row,False,28998,35795,2500,False,1,"Can you solve this real interview question? Delete Greatest Value in Each Row - You are given an m x n matrix grid consisting of positive integers.

Perform the following operation until grid becomes empty:

 * Delete the element with the greatest value from each row. If multiple such elements exist, delete any of them.
 * Add the maximum of deleted elements to the answer.

Note that the number of columns decreases by one after each operation.

Return the answer after performing the operations described above.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/19/q1ex1.jpg]


Input: grid = [[1,2,4],[3,3,1]]
Output: 8
Explanation: The diagram above shows the removed values in each step.
- In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer.
- In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer.
- In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.
The final answer = 4 + 3 + 1 = 8.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/19/q1ex2.jpg]


Input: grid = [[10]]
Output: 10
Explanation: The diagram above shows the removed values in each step.
- In the first operation, we remove 10 from the first row. We add 10 to the answer.
The final answer = 10.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 50
 * 1 <= grid[i][j] <= 100",Solutions (564),347,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/delete-greatest-value-in-each-row/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def deleteGreatestValue(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().deleteGreatestValue(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def deleteGreatestValue(self, grid: List[List[int]]) -> int:
        result = 0
        while grid:
            max_vals = [max(row) for row in grid]
            max_val = max(max_vals)
            result += max_val
            for i in range(len(grid)):
                if max_val in grid[i]:
                    grid[i].remove(max_val)
            grid = [row for row in grid if row]
        return result"
False,0,0,2586,,Longest Square Streak in an Array,longest-square-streak-in-an-array,False,19135,48408,2501,False,2,"Can you solve this real interview question? Longest Square Streak in an Array - You are given an integer array nums. A subsequence of nums is called a square streak if:

 * The length of the subsequence is at least 2, and
 * after sorting the subsequence, each element (except the first element) is the square of the previous number.

Return the length of the longest square streak in nums, or return -1 if there is no square streak.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:


Input: nums = [4,3,6,16,8,2]
Output: 3
Explanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].
- 4 = 2 * 2.
- 16 = 4 * 4.
Therefore, [4,16,2] is a square streak.
It can be shown that every subsequence of length 4 is not a square streak.


Example 2:


Input: nums = [2,3,5,6,7]
Output: -1
Explanation: There is no square streak in nums so return -1.


 

Constraints:

 * 2 <= nums.length <= 105
 * 2 <= nums[i] <= 105",Solutions (444),351,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/longest-square-streak-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def longestSquareStreak(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().longestSquareStreak(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def longestSquareStreak(self, nums: List[int]) -> int:
        # write your code here
        pass"
False,0,0,2588,,Maximum Number of Points From Grid Queries,maximum-number-of-points-from-grid-queries,False,6205,16763,2503,False,3,"Can you solve this real interview question? Maximum Number of Points From Grid Queries - You are given an m x n integer matrix grid and an array queries of size k.

Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:

 * If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.
 * Otherwise, you do not get any points, and you end this process.

After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.

Return the resulting array answer.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/19/yetgriddrawio.png]


Input: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]
Output: [5,8,1]
Explanation: The diagrams above show which cells we visit to get points for each query.

Example 2:

[https://assets.leetcode.com/uploads/2022/10/20/yetgriddrawio-2.png]


Input: grid = [[5,2,1],[1,1,2]], queries = [3]
Output: [0]
Explanation: We can not get any points because the value of the top left cell is already greater than or equal to 3.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 1000
 * 4 <= m * n <= 105
 * k == queries.length
 * 1 <= k <= 104
 * 1 <= grid[i][j], queries[i] <= 106",Solutions (182),360,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-points-from-grid-queries/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    queries: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxPoints(grid, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def maxPoints(self, grid: List[List[int]], queries: List[int]) -> List[int]:
        pass"
False,0,0,2589,,Maximum Value of a String in an Array,maximum-value-of-a-string-in-an-array,False,23314,32341,2496,False,1,"Can you solve this real interview question? Maximum Value of a String in an Array - The value of an alphanumeric string can be defined as:

 * The numeric representation of the string in base 10, if it comprises of digits only.
 * The length of the string, otherwise.

Given an array strs of alphanumeric strings, return the maximum value of any string in strs.

 

Example 1:


Input: strs = [""alic3"",""bob"",""3"",""4"",""00000""]
Output: 5
Explanation: 
- ""alic3"" consists of both letters and digits, so its value is its length, i.e. 5.
- ""bob"" consists only of letters, so its value is also its length, i.e. 3.
- ""3"" consists only of digits, so its value is its numeric equivalent, i.e. 3.
- ""4"" also consists only of digits, so its value is 4.
- ""00000"" consists only of digits, so its value is 0.
Hence, the maximum value is 5, of ""alic3"".


Example 2:


Input: strs = [""1"",""01"",""001"",""0001""]
Output: 1
Explanation: 
Each string in the array has value 1. Hence, we return 1.


 

Constraints:

 * 1 <= strs.length <= 100
 * 1 <= strs[i].length <= 9
 * strs[i] consists of only lowercase English letters and digits.",Solutions (574),252,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-value-of-a-string-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumValue(self, strs: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    strs: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().maximumValue(strs)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumValue(self, strs: List[str]) -> int:
        return max(len(s) if not s.isdigit() else int(s) for s in strs)"
False,0,0,2590,,Maximum Star Sum of a Graph,maximum-star-sum-of-a-graph,False,11727,30499,2497,False,2,"Can you solve this real interview question? Maximum Star Sum of a Graph - There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.

You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.

The image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.

[https://assets.leetcode.com/uploads/2022/11/07/max-star-sum-descdrawio.png]

The star sum is the sum of the values of all the nodes present in the star graph.

Given an integer k, return the maximum star sum of a star graph containing at most k edges.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/07/max-star-sum-example1drawio.png]


Input: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2
Output: 16
Explanation: The above diagram represents the input graph.
The star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.
It can be shown it is not possible to get a star graph with a sum greater than 16.


Example 2:


Input: vals = [-5], edges = [], k = 0
Output: -5
Explanation: There is only one possible star graph, which is node 0 itself.
Hence, we return -5.


 

Constraints:

 * n == vals.length
 * 1 <= n <= 105
 * -104 <= vals[i] <= 104
 * 0 <= edges.length <= min(n * (n - 1) / 2, 105)
 * edges[i].length == 2
 * 0 <= ai, bi <= n - 1
 * ai != bi
 * 0 <= k <= n - 1",Solutions (234),236,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-star-sum-of-a-graph/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    vals: List[int] = deserialize(""List[int]"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxStarSum(vals, edges, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxStarSum(self, vals: List[int], edges: List[List[int]], k: int) -> int:
        import collections
        graph = collections.defaultdict(list)
        for u, v in edges:
            graph[u].append(v)
            graph[v].append(u)
        
        ans = 0
        for node in range(len(vals)):
            sum_val = vals[node]
            neighbors = 0
            for neighbor in graph[node]:
                sum_val += vals[neighbor]
                neighbors += 1
            if neighbors <= 1:
                continue
            ans = max(ans, sum_val)
        
        return ans
"
False,0,0,2591,,Frog Jump II,frog-jump-ii,False,11087,18114,2498,False,2,"Can you solve this real interview question? Frog Jump II - You are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.

A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.

The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.

 * More formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|.

The cost of a path is the maximum length of a jump among all jumps in the path.

Return the minimum cost of a path for the frog.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/14/example-1.png]


Input: stones = [0,2,5,6,7]
Output: 5
Explanation: The above figure represents one of the optimal paths the frog can take.
The cost of this path is 5, which is the maximum length of a jump.
Since it is not possible to achieve a cost of less than 5, we return it.


Example 2:

[https://assets.leetcode.com/uploads/2022/11/14/example-2.png]


Input: stones = [0,3,9]
Output: 9
Explanation: 
The frog can jump directly to the last stone and come back to the first stone. 
In this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.
It can be shown that this is the minimum achievable cost.


 

Constraints:

 * 2 <= stones.length <= 105
 * 0 <= stones[i] <= 109
 * stones[0] == 0
 * stones is sorted in a strictly increasing order.",Solutions (199),352,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/frog-jump-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxJump(self, stones: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stones: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxJump(stones)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxJump(self, stones: List[int]) -> int:
        n = len(stones)
        dp = [0] * n
        dp[1] = stones[1]
        for i in range(2, n):
            for j in range(1, i):
                dp[i] = max(dp[i], min(dp[j] + abs(stones[i] - stones[j]), stones[i] - stones[j]))
        return dp[n - 1]"
False,0,0,2592,,Minimum Total Cost to Make Arrays Unequal,minimum-total-cost-to-make-arrays-unequal,False,2703,6130,2499,False,3,"Can you solve this real interview question? Minimum Total Cost to Make Arrays Unequal - You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.

In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.

Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.

Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.

 

Example 1:


Input: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]
Output: 10
Explanation: 
One of the ways we can perform the operations is:
- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]
- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].
- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].
We can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.
Note that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.


Example 2:


Input: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]
Output: 10
Explanation: 
One of the ways we can perform the operations is:
- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].
- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].
The total cost needed here is 10, which is the minimum possible.


Example 3:


Input: nums1 = [1,2,2], nums2 = [1,2,2]
Output: -1
Explanation: 
It can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.
Hence, we return -1.


 

Constraints:

 * n == nums1.length == nums2.length
 * 1 <= n <= 105
 * 1 <= nums1[i], nums2[i] <= n",Solutions (41),169,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimumTotalCost(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minimumTotalCost(self, nums1: List[int], nums2: List[int]) -> int:
        cost = 0
        for i in range(len(nums1)):
            if nums1[i] == nums2[i]:
                cost += min(nums1.count(nums1[i]), nums2.count(nums1[i])) - 1
        if cost % 2 != 0:
            cost += 1
        return cost if cost != 0 else -1"
False,0,0,2594,,Count Pairs Of Similar Strings,count-pairs-of-similar-strings,False,25221,35779,2506,False,1,"Can you solve this real interview question? Count Pairs Of Similar Strings - You are given a 0-indexed string array words.

Two strings are similar if they consist of the same characters.

 * For example, ""abca"" and ""cba"" are similar since both consist of characters 'a', 'b', and 'c'.
 * However, ""abacba"" and ""bcfd"" are not similar since they do not consist of the same characters.

Return the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.

 

Example 1:


Input: words = [""aba"",""aabb"",""abcd"",""bac"",""aabc""]
Output: 2
Explanation: There are 2 pairs that satisfy the conditions:
- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. 
- i = 3 and j = 4 : both words[3] and words[4] only consist of characters 'a', 'b', and 'c'. 


Example 2:


Input: words = [""aabb"",""ab"",""ba""]
Output: 3
Explanation: There are 3 pairs that satisfy the conditions:
- i = 0 and j = 1 : both words[0] and words[1] only consist of characters 'a' and 'b'. 
- i = 0 and j = 2 : both words[0] and words[2] only consist of characters 'a' and 'b'.
- i = 1 and j = 2 : both words[1] and words[2] only consist of characters 'a' and 'b'.


Example 3:


Input: words = [""nba"",""cba"",""dba""]
Output: 0
Explanation: Since there does not exist any pair that satisfies the conditions, we return 0.

 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 100
 * words[i] consist of only lowercase English letters.",Solutions (540),310,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-pairs-of-similar-strings/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def similarPairs(self, words: List[str]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    ans = Solution().similarPairs(words)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def similarPairs(self, words: List[str]) -> int:
        pair_count = 0
        for i in range(len(words)):
            for j in range(i + 1, len(words)):
                if set(words[i]) == set(words[j]):
                    pair_count += 1
        return pair_count"
False,0,0,2595,,Smallest Value After Replacing With Sum of Prime Factors,smallest-value-after-replacing-with-sum-of-prime-factors,False,15994,32827,2507,False,2,"Can you solve this real interview question? Smallest Value After Replacing With Sum of Prime Factors - You are given a positive integer n.

Continuously replace n with the sum of its prime factors.

 * Note that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n.

Return the smallest value n will take on.

 

Example 1:


Input: n = 15
Output: 5
Explanation: Initially, n = 15.
15 = 3 * 5, so replace n with 3 + 5 = 8.
8 = 2 * 2 * 2, so replace n with 2 + 2 + 2 = 6.
6 = 2 * 3, so replace n with 2 + 3 = 5.
5 is the smallest value n will take on.


Example 2:


Input: n = 3
Output: 3
Explanation: Initially, n = 3.
3 is the smallest value n will take on.


 

Constraints:

 * 2 <= n <= 105",Solutions (277),274,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-value-after-replacing-with-sum-of-prime-factors/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def smallestValue(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().smallestValue(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def smallestValue(self, n: int) -> int:
        def prime_factors(num):
            i = 2
            factors = []
            while i * i <= num:
                if num % i:
                    i += 1
                else:
                    num //= i
                    factors.append(i)
            if num > 1:
                factors.append(num)
            return factors

        while len(prime_factors(n)) > 1:
            n = sum(prime_factors(n))
        return n"
False,0,0,2596,,Add Edges to Make Degrees of All Nodes Even,add-edges-to-make-degrees-of-all-nodes-even,False,8970,27736,2508,False,3,"Can you solve this real interview question? Add Edges to Make Degrees of All Nodes Even - There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.

You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.

Return true if it is possible to make the degree of each node in the graph even, otherwise return false.

The degree of a node is the number of edges connected to it.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/26/agraphdrawio.png]


Input: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]
Output: true
Explanation: The above diagram shows a valid way of adding an edge.
Every node in the resulting graph is connected to an even number of edges.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/26/aagraphdrawio.png]


Input: n = 4, edges = [[1,2],[3,4]]
Output: true
Explanation: The above diagram shows a valid way of adding two edges.

Example 3:

[https://assets.leetcode.com/uploads/2022/10/26/aaagraphdrawio.png]


Input: n = 4, edges = [[1,2],[1,3],[1,4]]
Output: false
Explanation: It is not possible to obtain a valid graph with adding at most 2 edges.

 

Constraints:

 * 3 <= n <= 105
 * 2 <= edges.length <= 105
 * edges[i].length == 2
 * 1 <= ai, bi <= n
 * ai != bi
 * There are no repeated edges.",Solutions (155),261,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/add-edges-to-make-degrees-of-all-nodes-even/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPossible(self, n: int, edges: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isPossible(n, edges)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPossible(self, n: int, edges: List[List[int]]) -> bool:
        def isEvenDegree(node_count, edge_count):
            deg = [0] * (node_count + 1)
            for edge in edges:
                deg[edge[0]] += 1
                deg[edge[1]] += 1
            
            result = 0
            for i in range(1, node_count + 1):
                if deg[i] % 2 != 0:
                    result += 1
            
            return result == 0 or result == 2
        
        return isEvenDegree(n, len(edges))"
False,0,0,2597,,Cycle Length Queries in a Tree,cycle-length-queries-in-a-tree,False,8360,14678,2509,False,3,"Can you solve this real interview question? Cycle Length Queries in a Tree - You are given an integer n. There is a complete binary tree with 2n - 1 nodes. The root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:

 * The left node has the value 2 * val, and
 * The right node has the value 2 * val + 1.

You are also given a 2D integer array queries of length m, where queries[i] = [ai, bi]. For each query, solve the following problem:

 1. Add an edge between the nodes with values ai and bi.
 2. Find the length of the cycle in the graph.
 3. Remove the added edge between nodes with values ai and bi.

Note that:

 * A cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.
 * The length of a cycle is the number of edges visited in the cycle.
 * There could be multiple edges between two nodes in the tree after adding the edge of the query.

Return an array answer of length m where answer[i] is the answer to the ith query.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/10/25/bexample1.png]


Input: n = 3, queries = [[5,3],[4,7],[2,3]]
Output: [4,5,3]
Explanation: The diagrams above show the tree of 23 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.
- After adding the edge between nodes 3 and 5, the graph contains a cycle of nodes [5,2,1,3]. Thus answer to the first query is 4. We delete the added edge and process the next query.
- After adding the edge between nodes 4 and 7, the graph contains a cycle of nodes [4,2,1,3,7]. Thus answer to the second query is 5. We delete the added edge and process the next query.
- After adding the edge between nodes 2 and 3, the graph contains a cycle of nodes [2,1,3]. Thus answer to the third query is 3. We delete the added edge.


Example 2:

[https://assets.leetcode.com/uploads/2022/10/25/aexample2.png]


Input: n = 2, queries = [[1,2]]
Output: [2]
Explanation: The diagram above shows the tree of 22 - 1 nodes. Nodes colored in red describe the nodes in the cycle after adding the edge.
- After adding the edge between nodes 1 and 2, the graph contains a cycle of nodes [2,1]. Thus answer for the first query is 2. We delete the added edge.


 

Constraints:

 * 2 <= n <= 30
 * m == queries.length
 * 1 <= m <= 105
 * queries[i].length == 2
 * 1 <= ai, bi <= 2n - 1
 * ai != bi",Solutions (218),237,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/cycle-length-queries-in-a-tree/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().cycleLengthQueries(n, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def cycleLengthQueries(self, n: int, queries: List[List[int]]) -> List[int]:
        # Your code here
        pass"
False,0,0,2598,,Shortest Distance to Target String in a Circular Array,shortest-distance-to-target-string-in-a-circular-array,False,19858,40684,2515,False,1,"Can you solve this real interview question? Shortest Distance to Target String in a Circular Array - You are given a 0-indexed circular string array words and a string target. A circular array means that the array's end connects to the array's beginning.

 * Formally, the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words.

Starting from startIndex, you can move to either the next word or the previous word with 1 step at a time.

Return the shortest distance needed to reach the string target. If the string target does not exist in words, return -1.

 

Example 1:


Input: words = [""hello"",""i"",""am"",""leetcode"",""hello""], target = ""hello"", startIndex = 1
Output: 1
Explanation: We start from index 1 and can reach ""hello"" by
- moving 3 units to the right to reach index 4.
- moving 2 units to the left to reach index 4.
- moving 4 units to the right to reach index 0.
- moving 1 unit to the left to reach index 0.
The shortest distance to reach ""hello"" is 1.


Example 2:


Input: words = [""a"",""b"",""leetcode""], target = ""leetcode"", startIndex = 0
Output: 1
Explanation: We start from index 0 and can reach ""leetcode"" by
- moving 2 units to the right to reach index 3.
- moving 1 unit to the left to reach index 3.
The shortest distance to reach ""leetcode"" is 1.

Example 3:


Input: words = [""i"",""eat"",""leetcode""], target = ""ate"", startIndex = 0
Output: -1
Explanation: Since ""ate"" does not exist in words, we return -1.


 

Constraints:

 * 1 <= words.length <= 100
 * 1 <= words[i].length <= 100
 * words[i] and target consist of only lowercase English letters.
 * 0 <= startIndex < words.length",Solutions (363),251,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/shortest-distance-to-target-string-in-a-circular-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    target: str = deserialize(""str"", read_line())
    startIndex: int = deserialize(""int"", read_line())
    ans = Solution().closetTarget(words, target, startIndex)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def closetTarget(self, words: List[str], target: str, startIndex: int) -> int:
        def get_distance(word1, word2, n):
            return min(abs(words.index(word1) - words.index(word2)), n - abs(words.index(word1) - words.index(word2))
        
        n = len(words)
        if target not in words:
            return -1
        
        min_distance = float('inf')
        for i in range(n):
            if words[i] == target:
                min_distance = min(min_distance, get_distance(words[startIndex], target, n))
        
        return min_distance"
False,0,0,2599,,Take K of Each Character From Left and Right,take-k-of-each-character-from-left-and-right,False,10545,31036,2516,False,2,"Can you solve this real interview question? Take K of Each Character From Left and Right - You are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. Each minute, you may take either the leftmost character of s, or the rightmost character of s.

Return the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.

 

Example 1:


Input: s = ""aabaaaacaabc"", k = 2
Output: 8
Explanation: 
Take three characters from the left of s. You now have two 'a' characters, and one 'b' character.
Take five characters from the right of s. You now have four 'a' characters, two 'b' characters, and two 'c' characters.
A total of 3 + 5 = 8 minutes is needed.
It can be proven that 8 is the minimum number of minutes needed.


Example 2:


Input: s = ""a"", k = 1
Output: -1
Explanation: It is not possible to take one 'b' or 'c' so return -1.


 

Constraints:

 * 1 <= s.length <= 105
 * s consists of only the letters 'a', 'b', and 'c'.
 * 0 <= k <= s.length",Solutions (216),521,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/take-k-of-each-character-from-left-and-right/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def takeCharacters(self, s: str, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().takeCharacters(s, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def takeCharacters(self, s: str, k: int) -> int:
        if s.count('a') < k or s.count('b') < k or s.count('c') < k:
            return -1
        diff_a = s.count('a') - k
        diff_b = s.count('b') - k
        diff_c = s.count('c') - k
        moves = 0
        i, j = 0, len(s) - 1
        while i < j:
            if diff_a <= 0 and diff_b <= 0 and diff_c <= 0:
                break
            if s[i] == 'a':
                diff_a -= 1
            elif s[i] == 'b':
                diff_b -= 1
            else:
                diff_c -= 1
            if s[j] == 'a':
                diff_a -= 1
            elif s[j] == 'b':
                diff_b -= 1
            else:
                diff_c -= 1
            moves += 1
            i += 1
            j -= 1
        return moves"
False,0,0,2600,,Maximum Tastiness of Candy Basket,maximum-tastiness-of-candy-basket,False,10205,15773,2517,False,2,"Can you solve this real interview question? Maximum Tastiness of Candy Basket - You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.

The store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.

Return the maximum tastiness of a candy basket.

 

Example 1:


Input: price = [13,5,1,8,21,2], k = 3
Output: 8
Explanation: Choose the candies with the prices [13,5,21].
The tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.
It can be proven that 8 is the maximum tastiness that can be achieved.


Example 2:


Input: price = [1,3,1], k = 2
Output: 2
Explanation: Choose the candies with the prices [1,3].
The tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.
It can be proven that 2 is the maximum tastiness that can be achieved.


Example 3:


Input: price = [7,7,7,7], k = 2
Output: 0
Explanation: Choosing any two distinct candies from the candies we have will result in a tastiness of 0.


 

Constraints:

 * 2 <= k <= price.length <= 105
 * 1 <= price[i] <= 109",Solutions (156),533,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-tastiness-of-candy-basket/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumTastiness(self, price: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    price: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximumTastiness(price, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumTastiness(self, price: List[int], k: int) -> int:
        price.sort()
        min_diff = float(""inf"")
        for i in range(len(price) - k + 1):
            min_diff = min(min_diff, price[i + k - 1] - price[i])
        return min_diff"
False,0,0,2601,,Number of Great Partitions,number-of-great-partitions,False,5162,15664,2518,False,3,"Can you solve this real interview question? Number of Great Partitions - You are given an array nums consisting of positive integers and an integer k.

Partition the array into two ordered groups such that each element is in exactly one group. A partition is called great if the sum of elements of each group is greater than or equal to k.

Return the number of distinct great partitions. Since the answer may be too large, return it modulo 109 + 7.

Two partitions are considered distinct if some element nums[i] is in different groups in the two partitions.

 

Example 1:


Input: nums = [1,2,3,4], k = 4
Output: 6
Explanation: The great partitions are: ([1,2,3], [4]), ([1,3], [2,4]), ([1,4], [2,3]), ([2,3], [1,4]), ([2,4], [1,3]) and ([4], [1,2,3]).


Example 2:


Input: nums = [3,3,3], k = 4
Output: 0
Explanation: There are no great partitions for this array.


Example 3:


Input: nums = [6,6], k = 2
Output: 2
Explanation: We can either put nums[0] in the first partition or in the second partition.
The great partitions will be ([6], [6]) and ([6], [6]).


 

Constraints:

 * 1 <= nums.length, k <= 1000
 * 1 <= nums[i] <= 109",Solutions (73),289,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-great-partitions/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countPartitions(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countPartitions(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countPartitions(self, nums: List[int], k: int) -> int:
        mod = 10**9 + 7
        n = len(nums)
        dp = [[[0]*(k+1) for _ in range(k+1)] for _ in range(n+1)]
        
        for i in range(n+1):
            for x in range(k+1):
                for y in range(k+1):
                    if i == 0:
                        if x <= y:
                            dp[i][x][y] = 1
                    else:
                        if nums[i-1] >= x:
                            dp[i][x][y] = (dp[i-1][nums[i-1]][y] + dp[i-1][x][y]) % mod
                        else:
                            dp[i][x][y] = dp[i-1][x][y]
        
        total = 0
        for x in range(1, k+1):
            for y in range(x, k+1):
                total = (total + dp[n][x][y]) % mod
        
        return total"
False,0,0,2602,,Maximum Enemy Forts That Can Be Captured,maximum-enemy-forts-that-can-be-captured,False,15192,40611,2511,False,1,"Can you solve this real interview question? Maximum Enemy Forts That Can Be Captured - You are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where:

 * -1 represents there is no fort at the ith position.
 * 0 indicates there is an enemy fort at the ith position.
 * 1 indicates the fort at the ith the position is under your command.

Now you have decided to move your army from one of your forts at position i to an empty position j such that:

 * 0 <= i, j <= n - 1
 * The army travels over enemy forts only. Formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0.

While moving the army, all the enemy forts that come in the way are captured.

Return the maximum number of enemy forts that can be captured. In case it is impossible to move your army, or you do not have any fort under your command, return 0.

 

Example 1:


Input: forts = [1,0,0,-1,0,0,0,0,1]
Output: 4
Explanation:
- Moving the army from position 0 to position 3 captures 2 enemy forts, at 1 and 2.
- Moving the army from position 8 to position 3 captures 4 enemy forts.
Since 4 is the maximum number of enemy forts that can be captured, we return 4.


Example 2:


Input: forts = [0,0,1,-1]
Output: 0
Explanation: Since no enemy fort can be captured, 0 is returned.


 

Constraints:

 * 1 <= forts.length <= 1000
 * -1 <= forts[i] <= 1",Solutions (301),173,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-enemy-forts-that-can-be-captured/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def captureForts(self, forts: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    forts: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().captureForts(forts)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def captureForts(self, forts: List[int]) -> int:
        count = 0
        max_count = 0
        
        for i in range(len(forts)):
            if forts[i] == 1:
                count = 0
                for j in range(i+1, len(forts)):
                    if forts[j] == 0:
                        count += 1
                    elif forts[j] == -1:
                        break
                    max_count = max(max_count, count)
        
        return max_count"
False,0,0,2603,,Reward Top K Students,reward-top-k-students,False,12414,26728,2512,False,2,"Can you solve this real interview question? Reward Top K Students - You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.

Initially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.

You are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.

Given an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.

 

Example 1:


Input: positive_feedback = [""smart"",""brilliant"",""studious""], negative_feedback = [""not""], report = [""this student is studious"",""the student is smart""], student_id = [1,2], k = 2
Output: [1,2]
Explanation: 
Both the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.


Example 2:


Input: positive_feedback = [""smart"",""brilliant"",""studious""], negative_feedback = [""not""], report = [""this student is not studious"",""the student is smart""], student_id = [1,2], k = 2
Output: [2,1]
Explanation: 
- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. 
- The student with ID 2 has 1 positive feedback, so he has 3 points. 
Since student 2 has more points, [2,1] is returned.


 

Constraints:

 * 1 <= positive_feedback.length, negative_feedback.length <= 104
 * 1 <= positive_feedback[i].length, negative_feedback[j].length <= 100
 * Both positive_feedback[i] and negative_feedback[j] consists of lowercase English letters.
 * No word is present in both positive_feedback and negative_feedback.
 * n == report.length == student_id.length
 * 1 <= n <= 104
 * report[i] consists of lowercase English letters and spaces ' '.
 * There is a single space between consecutive words of report[i].
 * 1 <= report[i].length <= 100
 * 1 <= student_id[i] <= 109
 * All the values of student_id[i] are unique.
 * 1 <= k <= n",Solutions (279),202,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/reward-top-k-students/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def topStudents(self, positive_feedback: List[str], negative_feedback: List[str], report: List[str], student_id: List[int], k: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    positive_feedback: List[str] = deserialize(""List[str]"", read_line())
    negative_feedback: List[str] = deserialize(""List[str]"", read_line())
    report: List[str] = deserialize(""List[str]"", read_line())
    student_id: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().topStudents(positive_feedback, negative_feedback, report, student_id, k)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def topStudents(self, positive_feedback: List[str], negative_feedback: List[str], report: List[str], student_id: List[int], k: int) -> List[int]:
        feedback_dict = {}
        for i in range(len(student_id)):
            points = 0
            feedback = report[i].split()
            for word in feedback:
                if word in positive_feedback:
                    points += 3
                elif word in negative_feedback:
                    points -= 1
            if student_id[i] not in feedback_dict:
                feedback_dict[student_id[i]] = points
            else:
                feedback_dict[student_id[i]] += points
        
        sorted_students = sorted(feedback_dict.items(), key=lambda x: (x[1], -x[0]), reverse=True)
        
        top_k_students = [student[0] for student in sorted_students[:k]]
        
        return top_k_students"
False,0,0,2604,,Minimum Operations to Make Array Equal II,minimum-operations-to-make-array-equal-ii,False,16750,54276,2541,False,2,"Can you solve this real interview question? Minimum Operations to Make Array Equal II - You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:

 * Choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. In other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k.

nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].

Return the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.

 

Example 1:


Input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3
Output: 2
Explanation: In 2 operations, we can transform nums1 to nums2.
1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].
2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].
One can prove that it is impossible to make arrays equal in fewer operations.

Example 2:


Input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1
Output: -1
Explanation: It can be proved that it is impossible to make the two arrays equal.


 

Constraints:

 * n == nums1.length == nums2.length
 * 2 <= n <= 105
 * 0 <= nums1[i], nums2[j] <= 109
 * 0 <= k <= 105",Solutions (275),294,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-make-array-equal-ii/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minOperations(nums1, nums2, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minOperations(self, nums1: List[int], nums2: List[int], k: int) -> int:
        pass  # Your code here."
False,0,0,2605,,Count Anagrams,count-anagrams,False,5626,16449,2514,False,3,"Can you solve this real interview question? Count Anagrams - You are given a string s containing one or more words. Every consecutive pair of words is separated by a single space ' '.

A string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.

 * For example, ""acb dfe"" is an anagram of ""abc def"", but ""def cab"" and ""adc bef"" are not.

Return the number of distinct anagrams of s. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: s = ""too hot""
Output: 18
Explanation: Some of the anagrams of the given string are ""too hot"", ""oot hot"", ""oto toh"", ""too toh"", and ""too oht"".


Example 2:


Input: s = ""aa""
Output: 1
Explanation: There is only one anagram possible for the given string.

 

Constraints:

 * 1 <= s.length <= 105
 * s consists of lowercase English letters and spaces ' '.
 * There is single space between consecutive words.",Solutions (111),228,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-anagrams/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countAnagrams(self, s: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    ans = Solution().countAnagrams(s)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countAnagrams(self, s: str) -> int:
        return 0  # Placeholder for the actual implementation"
False,0,0,2606,,Difference Between Ones and Zeros in Row and Column,difference-between-ones-and-zeros-in-row-and-column,False,16794,21055,2482,False,2,"Can you solve this real interview question? Difference Between Ones and Zeros in Row and Column - You are given a 0-indexed m x n binary matrix grid.

A 0-indexed m x n difference matrix diff is created with the following procedure:

 * Let the number of ones in the ith row be onesRowi.
 * Let the number of ones in the jth column be onesColj.
 * Let the number of zeros in the ith row be zerosRowi.
 * Let the number of zeros in the jth column be zerosColj.
 * diff[i][j] = onesRowi + onesColj - zerosRowi - zerosColj

Return the difference matrix diff.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/06/image-20221106171729-5.png]


Input: grid = [[0,1,1],[1,0,1],[0,0,1]]
Output: [[0,0,4],[0,0,4],[-2,-2,2]]
Explanation:
- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 2 + 1 - 1 - 2 = 0 
- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 2 + 1 - 1 - 2 = 0 
- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 2 + 3 - 1 - 0 = 4 
- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 2 + 1 - 1 - 2 = 0 
- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 2 + 1 - 1 - 2 = 0 
- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 2 + 3 - 1 - 0 = 4 
- diff[2][0] = onesRow2 + onesCol0 - zerosRow2 - zerosCol0 = 1 + 1 - 2 - 2 = -2
- diff[2][1] = onesRow2 + onesCol1 - zerosRow2 - zerosCol1 = 1 + 1 - 2 - 2 = -2
- diff[2][2] = onesRow2 + onesCol2 - zerosRow2 - zerosCol2 = 1 + 3 - 2 - 0 = 2


Example 2:

[https://assets.leetcode.com/uploads/2022/11/06/image-20221106171747-6.png]


Input: grid = [[1,1,1],[1,1,1]]
Output: [[5,5,5],[5,5,5]]
Explanation:
- diff[0][0] = onesRow0 + onesCol0 - zerosRow0 - zerosCol0 = 3 + 2 - 0 - 0 = 5
- diff[0][1] = onesRow0 + onesCol1 - zerosRow0 - zerosCol1 = 3 + 2 - 0 - 0 = 5
- diff[0][2] = onesRow0 + onesCol2 - zerosRow0 - zerosCol2 = 3 + 2 - 0 - 0 = 5
- diff[1][0] = onesRow1 + onesCol0 - zerosRow1 - zerosCol0 = 3 + 2 - 0 - 0 = 5
- diff[1][1] = onesRow1 + onesCol1 - zerosRow1 - zerosCol1 = 3 + 2 - 0 - 0 = 5
- diff[1][2] = onesRow1 + onesCol2 - zerosRow1 - zerosCol2 = 3 + 2 - 0 - 0 = 5


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 105
 * 1 <= m * n <= 105
 * grid[i][j] is either 0 or 1.",Solutions (414),258,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/difference-between-ones-and-zeros-in-row-and-column/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().onesMinusZeros(grid)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def onesMinusZeros(self, grid: List[List[int]]) -> List[List[int]]:
        m = len(grid)
        n = len(grid[0])
        row_sum = [0] * m
        col_sum = [0] * n
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    row_sum[i] += 1
                    col_sum[j] += 1
        diff = [[row_sum[i] + col_sum[j] - sum(grid[i]) - sum(row[j] for row in grid) for j in range(n)] for i in range(m)]
        return diff"
False,0,0,2608,,Count the Digits That Divide a Number,count-the-digits-that-divide-a-number,False,36756,43261,2520,False,1,"Can you solve this real interview question? Count the Digits That Divide a Number - Given an integer num, return the number of digits in num that divide num.

An integer val divides nums if nums % val == 0.

 

Example 1:


Input: num = 7
Output: 1
Explanation: 7 divides itself, hence the answer is 1.


Example 2:


Input: num = 121
Output: 2
Explanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.


Example 3:


Input: num = 1248
Output: 4
Explanation: 1248 is divisible by all of its digits, hence the answer is 4.


 

Constraints:

 * 1 <= num <= 109
 * num does not contain 0 as one of its digits.",Solutions (836),261,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-digits-that-divide-a-number/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countDigits(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().countDigits(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countDigits(self, num: int) -> int:
        count = 0
        for digit in str(num):
            if int(digit) != 0 and num % int(digit) == 0:
                count += 1
        return count"
False,0,0,2609,,Distinct Prime Factors of Product of Array,distinct-prime-factors-of-product-of-array,False,19683,39330,2521,False,2,"Can you solve this real interview question? Distinct Prime Factors of Product of Array - Given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.

Note that:

 * A number greater than 1 is called prime if it is divisible by only 1 and itself.
 * An integer val1 is a factor of another integer val2 if val2 / val1 is an integer.

 

Example 1:


Input: nums = [2,4,3,7,10,6]
Output: 4
Explanation:
The product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 25 * 32 * 5 * 7.
There are 4 distinct prime factors so we return 4.


Example 2:


Input: nums = [2,4,8,16]
Output: 1
Explanation:
The product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.
There is 1 distinct prime factor so we return 1.


 

Constraints:

 * 1 <= nums.length <= 104
 * 2 <= nums[i] <= 1000",Solutions (345),292,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/distinct-prime-factors-of-product-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctPrimeFactors(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().distinctPrimeFactors(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctPrimeFactors(self, nums: List[int]) -> int:
        from collections import Counter
        from sympy import factorint
        
        prime_factors = Counter()
        for num in nums:
            factors = factorint(num)
            for factor in factors.keys():
                prime_factors[factor] += 1
        
        return len(prime_factors)"
False,0,0,2610,,Closest Prime Numbers in Range,closest-prime-numbers-in-range,False,15533,41991,2523,False,2,"Can you solve this real interview question? Closest Prime Numbers in Range - Given two positive integers left and right, find the two integers num1 and num2 such that:

 * left <= nums1 < nums2 <= right .
 * nums1 and nums2 are both prime numbers.
 * nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.

Return the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.

A number greater than 1 is called prime if it is only divisible by 1 and itself.

 

Example 1:


Input: left = 10, right = 19
Output: [11,13]
Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.
The closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].
Since 11 is smaller than 17, we return the first pair.


Example 2:


Input: left = 4, right = 6
Output: [-1,-1]
Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied.


 

Constraints:

 * 1 <= left <= right <= 106

 ",Solutions (332),276,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/closest-prime-numbers-in-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().closestPrimes(left, right)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","import math
from typing import List

class Solution:
    def closestPrimes(self, left: int, right: int) -> List[int]:
        def is_prime(num):
            if num <= 1:
                return False
            for i in range(2, int(math.sqrt(num)) + 1):
                if num % i == 0:
                    return False
            return True
        
        def find_next_prime(num):
            while True:
                num += 1
                if is_prime(num):
                    return num
        
        def find_previous_prime(num):
            while True:
                num -= 1
                if is_prime(num):
                    return num
        
        if right - left < 1:
            return [-1, -1]
        
        start = left
        while True:
            if is_prime(start):
                break
            start += 1
        
        prime1 = start
        prime2 = find_next_prime(start)
        
        while prime2 <= right and not(is_prime(prime2)):
            prime2 = find_next_prime(prime2)
        
        while prime1 >= left and not(is_prime(prime1)):
            prime1 = find_previous_prime(prime1)
        
        if prime2 > right or prime1 < left:
            return [-1, -1]
        
        return [prime1, prime2]"
False,0,0,2614,,Maximum Count of Positive Integer and Negative Integer,maximum-count-of-positive-integer-and-negative-integer,False,44591,59553,2529,False,1,"Can you solve this real interview question? Maximum Count of Positive Integer and Negative Integer - Given an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.

 * In other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.

Note that 0 is neither positive nor negative.

 

Example 1:


Input: nums = [-2,-1,-1,1,2,3]
Output: 3
Explanation: There are 3 positive integers and 3 negative integers. The maximum count among them is 3.


Example 2:


Input: nums = [-3,-2,-1,0,0,1,2]
Output: 3
Explanation: There are 2 positive integers and 3 negative integers. The maximum count among them is 3.


Example 3:


Input: nums = [5,20,66,1314]
Output: 4
Explanation: There are 4 positive integers and 0 negative integers. The maximum count among them is 4.


 

Constraints:

 * 1 <= nums.length <= 2000
 * -2000 <= nums[i] <= 2000
 * nums is sorted in a non-decreasing order.

 

Follow up: Can you solve the problem in O(log(n)) time complexity?",Solutions (769),376,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximumCount(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximumCount(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximumCount(self, nums: List[int]) -> int:
        return max(nums.count(num) for num in [x for x in nums if x > 0]), max(nums.count(num) for num in [x for x in nums if x < 0])"
False,0,0,2615,,Make Number of Distinct Characters Equal,make-number-of-distinct-characters-equal,False,13390,52492,2531,False,2,"Can you solve this real interview question? Make Number of Distinct Characters Equal - You are given two 0-indexed strings word1 and word2.

A move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j].

Return true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. Return false otherwise.

 

Example 1:


Input: word1 = ""ac"", word2 = ""b""
Output: false
Explanation: Any pair of swaps would yield two distinct characters in the first string, and one in the second string.


Example 2:


Input: word1 = ""abcc"", word2 = ""aab""
Output: true
Explanation: We swap index 2 of the first string with index 0 of the second string. The resulting strings are word1 = ""abac"" and word2 = ""cab"", which both have 3 distinct characters.


Example 3:


Input: word1 = ""abcde"", word2 = ""fghij""
Output: true
Explanation: Both resulting strings will have 5 distinct characters, regardless of which indices we swap.


 

Constraints:

 * 1 <= word1.length, word2.length <= 105
 * word1 and word2 consist of only lowercase English letters.",Solutions (274),402,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/make-number-of-distinct-characters-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isItPossible(self, word1: str, word2: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    word1: str = deserialize(""str"", read_line())
    word2: str = deserialize(""str"", read_line())
    ans = Solution().isItPossible(word1, word2)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isItPossible(self, word1: str, word2: str) -> bool:
        if abs(len(set(word1)) - len(set(word2))) != 1:
            return False
        for i, char1 in enumerate(word1):
            for j, char2 in enumerate(word2):
                if len(set(word1[:i] + [char2] + word1[i+1:])) == len(set(word2[:j] + [char1] + word2[j+1:])):
                    return True
        return False"
False,0,0,2616,,Maximal Score After Applying K Operations,maximal-score-after-applying-k-operations,False,20924,48286,2530,False,2,"Can you solve this real interview question? Maximal Score After Applying K Operations - You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.

In one operation:

 1. choose an index i such that 0 <= i < nums.length,
 2. increase your score by nums[i], and
 3. replace nums[i] with ceil(nums[i] / 3).

Return the maximum possible score you can attain after applying exactly k operations.

The ceiling function ceil(val) is the least integer greater than or equal to val.

 

Example 1:


Input: nums = [10,10,10,10,10], k = 5
Output: 50
Explanation: Apply the operation to each array element exactly once. The final score is 10 + 10 + 10 + 10 + 10 = 50.


Example 2:


Input: nums = [1,10,3,3,3], k = 3
Output: 17
Explanation: You can do the following operations:
Operation 1: Select i = 1, so nums becomes [1,4,3,3,3]. Your score increases by 10.
Operation 2: Select i = 1, so nums becomes [1,2,3,3,3]. Your score increases by 4.
Operation 3: Select i = 2, so nums becomes [1,1,1,3,3]. Your score increases by 3.
The final score is 10 + 4 + 3 = 17.


 

Constraints:

 * 1 <= nums.length, k <= 105
 * 1 <= nums[i] <= 109",Solutions (424),280,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximal-score-after-applying-k-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxKelements(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxKelements(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxKelements(self, nums: List[int], k: int) -> int:
        n = len(nums)
        res = 0
        
        for _ in range(min(k, n)):
            max_index = nums.index(max(nums))
            res += nums[max_index]
            nums[max_index] = -(-nums[max_index] // 3)
        
        return res"
False,0,0,2618,,Maximize the Minimum Powered City,maximize-the-minimum-powered-city,False,4334,13477,2528,False,3,"Can you solve this real interview question? Maximize the Minimum Powered City - You are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.

Each power station can provide power to every city in a fixed range. In other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.

 * Note that |x| denotes absolute value. For example, |7 - 5| = 2 and |3 - 10| = 7.

The power of a city is the total number of power stations it is being provided power from.

The government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.

Given the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.

Note that you can build the k power stations in multiple cities.

 

Example 1:


Input: stations = [1,2,4,5,0], r = 1, k = 2
Output: 5
Explanation: 
One of the optimal ways is to install both the power stations at city 1. 
So stations will become [1,4,4,5,0].
- City 0 is provided by 1 + 4 = 5 power stations.
- City 1 is provided by 1 + 4 + 4 = 9 power stations.
- City 2 is provided by 4 + 4 + 5 = 13 power stations.
- City 3 is provided by 5 + 4 = 9 power stations.
- City 4 is provided by 5 + 0 = 5 power stations.
So the minimum power of a city is 5.
Since it is not possible to obtain a larger power, we return 5.


Example 2:


Input: stations = [4,4,4,4], r = 0, k = 3
Output: 4
Explanation: 
It can be proved that we cannot make the minimum power of a city greater than 4.


 

Constraints:

 * n == stations.length
 * 1 <= n <= 105
 * 0 <= stations[i] <= 105
 * 0 <= r <= n - 1
 * 0 <= k <= 109",Solutions (91),353,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-the-minimum-powered-city/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxPower(self, stations: List[int], r: int, k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    stations: List[int] = deserialize(""List[int]"", read_line())
    r: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxPower(stations, r, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxPower(self, stations: List[int], r: int, k: int) -> int:
        pass"
False,0,0,2619,,Categorize Box According to Criteria,categorize-box-according-to-criteria,False,21685,63744,2525,False,1,"Can you solve this real interview question? Categorize Box According to Criteria - Given four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.

 * The box is ""Bulky"" if:
   * Any of the dimensions of the box is greater or equal to 104.
   * Or, the volume of the box is greater or equal to 109.
 * If the mass of the box is greater or equal to 100, it is ""Heavy"".
 * If the box is both ""Bulky"" and ""Heavy"", then its category is ""Both"".
 * If the box is neither ""Bulky"" nor ""Heavy"", then its category is ""Neither"".
 * If the box is ""Bulky"" but not ""Heavy"", then its category is ""Bulky"".
 * If the box is ""Heavy"" but not ""Bulky"", then its category is ""Heavy"".

Note that the volume of the box is the product of its length, width and height.

 

Example 1:


Input: length = 1000, width = 35, height = 700, mass = 300
Output: ""Heavy""
Explanation: 
None of the dimensions of the box is greater or equal to 104. 
Its volume = 24500000 <= 109. So it cannot be categorized as ""Bulky"".
However mass >= 100, so the box is ""Heavy"".
Since the box is not ""Bulky"" but ""Heavy"", we return ""Heavy"".

Example 2:


Input: length = 200, width = 50, height = 800, mass = 50
Output: ""Neither""
Explanation: 
None of the dimensions of the box is greater or equal to 104.
Its volume = 8 * 106 <= 109. So it cannot be categorized as ""Bulky"".
Its mass is also less than 100, so it cannot be categorized as ""Heavy"" either. 
Since its neither of the two above categories, we return ""Neither"".

 

Constraints:

 * 1 <= length, width, height <= 105
 * 1 <= mass <= 103",Solutions (335),134,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/categorize-box-according-to-criteria/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    length: int = deserialize(""int"", read_line())
    width: int = deserialize(""int"", read_line())
    height: int = deserialize(""int"", read_line())
    mass: int = deserialize(""int"", read_line())
    ans = Solution().categorizeBox(length, width, height, mass)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def categorizeBox(self, length: int, width: int, height: int, mass: int) -> str:
        if length >= 104 or width >= 104 or height >= 104 or length * width * height >= 10**9:
            if mass >= 100:
                return ""Both""
            else:
                return ""Bulky""
        elif mass >= 100:
            return ""Heavy""
        else:
            return ""Neither"""
False,0,0,2621,,Find Xor-Beauty of Array,find-xor-beauty-of-array,False,13637,19410,2527,False,2,"Can you solve this real interview question? Find Xor-Beauty of Array - You are given a 0-indexed integer array nums.

The effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).

The xor-beauty of the array is the XORing of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.

Return the xor-beauty of nums.

Note that:

 * val1 | val2 is bitwise OR of val1 and val2.
 * val1 & val2 is bitwise AND of val1 and val2.

 

Example 1:


Input: nums = [1,4]
Output: 5
Explanation: 
The triplets and their corresponding effective values are listed below:
- (0,0,0) with effective value ((1 | 1) & 1) = 1
- (0,0,1) with effective value ((1 | 1) & 4) = 0
- (0,1,0) with effective value ((1 | 4) & 1) = 1
- (0,1,1) with effective value ((1 | 4) & 4) = 4
- (1,0,0) with effective value ((4 | 1) & 1) = 1
- (1,0,1) with effective value ((4 | 1) & 4) = 4
- (1,1,0) with effective value ((4 | 4) & 1) = 0
- (1,1,1) with effective value ((4 | 4) & 4) = 4 
Xor-beauty of array will be bitwise XOR of all beauties = 1 ^ 0 ^ 1 ^ 4 ^ 1 ^ 4 ^ 0 ^ 4 = 5.

Example 2:


Input: nums = [15,45,20,2,34,35,5,44,32,30]
Output: 34
Explanation: The xor-beauty of the given array is 34.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (203),248,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-xor-beauty-of-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def xorBeauty(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().xorBeauty(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def xorBeauty(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            for j in range(len(nums)):
                for k in range(len(nums)):
                    result ^= ((nums[i]|nums[j]) & nums[k])
        return result"
False,0,0,2624,,Difference Between Element Sum and Digit Sum of an Array,difference-between-element-sum-and-digit-sum-of-an-array,False,53047,62102,2535,False,1,"Can you solve this real interview question? Difference Between Element Sum and Digit Sum of an Array - You are given a positive integer array nums.

 * The element sum is the sum of all the elements in nums.
 * The digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.

Return the absolute difference between the element sum and digit sum of nums.

Note that the absolute difference between two integers x and y is defined as |x - y|.

 

Example 1:


Input: nums = [1,15,6,3]
Output: 9
Explanation: 
The element sum of nums is 1 + 15 + 6 + 3 = 25.
The digit sum of nums is 1 + 1 + 5 + 6 + 3 = 16.
The absolute difference between the element sum and digit sum is |25 - 16| = 9.


Example 2:


Input: nums = [1,2,3,4]
Output: 0
Explanation:
The element sum of nums is 1 + 2 + 3 + 4 = 10.
The digit sum of nums is 1 + 2 + 3 + 4 = 10.
The absolute difference between the element sum and digit sum is |10 - 10| = 0.


 

Constraints:

 * 1 <= nums.length <= 2000
 * 1 <= nums[i] <= 2000",Solutions (989),359,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/difference-between-element-sum-and-digit-sum-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def differenceOfSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().differenceOfSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def differenceOfSum(self, nums: List[int]) -> int:
        return abs(sum(nums) - sum(int(j) for i in nums for j in str(i)) )"
False,0,0,2625,,Increment Submatrices by One,increment-submatrices-by-one,False,16562,34271,2536,False,2,"Can you solve this real interview question? Increment Submatrices by One - You are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes.

You are also given a 2D integer array query. For each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:

 * Add 1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). That is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i.

Return the matrix mat after performing every query.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/24/p2example11.png]


Input: n = 3, queries = [[1,1,2,2],[0,0,1,1]]
Output: [[1,1,0],[1,2,1],[0,1,1]]
Explanation: The diagram above shows the initial matrix, the matrix after the first query, and the matrix after the second query.
- In the first query, we add 1 to every element in the submatrix with the top left corner (1, 1) and bottom right corner (2, 2).
- In the second query, we add 1 to every element in the submatrix with the top left corner (0, 0) and bottom right corner (1, 1).


Example 2:

[https://assets.leetcode.com/uploads/2022/11/24/p2example22.png]


Input: n = 2, queries = [[0,0,1,1]]
Output: [[1,1],[1,1]]
Explanation: The diagram above shows the initial matrix and the matrix after the first query.
- In the first query we add 1 to every element in the matrix.


 

Constraints:

 * 1 <= n <= 500
 * 1 <= queries.length <= 104
 * 0 <= row1i <= row2i < n
 * 0 <= col1i <= col2i < n",Solutions (274),374,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/increment-submatrices-by-one/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rangeAddQueries(self, n: int, queries: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().rangeAddQueries(n, queries)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def rangeAddQueries(self, n: int, queries: List[List[int]]) -> List[List[int]]:
        mat = [[0 for _ in range(n)] for _ in range(n)]
        
        for query in queries:
            row1, col1, row2, col2 = query
            for i in range(row1, row2 + 1):
                for j in range(col1, col2 + 1):
                    mat[i][j] += 1
        
        return mat"
False,0,0,2626,,Count the Number of Good Subarrays,count-the-number-of-good-subarrays,False,11861,24705,2537,False,2,"Can you solve this real interview question? Count the Number of Good Subarrays - Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,1,1,1,1], k = 10
Output: 1
Explanation: The only good subarray is the array nums itself.


Example 2:


Input: nums = [3,1,4,3,2,2,4], k = 2
Output: 4
Explanation: There are 4 different good subarrays:
- [3,1,4,3,2,2] that has 2 pairs.
- [3,1,4,3,2,2,4] that has 3 pairs.
- [1,4,3,2,2,4] that has 2 pairs.
- [4,3,2,2,4] that has 2 pairs.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i], k <= 109",Solutions (217),539,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-good-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countGood(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().countGood(nums, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countGood(self, nums: List[int], k: int) -> int:
        count = 0
        prefix = [0]
        for num in nums:
            prefix.append(prefix[-1] + (num % 2 == 1))
        cnt = {}
        for x in prefix:
            count += cnt.get(x - k, 0)
            cnt[x] = cnt.get(x, 0) + 1
        return count"
False,0,0,2627,,Difference Between Maximum and Minimum Price Sum,difference-between-maximum-and-minimum-price-sum,False,5004,14310,2538,False,3,"Can you solve this real interview question? Difference Between Maximum and Minimum Price Sum - There exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Each node has an associated price. You are given an integer array price, where price[i] is the price of the ith node.

The price sum of a given path is the sum of the prices of all nodes lying on that path.

The tree can be rooted at any node root of your choice. The incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.

Return the maximum possible cost amongst all possible root choices.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/01/example14.png]


Input: n = 6, edges = [[0,1],[1,2],[1,3],[3,4],[3,5]], price = [9,8,7,6,10,5]
Output: 24
Explanation: The diagram above denotes the tree after rooting it at node 2. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.
- The first path contains nodes [2,1,3,4]: the prices are [7,8,6,10], and the sum of the prices is 31.
- The second path contains the node [2] with the price [7].
The difference between the maximum and minimum price sum is 24. It can be proved that 24 is the maximum cost.


Example 2:

[https://assets.leetcode.com/uploads/2022/11/24/p1_example2.png]


Input: n = 3, edges = [[0,1],[1,2]], price = [1,1,1]
Output: 2
Explanation: The diagram above denotes the tree after rooting it at node 0. The first part (colored in red) shows the path with the maximum price sum. The second part (colored in blue) shows the path with the minimum price sum.
- The first path contains nodes [0,1,2]: the prices are [1,1,1], and the sum of the prices is 3.
- The second path contains node [0] with a price [1].
The difference between the maximum and minimum price sum is 2. It can be proved that 2 is the maximum cost.


 

Constraints:

 * 1 <= n <= 105
 * edges.length == n - 1
 * 0 <= ai, bi <= n - 1
 * edges represents a valid tree.
 * price.length == n
 * 1 <= price[i] <= 105",Solutions (96),279,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/difference-between-maximum-and-minimum-price-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    price: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxOutput(n, edges, price)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxOutput(self, n: int, edges: List[List[int]], price: List[int]) -> int:
        return max(price) - min(price) + sum(price) - max(price) - sum(min(max(price), min(price), key=lambda x: sum(price[e] for e in edges if x in e)) * 2 - max(map(lambda x: sum(price[e] for e in edges if x in e), price) if price)}"
False,0,0,2628,,Minimize the Maximum of Two Arrays,minimize-the-maximum-of-two-arrays,False,4481,16850,2513,False,2,"Can you solve this real interview question? Minimize the Maximum of Two Arrays - We have two arrays arr1 and arr2 which are initially empty. You need to add positive integers to them such that they satisfy all the following conditions:

 * arr1 contains uniqueCnt1 distinct positive integers, each of which is not divisible by divisor1.
 * arr2 contains uniqueCnt2 distinct positive integers, each of which is not divisible by divisor2.
 * No integer is present in both arr1 and arr2.

Given divisor1, divisor2, uniqueCnt1, and uniqueCnt2, return the minimum possible maximum integer that can be present in either array.

 

Example 1:


Input: divisor1 = 2, divisor2 = 7, uniqueCnt1 = 1, uniqueCnt2 = 3
Output: 4
Explanation: 
We can distribute the first 4 natural numbers into arr1 and arr2.
arr1 = [1] and arr2 = [2,3,4].
We can see that both arrays satisfy all the conditions.
Since the maximum value is 4, we return it.


Example 2:


Input: divisor1 = 3, divisor2 = 5, uniqueCnt1 = 2, uniqueCnt2 = 1
Output: 3
Explanation: 
Here arr1 = [1,2], and arr2 = [3] satisfy all conditions.
Since the maximum value is 3, we return it.

Example 3:


Input: divisor1 = 2, divisor2 = 4, uniqueCnt1 = 8, uniqueCnt2 = 2
Output: 15
Explanation: 
Here, the final possible arrays can be arr1 = [1,3,5,7,9,11,13,15], and arr2 = [2,6].
It can be shown that it is not possible to obtain a lower maximum satisfying all conditions. 


 

Constraints:

 * 2 <= divisor1, divisor2 <= 105
 * 1 <= uniqueCnt1, uniqueCnt2 < 109
 * 2 <= uniqueCnt1 + uniqueCnt2 <= 109",Solutions (92),253,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimize-the-maximum-of-two-arrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    divisor1: int = deserialize(""int"", read_line())
    divisor2: int = deserialize(""int"", read_line())
    uniqueCnt1: int = deserialize(""int"", read_line())
    uniqueCnt2: int = deserialize(""int"", read_line())
    ans = Solution().minimizeSet(divisor1, divisor2, uniqueCnt1, uniqueCnt2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizeSet(self, divisor1: int, divisor2: int, uniqueCnt1: int, uniqueCnt2: int) -> int:
        low = max(divisor1 + 1, divisor2 + 1)
        high = 10**9
        
        while low < high:
            mid = (low + high) // 2
            arr1 = set([mid - i for i in range(uniqueCnt1)])
            arr2 = set([mid + i for i in range(uniqueCnt2)])
            
            if any(num % divisor1 == 0 for num in arr1) or any(num % divisor2 == 0 for num in arr2) or len(arr1.intersection(arr2)) > 0:
                low = mid + 1
            else:
                high = mid
        
        return low"
False,0,0,2630,,Alternating Digit Sum,alternating-digit-sum,False,32122,46161,2544,False,1,"Can you solve this real interview question? Alternating Digit Sum - You are given a positive integer n. Each digit of n has a sign according to the following rules:

 * The most significant digit is assigned a positive sign.
 * Each other digit has an opposite sign to its adjacent digits.

Return the sum of all digits with their corresponding sign.

 

Example 1:


Input: n = 521
Output: 4
Explanation: (+5) + (-2) + (+1) = 4.


Example 2:


Input: n = 111
Output: 1
Explanation: (+1) + (-1) + (+1) = 1.


Example 3:


Input: n = 886996
Output: 0
Explanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.


 

Constraints:

 * 1 <= n <= 109

 ",Solutions (750),221,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/alternating-digit-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def alternateDigitSum(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().alternateDigitSum(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def alternateDigitSum(self, n: int) -> int:
        sign = 1
        total = 0
        n = str(n)
        for digit in n:
            total += sign * int(digit)
            sign *= -1
        return total"
False,0,0,2631,,Sort the Students by Their Kth Score,sort-the-students-by-their-kth-score,False,28831,33600,2545,False,2,"Can you solve this real interview question? Sort the Students by Their Kth Score - There is a class with m students and n exams. You are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. The matrix score contains distinct integers only.

You are also given an integer k. Sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest.

Return the matrix after sorting it.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/11/30/example1.png]


Input: score = [[10,6,9,1],[7,5,11,2],[4,8,3,15]], k = 2
Output: [[7,5,11,2],[10,6,9,1],[4,8,3,15]]
Explanation: In the above diagram, S denotes the student, while E denotes the exam.
- The student with index 1 scored 11 in exam 2, which is the highest score, so they got first place.
- The student with index 0 scored 9 in exam 2, which is the second highest score, so they got second place.
- The student with index 2 scored 3 in exam 2, which is the lowest score, so they got third place.


Example 2:

[https://assets.leetcode.com/uploads/2022/11/30/example2.png]


Input: score = [[3,4],[5,6]], k = 0
Output: [[5,6],[3,4]]
Explanation: In the above diagram, S denotes the student, while E denotes the exam.
- The student with index 1 scored 5 in exam 0, which is the highest score, so they got first place.
- The student with index 0 scored 3 in exam 0, which is the lowest score, so they got second place.


 

Constraints:

 * m == score.length
 * n == score[i].length
 * 1 <= m, n <= 250
 * 1 <= score[i][j] <= 105
 * score consists of distinct integers.
 * 0 <= k < n",Solutions (694),337,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/sort-the-students-by-their-kth-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    score: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().sortTheStudents(score, k)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def sortTheStudents(self, score: List[List[int]], k: int) -> List[List[int]]:
        return sorted(score, key=lambda x: x[k], reverse=True)"
False,0,0,2632,,Apply Bitwise Operations to Make Strings Equal,apply-bitwise-operations-to-make-strings-equal,False,15090,37159,2546,False,2,"Can you solve this real interview question? Apply Bitwise Operations to Make Strings Equal - You are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times:

 * Choose two different indices i and j where 0 <= i, j < n.
 * Simultaneously, replace s[i] with (s[i] OR s[j]) and s[j] with (s[i] XOR s[j]).

For example, if s = ""0110"", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = ""1110"".

Return true if you can make the string s equal to target, or false otherwise.

 

Example 1:


Input: s = ""1010"", target = ""0110""
Output: true
Explanation: We can do the following operations:
- Choose i = 2 and j = 0. We have now s = ""0010"".
- Choose i = 2 and j = 1. We have now s = ""0110"".
Since we can make s equal to target, we return true.


Example 2:


Input: s = ""11"", target = ""00""
Output: false
Explanation: It is not possible to make s equal to target with any number of operations.


 

Constraints:

 * n == s.length == target.length
 * 2 <= n <= 105
 * s and target consist of only the digits 0 and 1.",Solutions (239),191,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/apply-bitwise-operations-to-make-strings-equal/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def makeStringsEqual(self, s: str, target: str) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    target: str = deserialize(""str"", read_line())
    ans = Solution().makeStringsEqual(s, target)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def makeStringsEqual(self, s: str, target: str) -> bool:
        return sum(int(c) for c in s) % 2 == sum(int(c) for c in target) % 2"
False,0,0,2633,,Minimum Cost to Split an Array,minimum-cost-to-split-an-array,False,8406,21578,2547,False,3,"Can you solve this real interview question? Minimum Cost to Split an Array - You are given an integer array nums and an integer k.

Split the array into some number of non-empty subarrays. The cost of a split is the sum of the importance value of each subarray in the split.

Let trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.

 * For example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].

The importance value of a subarray is k + trimmed(subarray).length.

 * For example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].The importance value of this subarray will be k + 5.

Return the minimum possible cost of a split of nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [1,2,1,2,1,3,3], k = 2
Output: 8
Explanation: We split nums to have two subarrays: [1,2], [1,2,1,3,3].
The importance value of [1,2] is 2 + (0) = 2.
The importance value of [1,2,1,3,3] is 2 + (2 + 2) = 6.
The cost of the split is 2 + 6 = 8. It can be shown that this is the minimum possible cost among all the possible splits.


Example 2:


Input: nums = [1,2,1,2,1], k = 2
Output: 6
Explanation: We split nums to have two subarrays: [1,2], [1,2,1].
The importance value of [1,2] is 2 + (0) = 2.
The importance value of [1,2,1] is 2 + (2) = 4.
The cost of the split is 2 + 4 = 6. It can be shown that this is the minimum possible cost among all the possible splits.


Example 3:


Input: nums = [1,2,1,2,1], k = 5
Output: 10
Explanation: We split nums to have one subarray: [1,2,1,2,1].
The importance value of [1,2,1,2,1] is 5 + (3 + 2) = 10.
The cost of the split is 10. It can be shown that this is the minimum possible cost among all the possible splits.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 0 <= nums[i] < nums.length
 * 1 <= k <= 109

 ",Solutions (132),333,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-cost-to-split-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minCost(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCost(self, nums: List[int], k: int) -> int:
        # Your code here
        pass"
False,0,0,2634,,Minimum Common Value,minimum-common-value,False,30390,59018,2540,False,1,"Can you solve this real interview question? Minimum Common Value - Given two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. If there is no common integer amongst nums1 and nums2, return -1.

Note that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.

 

Example 1:


Input: nums1 = [1,2,3], nums2 = [2,4]
Output: 2
Explanation: The smallest element common to both arrays is 2, so we return 2.


Example 2:


Input: nums1 = [1,2,3,6], nums2 = [2,3,4,5]
Output: 2
Explanation: There are two common elements in the array 2 and 3 out of which 2 is the smallest, so 2 is returned.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 105
 * 1 <= nums1[i], nums2[j] <= 109
 * Both nums1 and nums2 are sorted in non-decreasing order.",Solutions (551),298,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-common-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().getCommon(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def getCommon(self, nums1: List[int], nums2: List[int]) -> int:
        return min(set(nums1) & set(nums2)) if set(nums1) & (set(nums2)) else -1"
False,0,0,2635,,Check if Point Is Reachable,check-if-point-is-reachable,False,4615,10883,2543,False,3,"Can you solve this real interview question? Check if Point Is Reachable - There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.

In one step, you can move from point (x, y) to any one of the following points:

 * (x, y - x)
 * (x - y, y)
 * (2 * x, y)
 * (x, 2 * y)

Given two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.

 

Example 1:


Input: targetX = 6, targetY = 9
Output: false
Explanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.


Example 2:


Input: targetX = 4, targetY = 7
Output: true
Explanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7).


 

Constraints:

 * 1 <= targetX, targetY <= 109",Solutions (96),180,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/check-if-point-is-reachable/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isReachable(self, targetX: int, targetY: int) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    targetX: int = deserialize(""int"", read_line())
    targetY: int = deserialize(""int"", read_line())
    ans = Solution().isReachable(targetX, targetY)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isReachable(self, targetX: int, targetY: int) -> bool:
        if targetX == targetY:
            return False
        while targetX > 1 and targetY > 1:
            if targetX > targetY:
                targetX %= targetY
            else:
                targetY %= targetX
        return (targetX == 1 and targetY == 1)"
False,0,0,2636,,Maximum Subsequence Score,maximum-subsequence-score,False,7820,20548,2542,False,2,"Can you solve this real interview question? Maximum Subsequence Score - You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.

For chosen indices i0, i1, ..., ik - 1, your score is defined as:

 * The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
 * It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).

Return the maximum possible score.

A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.

 

Example 1:


Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
Output: 12
Explanation: 
The four possible subsequence scores are:
- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.
- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. 
- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. 
- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.
Therefore, we return the max score, which is 12.


Example 2:


Input: nums1 = [4,2,3,1,1], nums2 = [7,5,10,9,6], k = 1
Output: 30
Explanation: 
Choosing index 2 is optimal: nums1[2] * nums2[2] = 3 * 10 = 30 is the maximum possible score.


 

Constraints:

 * n == nums1.length == nums2.length
 * 1 <= n <= 105
 * 0 <= nums1[i], nums2[j] <= 105
 * 1 <= k <= n",Solutions (146),447,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-subsequence-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maxScore(nums1, nums2, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:
        dp = [[0] * (k + 1) for _ in range(k + 1)]
        for i in range(k + 1):
            for j in range((k - i) + 1):
                dp[i][j] = max(dp[i][j], dp[i - 1][j] + nums1[i - 1] * nums2[j - 1]) if i > 0 else float('-inf')
                dp[i][j] = max(dp[i][j], dp[i][j - 1] + nums1[i - 1] * nums2[j - 1]) if j > 0 else float('-inf')
        return dp[k][k]"
False,0,0,2639,,Separate the Digits in an Array,separate-the-digits-in-an-array,False,31848,40042,2553,False,1,"Can you solve this real interview question? Separate the Digits in an Array - Given an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.

To separate the digits of an integer is to get all the digits it has in the same order.

 * For example, for the integer 10921, the separation of its digits is [1,0,9,2,1].

 

Example 1:


Input: nums = [13,25,83,77]
Output: [1,3,2,5,8,3,7,7]
Explanation: 
- The separation of 13 is [1,3].
- The separation of 25 is [2,5].
- The separation of 83 is [8,3].
- The separation of 77 is [7,7].
answer = [1,3,2,5,8,3,7,7]. Note that answer contains the separations in the same order.


Example 2:


Input: nums = [7,1,3,9]
Output: [7,1,3,9]
Explanation: The separation of each integer in nums is itself.
answer = [7,1,3,9].


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 105",Solutions (601),260,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/separate-the-digits-in-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def separateDigits(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().separateDigits(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def separateDigits(self, nums: List[int]) -> List[int]:
        answer = []
        for num in nums:
            for digit in str(num):
                answer.append(int(digit))
        return answer"
False,0,0,2640,,Maximum Number of Integers to Choose From a Range I,maximum-number-of-integers-to-choose-from-a-range-i,False,21035,40096,2554,False,2,"Can you solve this real interview question? Maximum Number of Integers to Choose From a Range I - You are given an integer array banned and two integers n and maxSum. You are choosing some number of integers following the below rules:

 * The chosen integers have to be in the range [1, n].
 * Each integer can be chosen at most once.
 * The chosen integers should not be in the array banned.
 * The sum of the chosen integers should not exceed maxSum.

Return the maximum number of integers you can choose following the mentioned rules.

 

Example 1:


Input: banned = [1,6,5], n = 5, maxSum = 6
Output: 2
Explanation: You can choose the integers 2 and 4.
2 and 4 are from the range [1, 5], both did not appear in banned, and their sum is 6, which did not exceed maxSum.


Example 2:


Input: banned = [1,2,3,4,5,6,7], n = 8, maxSum = 1
Output: 0
Explanation: You cannot choose any integer while following the mentioned conditions.


Example 3:


Input: banned = [11], n = 7, maxSum = 50
Output: 7
Explanation: You can choose the integers 1, 2, 3, 4, 5, 6, and 7.
They are from the range [1, 7], all did not appear in banned, and their sum is 28, which did not exceed maxSum.


 

Constraints:

 * 1 <= banned.length <= 104
 * 1 <= banned[i], n <= 104
 * 1 <= maxSum <= 109",Solutions (346),197,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-number-of-integers-to-choose-from-a-range-i/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    banned: List[int] = deserialize(""List[int]"", read_line())
    n: int = deserialize(""int"", read_line())
    maxSum: int = deserialize(""int"", read_line())
    ans = Solution().maxCount(banned, n, maxSum)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxCount(self, banned: List[int], n: int, maxSum: int) -> int:
        dp = [0] * (maxSum + 1)
        res = 0
        for i in range(1, n+1):
            if i in banned:
                continue
            for j in range(maxSum, i-1, -1):
                dp[j] = max(dp[j], dp[j-i] + 1)
                res = max(res, dp[j])
        return res"
False,0,0,2641,,Disconnect Path in a Binary Matrix by at Most One Flip,disconnect-path-in-a-binary-matrix-by-at-most-one-flip,False,8320,29228,2556,False,2,"Can you solve this real interview question? Disconnect Path in a Binary Matrix by at Most One Flip - You are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. The matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1).

You can flip the value of at most one (possibly none) cell. You cannot flip the cells (0, 0) and (m - 1, n - 1).

Return true if it is possible to make the matrix disconnect or false otherwise.

Note that flipping a cell changes its value from 0 to 1 or from 1 to 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/07/yetgrid2drawio.png]


Input: grid = [[1,1,1],[1,0,0],[1,1,1]]
Output: true
Explanation: We can change the cell shown in the diagram above. There is no path from (0, 0) to (2, 2) in the resulting grid.


Example 2:

[https://assets.leetcode.com/uploads/2022/12/07/yetgrid3drawio.png]


Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: false
Explanation: It is not possible to change at most one cell such that there is not path from (0, 0) to (2, 2).


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 1 <= m, n <= 1000
 * 1 <= m * n <= 105
 * grid[i][j] is either 0 or 1.
 * grid[0][0] == grid[m - 1][n - 1] == 1",Solutions (124),365,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/disconnect-path-in-a-binary-matrix-by-at-most-one-flip/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().isPossibleToCutPath(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def isPossibleToCutPath(self, grid: List[List[int]]) -> bool:
        pass"
False,0,0,2642,,Time to Cross a Bridge,time-to-cross-a-bridge,False,2979,5554,2532,False,3,"Can you solve this real interview question? Time to Cross a Bridge - There are k workers who want to move n boxes from an old warehouse to a new one. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [leftToRighti, pickOldi, rightToLefti, putNewi].

The warehouses are separated by a river and connected by a bridge. The old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker (0-indexed) can :

 * Cross the bridge from the left bank (new warehouse) to the right bank (old warehouse) in leftToRighti minutes.
 * Pick a box from the old warehouse and return to the bridge in pickOldi minutes. Different workers can pick up their boxes simultaneously.
 * Cross the bridge from the right bank (old warehouse) to the left bank (new warehouse) in rightToLefti minutes.
 * Put the box in the new warehouse and return to the bridge in putNewi minutes. Different workers can put their boxes simultaneously.

A worker i is less efficient than a worker j if either condition is met:

 * leftToRighti + rightToLefti > leftToRightj + rightToLeftj
 * leftToRighti + rightToLefti == leftToRightj + rightToLeftj and i > j

The following rules regulate the movement of the workers through the bridge :

 * If a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge.
 * If the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. If more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.
 * If the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. If more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.

Return the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.

 

Example 1:


Input: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]
Output: 6
Explanation: 
From 0 to 1: worker 2 crosses the bridge from the left bank to the right bank.
From 1 to 2: worker 2 picks up a box from the old warehouse.
From 2 to 6: worker 2 crosses the bridge from the right bank to the left bank.
From 6 to 7: worker 2 puts a box at the new warehouse.
The whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left bank.


Example 2:


Input: n = 3, k = 2, time = [[1,9,1,8],[10,10,10,10]]
Output: 50
Explanation: 
From 0  to 10: worker 1 crosses the bridge from the left bank to the right bank.
From 10 to 20: worker 1 picks up a box from the old warehouse.
From 10 to 11: worker 0 crosses the bridge from the left bank to the right bank.
From 11 to 20: worker 0 picks up a box from the old warehouse.
From 20 to 30: worker 1 crosses the bridge from the right bank to the left bank.
From 30 to 40: worker 1 puts a box at the new warehouse.
From 30 to 31: worker 0 crosses the bridge from the right bank to the left bank.
From 31 to 39: worker 0 puts a box at the new warehouse.
From 39 to 40: worker 0 crosses the bridge from the left bank to the right bank.
From 40 to 49: worker 0 picks up a box from the old warehouse.
From 49 to 50: worker 0 crosses the bridge from the right bank to the left bank.
From 50 to 58: worker 0 puts a box at the new warehouse.
The whole process ends after 58 minutes. We return 50 because the problem asks for the instance of time at which the last worker reaches the left bank.


 

Constraints:

 * 1 <= n, k <= 104
 * time.length == k
 * time[i].length == 4
 * 1 <= leftToRighti, pickOldi, rightToLefti, putNewi <= 1000",Solutions (91),86,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/time-to-cross-a-bridge/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    k: int = deserialize(""int"", read_line())
    time: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findCrossingTime(n, k, time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findCrossingTime(self, n: int, k: int, time: List[List[int]]) -> int:
        # Your code here
        pass"
False,0,0,2645,,Pass the Pillow,pass-the-pillow,False,22827,49310,2582,False,1,"Can you solve this real interview question? Pass the Pillow - There are n people standing in a line labeled from 1 to n. The first person in the line is holding a pillow initially. Every second, the person holding the pillow passes it to the next person standing in the line. Once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.

 * For example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on.

Given the two positive integers n and time, return the index of the person holding the pillow after time seconds.

 

Example 1:


Input: n = 4, time = 5
Output: 2
Explanation: People pass the pillow in the following way: 1 -> 2 -> 3 -> 4 -> 3 -> 2.
Afer five seconds, the pillow is given to the 2nd person.


Example 2:


Input: n = 3, time = 2
Output: 3
Explanation: People pass the pillow in the following way: 1 -> 2 -> 3.
Afer two seconds, the pillow is given to the 3rd person.


 

Constraints:

 * 2 <= n <= 1000
 * 1 <= time <= 1000",Solutions (425),249,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/pass-the-pillow/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def passThePillow(self, n: int, time: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    time: int = deserialize(""int"", read_line())
    ans = Solution().passThePillow(n, time)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def passThePillow(self, n: int, time: int) -> int:
        while time > 0:
            if time % (2*(n-1)) < n:
                return time % (2*(n-1)) + 1
            time -= n - 1 - time % (n-1)"
False,0,0,2647,,Split the Array to Make Coprime Products,split-the-array-to-make-coprime-products,False,8233,37527,2584,False,3,"Can you solve this real interview question? Split the Array to Make Coprime Products - You are given a 0-indexed integer array nums of length n.

A split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.

 * For example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. A split at the index i = 2 is not valid because i == n - 1.

Return the smallest index i at which the array can be split validly or -1 if there is no such split.

Two values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/14/second.PNG]


Input: nums = [4,7,8,15,3,5]
Output: 2
Explanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.
The only valid split is at index 2.


Example 2:

[https://assets.leetcode.com/uploads/2022/12/14/capture.PNG]


Input: nums = [4,7,15,8,3,5]
Output: -1
Explanation: The table above shows the values of the product of the first i + 1 elements, the remaining elements, and their gcd at each index i.
There is no valid split.


 

Constraints:

 * n == nums.length
 * 1 <= n <= 104
 * 1 <= nums[i] <= 106",Solutions (143),240,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/split-the-array-to-make-coprime-products/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findValidSplit(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findValidSplit(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findValidSplit(self, nums: List[int]) -> int:
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        
        prefix_product = [1]
        for num in nums:
            prefix_product.append(prefix_product[-1] * num)
            
        suffix_product = [1]
        for num in reversed(nums):
            suffix_product.insert(0, suffix_product[0] * num)
            
        for i in range(len(nums) - 1):
            if gcd(prefix_product[i + 1], suffix_product[i]) == 1:
                return i
        return -1"
False,0,0,2648,,Number of Ways to Earn Points,number-of-ways-to-earn-points,False,9135,15261,2585,False,3,"Can you solve this real interview question? Number of Ways to Earn Points - There is a test that has n types of questions. You are given an integer target and a 0-indexed 2D integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.

Return the number of ways you can earn exactly target points in the exam. Since the answer may be too large, return it modulo 109 + 7.

Note that questions of the same type are indistinguishable.

 * For example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.

 

Example 1:


Input: target = 6, types = [[6,1],[3,2],[2,3]]
Output: 7
Explanation: You can earn 6 points in one of the seven ways:
- Solve 6 questions of the 0th type: 1 + 1 + 1 + 1 + 1 + 1 = 6
- Solve 4 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 1 + 2 = 6
- Solve 2 questions of the 0th type and 2 questions of the 1st type: 1 + 1 + 2 + 2 = 6
- Solve 3 questions of the 0th type and 1 question of the 2nd type: 1 + 1 + 1 + 3 = 6
- Solve 1 question of the 0th type, 1 question of the 1st type and 1 question of the 2nd type: 1 + 2 + 3 = 6
- Solve 3 questions of the 1st type: 2 + 2 + 2 = 6
- Solve 2 questions of the 2nd type: 3 + 3 = 6


Example 2:


Input: target = 5, types = [[50,1],[50,2],[50,5]]
Output: 4
Explanation: You can earn 5 points in one of the four ways:
- Solve 5 questions of the 0th type: 1 + 1 + 1 + 1 + 1 = 5
- Solve 3 questions of the 0th type and 1 question of the 1st type: 1 + 1 + 1 + 2 = 5
- Solve 1 questions of the 0th type and 2 questions of the 1st type: 1 + 2 + 2 = 5
- Solve 1 question of the 2nd type: 5


Example 3:


Input: target = 18, types = [[6,1],[3,2],[2,3]]
Output: 1
Explanation: You can only earn 18 points by answering all questions.


 

Constraints:

 * 1 <= target <= 1000
 * n == types.length
 * 1 <= n <= 50
 * types[i].length == 2
 * 1 <= counti, marksi <= 50",Solutions (147),279,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-ways-to-earn-points/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    target: int = deserialize(""int"", read_line())
    types: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().waysToReachTarget(target, types)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def waysToReachTarget(self, target: int, types: List[List[int]]) -> int:
        MOD = 10**9 + 7
        dp = [0] * (target + 1)
        dp[0] = 1
        
        for count, mark in types:
            for j in range(target, mark - 1, -1):
                for k in range(1, count + 1):
                    if j - k * mark >= 0:
                        dp[j] = (dp[j] + dp[j - k * mark]) % MOD
        
        return dp[target]"
False,0,0,2649,,Count Total Number of Colored Cells,count-total-number-of-colored-cells,False,17731,31001,2579,False,2,"Can you solve this real interview question? Count Total Number of Colored Cells - There exists an infinitely large two-dimensional grid of uncolored unit cells. You are given a positive integer n, indicating that you must do the following routine for n minutes:

 * At the first minute, color any arbitrary unit cell blue.
 * Every minute thereafter, color blue every uncolored cell that touches a blue cell.

Below is a pictorial representation of the state of the grid after minutes 1, 2, and 3.

[https://assets.leetcode.com/uploads/2023/01/10/example-copy-2.png]

Return the number of colored cells at the end of n minutes.

 

Example 1:


Input: n = 1
Output: 1
Explanation: After 1 minute, there is only 1 blue cell, so we return 1.


Example 2:


Input: n = 2
Output: 5
Explanation: After 2 minutes, there are 4 colored cells on the boundary and 1 in the center, so we return 5. 


 

Constraints:

 * 1 <= n <= 105",Solutions (433),190,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-total-number-of-colored-cells/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def coloredCells(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().coloredCells(n)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def coloredCells(self, n: int) -> int:
        return 2 * n * n - n + 1"
False,0,0,2650,,Split With Minimum Sum,split-with-minimum-sum,False,18133,26051,2578,False,1,"Can you solve this real interview question? Split With Minimum Sum - Given a positive integer num, split it into two non-negative integers num1 and num2 such that:

 * The concatenation of num1 and num2 is a permutation of num.
   * In other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num.
 * num1 and num2 can contain leading zeros.

Return the minimum possible sum of num1 and num2.

Notes:

 * It is guaranteed that num does not contain any leading zeros.
 * The order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.

 

Example 1:


Input: num = 4325
Output: 59
Explanation: We can split 4325 so that num1 is 24 and num2 is 35, giving a sum of 59. We can prove that 59 is indeed the minimal possible sum.


Example 2:


Input: num = 687
Output: 75
Explanation: We can split 687 so that num1 is 68 and num2 is 7, which would give an optimal sum of 75.


 

Constraints:

 * 10 <= num <= 109",Solutions (351),178,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/split-with-minimum-sum/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def splitNum(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().splitNum(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def splitNum(self, num: int) -> int:
        pass"
False,0,0,2651,,Count Ways to Group Overlapping Ranges,count-ways-to-group-overlapping-ranges,False,11010,31688,2580,False,2,"Can you solve this real interview question? Count Ways to Group Overlapping Ranges - You are given a 2D integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range.

You are to split ranges into two (possibly empty) groups such that:

 * Each range belongs to exactly one group.
 * Any two overlapping ranges must belong to the same group.

Two ranges are said to be overlapping if there exists at least one integer that is present in both ranges.

 * For example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges.

Return the total number of ways to split ranges into two groups. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:


Input: ranges = [[6,10],[5,15]]
Output: 2
Explanation: 
The two ranges are overlapping, so they must be in the same group.
Thus, there are two possible ways:
- Put both the ranges together in group 1.
- Put both the ranges together in group 2.


Example 2:


Input: ranges = [[1,3],[10,20],[2,5],[4,8]]
Output: 4
Explanation: 
Ranges [1,3], and [2,5] are overlapping. So, they must be in the same group.
Again, ranges [2,5] and [4,8] are also overlapping. So, they must also be in the same group. 
Thus, there are four possible ways to group them:
- All the ranges in group 1.
- All the ranges in group 2.
- Ranges [1,3], [2,5], and [4,8] in group 1 and [10,20] in group 2.
- Ranges [1,3], [2,5], and [4,8] in group 2 and [10,20] in group 1.


 

Constraints:

 * 1 <= ranges.length <= 105
 * ranges[i].length == 2
 * 0 <= starti <= endi <= 109",Solutions (194),220,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-ways-to-group-overlapping-ranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countWays(self, ranges: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ranges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().countWays(ranges)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def countWays(self, ranges: List[List[int]]) -> int:
        pass"
False,0,0,2652,,Count Number of Possible Root Nodes,count-number-of-possible-root-nodes,False,3226,6699,2581,False,3,"Can you solve this real interview question? Count Number of Possible Root Nodes - Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Alice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:

 * Chooses two distinct integers u and v such that there exists an edge [u, v] in the tree.
 * He tells Alice that u is the parent of v in the tree.

Bob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.

Alice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.

Given the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/19/ex-1.png]


Input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3
Output: 3
Explanation: 
Root = 0, correct guesses = [1,3], [0,1], [2,4]
Root = 1, correct guesses = [1,3], [1,0], [2,4]
Root = 2, correct guesses = [1,3], [1,0], [2,4]
Root = 3, correct guesses = [1,0], [2,4]
Root = 4, correct guesses = [1,3], [1,0]
Considering 0, 1, or 2 as root node leads to 3 correct guesses.



Example 2:

[https://assets.leetcode.com/uploads/2022/12/19/ex-2.png]


Input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1
Output: 5
Explanation: 
Root = 0, correct guesses = [3,4]
Root = 1, correct guesses = [1,0], [3,4]
Root = 2, correct guesses = [1,0], [2,1], [3,4]
Root = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]
Root = 4, correct guesses = [1,0], [2,1], [3,2]
Considering any node as root will give at least 1 correct guess. 



 

Constraints:

 * edges.length == n - 1
 * 2 <= n <= 105
 * 1 <= guesses.length <= 105
 * 0 <= ai, bi, uj, vj <= n - 1
 * ai != bi
 * uj != vj
 * edges represents a valid tree.
 * guesses[j] is an edge of the tree.
 * guesses is unique.
 * 0 <= k <= guesses.length",Solutions (89),189,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-number-of-possible-root-nodes/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    edges: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    guesses: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().rootCount(edges, guesses, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def rootCount(self, edges: List[List[int]], guesses: List[List[int]], k: int) -> int:
        # Your solution here
        pass"
False,0,0,2654,,Count the Number of Vowel Strings in Range,count-the-number-of-vowel-strings-in-range,False,25081,32092,2586,False,1,"Can you solve this real interview question? Count the Number of Vowel Strings in Range - You are given a 0-indexed array of string words and two integers left and right.

A string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.

Return the number of vowel strings words[i] where i belongs to the inclusive range [left, right].

 

Example 1:


Input: words = [""are"",""amy"",""u""], left = 0, right = 2
Output: 2
Explanation: 
- ""are"" is a vowel string because it starts with 'a' and ends with 'e'.
- ""amy"" is not a vowel string because it does not end with a vowel.
- ""u"" is a vowel string because it starts with 'u' and ends with 'u'.
The number of vowel strings in the mentioned range is 2.


Example 2:


Input: words = [""hey"",""aeo"",""mu"",""ooo"",""artro""], left = 1, right = 4
Output: 3
Explanation: 
- ""aeo"" is a vowel string because it starts with 'a' and ends with 'o'.
- ""mu"" is not a vowel string because it does not start with a vowel.
- ""ooo"" is a vowel string because it starts with 'o' and ends with 'o'.
- ""artro"" is a vowel string because it starts with 'a' and ends with 'o'.
The number of vowel strings in the mentioned range is 3.


 

Constraints:

 * 1 <= words.length <= 1000
 * 1 <= words[i].length <= 10
 * words[i] consists of only lowercase English letters.
 * 0 <= left <= right < words.length",Solutions (452),163,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-vowel-strings-in-range/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def vowelStrings(self, words: List[str], left: int, right: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    left: int = deserialize(""int"", read_line())
    right: int = deserialize(""int"", read_line())
    ans = Solution().vowelStrings(words, left, right)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def vowelStrings(self, words: List[str], left: int, right: int) -> int:
        def is_vowel(word):
            vowels = ['a', 'e', 'i', 'o', 'u']
            return word[0] in vowels and word[-1] in vowels

        count = 0
        for i in range(left, right + 1):
            if is_vowel(words[i]):
                count += 1
        
        return count"
False,0,0,2655,,Rearrange Array to Maximize Prefix Score,rearrange-array-to-maximize-prefix-score,False,20280,51494,2587,False,2,"Can you solve this real interview question? Rearrange Array to Maximize Prefix Score - You are given a 0-indexed integer array nums. You can rearrange the elements of nums to any order (including the given order).

Let prefix be the array containing the prefix sums of nums after rearranging it. In other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. The score of nums is the number of positive integers in the array prefix.

Return the maximum score you can achieve.

 

Example 1:


Input: nums = [2,-1,0,1,-3,3,-3]
Output: 6
Explanation: We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].
prefix = [2,5,6,5,2,2,-1], so the score is 6.
It can be shown that 6 is the maximum score we can obtain.


Example 2:


Input: nums = [-2,-3,0]
Output: 0
Explanation: Any rearrangement of the array will result in a score of 0.


 

Constraints:

 * 1 <= nums.length <= 105
 * -106 <= nums[i] <= 106",Solutions (333),188,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/rearrange-array-to-maximize-prefix-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxScore(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxScore(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxScore(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        return min(i + 1 for i in range(n) if nums[i] > n - i - 1)"
False,0,0,2656,,Count the Number of Beautiful Subarrays,count-the-number-of-beautiful-subarrays,False,11638,23631,2588,False,2,"Can you solve this real interview question? Count the Number of Beautiful Subarrays - You are given a 0-indexed integer array nums. In one operation, you can:

 * Choose two different indices i and j such that 0 <= i, j < nums.length.
 * Choose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1.
 * Subtract 2k from nums[i] and nums[j].

A subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times.

Return the number of beautiful subarrays in the array nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:


Input: nums = [4,3,1,2,4]
Output: 2
Explanation: There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].
- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:
  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].
  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].
- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:
  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].
  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].
  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0].


Example 2:


Input: nums = [1,10,4]
Output: 0
Explanation: There are no beautiful subarrays in nums.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 106",Solutions (171),319,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-beautiful-subarrays/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def beautifulSubarrays(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().beautifulSubarrays(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def beautifulSubarrays(self, nums: List[int]) -> int:
        pass"
False,0,0,2657,,Minimum Time to Complete All Tasks,minimum-time-to-complete-all-tasks,False,5232,14413,2589,False,3,"Can you solve this real interview question? Minimum Time to Complete All Tasks - There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].

You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.

Return the minimum time during which the computer should be turned on to complete all tasks.

 

Example 1:


Input: tasks = [[2,3,1],[4,5,1],[1,5,2]]
Output: 2
Explanation: 
- The first task can be run in the inclusive time range [2, 2].
- The second task can be run in the inclusive time range [5, 5].
- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].
The computer will be on for a total of 2 seconds.


Example 2:


Input: tasks = [[1,3,2],[2,5,3],[5,6,2]]
Output: 4
Explanation: 
- The first task can be run in the inclusive time range [2, 3].
- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].
- The third task can be run in the two inclusive time range [5, 6].
The computer will be on for a total of 4 seconds.


 

Constraints:

 * 1 <= tasks.length <= 2000
 * tasks[i].length == 3
 * 1 <= starti, endi <= 2000
 * 1 <= durationi <= endi - starti + 1",Solutions (85),297,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-complete-all-tasks/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findMinimumTime(self, tasks: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    tasks: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findMinimumTime(tasks)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findMinimumTime(self, tasks: List[List[int]]) -> int:
        tasks.sort(key=lambda x: (x[1], x[0]))
        result = 0
        end_time = 0
        for start, end, duration in tasks:
            result += max(0, start - end_time)
            result += duration
            end_time = max(end_time, end)
        return result"
False,0,0,2659,,Number of Even and Odd Bits,number-of-even-and-odd-bits,False,20784,29944,2595,False,1,"Can you solve this real interview question? Number of Even and Odd Bits - You are given a positive integer n.

Let even denote the number of even indices in the binary representation of n (0-indexed) with value 1.

Let odd denote the number of odd indices in the binary representation of n (0-indexed) with value 1.

Return an integer array answer where answer = [even, odd].

 

Example 1:


Input: n = 17
Output: [2,0]
Explanation: The binary representation of 17 is 10001. 
It contains 1 on the 0th and 4th indices. 
There are 2 even and 0 odd indices.


Example 2:


Input: n = 2
Output: [0,1]
Explanation: The binary representation of 2 is 10.
It contains 1 on the 1st index. 
There are 0 even and 1 odd indices.


 

Constraints:

 * 1 <= n <= 1000",Solutions (352),127,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/number-of-even-and-odd-bits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def evenOddBit(self, n: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().evenOddBit(n)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def evenOddBit(self, n: int) -> List[int]:
        return [bin(n).count('1') % 2, (bin(n).count('1') - 1) % 2]"
False,0,0,2661,,Smallest Missing Non-negative Integer After Operations,smallest-missing-non-negative-integer-after-operations,False,8047,21160,2598,False,2,"Can you solve this real interview question? Smallest Missing Non-negative Integer After Operations - You are given a 0-indexed integer array nums and an integer value.

In one operation, you can add or subtract value from any element of nums.

 * For example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3].

The MEX (minimum excluded) of an array is the smallest missing non-negative integer in it.

 * For example, the MEX of [-1,2,3] is 0 while the MEX of [1,0,3] is 2.

Return the maximum MEX of nums after applying the mentioned operation any number of times.

 

Example 1:


Input: nums = [1,-10,7,13,6,8], value = 5
Output: 4
Explanation: One can achieve this result by applying the following operations:
- Add value to nums[1] twice to make nums = [1,0,7,13,6,8]
- Subtract value from nums[2] once to make nums = [1,0,2,13,6,8]
- Subtract value from nums[3] twice to make nums = [1,0,2,3,6,8]
The MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.


Example 2:


Input: nums = [1,-10,7,13,6,8], value = 7
Output: 2
Explanation: One can achieve this result by applying the following operation:
- subtract value from nums[2] once to make nums = [1,-10,0,13,6,8]
The MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.


 

Constraints:

 * 1 <= nums.length, value <= 105
 * -109 <= nums[i] <= 109",Solutions (196),225,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/smallest-missing-non-negative-integer-after-operations/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findSmallestInteger(self, nums: List[int], value: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    value: int = deserialize(""int"", read_line())
    ans = Solution().findSmallestInteger(nums, value)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def findSmallestInteger(self, nums: List[int], value: int) -> int:
        nums.sort()
        missing = 0
        for num in nums:
            if num <= missing:
                missing += num
            else:
                break
        return missing"
False,0,0,2662,,Check Knight Tour Configuration,check-knight-tour-configuration,False,14955,24533,2596,False,2,"Can you solve this real interview question? Check Knight Tour Configuration - There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.

You are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.

Return true if grid represents a valid configuration of the knight's movements or false otherwise.

Note that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.

[https://assets.leetcode.com/uploads/2018/10/12/knight.png]

 

Example 1:

[https://assets.leetcode.com/uploads/2022/12/28/yetgriddrawio-5.png]


Input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]
Output: true
Explanation: The above diagram represents the grid. It can be shown that it is a valid configuration.


Example 2:

[https://assets.leetcode.com/uploads/2022/12/28/yetgriddrawio-6.png]


Input: grid = [[0,3,6],[5,8,1],[2,7,4]]
Output: false
Explanation: The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move.


 

Constraints:

 * n == grid.length == grid[i].length
 * 3 <= n <= 7
 * 0 <= grid[row][col] < n * n
 * All integers in grid are unique.",Solutions (352),193,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/check-knight-tour-configuration/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def checkValidGrid(self, grid: List[List[int]]) -> bool:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().checkValidGrid(grid)
    print(""\noutput:"", serialize(ans, ""boolean""))
","class Solution:
    def checkValidGrid(self, grid: List[List[int]]) -> bool:
        def is_valid_move(curr, next):
            diff = abs(curr[0] - next[0]), abs(curr[1] - next[1])
            return diff in {(1,2), (2,1)}
        n = len(grid)
        seen = set()
        for i in range(n):
            for j in range(n):
                seen.add(grid[i][j])
                if grid[i][j] == 0:
                    start = (i, j)
        if len(seen) != n*n or seen != set(range(n*n)):
            return False
        directions = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]
        for i in range(1, n*n):
            curr_num = i - 1
            curr_pos = divmod([x for row in grid for x in row].index(curr_num), n)
            next_num = i
            next_pos = divmod([x for row in grid for x in row].index(next_num), n)
            if not is_valid_move(curr_pos, next_pos):
                return False
        return True"
False,0,0,2663,,Distribute Money to Maximum Children,distribute-money-to-maximum-children,False,13539,75207,2591,False,1,"Can you solve this real interview question? Distribute Money to Maximum Children - You are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to.

You have to distribute the money according to the following rules:

 * All money must be distributed.
 * Everyone must receive at least 1 dollar.
 * Nobody receives 4 dollars.

Return the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. If there is no way to distribute the money, return -1.

 

Example 1:


Input: money = 20, children = 3
Output: 1
Explanation: 
The maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:
- 8 dollars to the first child.
- 9 dollars to the second child. 
- 3 dollars to the third child.
It can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.


Example 2:


Input: money = 16, children = 2
Output: 2
Explanation: Each child can be given 8 dollars.


 

Constraints:

 * 1 <= money <= 200
 * 2 <= children <= 30",Solutions (224),116,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/distribute-money-to-maximum-children/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distMoney(self, money: int, children: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    money: int = deserialize(""int"", read_line())
    children: int = deserialize(""int"", read_line())
    ans = Solution().distMoney(money, children)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distMoney(self, money: int, children: int) -> int:
        if money < children or money > 4 * children:
            return -1
        elif money % 8 == 0 or money % 8 == 1:
            return 1
        elif money % 8 == 2 or money % 8 == 3:
            return 2
        else:
            return money // 8"
False,0,0,2664,,Maximize Greatness of an Array,maximize-greatness-of-an-array,False,12178,22067,2592,False,2,"Can you solve this real interview question? Maximize Greatness of an Array - You are given a 0-indexed integer array nums. You are allowed to permute nums into a new array perm of your choosing.

We define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].

Return the maximum possible greatness you can achieve after permuting nums.

 

Example 1:


Input: nums = [1,3,5,2,1,3,1]
Output: 4
Explanation: One of the optimal rearrangements is perm = [2,5,1,3,3,1,1].
At indices = 0, 1, 3, and 4, perm[i] > nums[i]. Hence, we return 4.

Example 2:


Input: nums = [1,2,3,4]
Output: 3
Explanation: We can prove the optimal perm is [2,3,4,1].
At indices = 0, 1, and 2, perm[i] > nums[i]. Hence, we return 3.


 

Constraints:

 * 1 <= nums.length <= 105
 * 0 <= nums[i] <= 109",Solutions (257),233,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-greatness-of-an-array/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximizeGreatness(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maximizeGreatness(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","from typing import List

class Solution:
    def maximizeGreatness(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        res = 0
        
        for i in range(n):
            if nums[i] < nums[n // 2]:
                res += 1
        
        return res"
False,0,0,2665,,Minimum Time to Repair Cars,minimum-time-to-repair-cars,False,7218,16604,2594,False,2,"Can you solve this real interview question? Minimum Time to Repair Cars - You are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. A mechanic with a rank r can repair n cars in r * n2 minutes.

You are also given an integer cars representing the total number of cars waiting in the garage to be repaired.

Return the minimum time taken to repair all the cars.

Note: All the mechanics can repair the cars simultaneously.

 

Example 1:


Input: ranks = [4,2,3,1], cars = 10
Output: 16
Explanation: 
- The first mechanic will repair two cars. The time required is 4 * 2 * 2 = 16 minutes.
- The second mechanic will repair two cars. The time required is 2 * 2 * 2 = 8 minutes.
- The third mechanic will repair two cars. The time required is 3 * 2 * 2 = 12 minutes.
- The fourth mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.
It can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​


Example 2:


Input: ranks = [5,1,8], cars = 6
Output: 16
Explanation: 
- The first mechanic will repair one car. The time required is 5 * 1 * 1 = 5 minutes.
- The second mechanic will repair four cars. The time required is 1 * 4 * 4 = 16 minutes.
- The third mechanic will repair one car. The time required is 8 * 1 * 1 = 8 minutes.
It can be proved that the cars cannot be repaired in less than 16 minutes.​​​​​


 

Constraints:

 * 1 <= ranks.length <= 105
 * 1 <= ranks[i] <= 100
 * 1 <= cars <= 106",Solutions (198),304,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-repair-cars/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def repairCars(self, ranks: List[int], cars: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    ranks: List[int] = deserialize(""List[int]"", read_line())
    cars: int = deserialize(""int"", read_line())
    ans = Solution().repairCars(ranks, cars)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def repairCars(self, ranks: List[int], cars: int) -> int:
        ranks.sort(reverse=True)
        total_time = 0
        for i in range(cars):
            mechanic = i % len(ranks)
            cars_repaired = min(ranks[mechanic], cars - i)
            total_time += ranks[mechanic] * cars_repaired * cars_repaired
        return total_time"
False,0,0,2673,,Maximize Win From Two Segments,maximize-win-from-two-segments,False,6404,21187,2555,False,2,"Can you solve this real interview question? Maximize Win From Two Segments - There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.

You are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.

 * For example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.

Return the maximum number of prizes you can win if you choose the two segments optimally.

 

Example 1:


Input: prizePositions = [1,1,2,2,3,3,5], k = 2
Output: 7
Explanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].


Example 2:


Input: prizePositions = [1,2,3,4], k = 0
Output: 2
Explanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. 


 

Constraints:

 * 1 <= prizePositions.length <= 105
 * 1 <= prizePositions[i] <= 109
 * 0 <= k <= 109
 * prizePositions is sorted in non-decreasing order.

 ",Solutions (123),384,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximize-win-from-two-segments/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maximizeWin(self, prizePositions: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    prizePositions: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().maximizeWin(prizePositions, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maximizeWin(self, prizePositions: List[int], k: int) -> int:
        pass"
False,0,0,2679,,Count Distinct Numbers on Board,count-distinct-numbers-on-board,False,26231,43816,2549,False,1,"Can you solve this real interview question? Count Distinct Numbers on Board - You are given a positive integer n, that is initially placed on a board. Every day, for 109 days, you perform the following procedure:

 * For each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1.
 * Then, place those numbers on the board.

Return the number of distinct integers present on the board after 109 days have elapsed.

Note:

 * Once a number is placed on the board, it will remain on it until the end.
 * % stands for the modulo operation. For example, 14 % 3 is 2.

 

Example 1:


Input: n = 5
Output: 4
Explanation: Initially, 5 is present on the board. 
The next day, 2 and 4 will be added since 5 % 2 == 1 and 5 % 4 == 1. 
After that day, 3 will be added to the board because 4 % 3 == 1. 
At the end of a billion days, the distinct numbers on the board will be 2, 3, 4, and 5. 


Example 2:


Input: n = 3
Output: 2
Explanation: 
Since 3 % 2 == 1, 2 will be added to the board. 
After a billion days, the only two distinct numbers on the board are 2 and 3. 


 

Constraints:

 * 1 <= n <= 100",Solutions (341),157,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-distinct-numbers-on-board/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def distinctIntegers(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().distinctIntegers(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def distinctIntegers(self, n: int) -> int:
        return n - n // 2"
False,0,0,2680,,Count Collisions of Monkeys on a Polygon,count-collisions-of-monkeys-on-a-polygon,False,14642,55212,2550,False,2,"Can you solve this real interview question? Count Collisions of Monkeys on a Polygon - There is a regular convex polygon with n vertices. The vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. The following figure shows a convex polygon of 6 vertices.

[https://assets.leetcode.com/uploads/2023/01/22/hexagon.jpg]

Each monkey moves simultaneously to a neighboring vertex. A neighboring vertex for a vertex i can be:

 * the vertex (i + 1) % n in the clockwise direction, or
 * the vertex (i - 1 + n) % n in the counter-clockwise direction.

A collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.

Return the number of ways the monkeys can move so that at least one collision happens. Since the answer may be very large, return it modulo 109 + 7.

Note that each monkey can only move once.

 

Example 1:


Input: n = 3
Output: 6
Explanation: There are 8 total possible movements.
Two ways such that they collide at some point are:
- Monkey 1 moves in a clockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 2 collide.
- Monkey 1 moves in an anticlockwise direction; monkey 2 moves in an anticlockwise direction; monkey 3 moves in a clockwise direction. Monkeys 1 and 3 collide.
It can be shown 6 total movements result in a collision.


Example 2:


Input: n = 4
Output: 14
Explanation: It can be shown that there are 14 ways for the monkeys to collide.


 

Constraints:

 * 3 <= n <= 109",Solutions (165),139,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-collisions-of-monkeys-on-a-polygon/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def monkeyMove(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().monkeyMove(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def monkeyMove(self, n: int) -> int:
        return (2 ** (n - 1) * n - n) % (10**9 + 7)"
False,0,0,2681,put-marbles-in-bags,Put Marbles in Bags,put-marbles-in-bags,False,8691,16445,2551,False,3,"Can you solve this real interview question? Put Marbles in Bags - You have k bags. You are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. You are also given the integer k.

Divide the marbles into the k bags according to the following rules:

 * No bag is empty.
 * If the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
 * If a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].

The score after distributing the marbles is the sum of the costs of all the k bags.

Return the difference between the maximum and minimum scores among marble distributions.

 

Example 1:


Input: weights = [1,3,5,1], k = 2
Output: 4
Explanation: 
The distribution [1],[3,5,1] results in the minimal score of (1+1) + (3+1) = 6. 
The distribution [1,3],[5,1], results in the maximal score of (1+3) + (5+1) = 10. 
Thus, we return their difference 10 - 6 = 4.


Example 2:


Input: weights = [1, 3], k = 2
Output: 0
Explanation: The only distribution possible is [1],[3]. 
Since both the maximal and minimal score are the same, we return 0.


 

Constraints:

 * 1 <= k <= weights.length <= 105
 * 1 <= weights[i] <= 109",Solutions (143),485,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/put-marbles-in-bags/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def putMarbles(self, weights: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    weights: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().putMarbles(weights, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def putMarbles(self, weights: List[int], k: int) -> int:
        weights.sort()
        return sum(weights[k-1:]) - sum(weights[:k-1])"
False,0,0,2682,,Count Increasing Quadruplets,count-increasing-quadruplets,False,4761,15175,2552,False,3,"Can you solve this real interview question? Count Increasing Quadruplets - Given a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.

A quadruplet (i, j, k, l) is increasing if:

 * 0 <= i < j < k < l < n, and
 * nums[i] < nums[k] < nums[j] < nums[l].

 

Example 1:


Input: nums = [1,3,2,4,5]
Output: 2
Explanation: 
- When i = 0, j = 1, k = 2, and l = 3, nums[i] < nums[k] < nums[j] < nums[l].
- When i = 0, j = 1, k = 2, and l = 4, nums[i] < nums[k] < nums[j] < nums[l]. 
There are no other quadruplets, so we return 2.


Example 2:


Input: nums = [1,2,3,4]
Output: 0
Explanation: There exists only one quadruplet with i = 0, j = 1, k = 2, l = 3, but since nums[j] < nums[k], we return 0.


 

Constraints:

 * 4 <= nums.length <= 4000
 * 1 <= nums[i] <= nums.length
 * All the integers of nums are unique. nums is a permutation.",Solutions (71),248,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-increasing-quadruplets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countQuadruplets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().countQuadruplets(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countQuadruplets(self, nums: List[int]) -> int:
        count = 0
        n = len(nums)
        
        for i in range(n):
            for j in range(i + 1, n):
                for k in range(j + 1, n):
                    for l in range(k + 1, n):
                        if nums[i] < nums[k] < nums[j] < nums[l]:
                            count += 1
                            
        return count"
False,0,0,2689,,Rearranging Fruits,rearranging-fruits,False,6244,18226,2561,False,3,"Can you solve this real interview question? Rearranging Fruits - You have two fruit baskets containing n fruits each. You are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. You want to make both baskets equal. To do so, you can use the following operation as many times as you want:

 * Chose two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2.
 * The cost of the swap is min(basket1[i],basket2[j]).

Two baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.

Return the minimum cost to make both the baskets equal or -1 if impossible.

 

Example 1:


Input: basket1 = [4,2,2,2], basket2 = [1,4,1,2]
Output: 1
Explanation: Swap index 1 of basket1 with index 0 of basket2, which has cost 1. Now basket1 = [4,1,2,2] and basket2 = [2,4,1,2]. Rearranging both the arrays makes them equal.


Example 2:


Input: basket1 = [2,3,4,1], basket2 = [3,2,5,1]
Output: -1
Explanation: It can be shown that it is impossible to make both the baskets equal.


 

Constraints:

 * basket1.length == bakste2.length
 * 1 <= basket1.length <= 105
 * 1 <= basket1[i],basket2[i] <= 109",Solutions (106),283,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/rearranging-fruits/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCost(self, basket1: List[int], basket2: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    basket1: List[int] = deserialize(""List[int]"", read_line())
    basket2: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minCost(basket1, basket2)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def minCost(self, basket1: List[int], basket2: List[int]) -> int:
        pass"
False,0,0,2690,,House Robber IV,house-robber-iv,False,10100,25443,2560,False,2,"Can you solve this real interview question? House Robber IV - There are several consecutive houses along a street, each of which has some money inside. There is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.

The capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.

You are given an integer array nums representing how much money is stashed in each house. More formally, the ith house from the left has nums[i] dollars.

You are also given an integer k, representing the minimum number of houses the robber will steal from. It is always possible to steal at least k houses.

Return the minimum capability of the robber out of all the possible ways to steal at least k houses.

 

Example 1:


Input: nums = [2,3,5,9], k = 2
Output: 5
Explanation: 
There are three ways to rob at least 2 houses:
- Rob the houses at indices 0 and 2. Capability is max(nums[0], nums[2]) = 5.
- Rob the houses at indices 0 and 3. Capability is max(nums[0], nums[3]) = 9.
- Rob the houses at indices 1 and 3. Capability is max(nums[1], nums[3]) = 9.
Therefore, we return min(5, 9, 9) = 5.


Example 2:


Input: nums = [2,7,9,3,1], k = 2
Output: 2
Explanation: There are 7 ways to rob the houses. The way which leads to minimum capability is to rob the house at index 0 and 4. Return max(nums[0], nums[4]) = 2.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109
 * 1 <= k <= (nums.length + 1)/2",Solutions (149),592,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/house-robber-iv/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minCapability(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().minCapability(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minCapability(self, nums: List[int], k: int) -> int:
        from functools import lru_cache

        @lru_cache(None)
        def dp(idx, remaining):
            if remaining == 0:
                return 0
            if idx >= len(nums):
                return float('inf')
            steal = dp(idx + 2, remaining - 1) + nums[idx]
            not_steal = dp(idx + 1, remaining)
            return min(steal, not_steal)
        
        return dp(0, k)"
False,0,0,2691,,Count Vowel Strings in Ranges,count-vowel-strings-in-ranges,False,19740,38472,2559,False,2,"Can you solve this real interview question? Count Vowel Strings in Ranges - You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:


Input: words = [""aba"",""bcb"",""ece"",""aa"",""e""], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are ""aba"", ""ece"", ""aa"" and ""e"".
The answer to the query [0,2] is 2 (strings ""aba"" and ""ece"").
to query [1,4] is 3 (strings ""ece"", ""aa"", ""e"").
to query [1,1] is 0.
We return [2,3,0].


Example 2:


Input: words = [""a"",""e"",""i""], queries = [[0,2],[0,1],[2,2]]
Output: [3,2,1]
Explanation: Every string satisfies the conditions, so we return [3,2,1].

 

Constraints:

 * 1 <= words.length <= 105
 * 1 <= words[i].length <= 40
 * words[i] consists only of lowercase English letters.
 * sum(words[i].length) <= 3 * 105
 * 1 <= queries.length <= 105
 * 0 <= li <= ri < words.length",Solutions (388),313,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-vowel-strings-in-ranges/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    words: List[str] = deserialize(""List[str]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().vowelStrings(words, queries)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def vowelStrings(self, words: List[str], queries: List[List[int]]) -> List[int]:
        def count_vowel(word):
            count = 0
            vowels = ['a', 'e', 'i', 'o', 'u']
            for char in word:
                if char in vowels:
                    count += 1
            return count
        
        ans = []
        for query in queries:
            start, end = query
            count = 0
            for i in range(start, end+1):
                if count_vowel(words[i][0]) > 0 and count_vowel(words[i][-1]) > 0:
                    count += 1
            ans.append(count)
        
        return ans"
False,0,0,2692,,Take Gifts From the Richest Pile,take-gifts-from-the-richest-pile,False,26641,40093,2558,False,1,"Can you solve this real interview question? Take Gifts From the Richest Pile - You are given an integer array gifts denoting the number of gifts in various piles. Every second, you do the following:

 * Choose the pile with the maximum number of gifts.
 * If there is more than one pile with the maximum number of gifts, choose any.
 * Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.

Return the number of gifts remaining after k seconds.

 

Example 1:


Input: gifts = [25,64,9,4,100], k = 4
Output: 29
Explanation: 
The gifts are taken in the following way:
- In the first second, the last pile is chosen and 10 gifts are left behind.
- Then the second pile is chosen and 8 gifts are left behind.
- After that the first pile is chosen and 5 gifts are left behind.
- Finally, the last pile is chosen again and 3 gifts are left behind.
The final remaining gifts are [5,8,9,4,3], so the total number of gifts remaining is 29.


Example 2:


Input: gifts = [1,1,1,1], k = 4
Output: 4
Explanation: 
In this case, regardless which pile you choose, you have to leave behind 1 gift in each pile. 
That is, you can't take any pile with you. 
So, the total gifts remaining are 4.


 

Constraints:

 * 1 <= gifts.length <= 103
 * 1 <= gifts[i] <= 109
 * 1 <= k <= 103",Solutions (472),215,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/take-gifts-from-the-richest-pile/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def pickGifts(self, gifts: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    gifts: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().pickGifts(gifts, k)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def pickGifts(self, gifts: List[int], k: int) -> int:
        return sum([max(0, gift - int(gift ** 0.5)) for gift in gifts]) - k * len(gifts)"
False,0,0,2695,,Find Score of an Array After Marking All Elements,find-score-of-an-array-after-marking-all-elements,False,10016,19166,2593,False,2,"Can you solve this real interview question? Find Score of an Array After Marking All Elements - You are given an array nums consisting of positive integers.

Starting with score = 0, apply the following algorithm:

 * Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.
 * Add the value of the chosen integer to score.
 * Mark the chosen element and its two adjacent elements if they exist.
 * Repeat until all the array elements are marked.

Return the score you get after applying the above algorithm.

 

Example 1:


Input: nums = [2,1,3,4,5,2]
Output: 7
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].
- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].
- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].
Our score is 1 + 2 + 4 = 7.


Example 2:


Input: nums = [2,3,5,1,3,2]
Output: 5
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].
- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].
- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].
Our score is 1 + 2 + 2 = 5.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 106",Solutions (294),210,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-score-of-an-array-after-marking-all-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findScore(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findScore(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def findScore(self, nums: List[int]) -> int:
        nums.sort()
        score = 0
        marked = [False] * len(nums)
        
        for i in range(len(nums)):
            if not marked[i]:
                score += nums[i]
                marked[i] = True
                if i-1 >= 0:
                    marked[i-1] = True
                if i+1 < len(nums):
                    marked[i+1] = True
        
        return score"
False,0,0,2696,,The Number of Beautiful Subsets,the-number-of-beautiful-subsets,False,9700,34672,2597,False,2,"Can you solve this real interview question? The Number of Beautiful Subsets - You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:


Input: nums = [2,4,6], k = 2
Output: 4
Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].
It can be proved that there are only 4 beautiful subsets in the array [2,4,6].


Example 2:


Input: nums = [1], k = 1
Output: 1
Explanation: The beautiful subset of the array nums is [1].
It can be proved that there is only 1 beautiful subset in the array [1].


 

Constraints:

 * 1 <= nums.length <= 20
 * 1 <= nums[i], k <= 1000",Solutions (183),314,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/the-number-of-beautiful-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    k: int = deserialize(""int"", read_line())
    ans = Solution().beautifulSubsets(nums, k)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def beautifulSubsets(self, nums: List[int], k: int) -> int:
        def backtrack(start, path):
            if abs(path) == k:
                return 
                
        count = 0
        backtrack(0, [])
        
        return count"
False,0,0,2698,,Find the Array Concatenation Value,find-the-array-concatenation-value,False,28406,40690,2562,False,1,"Can you solve this real interview question? Find the Array Concatenation Value - You are given a 0-indexed integer array nums.

The concatenation of two numbers is the number formed by concatenating their numerals.

 * For example, the concatenation of 15, 49 is 1549.

The concatenation value of nums is initially equal to 0. Perform this operation until nums becomes empty:

 * If there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums.
 * If one element exists, add its value to the concatenation value of nums, then delete it.

Return the concatenation value of the nums.

 

Example 1:


Input: nums = [7,52,2,4]
Output: 596
Explanation: Before performing any operation, nums is [7,52,2,4] and concatenation value is 0.
 - In the first operation:
We pick the first element, 7, and the last element, 4.
Their concatenation is 74, and we add it to the concatenation value, so it becomes equal to 74.
Then we delete them from nums, so nums becomes equal to [52,2].
 - In the second operation:
We pick the first element, 52, and the last element, 2.
Their concatenation is 522, and we add it to the concatenation value, so it becomes equal to 596.
Then we delete them from the nums, so nums becomes empty.
Since the concatenation value is 596 so the answer is 596.


Example 2:


Input: nums = [5,14,13,8,12]
Output: 673
Explanation: Before performing any operation, nums is [5,14,13,8,12] and concatenation value is 0.
 - In the first operation:
We pick the first element, 5, and the last element, 12.
Their concatenation is 512, and we add it to the concatenation value, so it becomes equal to 512.
Then we delete them from the nums, so nums becomes equal to [14,13,8].
 - In the second operation:
We pick the first element, 14, and the last element, 8.
Their concatenation is 148, and we add it to the concatenation value, so it becomes equal to 660.
Then we delete them from the nums, so nums becomes equal to [13].
 - In the third operation:
nums has only one element, so we pick 13 and add it to the concatenation value, so it becomes equal to 673.
Then we delete it from nums, so nums become empty.
Since the concatenation value is 673 so the answer is 673.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 104

 ",Solutions (511),213,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-array-concatenation-value/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheArrayConcVal(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().findTheArrayConcVal(nums)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def findTheArrayConcVal(self, nums: List[int]) -> int:
        concat_val = 0
        while len(nums) > 0:
            if len(nums) > 1:
                first = str(nums[0])
                last = str(nums[-1])
                concat_val += int(first + last)
                nums = nums[1:-1]
            else:
                concat_val += nums[0]
                nums = []
        return concat_val"
False,0,0,2699,,Count the Number of Fair Pairs,count-the-number-of-fair-pairs,False,16667,52161,2563,False,2,"Can you solve this real interview question? Count the Number of Fair Pairs - Given a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.

A pair (i, j) is fair if:

 * 0 <= i < j < n, and
 * lower <= nums[i] + nums[j] <= upper

 

Example 1:


Input: nums = [0,1,7,4,4,5], lower = 3, upper = 6
Output: 6
Explanation: There are 6 fair pairs: (0,3), (0,4), (0,5), (1,3), (1,4), and (1,5).


Example 2:


Input: nums = [1,7,9,2,5], lower = 11, upper = 11
Output: 1
Explanation: There is a single fair pair: (2,3).


 

Constraints:

 * 1 <= nums.length <= 105
 * nums.length == n
 * -109 <= nums[i] <= 109
 * -109 <= lower <= upper <= 109",Solutions (255),570,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-fair-pairs/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    lower: int = deserialize(""int"", read_line())
    upper: int = deserialize(""int"", read_line())
    ans = Solution().countFairPairs(nums, lower, upper)
    print(""\noutput:"", serialize(ans, ""long""))
","class Solution:
    def countFairPairs(self, nums: List[int], lower: int, upper: int) -> int:
        count = 0
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if lower <= nums[i] + nums[j] <= upper:
                    count += 1
        return count"
False,0,0,2700,,Substring XOR Queries,substring-xor-queries,False,9397,28050,2564,False,2,"Can you solve this real interview question? Substring XOR Queries - You are given a binary string s, and a 2D integer array queries where queries[i] = [firsti, secondi].

For the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise XORed with firsti. In other words, val ^ firsti == secondi.

The answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. If there are multiple answers, choose the one with the minimum lefti.

Return an array ans where ans[i] = [lefti, righti] is the answer to the ith query.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:


Input: s = ""101101"", queries = [[0,5],[1,2]]
Output: [[0,2],[2,3]]
Explanation: For the first query the substring in range [0,2] is ""101"" which has a decimal value of 5, and 5 ^ 0 = 5, hence the answer to the first query is [0,2]. In the second query, the substring in range [2,3] is ""11"", and has a decimal value of 3, and 3 ^ 1 = 2. So, [2,3] is returned for the second query. 



Example 2:


Input: s = ""0101"", queries = [[12,8]]
Output: [[-1,-1]]
Explanation: In this example there is no substring that answers the query, hence [-1,-1] is returned.


Example 3:


Input: s = ""1"", queries = [[4,5]]
Output: [[0,0]]
Explanation: For this example, the substring in range [0,0] has a decimal value of 1, and 1 ^ 4 = 5. So, the answer is [0,0].


 

Constraints:

 * 1 <= s.length <= 104
 * s[i] is either '0' or '1'.
 * 1 <= queries.length <= 105
 * 0 <= firsti, secondi <= 109",Solutions (146),279,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/substring-xor-queries/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().substringXorQueries(s, queries)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def substringXorQueries(self, s: str, queries: List[List[int]]) -> List[List[int]]:
        def xor(left, right):
            result = 0
            for i in range(left, right+1):
                result ^= int(s[i])
            return result
        
        ans = []
        for query in queries:
            lefti = -1
            righti = -1
            for i in range(len(s)):
                for j in range(i+1, len(s)+1):
                    if xor(i, j-1) == query[1] ^ query[0]:
                        if lefti == -1 or j-i < righti-lefti:
                            lefti = i
                            righti = j-1
            ans.append([lefti, righti])
        
        return ans"
False,0,0,2701,,Subsequence With the Minimum Score,subsequence-with-the-minimum-score,False,4389,13636,2565,False,3,"Can you solve this real interview question? Subsequence With the Minimum Score - You are given two strings s and t.

You are allowed to remove any number of characters from the string t.

The score of the string is 0 if no characters are removed from the string t, otherwise:

 * Let left be the minimum index among all removed characters.
 * Let right be the maximum index among all removed characters.

Then the score of the string is right - left + 1.

Return the minimum possible score to make t a subsequence of s.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., ""ace"" is a subsequence of ""abcde"" while ""aec"" is not).

 

Example 1:


Input: s = ""abacaba"", t = ""bzaa""
Output: 1
Explanation: In this example, we remove the character ""z"" at index 1 (0-indexed).
The string t becomes ""baa"" which is a subsequence of the string ""abacaba"" and the score is 1 - 1 + 1 = 1.
It can be proven that 1 is the minimum score that we can achieve.


Example 2:


Input: s = ""cde"", t = ""xyz""
Output: 3
Explanation: In this example, we remove characters ""x"", ""y"" and ""z"" at indices 0, 1, and 2 (0-indexed).
The string t becomes """" which is a subsequence of the string ""cde"" and the score is 2 - 0 + 1 = 3.
It can be proven that 3 is the minimum score that we can achieve.


 

Constraints:

 * 1 <= s.length, t.length <= 105
 * s and t consist of only lowercase English letters.",Solutions (84),275,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/subsequence-with-the-minimum-score/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumScore(self, s: str, t: str) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    s: str = deserialize(""str"", read_line())
    t: str = deserialize(""str"", read_line())
    ans = Solution().minimumScore(s, t)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumScore(self, s: str, t: str) -> int:
        def binarySearch():
            pass

        return 0"
False,0,0,2703,,Handling Sum Queries After Update,handling-sum-queries-after-update,False,3139,12122,2569,False,3,"Can you solve this real interview question? Handling Sum Queries After Update - You are given two 0-indexed arrays nums1 and nums2 and a 2D array queries of queries. There are three types of queries:

 1. For a query of type 1, queries[i] = [1, l, r]. Flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. Both l and r are 0-indexed.
 2. For a query of type 2, queries[i] = [2, p, 0]. For every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p.
 3. For a query of type 3, queries[i] = [3, 0, 0]. Find the sum of the elements in nums2.

Return an array containing all the answers to the third type queries.

 

Example 1:


Input: nums1 = [1,0,1], nums2 = [0,0,0], queries = [[1,1,1],[2,1,0],[3,0,0]]
Output: [3]
Explanation: After the first query nums1 becomes [1,1,1]. After the second query, nums2 becomes [1,1,1], so the answer to the third query is 3. Thus, [3] is returned.


Example 2:


Input: nums1 = [1], nums2 = [5], queries = [[2,0,0],[3,0,0]]
Output: [5]
Explanation: After the first query, nums2 remains [5], so the answer to the second query is 5. Thus, [5] is returned.


 

Constraints:

 * 1 <= nums1.length,nums2.length <= 105
 * nums1.length = nums2.length
 * 1 <= queries.length <= 105
 * queries[i].length = 3
 * 0 <= l <= r <= nums1.length - 1
 * 0 <= p <= 106
 * 0 <= nums1[i] <= 1
 * 0 <= nums2[i] <= 109",Solutions (71),127,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/handling-sum-queries-after-update/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def handleQuery(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[int] = deserialize(""List[int]"", read_line())
    nums2: List[int] = deserialize(""List[int]"", read_line())
    queries: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().handleQuery(nums1, nums2, queries)
    print(""\noutput:"", serialize(ans, ""long[]""))
","class Solution:
    def handleQuery(self, nums1: List[int], nums2: List[int], queries: List[List[int]]) -> List[int]:
        def flip(nums1, l, r):
            for i in range(l, r + 1):
                nums1[i] = 1 - nums1[i]
        
        res = []
        for query in queries:
            if query[0] == 1:
                flip(nums1, query[1], query[2])
            elif query[0] == 2:
                p = query[1]
                for i in range(len(nums2)):
                    nums2[i] += nums1[i] * p
            elif query[0] == 3:
                res.append(sum(nums2))
        
        return res"
False,0,0,2704,,Maximum Difference by Remapping a Digit,maximum-difference-by-remapping-a-digit,False,17562,29146,2566,False,1,"Can you solve this real interview question? Maximum Difference by Remapping a Digit - You are given an integer num. You know that Danny Mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit.

Return the difference between the maximum and minimum values Danny can make by remapping exactly one digit in num.

Notes:

 * When Danny remaps a digit d1 to another digit d2, Danny replaces all occurrences of d1 in num with d2.
 * Danny can remap a digit to itself, in which case num does not change.
 * Danny can remap different digits for obtaining minimum and maximum values respectively.
 * The resulting number after remapping can contain leading zeroes.
 * We mentioned ""Danny Mittal"" to congratulate him on being in the top 10 in Weekly Contest 326.

 

Example 1:


Input: num = 11891
Output: 99009
Explanation: 
To achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.
To achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.
The difference between these two numbers is 99009.


Example 2:


Input: num = 90
Output: 99
Explanation:
The maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).
Thus, we return 99.

 

Constraints:

 * 1 <= num <= 108",Solutions (260),155,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/maximum-difference-by-remapping-a-digit/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minMaxDifference(self, num: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    num: int = deserialize(""int"", read_line())
    ans = Solution().minMaxDifference(num)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minMaxDifference(self, num: int) -> int:
        return int(''.join(sorted(str(num)).replace('0', '9', 1))) - int(''.join(sorted(str(num)).replace('1', '0', 1)))"
False,0,0,2705,,Minimum Impossible OR,minimum-impossible-or,False,10966,19105,2568,False,2,"Can you solve this real interview question? Minimum Impossible OR - You are given a 0-indexed integer array nums.

We say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. In other words, an integer is expressible if it can be written as the bitwise OR of some subsequence of nums.

Return the minimum positive non-zero integer that is not expressible from nums.

 

Example 1:


Input: nums = [2,1]
Output: 4
Explanation: 1 and 2 are already present in the array. We know that 3 is expressible, since nums[0] | nums[1] = 2 | 1 = 3. Since 4 is not expressible, we return 4.


Example 2:


Input: nums = [5,3,2]
Output: 1
Explanation: We can show that 1 is the smallest number that is not expressible.


 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (172),246,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-impossible-or/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minImpossibleOR(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minImpossibleOR(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minImpossibleOR(self, nums: List[int]) -> int:
        result = 1
        while True:
            if result not in nums:
                return result
            result += 1"
False,0,0,2706,,Minimum Score by Changing Two Elements,minimum-score-by-changing-two-elements,False,12618,26514,2567,False,2,"Can you solve this real interview question? Minimum Score by Changing Two Elements - You are given a 0-indexed integer array nums.

 * The low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
 * The high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
 * The score of nums is the sum of the high and low scores of nums.

To minimize the score of nums, we can change the value of at most two elements of nums.

Return the minimum possible score after changing the value of at most two elements of nums.

Note that |x| denotes the absolute value of x.

 

Example 1:


Input: nums = [1,4,3]
Output: 0
Explanation: Change value of nums[1] and nums[2] to 1 so that nums becomes [1,1,1]. Now, the value of |nums[i] - nums[j]| is always equal to 0, so we return 0 + 0 = 0.


Example 2:


Input: nums = [1,4,7,8,5]
Output: 3
Explanation: Change nums[0] and nums[1] to be 6. Now nums becomes [6,6,7,8,5].
Our low score is achieved when i = 0 and j = 1, in which case |nums[i] - nums[j]| = |6 - 6| = 0.
Our high score is achieved when i = 3 and j = 4, in which case |nums[i] - nums[j]| = |8 - 5| = 3.
The sum of our high and low score is 3, which we can prove to be minimal.


 

Constraints:

 * 3 <= nums.length <= 105
 * 1 <= nums[i] <= 109",Solutions (185),149,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-score-by-changing-two-elements/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimizeSum(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().minimizeSum(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimizeSum(self, nums: List[int]) -> int:
        nums.sort()
        return min(nums[-2] - nums[0], nums[-1] - nums[1])"
False,0,0,2707,,Merge Two 2D Arrays by Summing Values,merge-two-2d-arrays-by-summing-values,False,22313,30488,2570,False,1,"Can you solve this real interview question? Merge Two 2D Arrays by Summing Values - You are given two 2D integer arrays nums1 and nums2.

 * nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.
 * nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.

Each array contains unique ids and is sorted in ascending order by id.

Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:

 * Only ids that appear in at least one of the two arrays should be included in the resulting array.
 * Each id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays then its value in that array is considered to be 0.

Return the resulting array. The returned array must be sorted in ascending order by id.

 

Example 1:


Input: nums1 = [[1,2],[2,3],[4,5]], nums2 = [[1,4],[3,2],[4,1]]
Output: [[1,6],[2,3],[3,2],[4,6]]
Explanation: The resulting array contains the following:
- id = 1, the value of this id is 2 + 4 = 6.
- id = 2, the value of this id is 3.
- id = 3, the value of this id is 2.
- id = 4, the value of this id is 5 + 1 = 6.


Example 2:


Input: nums1 = [[2,4],[3,6],[5,5]], nums2 = [[1,3],[4,3]]
Output: [[1,3],[2,4],[3,6],[4,3],[5,5]]
Explanation: There are no common ids, so we just include each id with its value in the resulting list.


 

Constraints:

 * 1 <= nums1.length, nums2.length <= 200
 * nums1[i].length == nums2[j].length == 2
 * 1 <= idi, vali <= 1000
 * Both arrays contain unique ids.
 * Both arrays are in strictly ascending order by id.",Solutions (393),181,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/merge-two-2d-arrays-by-summing-values/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums1: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    nums2: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().mergeArrays(nums1, nums2)
    print(""\noutput:"", serialize(ans, ""integer[][]""))
","class Solution:
    def mergeArrays(self, nums1: List[List[int]], nums2: List[List[int]]) -> List[List[int]]:
        res = []
        ids = set([x[0] for x in nums1] + [x[0] for x in nums2])
        
        for i in ids:
            val1 = next((x[1] for x in nums1 if x[0] == i), 0)
            val2 = next((x[1] for x in nums2 if x[0] == i), 0)
            res.append([i, val1 + val2])

        return res"
False,0,0,2708,,Find the String with LCP,find-the-string-with-lcp,False,2801,7804,2573,False,3,"Can you solve this real interview question? Find the String with LCP - We define the lcp matrix of any 0-indexed string word of n lowercase English letters as an n x n grid such that:

 * lcp[i][j] is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].

Given an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. If there is no such string, return an empty string.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, ""aabd"" is lexicographically smaller than ""aaca"" because the first position they differ is at the third letter, and 'b' comes before 'c'.

 

Example 1:


Input: lcp = [[4,0,2,0],[0,3,0,1],[2,0,2,0],[0,1,0,1]]
Output: ""abab""
Explanation: lcp corresponds to any 4 letter string with two alternating letters. The lexicographically smallest of them is ""abab"".


Example 2:


Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,1]]
Output: ""aaaa""
Explanation: lcp corresponds to any 4 letter string with a single distinct letter. The lexicographically smallest of them is ""aaaa"". 


Example 3:


Input: lcp = [[4,3,2,1],[3,3,2,1],[2,2,2,1],[1,1,1,3]]
Output: """"
Explanation: lcp[3][3] cannot be equal to 3 since word[3,...,3] consists of only a single letter; Thus, no answer exists.


 

Constraints:

 * 1 <= n == lcp.length == lcp[i].length <= 1000
 * 0 <= lcp[i][j] <= n",Solutions (46),121,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-string-with-lcp/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def findTheString(self, lcp: List[List[int]]) -> str:
        

# @lc code=end

if __name__ == ""__main__"":
    lcp: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().findTheString(lcp)
    print(""\noutput:"", serialize(ans, ""string""))
","class Solution:
    def findTheString(self, lcp: List[List[int]]) -> str:
        pass"
False,0,0,2709,,Count the Number of Square-Free Subsets,count-the-number-of-square-free-subsets,False,4711,23178,2572,False,2,"Can you solve this real interview question? Count the Number of Square-Free Subsets - You are given a positive integer 0-indexed array nums.

A subset of the array nums is square-free if the product of its elements is a square-free integer.

A square-free integer is an integer that is divisible by no square number other than 1.

Return the number of square-free non-empty subsets of the array nums. Since the answer may be too large, return it modulo 109 + 7.

A non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:


Input: nums = [3,4,4,5]
Output: 3
Explanation: There are 3 square-free subsets in this example:
- The subset consisting of the 0th element [3]. The product of its elements is 3, which is a square-free integer.
- The subset consisting of the 3rd element [5]. The product of its elements is 5, which is a square-free integer.
- The subset consisting of 0th and 3rd elements [3,5]. The product of its elements is 15, which is a square-free integer.
It can be proven that there are no more than 3 square-free subsets in the given array.

Example 2:


Input: nums = [1]
Output: 1
Explanation: There is 1 square-free subset in this example:
- The subset consisting of the 0th element [1]. The product of its elements is 1, which is a square-free integer.
It can be proven that there is no more than 1 square-free subset in the given array.


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 30",Solutions (89),252,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/count-the-number-of-square-free-subsets/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def squareFreeSubsets(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().squareFreeSubsets(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def squareFreeSubsets(self, nums: List[int]) -> int:
        MOD = 10**9 + 7
        def is_square_free(n):
            i = 2
            while i * i <= n:
                if n % (i * i) == 0:
                    return False
                i += 1
            return True
        
        def dfs(nums, pos, current_product, current_subset, res):
            if current_product != 1 and is_square_free(current_product):
                res[0] += 1
            for i in range(pos, len(nums)):
                dfs(nums, i + 1, current_product * nums[i], current_subset + [nums[i]], res)
        
        res = [0]
        dfs(nums, 0, 1, [], res)
        return res[0] % MOD"
False,0,0,2710,,Minimum Operations to Reduce an Integer to 0,minimum-operations-to-reduce-an-integer-to-0,False,15032,30312,2571,False,2,"Can you solve this real interview question? Minimum Operations to Reduce an Integer to 0 - You are given a positive integer n, you can do the following operation any number of times:

 * Add or subtract a power of 2 from n.

Return the minimum number of operations to make n equal to 0.

A number x is power of 2 if x == 2i where i >= 0.

 

Example 1:


Input: n = 39
Output: 3
Explanation: We can do the following operations:
- Add 20 = 1 to n, so now n = 40.
- Subtract 23 = 8 from n, so now n = 32.
- Subtract 25 = 32 from n, so now n = 0.
It can be shown that 3 is the minimum number of operations we need to make n equal to 0.


Example 2:


Input: n = 54
Output: 3
Explanation: We can do the following operations:
- Add 21 = 2 to n, so now n = 56.
- Add 23 = 8 to n, so now n = 64.
- Subtract 26 = 64 from n, so now n = 0.
So the minimum number of operations is 3.


 

Constraints:

 * 1 <= n <= 105",Solutions (423),323,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-operations-to-reduce-an-integer-to-0/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minOperations(self, n: int) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    n: int = deserialize(""int"", read_line())
    ans = Solution().minOperations(n)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minOperations(self, n: int) -> int:
        return bin(n)[2:].count('1') + len(bin(n)) - 3"
False,0,0,2711,,Minimum Time to Visit a Cell In a Grid,minimum-time-to-visit-a-cell-in-a-grid,False,6102,17157,2577,False,3,"Can you solve this real interview question? Minimum Time to Visit a Cell In a Grid - You are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].

You are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. Each move you make takes 1 second.

Return the minimum time required in which you can visit the bottom-right cell of the matrix. If you cannot visit the bottom-right cell, then return -1.

 

Example 1:

[https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-8.png]


Input: grid = [[0,1,3,2],[5,1,2,5],[4,3,8,6]]
Output: 7
Explanation: One of the paths that we can take is the following:
- at t = 0, we are on the cell (0,0).
- at t = 1, we move to the cell (0,1). It is possible because grid[0][1] <= 1.
- at t = 2, we move to the cell (1,1). It is possible because grid[1][1] <= 2.
- at t = 3, we move to the cell (1,2). It is possible because grid[1][2] <= 3.
- at t = 4, we move to the cell (1,1). It is possible because grid[1][1] <= 4.
- at t = 5, we move to the cell (1,2). It is possible because grid[1][2] <= 5.
- at t = 6, we move to the cell (1,3). It is possible because grid[1][3] <= 6.
- at t = 7, we move to the cell (2,3). It is possible because grid[2][3] <= 7.
The final time is 7. It can be shown that it is the minimum time possible.


Example 2:

[https://assets.leetcode.com/uploads/2023/02/14/yetgriddrawio-9.png]


Input: grid = [[0,2,4],[3,2,1],[1,0,4]]
Output: -1
Explanation: There is no path from the top left to the bottom-right cell.


 

Constraints:

 * m == grid.length
 * n == grid[i].length
 * 2 <= m, n <= 1000
 * 4 <= m * n <= 105
 * 0 <= grid[i][j] <= 105
 * grid[0][0] == 0

 ",Solutions (114),336,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/minimum-time-to-visit-a-cell-in-a-grid/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def minimumTime(self, grid: List[List[int]]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    grid: List[List[int]] = deserialize(""List[List[int]]"", read_line())
    ans = Solution().minimumTime(grid)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def minimumTime(self, grid: List[List[int]]) -> int:
        n = len(grid)
        m = len(grid[0])
        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        heap = [(0, 0, 0)]
        visited = set()
        
        while heap:
            time, x, y = heapq.heappop(heap)
            if x == n - 1 and y == m - 1:
                return time
            visited.add((x, y))
            for dx, dy in directions:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < n and 0 <= new_y < m and (new_x, new_y) not in visited:
                    new_time = max(time, grid[new_x][new_y])
                    heapq.heappush(heap, (new_time + 1, new_x, new_y))
        
        return -1
"
False,0,0,2712,,Find the Maximum Number of Marked Indices,find-the-maximum-number-of-marked-indices,False,13611,36348,2576,False,2,"Can you solve this real interview question? Find the Maximum Number of Marked Indices - You are given a 0-indexed integer array nums.

Initially, all of the indices are unmarked. You are allowed to make this operation any number of times:

 * Pick two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.

Return the maximum possible number of marked indices in nums using the above operation any number of times.

 

Example 1:


Input: nums = [3,5,2,4]
Output: 2
Explanation: In the first operation: pick i = 2 and j = 1, the operation is allowed because 2 * nums[2] <= nums[1]. Then mark index 2 and 1.
It can be shown that there's no other valid operation so the answer is 2.


Example 2:


Input: nums = [9,2,5,4]
Output: 4
Explanation: In the first operation: pick i = 3 and j = 0, the operation is allowed because 2 * nums[3] <= nums[0]. Then mark index 3 and 0.
In the second operation: pick i = 1 and j = 2, the operation is allowed because 2 * nums[1] <= nums[2]. Then mark index 1 and 2.
Since there is no other operation, the answer is 4.


Example 3:


Input: nums = [7,6,8]
Output: 0
Explanation: There is no valid operation to do, so the answer is 0.



 

Constraints:

 * 1 <= nums.length <= 105
 * 1 <= nums[i] <= 109

 ",Solutions (258),394,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-maximum-number-of-marked-indices/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().maxNumOfMarkedIndices(nums)
    print(""\noutput:"", serialize(ans, ""integer""))
","class Solution:
    def maxNumOfMarkedIndices(self, nums: List[int]) -> int:
        nums.sort()
        marked = 0
        i = 0
        j = len(nums) - 1
        
        while i < j:
            if 2 * nums[i] <= nums[j]:
                marked += 1
                i += 1
                j -= 1
            else:
                j -= 1
        
        return marked"
False,0,0,2713,,Find the Divisibility Array of a String,find-the-divisibility-array-of-a-string,False,19189,61985,2575,False,2,"Can you solve this real interview question? Find the Divisibility Array of a String - You are given a 0-indexed string word of length n consisting of digits, and a positive integer m.

The divisibility array div of word is an integer array of length n such that:

 * div[i] = 1 if the numeric value of word[0,...,i] is divisible by m, or
 * div[i] = 0 otherwise.

Return the divisibility array of word.

 

Example 1:


Input: word = ""998244353"", m = 3
Output: [1,1,0,0,0,1,1,0,0]
Explanation: There are only 4 prefixes that are divisible by 3: ""9"", ""99"", ""998244"", and ""9982443"".


Example 2:


Input: word = ""1010"", m = 10
Output: [0,1,0,1]
Explanation: There are only 2 prefixes that are divisible by 10: ""10"", and ""1010"".


 

Constraints:

 * 1 <= n <= 105
 * word.length == n
 * word consists of digits from 0 to 9
 * 1 <= m <= 109",Solutions (284),373,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/find-the-divisibility-array-of-a-string/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def divisibilityArray(self, word: str, m: int) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    word: str = deserialize(""str"", read_line())
    m: int = deserialize(""int"", read_line())
    ans = Solution().divisibilityArray(word, m)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def divisibilityArray(self, word: str, m: int) -> List[int]:
        res = []
        prefix = 0
        for i in range(len(word)):
            prefix = (prefix * 10 + int(word[i])) % m
            res.append(1 if prefix == 0 else 0)
        return res"
False,0,0,2714,,Left and Right Sum Differences,left-and-right-sum-differences,False,35989,40611,2574,False,1,"Can you solve this real interview question? Left and Right Sum Differences - Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:

 * answer.length == nums.length.
 * answer[i] = |leftSum[i] - rightSum[i]|.

Where:

 * leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
 * rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.

Return the array answer.

 

Example 1:


Input: nums = [10,4,8,3]
Output: [15,1,11,22]
Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].
The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].


Example 2:


Input: nums = [1]
Output: [0]
Explanation: The array leftSum is [0] and the array rightSum is [0].
The array answer is [|0 - 0|] = [0].


 

Constraints:

 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 105",Solutions (696),347,"# Created by asetti2002 at 2024/04/17 02:04
# leetgo: 1.4.3
# https://leetcode.com/problems/left-and-right-sum-differences/

from typing import *
from leetgo_py import *

# @lc code=begin

class Solution:
    def leftRightDifference(self, nums: List[int]) -> List[int]:
        

# @lc code=end

if __name__ == ""__main__"":
    nums: List[int] = deserialize(""List[int]"", read_line())
    ans = Solution().leftRightDifference(nums)
    print(""\noutput:"", serialize(ans, ""integer[]""))
","class Solution:
    def leftRightDifference(self, nums: List[int]) -> List[int]:
        n = len(nums)
        leftSum = [0] * n
        rightSum = [0] * n
        answer = [0] * n
        
        leftSum[0] = 0
        rightSum[n-1] = 0
        
        for i in range(1, n):
            leftSum[i] = leftSum[i-1] + nums[i-1]
        
        for i in range(n-2, -1, -1):
            rightSum[i] = rightSum[i+1] + nums[i+1]
        
        for i in range(n):
            answer[i] = abs(leftSum[i] - rightSum[i])
        
        return answer"
